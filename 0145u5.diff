diff -Nru src-old/emu/cpu/arm7/arm7thmb.c src/emu/cpu/arm7/arm7thmb.c
--- src-old/emu/cpu/arm7/arm7thmb.c	2012-01-15 23:40:54.000000000 +0100
+++ src/emu/cpu/arm7/arm7thmb.c	2012-03-21 03:18:05.000000000 +0100
@@ -1279,7 +1279,29 @@
             SET_REGISTER(cpustate, 13, GET_REGISTER(cpustate, 13) + 4);
         }
     }
-    R15 = READ32(GET_REGISTER(cpustate, 13)) & ~1;
+    UINT32 addr = READ32(GET_REGISTER(cpustate, 13));
+    // in v4T, bit 0 is ignored.  v5 and later, it's an ARM/Thumb flag like the BX instruction
+    if (cpustate->archRev < 5)
+    {
+        R15 = addr & ~1;
+    }
+    else
+    {
+        if (addr & 1)
+        {
+            addr &= ~1;
+        }
+        else
+        {
+            SET_CPSR(GET_CPSR & ~T_MASK);
+            if (addr & 2)
+            {
+                addr += 2;
+            }
+        }
+
+        R15 = addr;
+    }
     SET_REGISTER(cpustate, 13, GET_REGISTER(cpustate, 13) + 4);
 
 }
diff -Nru src-old/emu/cpu/m68000/m68k_in.c src/emu/cpu/m68000/m68k_in.c
--- src-old/emu/cpu/m68000/m68k_in.c	2012-02-19 17:23:23.000000000 +0100
+++ src/emu/cpu/m68000/m68k_in.c	2012-03-22 05:08:07.000000000 +0100
@@ -367,8 +367,8 @@
 M68KMAKE_TABLE_START
 1010       0  .     .     1010............  ..........  U U U U U U U   4   4   4   4   4   4   4
 1111       0  .     .     1111............  ..........  U U U U U U U   4   4   4   4   4   4   4
-040fpu0   32  .     .     11110010........  ..........  . . . U U U .   .   .   .   0   0   0   .
-040fpu1   32  .     .     11110011........  ..........  . . . U U U .   .   .   .   0   0   0   .
+040fpu0   32  .     .     11110010........  ..........  . . U U U U .   .   .   0   0   0   0   .
+040fpu1   32  .     .     11110011........  ..........  . . U U U U .   .   .   0   0   0   0   .
 abcd       8  rr    .     1100...100000...  ..........  U U U U U U U   6   6   4   4   4   4   4
 abcd       8  mm    ax7   1100111100001...  ..........  U U U U U U U  18  18  16  16  16  16  16
 abcd       8  mm    ay7   1100...100001111  ..........  U U U U U U U  18  18  16  16  16  16  16
@@ -759,8 +759,8 @@
 pack      16  mm    axy7  1000111101001111  ..........  . . U U U U U   .   .  13  13  13  13  13
 pack      16  mm    .     1000...101001...  ..........  . . U U U U U   .   .  13  13  13  13  13
 pea       32  .     .     0100100001......  A..DXWLdx.  U U U U U U U   6   6   5   5   5   5   5
-pflush    32  .     .     1111010100011000  ..........  . . . . S S .   .   .   .   .   4   4   4 TODO: correct timing
-pflushan  32  .     .     1111010100010000  ..........  . . . . S S .   .   .   .   .   4   4   4 TODO: correct timing
+pflusha   32  .     .     1111010100011...  ..........  . . . . S S .   .   .   .   .   4   4   4 TODO: correct timing
+pflushan  32  .     .     1111010100010...  ..........  . . . . S S .   .   .   .   .   4   4   4 TODO: correct timing
 pmmu      32  .     .     1111000.........  ..........  . . S S S S S   .   .   8   8   8   8   8
 ptest     32  .     .     1111010101.01...  ..........  . . . . S . .   .   .   .   .   8   .   .
 reset      0  .     .     0100111001110000  ..........  S S S S S S S   0   0   0   0   0   0   0
@@ -8205,11 +8205,11 @@
 	m68ki_push_32((mc68kcpu), ea);
 }
 
-M68KMAKE_OP(pflush, 32, ., .)
+M68KMAKE_OP(pflusha, 32, ., .)
 {
 	if ((CPU_TYPE_IS_EC020_PLUS((mc68kcpu)->cpu_type)) && ((mc68kcpu)->has_pmmu))
 	{
-		logerror("68040: unhandled PFLUSH\n");
+		logerror("68040: unhandled PFLUSHA (ir=%04x)\n", mc68kcpu->ir);
 		return;
 	}
 	m68ki_exception_1111(mc68kcpu);
@@ -8219,7 +8219,7 @@
 {
 	if ((CPU_TYPE_IS_EC020_PLUS((mc68kcpu)->cpu_type)) && ((mc68kcpu)->has_pmmu))
 	{
-		logerror("68040: unhandled PFLUSHAN\n");
+		logerror("68040: unhandled PFLUSHAN (ir=%04x)\n", mc68kcpu->ir);
 		return;
 	}
 	m68ki_exception_1111(mc68kcpu);
diff -Nru src-old/emu/cpu/m68000/m68kfpu.c src/emu/cpu/m68000/m68kfpu.c
--- src-old/emu/cpu/m68000/m68kfpu.c	2012-02-18 12:58:12.000000000 +0100
+++ src/emu/cpu/m68000/m68kfpu.c	2012-03-14 19:00:46.000000000 +0100
@@ -1370,6 +1370,7 @@
 			REG_FP(m68k)[dst] = double_to_fx80((double)temp2);
 			SET_CONDITION_CODES(m68k, REG_FP(m68k)[dst]);
 			m68k->remaining_cycles -= 6;
+			break;
 		}
 		case 0x20:		// FDIV
 		{
diff -Nru src-old/emu/cpu/powerpc/ppcdrc.c src/emu/cpu/powerpc/ppcdrc.c
--- src-old/emu/cpu/powerpc/ppcdrc.c	2012-03-11 19:17:00.000000000 +0100
+++ src/emu/cpu/powerpc/ppcdrc.c	2012-03-25 15:56:49.000000000 +0200
@@ -2237,7 +2237,7 @@
 	{
 		UML_GETFLGS(block, I0, FLAG_S | FLAG_Z);										// getflgs i0,sz
 		UML_LOAD(block, I0, ppc->impstate->sz_cr_table, I0, SIZE_BYTE, SCALE_x1);	// load    i0,sz_cr_table,i0,byte
-		UML_OR(block, CR32(0), I0, XERSO32);											// or      [cr0],i0,[xerso]
+        UML_OR(block, CR32(0), I0, XERSO32);											// or      [cr0],i0,[xerso]
 		return;
 	}
 
@@ -3066,41 +3066,75 @@
 			return TRUE;
 
 		case 0x1cb:	/* DIVWUx */
-		case 0x3cb:	/* DIVWUOx */
+        case 0x3cb:	/* DIVWUOx */
+            UML_CMP(block, R32(G_RB(op)), 0x0);                 // cmp rb, #0
+            UML_JMPc(block, COND_NZ, compiler->labelnum);       // bne 0:
+
+            UML_MOV(block, R32(G_RD(op)), 0x0);                 // mov rd, #0
+            if (op & M_OE)
+            {
+                UML_OR(block, XERSO32, XERSO32, 0x1);           // SO |= 1
+                UML_OR(block, SPR32(SPR_XER), SPR32(SPR_XER), XER_OV);  // OV |= 1
+            }
+            if (op & M_RC)
+            {
+                UML_MOV(block, CR32(0), 0x2);                   // CR = EQ
+                UML_AND(block, CR32(0), CR32(0), ~0x1);
+                UML_OR(block, CR32(0), CR32(0), XERSO32);
+            }
+
+            UML_JMP(block, compiler->labelnum+1);               // jmp 1:
+
+            UML_LABEL(block, compiler->labelnum++);             // 0:
 			UML_DIVU(block, R32(G_RD(op)), R32(G_RD(op)), R32(G_RA(op)), R32(G_RB(op)));	// divu    rd,rd,ra,rb
 			generate_compute_flags(ppc, block, desc, op & M_RC, ((op & M_OE) ? XER_OV : 0), FALSE);// <update flags>
+
+            UML_LABEL(block, compiler->labelnum++);             // 1:
 			return TRUE;
 
 		case 0x1eb:	/* DIVWx */
         case 0x3eb:	/* DIVWOx */
             UML_CMP(block, R32(G_RB(op)), 0x0);                 // cmp rb, #0
-            UML_JMPc(block, COND_NE, compiler->labelnum);       // bne 0:
+            UML_JMPc(block, COND_NZ, compiler->labelnum);       // bne 0:
             UML_CMP(block, R32(G_RA(op)), 0x80000000);          // cmp rb, #80000000
             UML_JMPc(block, COND_AE, compiler->labelnum);       // bae 0:
 
             UML_MOV(block, R32(G_RD(op)), 0x0);                 // move rd, #0
             if (op & M_OE)
             {
-                UML_OR(block, XERSO32, XERSO32, 0x1);           // SO = 1
+                UML_OR(block, XERSO32, XERSO32, 0x1);           // SO |= 1
+                UML_OR(block, SPR32(SPR_XER), SPR32(SPR_XER), XER_OV);  // OV |= 1
+            }
+            if (op & M_RC)
+            {
+                UML_MOV(block, CR32(0), 0x2);                   // CR = EQ
+                UML_AND(block, CR32(0), CR32(0), ~0x1);
+                UML_OR(block, CR32(0), CR32(0), XERSO32);
             }
+
             UML_JMP(block, compiler->labelnum+3);               // jmp 3:
 
             UML_LABEL(block, compiler->labelnum++);             // 0:
-
             UML_CMP(block, R32(G_RB(op)), 0x0);                 // cmp rb, #0
             UML_JMPc(block, COND_Z, compiler->labelnum);        // beq 1:
 
             UML_CMP(block, R32(G_RB(op)), 0xffffffff);          // cmp rb, #ffffffff
-            UML_JMPc(block, COND_NE, compiler->labelnum+1);     // bne 2:
+            UML_JMPc(block, COND_NZ, compiler->labelnum+1);     // bne 2:
             UML_CMP(block, R32(G_RA(op)), 0x80000000);          // cmp ra, #80000000
-            UML_JMPc(block, COND_NE, compiler->labelnum+1);     // bne 2:
+            UML_JMPc(block, COND_NZ, compiler->labelnum+1);     // bne 2:
 
             UML_LABEL(block, compiler->labelnum++);             // 1:
-            // do second branch
             UML_MOV(block, R32(G_RD(op)), 0xffffffff);          // move rd, #ffffffff
             if (op & M_OE)
             {
-                UML_OR(block, XERSO32, XERSO32, 0x1);           // SO = 1
+                UML_OR(block, XERSO32, XERSO32, 0x1);           // SO |= 1
+                UML_OR(block, SPR32(SPR_XER), SPR32(SPR_XER), XER_OV);  // OV |= 1
+            }
+            if (op & M_RC)
+            {
+                UML_MOV(block, CR32(0), 0x8);                   // CR = LT
+                UML_AND(block, CR32(0), CR32(0), ~0x1);
+                UML_OR(block, CR32(0), CR32(0), XERSO32);
             }
             UML_JMP(block, compiler->labelnum+1);               // jmp 3:
 
@@ -3156,17 +3190,46 @@
 			generate_compute_flags(ppc, block, desc, op & M_RC, 0, FALSE);					// <update flags>
 			return TRUE;
 
-		case 0x018:	/* SLWx */
+        case 0x018:	/* SLWx */
+            UML_AND(block, I0, R32(G_RB(op)), 0x3f);            // and i0, rb, 0x3f
+            UML_CMP(block, I0, 31);                             // cmp i0, #31
+            UML_JMPc(block, COND_BE, compiler->labelnum);       // be 0:
+
+            UML_MOV(block, R32(G_RA(op)), 0x0);                 // mov ra, #0
+            if (op & M_RC)
+            {
+                UML_MOV(block, CR32(0), 0x2);                   // CR = EQ
+                UML_AND(block, CR32(0), CR32(0), ~0x1);
+                UML_OR(block, CR32(0), CR32(0), XERSO32);
+            }
+            UML_JMP(block, compiler->labelnum+1);               // jmp 1:
+
+            UML_LABEL(block, compiler->labelnum++);             // 0:
 			UML_SHL(block, R32(G_RA(op)), R32(G_RS(op)), R32(G_RB(op)));					// shl     ra,rs,rb
 			generate_compute_flags(ppc, block, desc, op & M_RC, 0, FALSE);					// <update flags>
-			return TRUE;
+
+            UML_LABEL(block, compiler->labelnum++);             // 1:
+            return TRUE;
 
 		case 0x218:	/* SRWx */
-			UML_MOV(block, I0, R32(G_RS(op)));											// mov     i0,rs
-			UML_TEST(block, R32(G_RB(op)), 0x20);										// test    rb,0x20
-			UML_MOVc(block, COND_NZ, I0, 0);										// mov     i0,0,nz
-			UML_SHR(block, R32(G_RA(op)), I0, R32(G_RB(op)));							// shr     ra,i0,rb
+            UML_AND(block, I0, R32(G_RB(op)), 0x3f);            // and i0, rb, 0x3f
+            UML_CMP(block, I0, 31);                             // cmp i0, #31
+            UML_JMPc(block, COND_BE, compiler->labelnum);       // be 0:
+
+            UML_MOV(block, R32(G_RA(op)), 0x0);                 // mov ra, #0
+            if (op & M_RC)
+            {
+                UML_MOV(block, CR32(0), 0x2);                   // CR = EQ
+                UML_AND(block, CR32(0), CR32(0), ~0x1);
+                UML_OR(block, CR32(0), CR32(0), XERSO32);
+            }
+            UML_JMP(block, compiler->labelnum+1);               // jmp 1:
+
+            UML_LABEL(block, compiler->labelnum++);             // 0:
+			UML_SHR(block, R32(G_RA(op)), R32(G_RS(op)), R32(G_RB(op)));							// shr     ra,i0,rb
 			generate_compute_flags(ppc, block, desc, op & M_RC, 0, FALSE);					// <update flags>
+
+            UML_LABEL(block, compiler->labelnum++);             // 1:
 			return TRUE;
 
 		case 0x318:	/* SRAWx */
diff -Nru src-old/emu/diserial.c src/emu/diserial.c
--- src-old/emu/diserial.c	2012-02-26 15:42:03.000000000 +0100
+++ src/emu/diserial.c	2012-03-12 09:02:52.000000000 +0100
@@ -39,6 +39,8 @@
 	}
 	m_rcv_clock = NULL;
 	m_tra_clock = NULL;
+	m_tra_baud = 0;
+	m_rcv_baud = 0;
 }
 
 device_serial_interface::~device_serial_interface()
diff -Nru src-old/emu/drivers/xtal.h src/emu/drivers/xtal.h
--- src-old/emu/drivers/xtal.h	2012-02-09 07:06:33.000000000 +0100
+++ src/emu/drivers/xtal.h	2012-03-12 21:27:37.000000000 +0100
@@ -52,6 +52,7 @@
 	XTAL_2MHz   		= 2000000,
 	XTAL_2_01216MHz		= 2012160,		/* Cidelsa Draco sound board */
 	XTAL_2_4576MHz		= 2457600,		/* Atari ST MFP */
+	XTAL_2_5MHz			= 2500000,		/* Janken Man units */
 	XTAL_3MHz   		= 3000000,		/* Probably only used to drive 68705 or similar MCUs on 80's Taito PCBs */
 	XTAL_3_12MHz		= 3120000,		/* SP0250 clock on Gottlieb games */
 	XTAL_3_52128MHz		= 3521280,		/* RCA COSMAC VIP */
diff -Nru src-old/emu/machine/6526cia.c src/emu/machine/6526cia.c
--- src-old/emu/machine/6526cia.c	2011-05-02 05:32:58.000000000 +0200
+++ src/emu/machine/6526cia.c	2012-03-25 15:56:49.000000000 +0200
@@ -10,9 +10,11 @@
 #include "emu.h"
 #include "6526cia.h"
 
-/***************************************************************************
-    CONSTANTS
-***************************************************************************/
+
+
+//**************************************************************************
+//  MACROS / CONSTANTS
+//**************************************************************************
 
 /* CIA registers */
 #define CIA_PRA			0
@@ -41,13 +43,10 @@
 #define	CIA_CRA_SPMODE	0x40
 #define	CIA_CRA_TODIN	0x80
 
-//**************************************************************************
-//  DEVICE CONFIGURATION
-//**************************************************************************
 
 
 //**************************************************************************
-//  LIVE DEVICE
+//  DEVICE CONFIGURATION
 //**************************************************************************
 
 // device type definition
@@ -55,6 +54,23 @@
 const device_type MOS6526R2 = &device_creator<mos6526r2_device>;
 const device_type MOS8520 = &device_creator<mos8520_device>;
 
+
+
+//**************************************************************************
+//  INLINE HELPERS
+//**************************************************************************
+
+inline attotime mos6526_device::cycles_to_time(int c)
+{
+	return attotime::from_hz(clock()) * c;
+}
+
+
+
+//**************************************************************************
+//  LIVE DEVICE
+//**************************************************************************
+
 //-------------------------------------------------
 //  mos6526_device - constructor
 //-------------------------------------------------
@@ -174,6 +190,8 @@
 	}
 
 	/* setup timers */
+	m_pc_timer = timer_alloc(TIMER_PC);
+
 	for (int t = 0; t < (sizeof(m_timer) / sizeof(m_timer[0])); t++)
 	{
 		cia_timer *timer = &m_timer[t];
@@ -225,6 +243,21 @@
 }
 
 
+//-------------------------------------------------
+//  device_timer - handler timer events
+//-------------------------------------------------
+
+void mos6526_device::device_timer(emu_timer &timer, device_timer_id id, int param, void *ptr)
+{
+	switch (id)
+	{
+	case TIMER_PC:
+		m_out_pc_func(1);
+		break;
+	}
+}
+
+
 /*-------------------------------------------------
     set_port_mask_value
 -------------------------------------------------*/
@@ -240,9 +273,9 @@
 
 void mos6526_device::update_pc()
 {
-	/* this should really be one cycle long */
 	m_out_pc_func(0);
-	m_out_pc_func(1);
+
+	m_pc_timer->adjust(cycles_to_time(1));
 }
 
 /*-------------------------------------------------
diff -Nru src-old/emu/machine/6526cia.h src/emu/machine/6526cia.h
--- src-old/emu/machine/6526cia.h	2011-04-27 07:11:18.000000000 +0200
+++ src/emu/machine/6526cia.h	2012-03-20 17:49:47.000000000 +0100
@@ -132,12 +132,15 @@
     virtual void device_reset();
     virtual void device_post_load() { }
     virtual void device_clock_changed() { }
+	virtual void device_timer(emu_timer &timer, device_timer_id id, int param, void *ptr);
 
 	static TIMER_CALLBACK( timer_proc );
 	static TIMER_CALLBACK( clock_tod_callback );
 
 private:
+	static const device_timer_id TIMER_PC = 0;
 
+    inline attotime cycles_to_time(int c);
 	void update_pc();
 	void update_interrupts();
 	void timer_bump(int timer);
@@ -201,6 +204,8 @@
 	UINT8			m_cnt;
 	UINT8			m_shift;
 	UINT8			m_serial;
+
+	emu_timer *m_pc_timer;
 };
 
 class mos6526r1_device : public mos6526_device
diff -Nru src-old/emu/machine/ins8250.c src/emu/machine/ins8250.c
--- src-old/emu/machine/ins8250.c	2012-03-11 19:17:00.000000000 +0100
+++ src/emu/machine/ins8250.c	2012-03-12 09:02:52.000000000 +0100
@@ -210,8 +210,7 @@
 				m_regs.lsr &= ~0x20;
 				if ( m_regs.mcr & 0x10 )
 				{
-					m_regs.lsr &= ~0x40;
-					m_regs.lsr |= 1;
+					m_regs.lsr |= 0x61;
 					m_regs.rbr = data;
 					trigger_int(COM_INT_PENDING_RECEIVED_DATA_AVAILABLE);
 				}
diff -Nru src-old/lib/softfloat/fsincos.c src/lib/softfloat/fsincos.c
--- src-old/lib/softfloat/fsincos.c	2011-07-28 04:21:12.000000000 +0200
+++ src/lib/softfloat/fsincos.c	2012-03-22 05:08:07.000000000 +0100
@@ -34,7 +34,7 @@
 static const floatx80 floatx80_one = packFloatx80(0, 0x3fff, U64(0x8000000000000000));
 static const floatx80 floatx80_default_nan = packFloatx80(0, 0xffff, U64(0xffffffffffffffff));
 
-#define packFloat2x128m(zHi, zLo) {(zLo), (zHi)}
+#define packFloat2x128m(zHi, zLo) {(zHi), (zLo)}
 #define PACK_FLOAT_128(hi,lo) packFloat2x128m(LIT64(hi),LIT64(lo))
 
 #define EXP_BIAS 0x3FFF
@@ -268,7 +268,7 @@
         neg = ! neg;
 
     if (neg)
-        floatx80_chs(result);
+        result = floatx80_chs(result);
 
     return result;
 }
@@ -486,7 +486,7 @@
 
     a = float128_to_floatx80(r);
     if (zSign)
-        floatx80_chs(a);
+        a = floatx80_chs(a);
 
     return 0;
 }
diff -Nru src-old/mame/drivers/8080bw.c src/mame/drivers/8080bw.c
--- src-old/mame/drivers/8080bw.c	2012-03-08 20:01:06.000000000 +0100
+++ src/mame/drivers/8080bw.c	2012-03-25 15:56:49.000000000 +0200
@@ -402,29 +402,6 @@
 
 MACHINE_CONFIG_END
 
-static DRIVER_INIT( invadpt2br )
-{
-	UINT8 *rom = machine.region("maincpu")->base();
-	int offs;
-
-	// simple encryption on rom pv01 0x4fc-0x5fb
-	// (with additional mask on 4-byte parts below)
-	for (offs = 0x4fc; offs < 0x5fc; offs++)
-		rom[offs] ^= 0x6c;
-
-	// 0x4fc + 1 * 0x56
-	for (offs = 0x54e; offs < 0x552; offs++)
-		rom[offs] ^= 0x03;
-
-	// 0x4fc + 2 * 0x56
-	for (offs = 0x5a4; offs < 0x5a8; offs++)
-		rom[offs] ^= 0x01;
-
-	// 0x4fc + 3 * 0x56
-	for (offs = 0x5fa; offs < 0x5fc; offs++)
-		rom[offs] ^= 0x02;
-}
-
 /*******************************************************/
 /*                                                     */
 /* Space Wars (Sanritsu)                               */
@@ -2664,7 +2641,23 @@
 
 ROM_START( invadpt2br )
 	ROM_REGION( 0x10000, "maincpu", 0 )
-	ROM_LOAD( "br_pv01",     0x0000, 0x0800, CRC(2931a033) SHA1(b04ccde4a4a04b37aa65edc4af4e53a8c1f03dfe) )
+	ROM_LOAD( "pv01",        0x0000, 0x0800, CRC(7288a511) SHA1(ff617872784c28ed03591aefa9f0519e5651701f) )
+	/* pv01 had weird encryption applied to it, very likely to have been done post-dump. */
+//  for (offs = 0x4fc; offs < 0x5fc; offs++)
+//      rom[offs] ^= 0x6c;
+
+	// 0x4fc + 1 * 0x56
+//  for (offs = 0x54e; offs < 0x552; offs++)
+//      rom[offs] ^= 0x03;
+
+	// 0x4fc + 2 * 0x56
+//  for (offs = 0x5a4; offs < 0x5a8; offs++)
+//      rom[offs] ^= 0x01;
+
+	// 0x4fc + 3 * 0x56
+//  for (offs = 0x5fa; offs < 0x5fc; offs++)
+//      rom[offs] ^= 0x02;
+
 	ROM_LOAD( "br_pv02",     0x0800, 0x0800, CRC(420c7c35) SHA1(b51265f4d9e5a8cf9d53099a97cadd25ea0b34ce) )
 	ROM_LOAD( "br_pv03",     0x1000, 0x0800, CRC(dffd04b9) SHA1(d51a0f27e90b0a49cf2d57ec82a863dcae9f3ea4) )
 	ROM_LOAD( "br_pv04",     0x1800, 0x0800, CRC(b0626aff) SHA1(b7de6c21030732bd0479228f057ca4c87b913b0a) )
@@ -3216,6 +3209,7 @@
 	ROM_LOAD( "ps07.2c", 0x0000, 0x0100, CRC(2953253b) SHA1(2fb851bc9652ca4e51d473b484ede6dab05f1b51) ) /* MB7052 or compatible BPROM (82S129) */
 ROM_END
 
+
 ROM_START( polariso )
 	ROM_REGION( 0x10000, "maincpu", 0 )
 	ROM_LOAD( "ps01.30",     0x0000, 0x0800, CRC(c04ce5a9) SHA1(62cc9b3b682ebecfb7600393862c65e26ff5263f) )
@@ -3232,6 +3226,23 @@
 	ROM_LOAD( "ps07.2c", 0x0000, 0x0100, CRC(2953253b) SHA1(2fb851bc9652ca4e51d473b484ede6dab05f1b51) ) /* MB7052 or compatible BPROM (82S129) */
 ROM_END
 
+ROM_START( polarisbr ) /* aka Polaris II on flyers? */
+	ROM_REGION( 0x10000, "maincpu", 0 )
+	ROM_LOAD( "1",   0x0000, 0x0800, CRC(17015f52) SHA1(8beb4d927c08420f9990fac787a81d4bd6dd419c) )
+	ROM_LOAD( "2",   0x0800, 0x0800, CRC(9a5c8cb2) SHA1(7a8c5d74f8b431072d9476d3ef65a3fe1d639813) )
+	ROM_LOAD( "3",   0x1000, 0x0800, CRC(60118368) SHA1(e1189fd88b943fcf77a5c41c519cccdb8196910c) )
+	ROM_LOAD( "4",   0x1800, 0x0800, CRC(65694948) SHA1(de92a7f3e3ef732b573254baa60df60f8e068a5d) )
+	ROM_LOAD( "5",   0x4000, 0x0800, CRC(6cb21b31) SHA1(f9d435a3aa905f124cb87c139b047e1585d0997b) )
+	ROM_LOAD( "6",   0x4800, 0x0800, CRC(3df77bac) SHA1(b3275c34b8d42df83df2c404c5b7d220aae651fa) )
+	ROM_LOAD( "7",   0x5000, 0x0800, CRC(0d811b92) SHA1(09af62997e1e0da0525ab4f6ced775d3673d8f35) )
+
+	ROM_REGION( 0x0400, "proms", 0 )		/* background color map */
+	ROM_LOAD( "ps08.1b", 0x0000, 0x0400, CRC(164aa05d) SHA1(41c699ce45c76a60c71294f25d8df6c6e6c1280a) ) /* NEC B406 or compatible BPROM (82S137) */
+
+	ROM_REGION( 0x0100, "user1", 0 )		/* cloud graphics */
+	ROM_LOAD( "ps07.2c", 0x0000, 0x0100, CRC(2953253b) SHA1(2fb851bc9652ca4e51d473b484ede6dab05f1b51) ) /* MB7052 or compatible BPROM (82S129) */
+ROM_END
+
 ROM_START( ozmawars )
 	ROM_REGION( 0x10000, "maincpu", 0 )
 	ROM_LOAD( "mw01",         0x0000, 0x0800, CRC(31f4397d) SHA1(bba9765aadd608d19e2515a5edf8e0eceb70916a) )
@@ -3439,7 +3450,7 @@
 GAME( 1979, grescue,  lrescue,  lrescue,  lrescue,  0, ROT270, "Taito (Universal license?)", "Galaxy Rescue", GAME_SUPPORTS_SAVE | GAME_IMPERFECT_SOUND )
 GAME( 1979, desterth, lrescue,  lrescue,  invrvnge, 0, ROT270, "bootleg", "Destination Earth", GAME_SUPPORTS_SAVE | GAME_IMPERFECT_SOUND )
 GAME( 1979, invadpt2, 0,        invadpt2, invadpt2, 0, ROT270, "Taito", "Space Invaders Part II (Taito)", GAME_SUPPORTS_SAVE | GAME_IMPERFECT_SOUND )
-GAME( 1979, invadpt2br,invadpt2,invadpt2, invadpt2, invadpt2br, ROT270, "Taito do Brasil", "Space Invaders Part II (Brazil)", GAME_SUPPORTS_SAVE | GAME_IMPERFECT_SOUND )
+GAME( 1979, invadpt2br,invadpt2,invadpt2, invadpt2, 0, ROT270, "Taito do Brasil", "Space Invaders Part II (Brazil)", GAME_SUPPORTS_SAVE | GAME_IMPERFECT_SOUND )
 GAME( 1980, invaddlx, invadpt2, invaders, invadpt2, 0, ROT270, "Taito (Midway license)", "Space Invaders Deluxe", GAME_SUPPORTS_SAVE )
 GAME( 1980, vortex,   0,        vortex,   vortex, vortex, ROT270, "Zilec Electronics", "Vortex", GAME_IMPERFECT_COLORS | GAME_SUPPORTS_SAVE | GAME_IMPERFECT_SOUND ) /* Encrypted 8080/IO */
 GAME( 1979, cosmo,    0,        cosmo,    cosmo,    0, ROT90,  "TDS & Mints", "Cosmo", GAME_SUPPORTS_SAVE | GAME_IMPERFECT_SOUND )
@@ -3451,6 +3462,7 @@
 GAME( 1980, polaris,  0,        polaris,  polaris,  0, ROT270, "Taito", "Polaris (Latest version)", GAME_SUPPORTS_SAVE )
 GAME( 1980, polarisa, polaris,  polaris,  polaris,  0, ROT270, "Taito", "Polaris (First revision)", GAME_SUPPORTS_SAVE )
 GAME( 1980, polariso, polaris,  polaris,  polaris,  0, ROT270, "Taito", "Polaris (Original version)", GAME_SUPPORTS_SAVE )
+GAME( 1981, polarisbr,polaris,  polaris,  polaris,  0, ROT270, "Taito do Brasil", "Polaris (Brazil)", GAME_SUPPORTS_SAVE )
 GAME( 1980, ballbomb, 0,        ballbomb, ballbomb, 0, ROT270, "Taito", "Balloon Bomber", GAME_SUPPORTS_SAVE | GAME_IMPERFECT_SOUND | GAME_IMPERFECT_GRAPHICS )	/* missing clouds */
 GAME( 1980, indianbt, 0,        indianbt, indianbt, 0, ROT270, "Taito", "Indian Battle", GAME_SUPPORTS_SAVE | GAME_IMPERFECT_SOUND )
 GAME( 1980, steelwkr, 0,        steelwkr, steelwkr, 0, ROT0  , "Taito", "Steel Worker", GAME_SUPPORTS_SAVE | GAME_IMPERFECT_SOUND )
diff -Nru src-old/mame/drivers/adp.c src/mame/drivers/adp.c
--- src-old/mame/drivers/adp.c	2012-02-26 16:31:24.000000000 +0100
+++ src/mame/drivers/adp.c	2012-03-15 07:40:01.000000000 +0100
@@ -862,11 +862,11 @@
 ROM_END
 
 
-GAME( 1990, backgamn,        0, backgamn,    skattv,    0, ROT0,  "ADP",     "Backgammon", GAME_NOT_WORKING )
-GAME( 1993, quickjac,        0, quickjac,    skattv,    0, ROT0,  "ADP",     "Quick Jack", GAME_NOT_WORKING )
-GAME( 1994, skattv,          0, skattv,      skattv,    0, ROT0,  "ADP",     "Skat TV", GAME_NOT_WORKING )
-GAME( 1995, skattva,    skattv, skattv,      skattv,    0, ROT0,  "ADP",     "Skat TV (version TS3)", GAME_NOT_WORKING )
-GAME( 1997, fashiong,        0, fashiong,    skattv,    0, ROT0,  "ADP",     "Fashion Gambler", GAME_NOT_WORKING )
-GAME( 1997, fashiong2,fashiong, fashiong,    skattv,    0, ROT0,  "ADP",     "Fashion Gambler (Set 2)", GAME_NOT_WORKING )
-GAME( 1999, funlddlx,        0, funland,     skattv,    0, ROT0,  "Stella",  "Funny Land de Luxe", GAME_NOT_WORKING )
-GAME( 2000, fstation,        0, fstation,    skattv,    0, ROT0,  "ADP",     "Fun Station Spielekoffer 9 Spiele", GAME_NOT_WORKING )
+GAME( 1990, backgamn,  0,        backgamn,    skattv,    0, ROT0,  "ADP",     "Backgammon", GAME_NOT_WORKING )
+GAME( 1993, quickjac,  0,        quickjac,    skattv,    0, ROT0,  "ADP",     "Quick Jack", GAME_NOT_WORKING )
+GAME( 1994, skattv,    0,        skattv,      skattv,    0, ROT0,  "ADP",     "Skat TV", GAME_NOT_WORKING )
+GAME( 1995, skattva,   skattv,   skattv,      skattv,    0, ROT0,  "ADP",     "Skat TV (version TS3)", GAME_NOT_WORKING )
+GAME( 1997, fashiong,  0,        fashiong,    skattv,    0, ROT0,  "ADP",     "Fashion Gambler (set 1)", GAME_NOT_WORKING )
+GAME( 1997, fashiong2, fashiong, fashiong,    skattv,    0, ROT0,  "ADP",     "Fashion Gambler (set 2)", GAME_NOT_WORKING )
+GAME( 1999, funlddlx,  0,        funland,     skattv,    0, ROT0,  "Stella",  "Funny Land de Luxe", GAME_NOT_WORKING )
+GAME( 2000, fstation,  0,        fstation,    skattv,    0, ROT0,  "ADP",     "Fun Station Spielekoffer 9 Spiele", GAME_NOT_WORKING )
diff -Nru src-old/mame/drivers/aerofgt.c src/mame/drivers/aerofgt.c
--- src-old/mame/drivers/aerofgt.c	2012-01-12 23:19:49.000000000 +0100
+++ src/mame/drivers/aerofgt.c	2012-03-25 15:56:49.000000000 +0200
@@ -1952,6 +1952,41 @@
 	ROM_LOAD( "ep910pc.ic7",   0x00000, 0x884, CRC(e7a3913a) SHA1(6f18f55ecdc94a416baecd16fe7c6698b1ec9d87) )
 ROM_END
 
+/* similar-looking h/w to spikes91, includes roms from spikes91 and svolley.  possibly an svolley boot on spikes91 h/w? */
+ROM_START( spikes91a )
+	ROM_REGION( 0x40000, "maincpu", 0 )	/* 68000 code */
+    ROM_LOAD16_BYTE( "4-prg.bin", 0x00001, 0x10000, CRC(eefaa208) SHA1(2a0417e170de3212f45be64719bb1eb0c6d33c59) )
+    ROM_LOAD16_BYTE( "6-prg.bin", 0x00000, 0x10000, CRC(da7d2e81) SHA1(ca78a661876ddbcb0e7599edcc819558afb76930) )
+	ROM_LOAD16_BYTE( "5-prg.bin", 0x20000, 0x08000, CRC(e7630122) SHA1(d200afe5134030be615f112af0ab54ac3b349eca) ) // these 2 match program ROMs from svolley
+	ROM_LOAD16_BYTE( "3-prg.bin", 0x20001, 0x08000, CRC(b6b24910) SHA1(2e4cf80a8eb1fcd9448405ff881bb99ae4ce8909) )
+
+	ROM_REGION( 0x080000, "gfx1", 0 )
+    ROM_LOAD( "19.bin",       0x000000, 0x010000, CRC(12a67e3f) SHA1(c77b264eae0f55af36728b6e5e5e1fec3d366eb1) )
+    ROM_LOAD( "20.bin",       0x010000, 0x010000, CRC(31828996) SHA1(b324902b9fff0bab1daa3af5136b96d50d12956f) )
+    ROM_LOAD( "21.bin",       0x020000, 0x010000, CRC(51cbe0d6) SHA1(d60b2a297d7e994c60db28e8ba60b0664e01f61d) )
+    ROM_LOAD( "22.bin",       0x030000, 0x010000, CRC(c289bfc0) SHA1(4a8929c5f304a1d203cad04c72fc6e96764dc858) )
+
+	ROM_REGION( 0x100000, "gfx2", ROMREGION_INVERT )
+    ROM_LOAD( "7.bin",        0x000000, 0x010000, CRC(9596a4c0) SHA1(1f233bb2fa662fb8cd9c0db478e392ca26d9484b) )
+    ROM_LOAD( "8.bin",        0x010000, 0x010000, CRC(451ebd75) SHA1(67d5a9fadf3c8a39d59e7b21cb8633dd19886f76) )
+    ROM_LOAD( "10.bin",       0x020000, 0x010000, CRC(a05249e6) SHA1(8671e0c980ba87ea14895176fb5c8a48bb4c932e) )
+    ROM_LOAD( "11.bin",       0x030000, 0x010000, CRC(0983987a) SHA1(c334276774ffdee0023ea6287e98e0e6e372fb80) )
+    ROM_LOAD( "13.bin",       0x040000, 0x010000, CRC(429159f3) SHA1(4395413c4ab4a1fd322a1af6f2b93bb62b044223) )
+    ROM_LOAD( "14.bin",       0x050000, 0x010000, CRC(4babf749) SHA1(1d5055e825b9efc17a200f4e04e6fa326397f7cc) )
+    ROM_LOAD( "16.bin",       0x060000, 0x010000, CRC(f5436c8d) SHA1(d29508cc5ee43d7b072112c6d95c36ee0328e5fb) )
+    ROM_LOAD( "17.bin",       0x070000, 0x010000, CRC(f82f9664) SHA1(678fd8f3abc39ccb4ef32e9d6ef481d7d751aecb) )
+    ROM_LOAD( "9.bin",        0x080000, 0x008000, CRC(3291e3e0) SHA1(dcc358bf66e4c65992d4376c203b811928068cf3) )
+    ROM_LOAD( "12.bin",       0x088000, 0x008000, CRC(40aedad9) SHA1(cbf50eae4ccbc06213a5c227409e1dade7180572) )
+    ROM_LOAD( "15.bin",       0x090000, 0x008000, CRC(911104d7) SHA1(66b48c34da2cc17faeffa1d36f5b6b7e15c2033b) )
+    ROM_LOAD( "18.bin",       0x098000, 0x008000, CRC(07265de1) SHA1(bad7f1b168640a7d90b0d4d9c255ba98fa4c6fa8) )
+
+	ROM_REGION( 0x020000, "user1", ROMREGION_ERASEFF ) /* lookup tables for the sprites  */
+
+	ROM_REGION( 0x20000, "cpu1", 0 ) /* Z80 Sound CPU */
+	ROM_LOAD( "2-snd.bin", 0x00000, 0x10000, CRC(e3065b1d) SHA1(c4a3a95ba7f43cdf1b0c574f41de06d007ad2bd8) ) // matches 1.ic140 from pspikes91
+    ROM_LOAD( "1-snd.bin", 0x10000, 0x08000, CRC(009d7157) SHA1(2cdda7094c7476289d75a78ee25b34fa3b3225c0) )
+ROM_END
+
 /* this is a bootleg / chinese hack of power spikes */
 
 ROM_START( pspikesc )
@@ -2470,6 +2505,7 @@
 GAME( 1991, svolly91, pspikes,  pspikes,  pspikes,  0, ROT0,   "Video System Co.", "Super Volley '91 (Japan)", GAME_SUPPORTS_SAVE | GAME_NO_COCKTAIL )
 GAME( 1991, pspikesb, pspikes,  pspikesb, pspikesb, 0, ROT0,   "bootleg",          "Power Spikes (bootleg)", GAME_SUPPORTS_SAVE | GAME_NO_COCKTAIL )
 GAME( 1991, spikes91, pspikes,  spikes91, pspikes,  0, ROT0,   "bootleg",          "1991 Spikes (Italian bootleg)", GAME_SUPPORTS_SAVE | GAME_NO_SOUND | GAME_NO_COCKTAIL )
+GAME( 1991, spikes91a,pspikes,  spikes91, pspikes,  0, ROT0,   "bootleg",          "1991 Spikes (Italian bootleg, set 2)", GAME_SUPPORTS_SAVE | GAME_NOT_WORKING | GAME_NO_SOUND | GAME_NO_COCKTAIL )
 GAME( 1991, pspikesc, pspikes,  pspikesc, pspikesc, 0, ROT0,   "bootleg",          "Power Spikes (China)", GAME_SUPPORTS_SAVE | GAME_NO_COCKTAIL | GAME_IMPERFECT_SOUND )
 GAME( 1991, karatblz, 0,        karatblz, karatblz, 0, ROT0,   "Video System Co.", "Karate Blazers (World)", GAME_SUPPORTS_SAVE | GAME_NO_COCKTAIL )
 GAME( 1991, karatblzu,karatblz, karatblz, karatblz, 0, ROT0,   "Video System Co.", "Karate Blazers (US)", GAME_SUPPORTS_SAVE | GAME_NO_COCKTAIL )
diff -Nru src-old/mame/drivers/alpha68k.c src/mame/drivers/alpha68k.c
--- src-old/mame/drivers/alpha68k.c	2012-01-12 23:19:49.000000000 +0100
+++ src/mame/drivers/alpha68k.c	2012-03-15 07:40:01.000000000 +0100
@@ -3354,8 +3354,8 @@
 
 GAME( 1988, skysoldr,  0,        alpha68k_II,    skysoldr, skysoldr, ROT90, "Alpha Denshi Co. (SNK of America/Romstar license)", "Sky Soldiers (US)", GAME_SUPPORTS_SAVE )
 
-GAME( 1988, goldmedl,  0,        alpha68k_II_gm, goldmedl, goldmedl, ROT0,  "SNK",                                               "Gold Medalist", GAME_SUPPORTS_SAVE )
-GAME( 1988, goldmedla, goldmedl, alpha68k_II_gm, goldmedl, goldmedla,ROT0,  "SNK",                                               "Gold Medalist (alt)", GAME_SUPPORTS_SAVE )
+GAME( 1988, goldmedl,  0,        alpha68k_II_gm, goldmedl, goldmedl, ROT0,  "SNK",                                               "Gold Medalist (set 1)", GAME_SUPPORTS_SAVE )
+GAME( 1988, goldmedla, goldmedl, alpha68k_II_gm, goldmedl, goldmedla,ROT0,  "SNK",                                               "Gold Medalist (set 2)", GAME_SUPPORTS_SAVE )
 GAME( 1988, goldmedlb, goldmedl, alpha68k_II_gm, goldmedl, goldmedla,ROT0,  "bootleg",                                           "Gold Medalist (bootleg)", GAME_NOT_WORKING )
 
 GAME( 1989, skyadvnt,  0,        alpha68k_V,     skyadvnt, skyadvnt, ROT90, "Alpha Denshi Co.",                                  "Sky Adventure (World)", GAME_SUPPORTS_SAVE )
diff -Nru src-old/mame/drivers/bfm_sc1.c src/mame/drivers/bfm_sc1.c
--- src-old/mame/drivers/bfm_sc1.c	2012-03-11 19:17:00.000000000 +0100
+++ src/mame/drivers/bfm_sc1.c	2012-03-15 07:40:01.000000000 +0100
@@ -3088,7 +3088,7 @@
 GAME( 198?, sc1actv8		, 0			, scorpion1_viper	, scorpion1	, nocrypt		, 0,       "BFM",      "Active 8 (Bellfruit) (Scorpion 1)", GAME_FLAGS )
 GAME( 198?, sc1armad		, 0			, scorpion1			, scorpion1	, lotse			, 0,       "BFM/ELAM", "Armada (Bellfruit) (Dutch) (Scorpion 1)", GAME_FLAGS )
 GAME( 198?, sc1bartk		, 0			, scorpion1_viper	, clatt		, lotse			, 0,       "BFM",      "Bar Trek (Bellfruit) (Scorpion 1)", GAME_FLAGS )
-GAME( 198?, sc1barcd		, 0			, scorpion1_viper	, clatt		, lotse			, 0,       "BFM",      "Barcode (Bellfruit) (Scorpion 1)", GAME_FLAGS )
+GAME( 198?, sc1barcd		, 0			, scorpion1_viper	, clatt		, lotse			, 0,       "BFM",      "Barcode (Bellfruit) (set 1) (Scorpion 1)", GAME_FLAGS )
 GAME( 198?, sc1barcda		, sc1barcd	, scorpion1_viper	, clatt		, lotse			, 0,       "BFM",      "Barcode (Bellfruit) (set 2) (Scorpion 1)", GAME_FLAGS )
 GAME( 198?, sc1bigmt		, 0			, scorpion1_viper	, clatt		, nocrypt		, 0,       "BFM",      "The Big Match (Bellfruit) (Scorpion 1)", GAME_FLAGS )
 GAME( 198?, sc1calyp		, 0			, scorpion1			, scorpion1	, lotse			, 0,       "BFM/ELAM", "Calypso (Bellfruit) (Dutch) (Scorpion 1)", GAME_FLAGS )
diff -Nru src-old/mame/drivers/bfm_sc2.c src/mame/drivers/bfm_sc2.c
--- src-old/mame/drivers/bfm_sc2.c	2012-02-22 01:51:07.000000000 +0100
+++ src/mame/drivers/bfm_sc2.c	2012-03-25 15:56:49.000000000 +0200
@@ -3885,16 +3885,178 @@
 }
 
 
+//these differ by only two bytes, and with no obvious labelling, this has been a bit of a guess
+#define sc2_gslam_sound \
+	ROM_REGION( 0x80000, "upd", 0 )\
+	ROM_LOAD( "grandslamsnd.bin", 0x0000, 0x080000, CRC(e4af3787) SHA1(9aa40f7c4c4db3618b553505b02663c1d5f297c3) )\
+
+#define sc2_gslam_sound_alt \
+	ROM_REGION( 0x80000, "upd", 0 )\
+	ROM_LOAD( "gslamsndb.bin", 0x0000, 0x080000, CRC(c9dfb6f5) SHA1(6e529c210b26e7ce164cebbff8ec314c6fa8f7bf) )
+
+#define sc2_catms_sound\
+	ROM_REGION( 0x80000, "upd", 0 )\
+	ROM_LOAD( "catandmousesnd.bin", 0x0000, 0x080000, CRC(00d3b224) SHA1(5ae35a7bfa65e8343564e6f6a219bc674710fadc) )\
+
+#define sc2_gsclb_sound \
+	ROM_REGION( 0x80000, "upd", 0 )\
+	ROM_LOAD( "95004024.bin", 0x0000, 0x080000, CRC(e1a0323f) SHA1(a015d99c882962651869d8ec71a6c17a1cba687f) )\
+
+#define sc2_cpg_sound\
+	ROM_REGION( 0x80000, "upd", 0 )\
+	ROM_LOAD( "pharaohsgoldsnd.bin", 0x0000, 0x080000, CRC(7d67d53e) SHA1(159e0e9af1cfd6adc141daaa0f75d38af55218c3) )\
+
+#define sc2_suprz_sound\
+	ROM_REGION( 0x80000, "upd", 0 )\
+	ROM_LOAD( "surprisesurprizesnd.bin", 0x0000, 0x01fedb, CRC(c0981343) SHA1(71278c3446cf204a31415dd2ed8f1de7f7a16645) )\
+
+#define sc2_motd_sound\
+	ROM_REGION( 0x80000, "upd", 0 )\
+	ROM_LOAD( "modsndf.bin", 0x0000, 0x080000, CRC(088471f5) SHA1(49fb22daf04450186e9a83aee3312bb85ccf6842) )\
+
+#define sc2_easy_sound\
+	ROM_REGION( 0x80000, "upd", 0 )\
+	ROM_LOAD( "easy-money_snd.bin", 0x0000, 0x080000, CRC(56d224c5) SHA1(43b81a1a9a7d30ef7bfb2bbc61e3106faa927778) )\
+
+#define sc2_luvv_sound \
+	ROM_REGION( 0x80000, "upd", 0 )\
+	ROM_LOAD("snd.bin",		 0x00000, 0x80000, CRC(19efac32) SHA1(26f901fc11f052a4d3cff67f8f61dcdd04f3dc22))\
+
+#define sc2_ofool_sound\
+	ROM_REGION( 0x80000, "upd", 0 )\
+	ROM_LOAD( "onlyfools_snd.bin", 0x0000, 0x080000, CRC(c073bb0c) SHA1(54b3df8c8d814af1fbb662834739a32a693fc7ee) )\
+
+#define sc2_ofool_matrix\
+	ROM_REGION( 0x20000, "matrix", 0 )\
+	ROM_LOAD( "onlyfoolsnhorsesdotmatrix.bin", 0x0000, 0x010000, CRC(521611f7) SHA1(08cdc9f7434657151d90fcfd26ce4668477c2998) )\
+
+#define sc2_town_sound \
+	ROM_REGION( 0x80000, "upd", 0 )\
+	ROM_LOAD( "attsnd.bin", 0x0000, 0x040000, CRC(9b5327c8) SHA1(b9e5aeb3e9a6ece796e9164e425829d97c5f3a82) )\
+
+#define sc2_cpe_sound \
+	ROM_REGION( 0x80000, "upd", 0 )\
+	ROM_LOAD("cpe1_snd.bin",  0x00000, 0x80000, CRC(ca8a56bb) SHA1(36434dae4369f004fa5b4dd00eb6b1a965be60f9))\
+
+#define sc2_cpe_sound_alt1 \
+	ROM_REGION( 0x80000, "upd", 0 )\
+	ROM_LOAD( "pen1c_snd.bin", 0x0000, 0x080000, CRC(57f3d152) SHA1(f5ccd11042d54396352df149e85c4aa271342d49) )
+
+#define sc2_cpe_sound_alt2 \
+	ROM_REGION( 0x80000, "upd", 0 )\
+	ROM_LOAD( "95004012.p1", 0x0000, 0x080000, CRC(30d1f22a) SHA1(73cb2d12b090841a12a2ed21653248f41d02e125) )
+
+#define sc2_cops_sound \
+	ROM_REGION( 0x80000, "upd", 0 )\
+	ROM_LOAD( "copssnd.bin", 0x0000, 0x040000, CRC(4bebbc37) SHA1(10eb8542a9de35efc0f75b532c94e1b3e0d21e47) )\
+
+#define sc2_copcl_sound\
+	ROM_REGION( 0x80000, "upd", 0 )\
+	ROM_LOAD( "club-cops-and-robbers-sound.bin", 0x0000, 0x040000, CRC(b5ba009d) SHA1(806b1d739fbf00b7e55ed0b8056440e47bfba87a) )\
+
+//missing a sound rom - is it the same as the non-deluxe version?
+#define sc2_copdc_sound\
+	ROM_REGION( 0x80000, "upd", ROMREGION_ERASE00 )\
+
+//can't tell any difference between these audibly, could one have the 'ruder' samples dummied out in the code?
+//For now, I'm putting the first ROM with Bellfruit sets, and the second with Mazooma ones
+#define sc2_dels_sound\
+	ROM_REGION( 0x80000, "upd", 0 )\
+	ROM_LOAD( "dmsnd.bin", 0x0000, 0x080000, CRC(0a68550b) SHA1(82a4a8d2a754a59da553b3568df870107e33f978) )\
+
+#define sc2_dels_sound_alt\
+	ROM_REGION( 0x80000, "upd", 0 )\
+	ROM_LOAD( "delssnd.bin", 0x0000, 0x080000, CRC(cb298f06) SHA1(fdc857101ad15d58aeb7ffc4a489c3de9373fc80) )\
+
+#define sc2_wembl_sound \
+	ROM_REGION( 0x80000, "upd", ROMREGION_ERASE00 )\
+	ROM_LOAD( "wembley_sound.bin", 0x0000, 0x080000, CRC(5ce2fc50) SHA1(26533428582058f0cd618e3657f967bc64e551fc) )\
+
+#define sc2_prem_sound \
+	ROM_REGION( 0x80000, "upd", ROMREGION_ERASE00 )\
+	ROM_LOAD( "premclubsnd.bin", 0x0000, 0x080000, CRC(b20c74f1) SHA1(b43a79f8f59387ef777fffd07a39b7333811d464) )\
+
+#define sc2_downt_sound \
+	ROM_REGION( 0x80000, "upd", ROMREGION_ERASE00 )\
+	ROM_LOAD( "dtownsnd.dat", 0x0000, 0x080000, CRC(a41b109b) SHA1(22470d731741521321d004fc56ff8217e506ef69) )\
+
+#define sc2_goldr_sound\
+	ROM_REGION( 0x80000, "upd", ROMREGION_ERASE00 )\
+	ROM_LOAD( "gold_reserve_snd", 0x0000, 0x080000, CRC(e8e7ab7b) SHA1(ce43e8ffccc0421548c6683a72267b7e5f805db4) )\
+
+#define sc2_hifly_sound\
+	ROM_REGION( 0x80000, "upd", ROMREGION_ERASE00 )\
+	ROM_LOAD( "hiflyersound.bin", 0x0000, 0x080000, CRC(acdef7dc) SHA1(c2cc219ca8f4a3e3cdcb1147ad49cd69adb3751b) )\
+
+#define sc2_inst_sound \
+	ROM_REGION( 0x80000, "upd", ROMREGION_ERASE00 )\
+	ROM_LOAD( "instantjackpotssnd.bin", 0x0000, 0x080000, CRC(ba922860) SHA1(7d84c7fa72b1fb567faccf8464e0fd859c76838d) )\
+
+#define sc2_mam_sound\
+	ROM_REGION( 0x80000, "upd", ROMREGION_ERASE00 )\
+	ROM_LOAD( "mamsnd.bin", 0x0000, 0x080000, CRC(32537b18) SHA1(c26697162edde97ec999ed0459656edb85a01a50) )\
+
+//This was also in the non-club, so may be an alt set
+#define sc2_mamcl_sound \
+	ROM_REGION( 0x80000, "upd", ROMREGION_ERASE00 )\
+	ROM_LOAD( "cmamsnd.bin", 0x0000, 0x080000, CRC(9a80977a) SHA1(0a6dc9465efa9e3d12894daf88a2746e74409349))\
+
+#define sc2_showt_sound\
+	ROM_REGION( 0x80000, "upd", ROMREGION_ERASE00 )\
+	ROM_LOAD( "stspec", 0x0000, 0x080000, CRC(01e4a017) SHA1(f2f0cadf2334edf35db98af0dcb6d827c991f3f2) )\
+
+#define sc2_sstar_sound \
+	ROM_REGION( 0x80000, "upd", ROMREGION_ERASE00 )\
+	ROM_LOAD( "superstarsnd.bin", 0x0000, 0x080000, CRC(9a2609b5) SHA1(d29a5029e39cd44739682954f034f2d1f2e1cebf) )\
+
+//missing
+#define sc2_wwcl_sound \
+	ROM_REGION( 0x80000, "upd", ROMREGION_ERASE00 )\
+	ROM_LOAD( "club-wild-west_sound.bin", 0x0000, 0x080000, NO_DUMP )
+
+//is this upd?
+#define sc2_dick_sound \
+	ROM_REGION( 0x100000, "upd", ROMREGION_ERASE00 )\
+	ROM_LOAD( "global-spotted-dick_snd.bin", 0x0000, 0x100000, CRC(f2c66aab) SHA1(6fe94a193779c91711588365591cf42d197cb7b9) )\
+
+
+//is this upd?
+#define sc2_pick_sound\
+	ROM_REGION( 0x200000, "upd", ROMREGION_ERASE00 )\
+	ROM_LOAD( "pickofthebunchsnd1.bin", 0x000000, 0x100000, CRC(f717b9c7) SHA1(06c90cc9779d475100926e986c742f0acffa0dc3) )\
+	ROM_LOAD( "pickofthebunchsnd2.bin", 0x100000, 0x100000, CRC(eaac3e67) SHA1(3aaed6514eeeb41c26f365789d8736908785b1c2) )\
+
+//Is this upd?
+#define sc2_rock_sound \
+	ROM_REGION( 0x200000, "upd", ROMREGION_ERASE00 )\
+	ROM_LOAD( "hbiyr_snd.bin", 0x0000, 0x100000, CRC(96cc0d54) SHA1(612f8c7f353bb847c1a28e2b76b64916d5b2d36a) )\
+
+//this is a guess
+#define sc2_gcclb_sound\
+	ROM_REGION( 0x200000, "upd", ROMREGION_ERASE00 )\
+	ROM_LOAD( "gold_cas.snd", 0x0000, 0x080000, CRC(d93d39fb) SHA1(ce0c0c1430a6136ce39ffae018b009e629cbad61) )\
+
+// The below file also matches superstarsnd.bin
+#define sc2_cb7_sound \
+	ROM_REGION( 0x80000, "upd", ROMREGION_ERASE00 )\
+	ROM_LOAD( "casinobar7_bfm_snd1.bin", 0x0000, 0x080000, CRC(9a2609b5) SHA1(d29a5029e39cd44739682954f034f2d1f2e1cebf) )\
+
+// The below file also matches football-club_mtx_ass.bin
+#define sc2_foot_matrix \
+	ROM_REGION( 0x20000, "matrix", 0 )\
+	ROM_LOAD( "95000590.p1", 0x0000, 0x010000, CRC(6b78de57) SHA1(84638836cdbfa6e4b3b76cd38e238d12bb312c53) )\
+
 ROM_START( sc2brkfs )
 	ROM_REGION( 0x10000, "maincpu", 0 )
 	ROM_LOAD("big-breakfast_std_ar_var_a.bin",	0x00000, 0x10000, CRC(5f016daa) SHA1(25ee10138bddf453588e3c458268533a88a51217) )
 
-	ROM_REGION( 0x10000, "altrevs", 0 )
-	ROM_LOAD( "big-breakfast_dat_ac_10pnd-20p_a.bin", 0x0000, 0x010000, CRC(cc54617f) SHA1(078e56b948d68ebcfaf986dd0f15be64607d0e4f) )
-	ROM_LOAD( "big-breakfast_dat_ac_var_10pnd-20p_a.bin", 0x0000, 0x010000, CRC(a5967b05) SHA1(f0d4bc804181781a391fa052251c4bbf7d8f5e50) )
-	ROM_LOAD( "big-breakfast_dat_ac_var_8pnd_a.bin", 0x0000, 0x010000, CRC(d97dbf7a) SHA1(d46270ff69cbc636744fc902d38cc282613cfdd2) )
+	ROM_REGION( 0x80000, "upd", 0 )
+	ROM_LOAD("bigbreakfastsnd.bin", 0x00000, 0x80000, CRC(bf91aa2b) SHA1(40942165e65ff9b027015d500e5a9726c44ba1c5))
+ROM_END
+
+ROM_START( sc2brkfsp )
+	ROM_REGION( 0x10000, "maincpu", 0 )
 	ROM_LOAD( "big-breakfast_dat_ar_var_a.bin", 0x0000, 0x010000, CRC(ade2834f) SHA1(54914fbc8416b2d08c13c56088b1665e267e6777) )
-	ROM_LOAD( "big-breakfast_dat_ss_var_a.bin", 0x0000, 0x010000, CRC(57aff227) SHA1(5d4c6190194719b3fa5c02d30e7c6b59978c93c3) )
 
 	ROM_REGION( 0x80000, "upd", 0 )
 	ROM_LOAD("bigbreakfastsnd.bin", 0x00000, 0x80000, CRC(bf91aa2b) SHA1(40942165e65ff9b027015d500e5a9726c44ba1c5))
@@ -3903,13 +4065,26 @@
 ROM_START( sc2brkfsm )
 	ROM_REGION( 0x10000, "maincpu", 0 )
 	ROM_LOAD( "bigbreakfastcasino", 0x0000, 0x010000, CRC(db45b17b) SHA1(927513f6fe326b216b0f13f34bbbc9970ab4f0cc) )
-	ROM_LOAD( "98400022", 0x0000, 0x010000, CRC(66482cbb) SHA1(933d8ec98d5bc3026d547b657093e07f96fbdafa) )
+
+	ROM_REGION( 0x80000, "upd", 0 ) // might not be right for this version
+	ROM_LOAD("bigbreakfastsnd.bin", 0x00000, 0x80000, CRC(bf91aa2b) SHA1(40942165e65ff9b027015d500e5a9726c44ba1c5))
+ROM_END
+
+ROM_START( sc2brkfsm1 )
+	ROM_REGION( 0x10000, "maincpu", 0 )
 	ROM_LOAD( "98400020", 0x0000, 0x010000, CRC(7a18f268) SHA1(ad352d613333072c62c38a493cf3183d387b7562) )
 
 	ROM_REGION( 0x80000, "upd", 0 ) // might not be right for this version
 	ROM_LOAD("bigbreakfastsnd.bin", 0x00000, 0x80000, CRC(bf91aa2b) SHA1(40942165e65ff9b027015d500e5a9726c44ba1c5))
 ROM_END
 
+ROM_START( sc2brkfsm2 )
+	ROM_REGION( 0x10000, "maincpu", 0 )
+	ROM_LOAD( "98400022", 0x0000, 0x010000, CRC(66482cbb) SHA1(933d8ec98d5bc3026d547b657093e07f96fbdafa) )
+
+	ROM_REGION( 0x80000, "upd", 0 ) // might not be right for this version
+	ROM_LOAD("bigbreakfastsnd.bin", 0x00000, 0x80000, CRC(bf91aa2b) SHA1(40942165e65ff9b027015d500e5a9726c44ba1c5))
+ROM_END
 
 ROM_START( sc2brkfs1 )
 	ROM_REGION( 0x10000, "maincpu", 0 )
@@ -3919,6 +4094,14 @@
 	ROM_LOAD("bigbreakfastsnd.bin", 0x00000, 0x80000, CRC(bf91aa2b) SHA1(40942165e65ff9b027015d500e5a9726c44ba1c5))
 ROM_END
 
+ROM_START( sc2brkfs1p )
+	ROM_REGION( 0x10000, "maincpu", 0 )
+	ROM_LOAD( "big-breakfast_dat_ss_var_a.bin", 0x0000, 0x010000, CRC(57aff227) SHA1(5d4c6190194719b3fa5c02d30e7c6b59978c93c3) )
+
+	ROM_REGION( 0x80000, "upd", 0 )
+	ROM_LOAD("bigbreakfastsnd.bin", 0x00000, 0x80000, CRC(bf91aa2b) SHA1(40942165e65ff9b027015d500e5a9726c44ba1c5))
+ROM_END
+
 ROM_START( sc2brkfs2 )
 	ROM_REGION( 0x10000, "maincpu", 0 )
 	ROM_LOAD("big-breakfast_std_ac_var_jp-8_a.bin",	0x00000, 0x10000, CRC(2671af1b) SHA1(0a34dd2953a99be9fb2a128f9d1f7ddc0fc8242a) )
@@ -3935,6 +4118,15 @@
 	ROM_LOAD("bigbreakfastsnd.bin", 0x00000, 0x80000, CRC(bf91aa2b) SHA1(40942165e65ff9b027015d500e5a9726c44ba1c5))
 ROM_END
 
+ROM_START( sc2brkfs3p )
+	ROM_REGION( 0x10000, "maincpu", 0 )
+	ROM_LOAD( "big-breakfast_dat_ac_var_8pnd_a.bin", 0x0000, 0x010000, CRC(d97dbf7a) SHA1(d46270ff69cbc636744fc902d38cc282613cfdd2) )
+
+	ROM_REGION( 0x80000, "upd", 0 )
+	ROM_LOAD("bigbreakfastsnd.bin", 0x00000, 0x80000, CRC(bf91aa2b) SHA1(40942165e65ff9b027015d500e5a9726c44ba1c5))
+ROM_END
+
+
 ROM_START( sc2brkfs4 )
 	ROM_REGION( 0x10000, "maincpu", 0 )
 	ROM_LOAD("big-breakfast_std_ac_var_10pnd-20p_a.bin",	0x00000, 0x10000, CRC(d879feaa) SHA1(2656fbe018fe40194c2b77d289b77fabbc9e537c) )
@@ -3943,6 +4135,15 @@
 	ROM_LOAD("bigbreakfastsnd.bin", 0x00000, 0x80000, CRC(bf91aa2b) SHA1(40942165e65ff9b027015d500e5a9726c44ba1c5))
 ROM_END
 
+ROM_START( sc2brkfs4p )
+	ROM_REGION( 0x10000, "maincpu", 0 )
+	ROM_LOAD( "big-breakfast_dat_ac_var_10pnd-20p_a.bin", 0x0000, 0x010000, CRC(a5967b05) SHA1(f0d4bc804181781a391fa052251c4bbf7d8f5e50) )
+
+	ROM_REGION( 0x80000, "upd", 0 )
+	ROM_LOAD("bigbreakfastsnd.bin", 0x00000, 0x80000, CRC(bf91aa2b) SHA1(40942165e65ff9b027015d500e5a9726c44ba1c5))
+ROM_END
+
+
 ROM_START( sc2brkfs5 )
 	ROM_REGION( 0x10000, "maincpu", 0 )
 	ROM_LOAD("big-breakfast_std_ac_10pnd-20p_a.bin",	0x00000, 0x10000, CRC(55d7321c) SHA1(0b4a6b66aa64fbb3238539a2167f761d0910b814) )
@@ -3951,6 +4152,16 @@
 	ROM_LOAD("bigbreakfastsnd.bin", 0x00000, 0x80000, CRC(bf91aa2b) SHA1(40942165e65ff9b027015d500e5a9726c44ba1c5))
 ROM_END
 
+ROM_START( sc2brkfs5p )
+	ROM_REGION( 0x10000, "maincpu", 0 )
+	ROM_LOAD( "big-breakfast_dat_ac_10pnd-20p_a.bin", 0x0000, 0x010000, CRC(cc54617f) SHA1(078e56b948d68ebcfaf986dd0f15be64607d0e4f) )
+
+	ROM_REGION( 0x80000, "upd", 0 )
+	ROM_LOAD("bigbreakfastsnd.bin", 0x00000, 0x80000, CRC(bf91aa2b) SHA1(40942165e65ff9b027015d500e5a9726c44ba1c5))
+ROM_END
+
+
+
 
 ROM_START( sc2drwho )
 	ROM_REGION( 0x10000, "maincpu", 0 )
@@ -4133,502 +4344,1627 @@
 	ROM_LOAD("focsound.bin", 0x00000, 0x20000, CRC(fce86700) SHA1(546680dd85234608c1b7e850bad3165400fd981c))
 ROM_END
 
-
 ROM_START( sc2gslam )
 	ROM_REGION( 0x10000, "maincpu", 0 )
-	ROM_LOAD("95750843.bin", 0x00000, 0x10000, CRC(e159ddf6) SHA1(c897564a956becbd9d4c155df33b239e899156c0))
+	ROM_LOAD( "club-grand-slam_std_ac_ass.bin", 0x0000, 0x010000, CRC(b28dcd9c) SHA1(f20ef0f0a1b5cc287cf93a175fede98dde3fecf4) )
 
-	ROM_REGION( 0x10000, "altrevs", 0 )
-	ROM_LOAD( "95752056", 0x0000, 0x010000, CRC(b28dcd9c) SHA1(f20ef0f0a1b5cc287cf93a175fede98dde3fecf4) )
-	ROM_LOAD( "club-grand-slam_dat_ac_var_rot_ass.bin", 0x0000, 0x010000, CRC(d505db66) SHA1(6e40186a699a81138674e332acbd0d7d3939b9f6) )
+	sc2_gslam_sound
+ROM_END
+
+ROM_START( sc2gslamp )
+	ROM_REGION( 0x10000, "maincpu", 0 )
 	ROM_LOAD( "club-grand-slam_dat_acss.bin", 0x0000, 0x010000, CRC(82ff3cb9) SHA1(87794063421724201c8a3e67cd6e454b0f578c3e) )
-	ROM_LOAD( "club-grand-slam_std_ac_ass.bin", 0x0000, 0x010000, CRC(b28dcd9c) SHA1(f20ef0f0a1b5cc287cf93a175fede98dde3fecf4) )
 
-	ROM_REGION( 0x40000, "upd", 0 )
-	ROM_LOAD("gslamsnd.bin", 0x00000, 0x40000, CRC(9afb8b42) SHA1(20e108c0041412fcd7b2969701f47a4a99d3677c))
+	sc2_gslam_sound
+ROM_END
 
-	ROM_REGION( 0x80000, "altupd", 0 )
-	ROM_LOAD( "grandslamsnd.bin", 0x0000, 0x080000, CRC(e4af3787) SHA1(9aa40f7c4c4db3618b553505b02663c1d5f297c3) )
-	ROM_LOAD( "gslamsndb.bin", 0x0000, 0x080000, CRC(c9dfb6f5) SHA1(6e529c210b26e7ce164cebbff8ec314c6fa8f7bf) )
+ROM_START( sc2gslam1 )
+	ROM_REGION( 0x10000, "maincpu", 0 )
+	ROM_LOAD("95750843.bin", 0x00000, 0x10000, CRC(e159ddf6) SHA1(c897564a956becbd9d4c155df33b239e899156c0))
+
+	sc2_gslam_sound_alt
+ROM_END
+
+ROM_START( sc2gslam1p )
+	ROM_REGION( 0x10000, "maincpu", 0 )
+	ROM_LOAD( "club-grand-slam_dat_ac_var_rot_ass.bin", 0x0000, 0x010000, CRC(d505db66) SHA1(6e40186a699a81138674e332acbd0d7d3939b9f6) )
+
+	sc2_gslam_sound_alt
 ROM_END
 
+ROM_START( sc2gslam2 )
+	ROM_REGION( 0x10000, "maincpu", 0 )
+	ROM_LOAD( "95752056", 0x0000, 0x010000, CRC(b28dcd9c) SHA1(f20ef0f0a1b5cc287cf93a175fede98dde3fecf4) )
 
+	sc2_gslam_sound_alt
+ROM_END
 
 ROM_START( sc2cshcl )
 	ROM_REGION( 0x10000, "maincpu", 0 )
-	ROM_LOAD( "club_cashino_dat_ac_f65_rot_ass.bin", 0x0000, 0x010000, CRC(c2552162) SHA1(2c373b60588d870acd34d88025f6bb14687694fb) )
-
-	ROM_REGION( 0x10000, "altrevs", 0 )
-	ROM_LOAD( "club_cashino_dat_ac_var_ass.bin", 0x0000, 0x010000, CRC(b529604e) SHA1(87f8dca7e570472697de2cbe7565a038503a6251) )
 	ROM_LOAD( "club_cashino_std_ac_f65_rot_ass.bin", 0x0000, 0x010000, CRC(23aa2c72) SHA1(155df9b501cf5ae9eb3afca48c4100617793ac09) )
-	ROM_LOAD( "club_cashino_std_ac_var_ass.bin", 0x0000, 0x010000, CRC(0e9fad24) SHA1(d14569f106ba29f9cb7769234f5531382e28bd69) )
 
 	ROM_REGION( 0x80000, "upd", 0 )
 	ROM_LOAD( "cashsnd", 0x0000, 0x080000, CRC(807d37a6) SHA1(bd5f7c39a64a562e96a850a2cc82bfe3f74f1e54) )
 ROM_END
 
-
-ROM_START( sc2catms )
+ROM_START( sc2cshclp )
 	ROM_REGION( 0x10000, "maincpu", 0 )
-	ROM_LOAD( "cat and mouse p1.bin", 0x0000, 0x010000, CRC(b33b2a75) SHA1(ac57b4d33ac1218e39b8bbd669c40bdbb3839ccf) )
-
-	ROM_REGION( 0x10000, "altrevs", 0 )
-	ROM_LOAD( "cat and mouse ver puss7.2.bin", 0x0000, 0x010000, CRC(6968bf9c) SHA1(c44faf2e5b391bee43021ad8544fb8d502f90433) )
-	ROM_LOAD( "cat-and-mouse-mk2_dat_20p_uk94_ass.bin", 0x0000, 0x010000, CRC(6806cfad) SHA1(8eb427688bc19e9b1508de1afa584bcba7e8d421) )
-	ROM_LOAD( "cat-and-mouse-mk2_dat_ar_10p_ass.bin", 0x0000, 0x010000, CRC(c332595b) SHA1(3ea62b98129913b2ff576c42cfa7fe4d15a34b8e) )
-	ROM_LOAD( "cat-and-mouse-mk2_dat_ar_20p_uk94_ass.bin", 0x0000, 0x010000, CRC(22e2d319) SHA1(ca3f335f9f52cd152e420bd6c2e15fc1fac4eb29) )
-	ROM_LOAD( "cat-and-mouse-mk2_dat_ar_ac_8pnd-20p_uk94_ass.bin", 0x0000, 0x010000, CRC(87b5fc94) SHA1(3e2b4aba0847fe1958710bff394ea98e02276b43) )
-	ROM_LOAD( "cat-and-mouse-mk2_std_20p_uk94_ass.bin", 0x0000, 0x010000, CRC(d8e72750) SHA1(b0431cbb311c88b4701bae3bbfdf1d45a070181c) )
-	ROM_LOAD( "cat-and-mouse-mk2_std_ar_20p_uk94_ass.bin", 0x0000, 0x010000, CRC(95beca0c) SHA1(6e2b175139c616cf80f020588b073f325a0c2684) )
-	ROM_LOAD( "cat-and-mouse-mk2_std_ar_ac_8pnd-20p_uk94_ass.bin", 0x0000, 0x010000, CRC(c5fccfb0) SHA1(c427b42da60cd14516991a08a08f68421fa9ff88) )
-	ROM_LOAD( "cat-and-mouse_dat_ac_10pnd-25p_ass.bin", 0x0000, 0x010000, CRC(d9811472) SHA1(dffab64155ed2c5193c24a660af7ad7c3c7bc093) )
-	ROM_LOAD( "cat-and-mouse_dat_ac_10pnd_ass.bin", 0x0000, 0x010000, CRC(40ba729e) SHA1(d7b4fe209588d77921d6c37d1739805aed80f103) )
-	ROM_LOAD( "cat-and-mouse_std_ac_10pnd-25p_ass.bin", 0x0000, 0x010000, CRC(4c538143) SHA1(4045599cfe57f442ac58aa1f0ed3a03ce63e2e4c) )
-	ROM_LOAD( "cat-and-mouse_std_ac_10pnd_ass.bin", 0x0000, 0x010000, CRC(05396936) SHA1(61d976c22ba82bbff12fdcfb6b9320efebc9ad37) )
-	ROM_LOAD( "cm20std", 0x0000, 0x010000, CRC(74ca0fd5) SHA1(2345bf3810820a12c613013fedad936ab9134b22) )
-	ROM_LOAD( "cnm20mk2", 0x0000, 0x010000, CRC(0604a78a) SHA1(c75b90f93b1d36928ad46643cfce03dda2b20408) )
+	ROM_LOAD( "club_cashino_dat_ac_f65_rot_ass.bin", 0x0000, 0x010000, CRC(c2552162) SHA1(2c373b60588d870acd34d88025f6bb14687694fb) )
 
 	ROM_REGION( 0x80000, "upd", 0 )
-	ROM_LOAD( "catandmousesnd.bin", 0x0000, 0x080000, CRC(00d3b224) SHA1(5ae35a7bfa65e8343564e6f6a219bc674710fadc) )
+	ROM_LOAD( "cashsnd", 0x0000, 0x080000, CRC(807d37a6) SHA1(bd5f7c39a64a562e96a850a2cc82bfe3f74f1e54) )
 ROM_END
 
-
-
-
-ROM_START( sc2eggs )
+ROM_START( sc2cshcl1 )
 	ROM_REGION( 0x10000, "maincpu", 0 )
-	ROM_LOAD( "eggs-on-legs_std_wi_ac_10pnd-20p_ass.bin", 0x0000, 0x010000, CRC(3fdad116) SHA1(d5fc405af8b14d8b85acb10aaa3c8a219753c864) )
+	ROM_LOAD( "club_cashino_std_ac_var_ass.bin", 0x0000, 0x010000, CRC(0e9fad24) SHA1(d14569f106ba29f9cb7769234f5531382e28bd69) )
 
 	ROM_REGION( 0x10000, "altrevs", 0 )
-	ROM_LOAD( "eggs-on-legs_dat_ac_var_10pnd_ass.bin", 0x0000, 0x010000, CRC(718915f2) SHA1(717b57c0e81a48db005516135fdd4d82f7cfda28) )
-	ROM_LOAD( "eggs-on-legs_dat_wi_ac_10pnd-20p_ass.bin", 0x0000, 0x010000, CRC(cdde5a4d) SHA1(b61e61193db4921217a7c285fd8fe2780d1f8091) )
-	ROM_LOAD( "95750746.p1", 0x0000, 0x010000, CRC(a4b13487) SHA1(7ef2953ca11526bbae57b1aebb7a90de59c2d379) )
+	ROM_LOAD( "club_cashino_dat_ac_var_ass.bin", 0x0000, 0x010000, CRC(b529604e) SHA1(87f8dca7e570472697de2cbe7565a038503a6251) )
 
 	ROM_REGION( 0x80000, "upd", 0 )
-	ROM_LOAD( "eggsonlegssnd.bin", 0x0000, 0x080000, CRC(24fef504) SHA1(75a05e0cf064f736dd9164c24ccef77a46aaee94) )
+	ROM_LOAD( "cashsnd", 0x0000, 0x080000, CRC(807d37a6) SHA1(bd5f7c39a64a562e96a850a2cc82bfe3f74f1e54) )
 ROM_END
 
-
-ROM_START( sc2gsclb )
+ROM_START( sc2cshcl1p )
 	ROM_REGION( 0x10000, "maincpu", 0 )
-	ROM_LOAD( "club-game-show_std_ac_p65_ass.bin", 0x0000, 0x010000, CRC(9a390095) SHA1(ee4b08956de0b018b9ceaf16a6410463053c1f3d) )
-
-	ROM_REGION( 0x10000, "altrevs", 0 )
-	ROM_LOAD( "club-game-show_dat_ac_250pnd-25p_ass.bin", 0x0000, 0x010000, CRC(299b89f3) SHA1(eb78378410ca2380ec564e8268a51309dc8044ce) )
-	ROM_LOAD( "club-game-show_dat_ac_250pnd-25p_p65_ass.bin", 0x0000, 0x010000, CRC(5d59e87e) SHA1(91684551db11d95768c364515cf5cd337b3f482b) )
-	ROM_LOAD( "club-game-show_dat_ac_p65_ass.bin", 0x0000, 0x010000, CRC(61adb76f) SHA1(a7fcc6504d5eeae664b9aaca190bbf43bd989c93) )
-	ROM_LOAD( "club-game-show_dat_ac_var_ass.bin", 0x0000, 0x010000, CRC(85cf033f) SHA1(ca7e506437e1ff229f2d79bedb13ae0fe5dd2696) )
-	ROM_LOAD( "club-game-show_dat_ac_var_ffp_ass.bin", 0x0000, 0x010000, CRC(7e003d2a) SHA1(f8a6f6810b1733f46e470e89fa821cd51fbe1c5e) )
-	ROM_LOAD( "club-game-show_dat_fe_ac_ass.bin", 0x0000, 0x010000, CRC(b5a03c26) SHA1(ef1bc28905a8a9db71299f5c30a15c5576766346) )
-	ROM_LOAD( "club-game-show_std_ac_250pnd-24p_p65_ass.bin", 0x0000, 0x010000, CRC(142d828a) SHA1(2fe40e9d641be1cf89cfe9fe5cd4b29dd9ea01e7) )
-	ROM_LOAD( "club-game-show_std_ac_var_ass.bin", 0x0000, 0x010000, CRC(01ae9d52) SHA1(3b85a7ebc346d4eb6a16b2b9a03aa12220020aff) )
-	ROM_LOAD( "club-game-show_std_ac_var_ffp_ass.bin", 0x0000, 0x010000, CRC(d2819fc3) SHA1(23c7cbf9e04913f5cb62ef6accdd5b470eed3cd4) )
-	ROM_LOAD( "club-game-show_std_fe_ac_ass.bin", 0x0000, 0x010000, CRC(6e479cc4) SHA1(99c15b0d1584ab7b460f273de825eb17681c5d0a) )
-	ROM_LOAD( "gameshow.bin", 0x0000, 0x010000, CRC(babeb912) SHA1(41bc1cf82bef84f840998af1278c55ea1727a163) )
-	ROM_LOAD( "95750844.p1", 0x0000, 0x010000, CRC(36efa743) SHA1(0f5392f55e42d7ac17e179c966997f41859f925a) )
+	ROM_LOAD( "club_cashino_dat_ac_var_ass.bin", 0x0000, 0x010000, CRC(b529604e) SHA1(87f8dca7e570472697de2cbe7565a038503a6251) )
 
 	ROM_REGION( 0x80000, "upd", 0 )
-	//ROM_LOAD( "gameshowsnd.bin", 0x0000, 0x080000, CRC(e1a0323f) SHA1(a015d99c882962651869d8ec71a6c17a1cba687f) )
-	ROM_LOAD( "95004024.bin", 0x0000, 0x080000, CRC(e1a0323f) SHA1(a015d99c882962651869d8ec71a6c17a1cba687f) )
+	ROM_LOAD( "cashsnd", 0x0000, 0x080000, CRC(807d37a6) SHA1(bd5f7c39a64a562e96a850a2cc82bfe3f74f1e54) )
 ROM_END
 
+	//There are two distinct builds here, one clearly marked up as mark 2. For sanity's sake, though they share sound, I'm assigning them as separate entities
 
-
-ROM_START( sc2cpg )
+ROM_START( sc2catms )
 	ROM_REGION( 0x10000, "maincpu", 0 )
-	ROM_LOAD( "club-pharaohs-gold_std_ac_250pnd-20p_rot_ass.bin", 0x0000, 0x010000, CRC(f83a68dc) SHA1(1a7aa08835d03116199034378ae0c617520a5ac6) )
-
-	ROM_REGION( 0x10000, "altrevs", 0 )
-	ROM_LOAD( "club-pharaohs-gold_dat_ac_250pnd-20p_rot_ass.bin", 0x0000, 0x010000, CRC(2de3b252) SHA1(02c3bfabd5c732e37e71278be5aad0b6b44d28c6) )
-	ROM_LOAD( "club-pharaohs-gold_dat_ac_var_ass.bin", 0x0000, 0x010000, CRC(bb790c4b) SHA1(d1126b9848047f15a65119e6446caced2c982287) )
-	ROM_LOAD( "club-pharaohs-gold_dat_fe_ac_p65_rot_ass.bin", 0x0000, 0x010000, CRC(4ccba14d) SHA1(a0529a732a1a8c5c9a3d9830072ff1003c80b7d2) )
-	ROM_LOAD( "club-pharaohs-gold_std_ac_var_ass.bin", 0x0000, 0x010000, CRC(9376c3c4) SHA1(9e67c982dfb838cde538d0893ea36eafe8bda2d3) )
-	ROM_LOAD( "club-pharaohs-gold_std_fe_ac_p65_rot_ass.bin", 0x0000, 0x010000, CRC(e97c5bb4) SHA1(4df5f50bbfe453fbc351855dc6f6a24296563498) )
+	ROM_LOAD( "cat and mouse p1.bin", 0x0000, 0x010000, CRC(b33b2a75) SHA1(ac57b4d33ac1218e39b8bbd669c40bdbb3839ccf) )
 
-	ROM_REGION( 0x80000, "upd", 0 )
-	ROM_LOAD( "pharaohsgoldsnd.bin", 0x0000, 0x080000, CRC(7d67d53e) SHA1(159e0e9af1cfd6adc141daaa0f75d38af55218c3) )
+	sc2_catms_sound
 ROM_END
 
-
-ROM_START( sc2suprz )
+ROM_START( sc2catms1 )
 	ROM_REGION( 0x10000, "maincpu", 0 )
-	ROM_LOAD( "surprize-surprise_std_ga_20p_ass.bin", 0x0000, 0x010000, CRC(7e52c975) SHA1(a610f7170fda13f64e805e3d99b5f57c61206cfe) )
-
-	ROM_REGION( 0x10000, "altrevs", 0 )
-	ROM_LOAD( "surprize-surprise_dat_ac_6pnd-20p_ass.bin", 0x0000, 0x010000, CRC(7e0b263e) SHA1(bcbd82a87e7db65db22e55d9111b0f819a62150a) )
-	ROM_LOAD( "surprize-surprise_dat_ga_20p_ass.bin", 0x0000, 0x010000, CRC(8ee54a57) SHA1(471a06d9840ecbf850c8896f8bf45264c0b8390f) )
-	ROM_LOAD( "surprize-surprise_dat_var_ass.bin", 0x0000, 0x010000, CRC(37ab423e) SHA1(6b2ab927eb851b8f77eb474a1c5b68c335a17b2f) )
-	ROM_LOAD( "surprize-surprise_std_ac_6pnd-20p_ass.bin", 0x0000, 0x010000, CRC(297959d7) SHA1(9bc8bc3d1be1f282573a3ad6994f06ee7bb64dfd) )
-	ROM_LOAD( "surprize-surprise_std_var_ass.bin", 0x0000, 0x010000, CRC(5ef85273) SHA1(2ca9e3245c97fbed97a781e135fbb79df5b1bf18) )
-	ROM_LOAD( "surprise-surprize-6pound.bin", 0x0000, 0x010000, CRC(d00de4ab) SHA1(cdee9c2c27ab6bad8b0c633ce396fbe2987dbb61) )
+	ROM_LOAD( "cat-and-mouse_std_ac_10pnd-25p_ass.bin", 0x0000, 0x010000, CRC(4c538143) SHA1(4045599cfe57f442ac58aa1f0ed3a03ce63e2e4c) )
 
-	ROM_REGION( 0x80000, "upd", 0 )
-	ROM_LOAD( "surprisesurprizesnd.bin", 0x0000, 0x01fedb, CRC(c0981343) SHA1(71278c3446cf204a31415dd2ed8f1de7f7a16645) )
+	sc2_catms_sound
 ROM_END
 
-
-ROM_START( sc2motd )
+ROM_START( sc2catms1p )
 	ROM_REGION( 0x10000, "maincpu", 0 )
-	ROM_LOAD( "match-of-the-day_std_20p_ass.bin", 0x0000, 0x010000, CRC(441931ef) SHA1(9c8c79470dda2a6589d04e4eb8d00d8a984bd1ed) )
-
-	ROM_REGION( 0x10000, "altrevs", 0 )
-	ROM_LOAD( "match-of-the-day_dat_20p_uk94_ass.bin", 0x0000, 0x010000, CRC(fa9216fa) SHA1(3d5d164419f022488e60e738958d3f66f4206e87) )
-	ROM_LOAD( "match-of-the-day_dat_8pnd-20p_ass.bin", 0x0000, 0x010000, CRC(da77960d) SHA1(e6fc97994612d9280b60df6600c26aa7919381d2) )
-	ROM_LOAD( "match-of-the-day_dat_ac_10pnd_tri1_ass.bin", 0x0000, 0x010000, CRC(948b3ede) SHA1(f1c7b4e9fb83ba848d4d8a3ab02a1a5e3b630054) )
-	ROM_LOAD( "match-of-the-day_dat_ac_10pnd_uk94_ass.bin", 0x0000, 0x010000, CRC(632325d8) SHA1(92c68b51b4e594bec5d9af43a697a4dd912ed864) )
-	ROM_LOAD( "match-of-the-day_dat_ac_8pnd-20p_ass.bin", 0x0000, 0x010000, CRC(86baaf46) SHA1(acb9c5cad4c35621219380a997ae67accaea4206) )
-	ROM_LOAD( "match-of-the-day_dat_ar_20p_ass.bin", 0x0000, 0x010000, CRC(ab1c44b9) SHA1(ce34570fabcb2c6ceab48ef7c4367ccafa95ef1a) )
-	ROM_LOAD( "match-of-the-day_dat_ar_20p_uk94_ass.bin", 0x0000, 0x010000, CRC(f5adb4aa) SHA1(85afff3251e13808f140d6e58f1c9e2e23ce9d8c) )
-	ROM_LOAD( "match-of-the-day_dat_ms_20p_ass.bin", 0x0000, 0x010000, CRC(77710913) SHA1(709fff877ee863021e958bcecbd5cd58a977ea09) )
-	ROM_LOAD( "match-of-the-day_dat_ss_20p_ass.bin", 0x0000, 0x010000, CRC(19dafe2d) SHA1(8a7bc4bfb7acd5386fdcadf91c2ba4f5615fa3c9) )
-	ROM_LOAD( "match-of-the-day_dat_wi_ac_10pnd_ass.bin", 0x0000, 0x010000, CRC(412a30ed) SHA1(c7118954c086fb1243e441ed7728d801667e98ba) )
-	ROM_LOAD( "match-of-the-day_std_8pnd-20p_ass.bin", 0x0000, 0x010000, CRC(8042a61d) SHA1(3e0e75918d6df2d4ed537ee532d1a7fa0bb359b7) )
-	ROM_LOAD( "match-of-the-day_std_ac_10pnd_tri1_ass.bin", 0x0000, 0x010000, CRC(10b7a217) SHA1(615bf8e6d1b79c96efd91335a9c6f5db0df95891) )
-	ROM_LOAD( "match-of-the-day_std_ac_10pnd_uk94_ass.bin", 0x0000, 0x010000, CRC(f75d128d) SHA1(7da2fb6bc7265848c20cfc137de846439af83b90) )
-	ROM_LOAD( "match-of-the-day_std_ac_var_uk94.bin", 0x0000, 0x010000, CRC(ae2330f0) SHA1(d309284f0f0333f6e065f30d7ac9416b2fc4ee1f) )
-	ROM_LOAD( "match-of-the-day_std_ar_20p_ass.bin", 0x0000, 0x010000, CRC(27f942a3) SHA1(928d3c2eef6b202c0d71b0843f64aba15aab4f42) )
-	ROM_LOAD( "match-of-the-day_std_ar_20p_uk94_ass.bin", 0x0000, 0x010000, CRC(96687a5a) SHA1(dafd7b0af3e26d609b5927c431f4adf2f424322a) )
-	ROM_LOAD( "match-of-the-day_std_ss_20p_ass.bin", 0x0000, 0x010000, CRC(ce926573) SHA1(dff243d0eb12d4c13c8334099c5958e897cb8bd5) )
-	ROM_LOAD( "match-of-the-day_std_wi_ac_10pnd_ass.bin", 0x0000, 0x010000, CRC(b059fe93) SHA1(33d15c464f3f80f4600d961ddade0b6a661747ba) )
-	ROM_LOAD( "motd6ac", 0x0000, 0x010000, CRC(d8e7811c) SHA1(ac67683984465aaf8a96322e71ab7b7bffe92361) )
+	ROM_LOAD( "cat-and-mouse_dat_ac_10pnd-25p_ass.bin", 0x0000, 0x010000, CRC(d9811472) SHA1(dffab64155ed2c5193c24a660af7ad7c3c7bc093) )
 
-	ROM_REGION( 0x80000, "upd", 0 )
-	ROM_LOAD( "modsndf.bin", 0x0000, 0x080000, CRC(088471f5) SHA1(49fb22daf04450186e9a83aee3312bb85ccf6842) )
+	sc2_catms_sound
 ROM_END
 
+ROM_START( sc2catms2 )
+	ROM_REGION( 0x10000, "maincpu", 0 )
+	ROM_LOAD( "cat-and-mouse_std_ac_10pnd_ass.bin", 0x0000, 0x010000, CRC(05396936) SHA1(61d976c22ba82bbff12fdcfb6b9320efebc9ad37) )
 
+	sc2_catms_sound
+ROM_END
 
-ROM_START( sc2easy )
+ROM_START( sc2catms2p )
 	ROM_REGION( 0x10000, "maincpu", 0 )
-	ROM_LOAD( "easy-money_std_ac_var_8-10pnd_ass.bin", 0x0000, 0x010000, CRC(e9f581ca) SHA1(aee8a1af609921a0b33db7b460e4a58517bf9276) )
-
-	ROM_REGION( 0x10000, "altrevs", 0 )
-	ROM_LOAD( "easy-money_dat_ac_var_8-10pnd_ass.bin", 0x0000, 0x010000, CRC(e5633ac3) SHA1(d868d782e7d5f6c62ab8958150857336b7acff97) )
-	ROM_LOAD( "easy-money_dat_wi_ac_10pnd_tri3_ass.bin", 0x0000, 0x010000, CRC(f841d5cf) SHA1(05afdfa483271635b530652385e2e566920e533d) )
-	ROM_LOAD( "easy-money_dat_wi_ac_var_10pnd-20p_ass.bin", 0x0000, 0x010000, CRC(97f62e2d) SHA1(0884ddd0b25e78dd402983158e8c623ff4326cbd) )
-	ROM_LOAD( "easy-money_std_wi_ac_10pnd_tri3_ass.bin", 0x0000, 0x010000, CRC(38434925) SHA1(17148ba440c8fd139f7889a211a914ed679a195f) )
-	ROM_LOAD( "easy-money_std_wi_ac_var_10pnd-20p_ass.bin", 0x0000, 0x010000, CRC(05622afc) SHA1(169a492870a70aeb17078b2b27c36f5b82274b3f) )
+	ROM_LOAD( "cat-and-mouse_dat_ac_10pnd_ass.bin", 0x0000, 0x010000, CRC(40ba729e) SHA1(d7b4fe209588d77921d6c37d1739805aed80f103) )
 
-	ROM_REGION( 0x80000, "upd", 0 )
-	ROM_LOAD( "easy-money_snd.bin", 0x0000, 0x080000, CRC(56d224c5) SHA1(43b81a1a9a7d30ef7bfb2bbc61e3106faa927778) )
+	sc2_catms_sound
 ROM_END
 
+ROM_START( sc2catms3 )
+	ROM_REGION( 0x10000, "maincpu", 0 )
+	ROM_LOAD( "cm20std", 0x0000, 0x010000, CRC(74ca0fd5) SHA1(2345bf3810820a12c613013fedad936ab9134b22) )
 
+	sc2_catms_sound
+ROM_END
 
-ROM_START( sc2majes )
+ROM_START( sc2catms4 )
 	ROM_REGION( 0x10000, "maincpu", 0 )
-	ROM_LOAD( "majestic.p1", 0x0000, 0x010000, CRC(37289a5f) SHA1(a9d86ed16fc2ff2b83b60e48a1704b4e189c3ac7) )
+	ROM_LOAD( "cm20std", 0x0000, 0x010000, CRC(74ca0fd5) SHA1(2345bf3810820a12c613013fedad936ab9134b22) )
 
-	ROM_REGION( 0x80000, "upd", 0 )
-	ROM_LOAD( "majesticsnd.bin", 0x0000, 0x080000, CRC(3ee3fee3) SHA1(6a5e72e8a808d870a84a0e3523eebfadfab6d5df) )
+	sc2_catms_sound
 ROM_END
 
-
-ROM_START( sc2luvv )
+ROM_START( sc2ctms2 )
 	ROM_REGION( 0x10000, "maincpu", 0 )
-	ROM_LOAD("95750808.bin", 0x00000, 0x10000, CRC(e6668fc7) SHA1(71dd412114c6386cba72e2b29ea07f2d99d14065))
-
-	ROM_REGION( 0x20000, "matrix", 0 )
-	ROM_LOAD("mtx_ass.bin",	 0x00000, 0x10000, CRC(cfdd7bb2) SHA1(90086aaff743a7b2385488af1e8a126029113028))
+	ROM_LOAD( "cnm20mk2", 0x0000, 0x010000, CRC(0604a78a) SHA1(c75b90f93b1d36928ad46643cfce03dda2b20408) )
 
-	ROM_REGION( 0x20000, "altmatrix", 0 )
-	ROM_LOAD( "luvvley-jubbley_mat_ass.bin", 0x0000, 0x010000, CRC(e4e06767) SHA1(bee2385c2a9c7ca39ff6a599f827ddba4324b903) )
-	ROM_LOAD( "95000575.mtx", 0x0000, 0x0054e8, CRC(d81296df) SHA1(c248cdd5eb59a19fab9098d5bee2c60e9e474fd6) )
-	ROM_LOAD( "95000584.mtx", 0x0000, 0x0054d3, CRC(d372b3ef) SHA1(076460d8aaf996d80397da2ebc32e8f1efb63572) )
+	sc2_catms_sound
+ROM_END
 
-	ROM_REGION( 0x10000, "altrevs", 0 )
-	ROM_LOAD( "luvvley-jubbley_dat_ac_10pnd-20p_ass.bin", 0x0000, 0x010000, CRC(9dee74fc) SHA1(d29756d743b781ab9ce7baf990f4a2cc0e9d7972) )
-	ROM_LOAD( "luvvley-jubbley_dat_ac_10pnd-25p_ass.bin", 0x0000, 0x010000, CRC(355210a0) SHA1(c03e1109ee1a419fc4ebdcf861d5220303a9c587) )
-	ROM_LOAD( "luvvley-jubbley_dat_ac_4pnd-5p_ass.bin", 0x0000, 0x010000, CRC(4b3155b8) SHA1(aaba2e3d54a2b099b63ee4f5d3560d8eb562c4f1) )
-	ROM_LOAD( "luvvley-jubbley_dat_ga_20p_ass.bin", 0x0000, 0x010000, CRC(8c0a6180) SHA1(1c1ee2b5081ee901b5929405a78d3e7a7989916a) )
-	ROM_LOAD( "luvvley-jubbley_dat_ms_20p_ass.bin", 0x0000, 0x010000, CRC(886a3a8e) SHA1(4c986e0c7278bd058ce2df2d755cbc8e4f31b3fa) )
-	ROM_LOAD( "luvvley-jubbley_std_ac_4pnd-5p_ass.bin", 0x0000, 0x010000, CRC(065ee9bb) SHA1(5d46f0e1b5d48dc94b9843998dedf6d3dfc83e3c) )
-	ROM_LOAD( "luvvley-jubbley_std_ms_20p_ass.bin", 0x0000, 0x010000, CRC(d40a59d0) SHA1(7173fc6d349868b9194c4ad581762d299dfb1c69) )
-	ROM_LOAD( "luvvley-jubbley_std_ac_10pnd-20p_a.bin", 0x0000, 0x010000, CRC(e4440803) SHA1(be9b49cbe2cfcaa0e640365e190da9c3fcf82bea) )
-	ROM_LOAD( "luvvley-jubbley_std_ac_10pnd-20p_ass.bin", 0x0000, 0x010000, CRC(e4440803) SHA1(be9b49cbe2cfcaa0e640365e190da9c3fcf82bea) )
+ROM_START( sc2ctms21 )
+	ROM_REGION( 0x10000, "maincpu", 0 )
+	ROM_LOAD( "cat-and-mouse-mk2_std_ar_ac_8pnd-20p_uk94_ass.bin", 0x0000, 0x010000, CRC(c5fccfb0) SHA1(c427b42da60cd14516991a08a08f68421fa9ff88) )
 
-	ROM_REGION( 0x80000, "upd", 0 )
-	ROM_LOAD("snd.bin",		 0x00000, 0x80000, CRC(19efac32) SHA1(26f901fc11f052a4d3cff67f8f61dcdd04f3dc22))
+	sc2_catms_sound
 ROM_END
 
+ROM_START( sc2ctms21p )
+	ROM_REGION( 0x10000, "maincpu", 0 )
+	ROM_LOAD( "cat-and-mouse-mk2_dat_ar_ac_8pnd-20p_uk94_ass.bin", 0x0000, 0x010000, CRC(87b5fc94) SHA1(3e2b4aba0847fe1958710bff394ea98e02276b43) )
 
+	sc2_catms_sound
+ROM_END
 
-ROM_START( sc2ptytm )
+ROM_START( sc2ctms22 )
 	ROM_REGION( 0x10000, "maincpu", 0 )
-	ROM_LOAD( "95750806.p1", 0x0000, 0x010000, CRC(4e98c6c6) SHA1(7f4ec51f384b5203229da28f39c3127cd40cf67d) )
-
-	ROM_REGION( 0x10000, "altrevs", 0 )
-	ROM_LOAD( "party-time_dat_ac_4pnd-10p_ass.bin", 0x0000, 0x010000, CRC(a33a6d08) SHA1(cf93f42971978b00a15e17d4da6bb6e16e8f1fab) )
-	ROM_LOAD( "partytime.bin", 0x0000, 0x010000, CRC(20ef430c) SHA1(b5d35704da425e7ca84500071f34b4d65d87b9fa) )
+	ROM_LOAD( "cat-and-mouse-mk2_std_ar_20p_uk94_ass.bin", 0x0000, 0x010000, CRC(95beca0c) SHA1(6e2b175139c616cf80f020588b073f325a0c2684) )
 
-	ROM_REGION( 0x20000, "matrix", 0 )
-	ROM_LOAD( "party-time_mtx_ass.bin", 0x0000, 0x010000, CRC(0672a9f4) SHA1(9e8e01aaa081ffb68aa494fe9dbae0620da0f6b9) )
+	sc2_catms_sound
+ROM_END
 
-	ROM_REGION( 0x20000, "altmatrix", 0 )
-	ROM_LOAD( "95000585.mtx", 0x0000, 0x004a27, CRC(84682dd9) SHA1(038dd54c071d59f164b39b53c4e0888113489cf1) )
-	ROM_LOAD( "partydot.bin", 0x0000, 0x010000, CRC(8a09b858) SHA1(bc932bebc7718da2b97e5f6ef06eb739748353f4) )
+ROM_START( sc2ctms22p )
+	ROM_REGION( 0x10000, "maincpu", 0 )
+	ROM_LOAD( "cat-and-mouse-mk2_dat_ar_20p_uk94_ass.bin", 0x0000, 0x010000, CRC(22e2d319) SHA1(ca3f335f9f52cd152e420bd6c2e15fc1fac4eb29) )
 
-	ROM_REGION( 0x80000, "upd", 0 )
-	ROM_LOAD( "partysnd1.bin", 0x0000, 0x020000, CRC(b5a5cc9e) SHA1(c9b132ad0d1ce9ff6b56ebde89d5006a5cf7dff6) )
+	sc2_catms_sound
 ROM_END
 
+ROM_START( sc2ctms23 )
+	ROM_REGION( 0x10000, "maincpu", 0 )
+	ROM_LOAD( "cat-and-mouse-mk2_std_20p_uk94_ass.bin", 0x0000, 0x010000, CRC(d8e72750) SHA1(b0431cbb311c88b4701bae3bbfdf1d45a070181c) )
 
+	sc2_catms_sound
+ROM_END
 
-ROM_START( sc2ofool )
+ROM_START( sc2ctms23p )
 	ROM_REGION( 0x10000, "maincpu", 0 )
-	ROM_LOAD( "fools & horses 10m 6.bin", 0x0000, 0x010000, CRC(5fe48a02) SHA1(fd5b07a58567e0c5eb75bf1526a853b3a60ddfa9) )
+	ROM_LOAD( "cat-and-mouse-mk2_dat_20p_uk94_ass.bin", 0x0000, 0x010000, CRC(6806cfad) SHA1(8eb427688bc19e9b1508de1afa584bcba7e8d421) )
+
+	sc2_catms_sound
+ROM_END
+
+ROM_START( sc2ctms24p )
+	ROM_REGION( 0x10000, "maincpu", 0 )
+	ROM_LOAD( "cat-and-mouse-mk2_dat_ar_10p_ass.bin", 0x0000, 0x010000, CRC(c332595b) SHA1(3ea62b98129913b2ff576c42cfa7fe4d15a34b8e) )
+
+	sc2_catms_sound
+ROM_END
+
+ROM_START( sc2ctms25 )
+	ROM_REGION( 0x10000, "maincpu", 0 )
+	ROM_LOAD( "cat and mouse ver puss7.2.bin", 0x0000, 0x010000, CRC(6968bf9c) SHA1(c44faf2e5b391bee43021ad8544fb8d502f90433) )
+
+	sc2_catms_sound
+ROM_END
+
+ROM_START( sc2eggs )
+	ROM_REGION( 0x10000, "maincpu", 0 )
+	ROM_LOAD( "eggs-on-legs_std_wi_ac_10pnd-20p_ass.bin", 0x0000, 0x010000, CRC(3fdad116) SHA1(d5fc405af8b14d8b85acb10aaa3c8a219753c864) )
+
+	ROM_REGION( 0x80000, "upd", 0 )
+	ROM_LOAD( "eggsonlegssnd.bin", 0x0000, 0x080000, CRC(24fef504) SHA1(75a05e0cf064f736dd9164c24ccef77a46aaee94) )
+ROM_END
+
+ROM_START( sc2eggsp )
+	ROM_REGION( 0x10000, "maincpu", 0 )
+	ROM_LOAD( "eggs-on-legs_dat_wi_ac_10pnd-20p_ass.bin", 0x0000, 0x010000, CRC(cdde5a4d) SHA1(b61e61193db4921217a7c285fd8fe2780d1f8091) )
+
+	ROM_REGION( 0x80000, "upd", 0 )
+	ROM_LOAD( "eggsonlegssnd.bin", 0x0000, 0x080000, CRC(24fef504) SHA1(75a05e0cf064f736dd9164c24ccef77a46aaee94) )
+ROM_END
+
+ROM_START( sc2eggs1 )
+	ROM_REGION( 0x10000, "maincpu", 0 )
+	ROM_LOAD( "95750746.p1", 0x0000, 0x010000, CRC(a4b13487) SHA1(7ef2953ca11526bbae57b1aebb7a90de59c2d379) )
+
+	ROM_REGION( 0x80000, "upd", 0 )
+	ROM_LOAD( "eggsonlegssnd.bin", 0x0000, 0x080000, CRC(24fef504) SHA1(75a05e0cf064f736dd9164c24ccef77a46aaee94) )
+ROM_END
+
+ROM_START( sc2eggs1p )
+	ROM_REGION( 0x10000, "maincpu", 0 )
+	ROM_LOAD( "eggs-on-legs_dat_ac_var_10pnd_ass.bin", 0x0000, 0x010000, CRC(718915f2) SHA1(717b57c0e81a48db005516135fdd4d82f7cfda28) )
+
+	ROM_REGION( 0x80000, "upd", 0 )
+	ROM_LOAD( "eggsonlegssnd.bin", 0x0000, 0x080000, CRC(24fef504) SHA1(75a05e0cf064f736dd9164c24ccef77a46aaee94) )
+ROM_END
+
+ROM_START( sc2gsclb )
+	ROM_REGION( 0x10000, "maincpu", 0 )
+	ROM_LOAD( "club-game-show_std_ac_p65_ass.bin", 0x0000, 0x010000, CRC(9a390095) SHA1(ee4b08956de0b018b9ceaf16a6410463053c1f3d) )
+
+	sc2_gsclb_sound
+ROM_END
+
+ROM_START( sc2gsclbp )
+	ROM_REGION( 0x10000, "maincpu", 0 )
+	ROM_LOAD( "club-game-show_dat_ac_p65_ass.bin", 0x0000, 0x010000, CRC(61adb76f) SHA1(a7fcc6504d5eeae664b9aaca190bbf43bd989c93) )
+
+	sc2_gsclb_sound
+ROM_END
+
+ROM_START( sc2gsclb1 )
+	ROM_REGION( 0x10000, "maincpu", 0 )
+	ROM_LOAD( "club-game-show_std_ac_250pnd-24p_p65_ass.bin", 0x0000, 0x010000, CRC(142d828a) SHA1(2fe40e9d641be1cf89cfe9fe5cd4b29dd9ea01e7) )
+
+	sc2_gsclb_sound
+ROM_END
+
+ROM_START( sc2gsclb1p )
+	ROM_REGION( 0x10000, "maincpu", 0 )
+	ROM_LOAD( "club-game-show_dat_ac_250pnd-25p_p65_ass.bin", 0x0000, 0x010000, CRC(5d59e87e) SHA1(91684551db11d95768c364515cf5cd337b3f482b) )
+
+	sc2_gsclb_sound
+ROM_END
+
+ROM_START( sc2gsclb2 )
+	ROM_REGION( 0x10000, "maincpu", 0 )
+	ROM_LOAD( "club-game-show_std_ac_var_ass.bin", 0x0000, 0x010000, CRC(01ae9d52) SHA1(3b85a7ebc346d4eb6a16b2b9a03aa12220020aff) )
+
+	sc2_gsclb_sound
+ROM_END
+
+ROM_START( sc2gsclb2p )
+	ROM_REGION( 0x10000, "maincpu", 0 )
+	ROM_LOAD( "club-game-show_dat_ac_var_ass.bin", 0x0000, 0x010000, CRC(85cf033f) SHA1(ca7e506437e1ff229f2d79bedb13ae0fe5dd2696) )
+
+	sc2_gsclb_sound
+ROM_END
+
+ROM_START( sc2gsclb3 )
+	ROM_REGION( 0x10000, "maincpu", 0 )
+	ROM_LOAD( "club-game-show_std_fe_ac_ass.bin", 0x0000, 0x010000, CRC(6e479cc4) SHA1(99c15b0d1584ab7b460f273de825eb17681c5d0a) )
+
+	sc2_gsclb_sound
+ROM_END
+
+ROM_START( sc2gsclb3p )
+	ROM_REGION( 0x10000, "maincpu", 0 )
+	ROM_LOAD( "club-game-show_dat_fe_ac_ass.bin", 0x0000, 0x010000, CRC(b5a03c26) SHA1(ef1bc28905a8a9db71299f5c30a15c5576766346) )
+
+	sc2_gsclb_sound
+ROM_END
+
+ROM_START( sc2gsclb4 )
+	ROM_REGION( 0x10000, "maincpu", 0 )
+	ROM_LOAD( "club-game-show_std_ac_var_ffp_ass.bin", 0x0000, 0x010000, CRC(d2819fc3) SHA1(23c7cbf9e04913f5cb62ef6accdd5b470eed3cd4) )
+
+	sc2_gsclb_sound
+ROM_END
+
+ROM_START( sc2gsclb4p )
+	ROM_REGION( 0x10000, "maincpu", 0 )
+	ROM_LOAD( "club-game-show_dat_ac_var_ffp_ass.bin", 0x0000, 0x010000, CRC(7e003d2a) SHA1(f8a6f6810b1733f46e470e89fa821cd51fbe1c5e) )
+
+	sc2_gsclb_sound
+ROM_END
+
+ROM_START( sc2gsclb5 )
+	ROM_REGION( 0x10000, "maincpu", 0 )
+	ROM_LOAD( "gameshow.bin", 0x0000, 0x010000, CRC(babeb912) SHA1(41bc1cf82bef84f840998af1278c55ea1727a163) )
+
+	sc2_gsclb_sound
+ROM_END
+
+ROM_START( sc2gsclb6 )
+	ROM_REGION( 0x10000, "maincpu", 0 )
+	ROM_LOAD( "95750844.p1", 0x0000, 0x010000, CRC(36efa743) SHA1(0f5392f55e42d7ac17e179c966997f41859f925a) )
+
+	sc2_gsclb_sound
+ROM_END
+
+ROM_START( sc2gsclb7p )
+	ROM_REGION( 0x10000, "maincpu", 0 )
+	ROM_LOAD( "club-game-show_dat_ac_250pnd-25p_ass.bin", 0x0000, 0x010000, CRC(299b89f3) SHA1(eb78378410ca2380ec564e8268a51309dc8044ce) )
+
+	sc2_gsclb_sound
+ROM_END
+
+ROM_START( sc2cpg )
+	ROM_REGION( 0x10000, "maincpu", 0 )
+	ROM_LOAD( "club-pharaohs-gold_std_ac_250pnd-20p_rot_ass.bin", 0x0000, 0x010000, CRC(f83a68dc) SHA1(1a7aa08835d03116199034378ae0c617520a5ac6) )
+
+	sc2_cpg_sound
+ROM_END
+
+ROM_START( sc2cpgp )
+	ROM_REGION( 0x10000, "maincpu", 0 )
+	ROM_LOAD( "club-pharaohs-gold_dat_ac_250pnd-20p_rot_ass.bin", 0x0000, 0x010000, CRC(2de3b252) SHA1(02c3bfabd5c732e37e71278be5aad0b6b44d28c6) )
+
+	sc2_cpg_sound
+ROM_END
+
+ROM_START( sc2cpg1 )
+	ROM_REGION( 0x10000, "maincpu", 0 )
+	ROM_LOAD( "club-pharaohs-gold_std_fe_ac_p65_rot_ass.bin", 0x0000, 0x010000, CRC(e97c5bb4) SHA1(4df5f50bbfe453fbc351855dc6f6a24296563498) )
+
+	sc2_cpg_sound
+ROM_END
+
+ROM_START( sc2cpg1p )
+	ROM_REGION( 0x10000, "maincpu", 0 )
+	ROM_LOAD( "club-pharaohs-gold_dat_fe_ac_p65_rot_ass.bin", 0x0000, 0x010000, CRC(4ccba14d) SHA1(a0529a732a1a8c5c9a3d9830072ff1003c80b7d2) )
+
+	sc2_cpg_sound
+ROM_END
+
+ROM_START( sc2cpg2 )
+	ROM_REGION( 0x10000, "maincpu", 0 )
+	ROM_LOAD( "club-pharaohs-gold_std_ac_var_ass.bin", 0x0000, 0x010000, CRC(9376c3c4) SHA1(9e67c982dfb838cde538d0893ea36eafe8bda2d3) )
+
+	sc2_cpg_sound
+ROM_END
+
+ROM_START( sc2cpg2p )
+	ROM_REGION( 0x10000, "maincpu", 0 )
+	ROM_LOAD( "club-pharaohs-gold_dat_ac_var_ass.bin", 0x0000, 0x010000, CRC(bb790c4b) SHA1(d1126b9848047f15a65119e6446caced2c982287) )
+
+	sc2_cpg_sound
+ROM_END
+
+
+ROM_START( sc2suprz )
+	ROM_REGION( 0x10000, "maincpu", 0 )
+	ROM_LOAD( "surprise-surprize_std_ga_20p_ass.bin", 0x0000, 0x010000, CRC(7e52c975) SHA1(a610f7170fda13f64e805e3d99b5f57c61206cfe) )
+
+	sc2_suprz_sound
+ROM_END
+
+ROM_START( sc2suprzp )
+	ROM_REGION( 0x10000, "maincpu", 0 )
+	ROM_LOAD( "surprise-surprize_dat_ga_20p_ass.bin", 0x0000, 0x010000, CRC(8ee54a57) SHA1(471a06d9840ecbf850c8896f8bf45264c0b8390f) )
+
+	sc2_suprz_sound
+ROM_END
+
+ROM_START( sc2suprz1 )
+	ROM_REGION( 0x10000, "maincpu", 0 )
+	ROM_LOAD( "surprise-surprize_std_var_ass.bin", 0x0000, 0x010000, CRC(5ef85273) SHA1(2ca9e3245c97fbed97a781e135fbb79df5b1bf18) )
+
+	sc2_suprz_sound
+ROM_END
+
+ROM_START( sc2suprz1p )
+	ROM_REGION( 0x10000, "maincpu", 0 )
+	ROM_LOAD( "surprise-surprize_dat_var_ass.bin", 0x0000, 0x010000, CRC(37ab423e) SHA1(6b2ab927eb851b8f77eb474a1c5b68c335a17b2f) )
+
+	sc2_suprz_sound
+ROM_END
+
+ROM_START( sc2suprz2 )
+	ROM_REGION( 0x10000, "maincpu", 0 )
+	ROM_LOAD( "surprise-surprize_std_ac_6pnd-20p_ass.bin", 0x0000, 0x010000, CRC(297959d7) SHA1(9bc8bc3d1be1f282573a3ad6994f06ee7bb64dfd) )
+
+	sc2_suprz_sound
+ROM_END
+
+ROM_START( sc2suprz2p )
+	ROM_REGION( 0x10000, "maincpu", 0 )
+	ROM_LOAD( "surprise-surprize_dat_ac_6pnd-20p_ass.bin", 0x0000, 0x010000, CRC(7e0b263e) SHA1(bcbd82a87e7db65db22e55d9111b0f819a62150a) )
+
+	sc2_suprz_sound
+ROM_END
+
+ROM_START( sc2suprz3 )
+	ROM_REGION( 0x10000, "maincpu", 0 )
+	ROM_LOAD( "surprise-surprize-6pound.bin", 0x0000, 0x010000, CRC(d00de4ab) SHA1(cdee9c2c27ab6bad8b0c633ce396fbe2987dbb61) )
+
+	sc2_suprz_sound
+ROM_END
+
+
+ROM_START( sc2motd )
+	ROM_REGION( 0x10000, "maincpu", 0 )
+	ROM_LOAD( "match-of-the-day_std_ac_10pnd_uk94_ass.bin", 0x0000, 0x010000, CRC(f75d128d) SHA1(7da2fb6bc7265848c20cfc137de846439af83b90) )
+
+	sc2_motd_sound
+ROM_END
+
+ROM_START( sc2motdp )
+	ROM_REGION( 0x10000, "maincpu", 0 )
+	ROM_LOAD( "match-of-the-day_dat_ac_10pnd_uk94_ass.bin", 0x0000, 0x010000, CRC(632325d8) SHA1(92c68b51b4e594bec5d9af43a697a4dd912ed864) )
+
+	sc2_motd_sound
+ROM_END
+
+ROM_START( sc2motd1 )
+	ROM_REGION( 0x10000, "maincpu", 0 )
+	ROM_LOAD( "match-of-the-day_std_ac_10pnd_tri1_ass.bin", 0x0000, 0x010000, CRC(10b7a217) SHA1(615bf8e6d1b79c96efd91335a9c6f5db0df95891) )
+
+	sc2_motd_sound
+ROM_END
+
+ROM_START( sc2motd1p )
+	ROM_REGION( 0x10000, "maincpu", 0 )
+	ROM_LOAD( "match-of-the-day_dat_ac_10pnd_tri1_ass.bin", 0x0000, 0x010000, CRC(948b3ede) SHA1(f1c7b4e9fb83ba848d4d8a3ab02a1a5e3b630054) )
+
+	sc2_motd_sound
+ROM_END
+
+ROM_START( sc2motd2 )
+	ROM_REGION( 0x10000, "maincpu", 0 )
+	ROM_LOAD( "match-of-the-day_std_wi_ac_10pnd_ass.bin", 0x0000, 0x010000, CRC(b059fe93) SHA1(33d15c464f3f80f4600d961ddade0b6a661747ba) )
+
+	sc2_motd_sound
+ROM_END
+
+ROM_START( sc2motd2p )
+	ROM_REGION( 0x10000, "maincpu", 0 )
+	ROM_LOAD( "match-of-the-day_dat_wi_ac_10pnd_ass.bin", 0x0000, 0x010000, CRC(412a30ed) SHA1(c7118954c086fb1243e441ed7728d801667e98ba) )
+
+	sc2_motd_sound
+ROM_END
+
+ROM_START( sc2motd3 )
+	ROM_REGION( 0x10000, "maincpu", 0 )
+	ROM_LOAD( "match-of-the-day_std_ar_20p_uk94_ass.bin", 0x0000, 0x010000, CRC(96687a5a) SHA1(dafd7b0af3e26d609b5927c431f4adf2f424322a) )
+
+	sc2_motd_sound
+ROM_END
+
+ROM_START( sc2motd3p )
+	ROM_REGION( 0x10000, "maincpu", 0 )
+	ROM_LOAD( "match-of-the-day_dat_ar_20p_uk94_ass.bin", 0x0000, 0x010000, CRC(f5adb4aa) SHA1(85afff3251e13808f140d6e58f1c9e2e23ce9d8c) )
+
+	sc2_motd_sound
+ROM_END
+
+ROM_START( sc2motd4 )
+	ROM_REGION( 0x10000, "maincpu", 0 )
+	ROM_LOAD( "match-of-the-day_std_ar_20p_ass.bin", 0x0000, 0x010000, CRC(27f942a3) SHA1(928d3c2eef6b202c0d71b0843f64aba15aab4f42) )
+
+	sc2_motd_sound
+ROM_END
+
+ROM_START( sc2motd4p )
+	ROM_REGION( 0x10000, "maincpu", 0 )
+	ROM_LOAD( "match-of-the-day_dat_ar_20p_ass.bin", 0x0000, 0x010000, CRC(ab1c44b9) SHA1(ce34570fabcb2c6ceab48ef7c4367ccafa95ef1a) )
+
+	sc2_motd_sound
+ROM_END
+
+ROM_START( sc2motd5 )
+	ROM_REGION( 0x10000, "maincpu", 0 )
+	ROM_LOAD( "match-of-the-day_std_ss_20p_ass.bin", 0x0000, 0x010000, CRC(ce926573) SHA1(dff243d0eb12d4c13c8334099c5958e897cb8bd5) )
+
+	sc2_motd_sound
+ROM_END
+
+ROM_START( sc2motd5p )
+	ROM_REGION( 0x10000, "maincpu", 0 )
+	ROM_LOAD( "match-of-the-day_dat_ss_20p_ass.bin", 0x0000, 0x010000, CRC(19dafe2d) SHA1(8a7bc4bfb7acd5386fdcadf91c2ba4f5615fa3c9) )
+
+	sc2_motd_sound
+ROM_END
+
+ROM_START( sc2motd6 )
+	ROM_REGION( 0x10000, "maincpu", 0 )
+	ROM_LOAD( "match-of-the-day_std_8pnd-20p_ass.bin", 0x0000, 0x010000, CRC(8042a61d) SHA1(3e0e75918d6df2d4ed537ee532d1a7fa0bb359b7) )
+
+	sc2_motd_sound
+ROM_END
+
+ROM_START( sc2motd6p )
+	ROM_REGION( 0x10000, "maincpu", 0 )
+	ROM_LOAD( "match-of-the-day_dat_8pnd-20p_ass.bin", 0x0000, 0x010000, CRC(da77960d) SHA1(e6fc97994612d9280b60df6600c26aa7919381d2) )
+
+	sc2_motd_sound
+ROM_END
+
+ROM_START( sc2motd7 )
+	ROM_REGION( 0x10000, "maincpu", 0 )
+	ROM_LOAD( "match-of-the-day_std_20p_ass.bin", 0x0000, 0x010000, CRC(441931ef) SHA1(9c8c79470dda2a6589d04e4eb8d00d8a984bd1ed) )
+
+	sc2_motd_sound
+ROM_END
+
+ROM_START( sc2motd7p )
+	ROM_REGION( 0x10000, "maincpu", 0 )
+	ROM_LOAD( "match-of-the-day_dat_ms_20p_ass.bin", 0x0000, 0x010000, CRC(77710913) SHA1(709fff877ee863021e958bcecbd5cd58a977ea09) )
+
+	sc2_motd_sound
+ROM_END
+
+ROM_START( sc2motd8 )
+	ROM_REGION( 0x10000, "maincpu", 0 )
+	ROM_LOAD( "match-of-the-day_std_ac_var_uk94.bin", 0x0000, 0x010000, CRC(ae2330f0) SHA1(d309284f0f0333f6e065f30d7ac9416b2fc4ee1f) )
+
+	sc2_motd_sound
+ROM_END
+
+ROM_START( sc2motd8p )
+	ROM_REGION( 0x10000, "maincpu", 0 )
+	ROM_LOAD( "match-of-the-day_dat_20p_uk94_ass.bin", 0x0000, 0x010000, CRC(fa9216fa) SHA1(3d5d164419f022488e60e738958d3f66f4206e87) )
+
+	sc2_motd_sound
+ROM_END
+
+ROM_START( sc2motd9 )
+	ROM_REGION( 0x10000, "maincpu", 0 )
+	ROM_LOAD( "motd6ac", 0x0000, 0x010000, CRC(d8e7811c) SHA1(ac67683984465aaf8a96322e71ab7b7bffe92361) )
+
+	sc2_motd_sound
+ROM_END
+
+ROM_START( sc2motd10p )
+	ROM_REGION( 0x10000, "maincpu", 0 )
+	ROM_LOAD( "match-of-the-day_dat_ac_8pnd-20p_ass.bin", 0x0000, 0x010000, CRC(86baaf46) SHA1(acb9c5cad4c35621219380a997ae67accaea4206) )
+
+	sc2_motd_sound
+ROM_END
+
+
+ROM_START( sc2easy )
+	ROM_REGION( 0x10000, "maincpu", 0 )
+	ROM_LOAD( "easy-money_std_ac_var_8-10pnd_ass.bin", 0x0000, 0x010000, CRC(e9f581ca) SHA1(aee8a1af609921a0b33db7b460e4a58517bf9276) )
+
+	sc2_easy_sound
+ROM_END
+
+ROM_START( sc2easyp )
+	ROM_REGION( 0x10000, "maincpu", 0 )
+	ROM_LOAD( "easy-money_dat_ac_var_8-10pnd_ass.bin", 0x0000, 0x010000, CRC(e5633ac3) SHA1(d868d782e7d5f6c62ab8958150857336b7acff97) )
+
+	sc2_easy_sound
+ROM_END
+
+ROM_START( sc2easy1 )
+	ROM_REGION( 0x10000, "maincpu", 0 )
+	ROM_LOAD( "easy-money_std_wi_ac_10pnd_tri3_ass.bin", 0x0000, 0x010000, CRC(38434925) SHA1(17148ba440c8fd139f7889a211a914ed679a195f) )
+
+	sc2_easy_sound
+ROM_END
+
+ROM_START( sc2easy1p )
+	ROM_REGION( 0x10000, "maincpu", 0 )
+	ROM_LOAD( "easy-money_dat_wi_ac_10pnd_tri3_ass.bin", 0x0000, 0x010000, CRC(f841d5cf) SHA1(05afdfa483271635b530652385e2e566920e533d) )
+
+	sc2_easy_sound
+ROM_END
+
+ROM_START( sc2easy2 )
+	ROM_REGION( 0x10000, "maincpu", 0 )
+	ROM_LOAD( "easy-money_std_wi_ac_var_10pnd-20p_ass.bin", 0x0000, 0x010000, CRC(05622afc) SHA1(169a492870a70aeb17078b2b27c36f5b82274b3f) )
+
+	sc2_easy_sound
+ROM_END
+
+ROM_START( sc2easy2p )
+	ROM_REGION( 0x10000, "maincpu", 0 )
+	ROM_LOAD( "easy-money_dat_wi_ac_var_10pnd-20p_ass.bin", 0x0000, 0x010000, CRC(97f62e2d) SHA1(0884ddd0b25e78dd402983158e8c623ff4326cbd) )
+
+	sc2_easy_sound
+ROM_END
+
+ROM_START( sc2majes )
+	ROM_REGION( 0x10000, "maincpu", 0 )
+	ROM_LOAD( "majestic.p1", 0x0000, 0x010000, CRC(37289a5f) SHA1(a9d86ed16fc2ff2b83b60e48a1704b4e189c3ac7) )
+
+	ROM_REGION( 0x80000, "upd", 0 )
+	ROM_LOAD( "majesticsnd.bin", 0x0000, 0x080000, CRC(3ee3fee3) SHA1(6a5e72e8a808d870a84a0e3523eebfadfab6d5df) )
+ROM_END
+
+
+ROM_START( sc2luvv )
+	ROM_REGION( 0x10000, "maincpu", 0 )
+	ROM_LOAD("95750808.bin", 0x00000, 0x10000, CRC(e6668fc7) SHA1(71dd412114c6386cba72e2b29ea07f2d99d14065))
+
+	ROM_REGION( 0x20000, "matrix", 0 )
+	ROM_LOAD("95000584.p1",	 0x00000, 0x10000, CRC(cfdd7bb2) SHA1(90086aaff743a7b2385488af1e8a126029113028))//mtx_ass.bin
+
+	sc2_luvv_sound
+ROM_END
+
+ROM_START( sc2luvv1 )
+	ROM_REGION( 0x10000, "maincpu", 0 )
+	ROM_LOAD( "luvvley-jubbley_std_ac_10pnd-20p_ass.bin", 0x0000, 0x010000, CRC(e4440803) SHA1(be9b49cbe2cfcaa0e640365e190da9c3fcf82bea) )
+
+	ROM_REGION( 0x20000, "matrix", 0 )
+	ROM_LOAD( "95000575.p1", 0x0000, 0x010000, CRC(e4e06767) SHA1(bee2385c2a9c7ca39ff6a599f827ddba4324b903) )//luvvley-jubbley_mat_ass.bin
+
+	sc2_luvv_sound
+ROM_END
+
+ROM_START( sc2luvv1p )
+	ROM_REGION( 0x10000, "maincpu", 0 )
+	ROM_LOAD( "luvvley-jubbley_dat_ac_10pnd-20p_ass.bin", 0x0000, 0x010000, CRC(9dee74fc) SHA1(d29756d743b781ab9ce7baf990f4a2cc0e9d7972) )
+
+	ROM_REGION( 0x20000, "matrix", 0 )
+	ROM_LOAD( "95000575.p1", 0x0000, 0x010000, CRC(e4e06767) SHA1(bee2385c2a9c7ca39ff6a599f827ddba4324b903) )//luvvley-jubbley_mat_ass.bin
+
+	sc2_luvv_sound
+ROM_END
+
+ROM_START( sc2luvv2 )
+	ROM_REGION( 0x10000, "maincpu", 0 )
+	ROM_LOAD( "luvvley-jubbley_std_ms_20p_ass.bin", 0x0000, 0x010000, CRC(d40a59d0) SHA1(7173fc6d349868b9194c4ad581762d299dfb1c69) )
+
+	ROM_REGION( 0x20000, "matrix", 0 )
+	ROM_LOAD( "95000575.p1", 0x0000, 0x010000, CRC(e4e06767) SHA1(bee2385c2a9c7ca39ff6a599f827ddba4324b903) )//luvvley-jubbley_mat_ass.bin
+
+	sc2_luvv_sound
+ROM_END
+
+ROM_START( sc2luvv2p )
+	ROM_REGION( 0x10000, "maincpu", 0 )
+	ROM_LOAD( "luvvley-jubbley_dat_ms_20p_ass.bin", 0x0000, 0x010000, CRC(886a3a8e) SHA1(4c986e0c7278bd058ce2df2d755cbc8e4f31b3fa) )
+
+	ROM_REGION( 0x20000, "matrix", 0 )
+	ROM_LOAD( "95000575.p1", 0x0000, 0x010000, CRC(e4e06767) SHA1(bee2385c2a9c7ca39ff6a599f827ddba4324b903) )//luvvley-jubbley_mat_ass.bin
+
+	sc2_luvv_sound
+ROM_END
+
+ROM_START( sc2luvv3 )
+	ROM_REGION( 0x10000, "maincpu", 0 )
+	ROM_LOAD( "luvvley-jubbley_std_ac_10pnd-20p_a.bin", 0x0000, 0x010000, CRC(e4440803) SHA1(be9b49cbe2cfcaa0e640365e190da9c3fcf82bea) )
+
+	ROM_REGION( 0x20000, "matrix", 0 )
+	ROM_LOAD( "95000575.p1", 0x0000, 0x010000, CRC(e4e06767) SHA1(bee2385c2a9c7ca39ff6a599f827ddba4324b903) )//luvvley-jubbley_mat_ass.bin
+
+	sc2_luvv_sound
+ROM_END
+
+ROM_START( sc2luvv4 )
+	ROM_REGION( 0x10000, "maincpu", 0 )
+	ROM_LOAD( "luvvley-jubbley_std_ac_4pnd-5p_ass.bin", 0x0000, 0x010000, CRC(065ee9bb) SHA1(5d46f0e1b5d48dc94b9843998dedf6d3dfc83e3c) )
+
+	ROM_REGION( 0x20000, "matrix", 0 )
+	ROM_LOAD( "95000575.p1", 0x0000, 0x010000, CRC(e4e06767) SHA1(bee2385c2a9c7ca39ff6a599f827ddba4324b903) )//luvvley-jubbley_mat_ass.bin
+
+	sc2_luvv_sound
+ROM_END
+
+ROM_START( sc2luvv5p )
+	ROM_REGION( 0x10000, "maincpu", 0 )
+	ROM_LOAD( "luvvley-jubbley_dat_ac_10pnd-25p_ass.bin", 0x0000, 0x010000, CRC(355210a0) SHA1(c03e1109ee1a419fc4ebdcf861d5220303a9c587) )
+
+	ROM_REGION( 0x20000, "matrix", 0 )
+	ROM_LOAD( "95000575.p1", 0x0000, 0x010000, CRC(e4e06767) SHA1(bee2385c2a9c7ca39ff6a599f827ddba4324b903) )//luvvley-jubbley_mat_ass.bin
+
+	sc2_luvv_sound
+ROM_END
+
+ROM_START( sc2luvv6p )
+	ROM_REGION( 0x10000, "maincpu", 0 )
+	ROM_LOAD( "luvvley-jubbley_dat_ga_20p_ass.bin", 0x0000, 0x010000, CRC(8c0a6180) SHA1(1c1ee2b5081ee901b5929405a78d3e7a7989916a) )
+
+	ROM_REGION( 0x20000, "matrix", 0 )
+	ROM_LOAD( "95000575.p1", 0x0000, 0x010000, CRC(e4e06767) SHA1(bee2385c2a9c7ca39ff6a599f827ddba4324b903) )//luvvley-jubbley_mat_ass.bin
+
+	sc2_luvv_sound
+ROM_END
+
+ROM_START( sc2luvv7p )
+	ROM_REGION( 0x10000, "maincpu", 0 )
+	ROM_LOAD( "luvvley-jubbley_dat_ac_4pnd-5p_ass.bin", 0x0000, 0x010000, CRC(4b3155b8) SHA1(aaba2e3d54a2b099b63ee4f5d3560d8eb562c4f1) )
+
+	ROM_REGION( 0x20000, "matrix", 0 )
+	ROM_LOAD( "95000575.p1", 0x0000, 0x010000, CRC(e4e06767) SHA1(bee2385c2a9c7ca39ff6a599f827ddba4324b903) )//luvvley-jubbley_mat_ass.bin
+
+	sc2_luvv_sound
+ROM_END
+
+ROM_START( sc2ptytm )
+	ROM_REGION( 0x10000, "maincpu", 0 )
+	ROM_LOAD( "95750806.p1", 0x0000, 0x010000, CRC(4e98c6c6) SHA1(7f4ec51f384b5203229da28f39c3127cd40cf67d) )
+
+	ROM_REGION( 0x20000, "matrix", 0 )
+	ROM_LOAD( "95000585.p1", 0x0000, 0x010000, CRC(0672a9f4) SHA1(9e8e01aaa081ffb68aa494fe9dbae0620da0f6b9) )//party-time_mtx_ass.bin
+
+	ROM_REGION( 0x80000, "upd", 0 )
+	ROM_LOAD( "partysnd1.bin", 0x0000, 0x020000, CRC(b5a5cc9e) SHA1(c9b132ad0d1ce9ff6b56ebde89d5006a5cf7dff6) )
+ROM_END
+
+ROM_START( sc2ptytm1 )
+	ROM_REGION( 0x10000, "maincpu", 0 )
+	ROM_LOAD( "partytime.bin", 0x0000, 0x010000, CRC(20ef430c) SHA1(b5d35704da425e7ca84500071f34b4d65d87b9fa) )
+
+	ROM_REGION( 0x20000, "matrix", 0 )
+	ROM_LOAD( "partydot.bin", 0x0000, 0x010000, CRC(8a09b858) SHA1(bc932bebc7718da2b97e5f6ef06eb739748353f4) )
+
+	ROM_REGION( 0x80000, "upd", 0 )
+	ROM_LOAD( "partysnd1.bin", 0x0000, 0x020000, CRC(b5a5cc9e) SHA1(c9b132ad0d1ce9ff6b56ebde89d5006a5cf7dff6) )
+ROM_END
+
+ROM_START( sc2ptytm1p )
+	ROM_REGION( 0x10000, "maincpu", 0 )
+	ROM_LOAD( "party-time_dat_ac_4pnd-10p_ass.bin", 0x0000, 0x010000, CRC(a33a6d08) SHA1(cf93f42971978b00a15e17d4da6bb6e16e8f1fab) )
+
+	ROM_REGION( 0x20000, "matrix", 0 )
+	ROM_LOAD( "partydot.bin", 0x0000, 0x010000, CRC(8a09b858) SHA1(bc932bebc7718da2b97e5f6ef06eb739748353f4) )
+
+	ROM_REGION( 0x80000, "upd", 0 )
+	ROM_LOAD( "partysnd1.bin", 0x0000, 0x020000, CRC(b5a5cc9e) SHA1(c9b132ad0d1ce9ff6b56ebde89d5006a5cf7dff6) )
+ROM_END
+
+
+ROM_START( sc2ofool )
+	ROM_REGION( 0x10000, "maincpu", 0 )
+	ROM_LOAD( "onlyfoolsnhorses_std.bin", 0x0000, 0x010000, CRC(03cc611a) SHA1(e37d6b87017a52f8de339bbd69b2ccbff9872fae) )
+
+	sc2_ofool_matrix
+	sc2_ofool_sound
+ROM_END
+
+ROM_START( sc2ofool1 )
+	ROM_REGION( 0x10000, "maincpu", 0 )
+	ROM_LOAD( "game 147s only fools.bin", 0x0000, 0x010000, CRC(6cb6cef1) SHA1(bfa40f517b1455e4d563be5964605be63e950e87) )
+
+	sc2_ofool_matrix
+	sc2_ofool_sound
+ROM_END
+
+ROM_START( sc2ofool2 )
+	ROM_REGION( 0x10000, "maincpu", 0 )
+	ROM_LOAD( "fools & horses 10m 6.bin", 0x0000, 0x010000, CRC(5fe48a02) SHA1(fd5b07a58567e0c5eb75bf1526a853b3a60ddfa9) )
+
+	sc2_ofool_matrix
+	sc2_ofool_sound
+ROM_END
+
+ROM_START( sc2ofool3 )
+	ROM_REGION( 0x10000, "maincpu", 0 )
+	ROM_LOAD( "fools.bin", 0x0000, 0x010000, CRC(eaa0757a) SHA1(b6bec8f4f443d6c22c18e16ec0d65839fe30b61c) )
+
+	sc2_ofool_matrix
+	sc2_ofool_sound
+ROM_END
+
+
+ROM_START( sc2ofool4 )
+	ROM_REGION( 0x10000, "maincpu", 0 )
+	ROM_LOAD( "fools scor ii 10p.bin", 0x0000, 0x010000, CRC(1d6245b7) SHA1(f73b4741cf07d96ec79d907b88d07cd20c748dd3) )
+
+	sc2_ofool_matrix
+	sc2_ofool_sound
+ROM_END
+
+ROM_START( sc2ofool5 )
+	ROM_REGION( 0x10000, "maincpu", 0 )
+	ROM_LOAD( "fools6ac.bin", 0x0000, 0x010000, CRC(5fe48a02) SHA1(fd5b07a58567e0c5eb75bf1526a853b3a60ddfa9) )
+
+	sc2_ofool_matrix
+	sc2_ofool_sound
+ROM_END
+
+
+
+ROM_START( sc2town )
+	ROM_REGION( 0x10000, "maincpu", 0 )
+	ROM_LOAD( "round-the-town_std_ac_10pnd-20p-25p_ass.bin", 0x0000, 0x010000, CRC(8394c0e9) SHA1(b9b45e0c855a5f7270259543337fb441694b61e2) )
+
+	ROM_REGION( 0x20000, "matrix", 0 )
+	ROM_LOAD( "round-the-town_mtx.bin", 0x0000, 0x010000, CRC(aa6aac1d) SHA1(57ed376f602dd70495b3bd356bea5113fa8e861e) )
+
+	sc2_town_sound
+ROM_END
+
+ROM_START( sc2townp )
+	ROM_REGION( 0x10000, "maincpu", 0 )
+	ROM_LOAD( "round-the-town_dat_ac_10pnd-20p-25p_ass.bin", 0x0000, 0x010000, CRC(8291ad4e) SHA1(cd304052123dfe6d8504a6f5e92413c569bcaf8e) )
+
+	ROM_REGION( 0x20000, "matrix", 0 )
+	ROM_LOAD( "round-the-town_mtx.bin", 0x0000, 0x010000, CRC(aa6aac1d) SHA1(57ed376f602dd70495b3bd356bea5113fa8e861e) )
+
+	sc2_town_sound
+ROM_END
+
+ROM_START( sc2town1 )
+	ROM_REGION( 0x10000, "maincpu", 0 )
+	ROM_LOAD( "round-the-town_std_ar_var_ass.bin", 0x0000, 0x010000, CRC(e5be3a13) SHA1(8a31c67641bce3c2160bb1c651535902374349b4) )
+
+	ROM_REGION( 0x20000, "matrix", 0 )
+	ROM_LOAD( "95000581.p1", 0x0000, 0x010000, CRC(1a3b2fb1) SHA1(3d51c6e16558c1ac8ad852a461cd89aef9bc91e4) )//round-the-town_mtx_ass.bin
+
+	sc2_town_sound
+ROM_END
+
+ROM_START( sc2town1p )
+	ROM_REGION( 0x10000, "maincpu", 0 )
+	ROM_LOAD( "round-the-town_dat_ar_var_ass.bin", 0x0000, 0x010000, CRC(3d811bb4) SHA1(134e1c65f4f8377eca6d7ccfded5d4600d2949bf) )
+
+	ROM_REGION( 0x20000, "matrix", 0 )
+	ROM_LOAD( "95000581.p1", 0x0000, 0x010000, CRC(1a3b2fb1) SHA1(3d51c6e16558c1ac8ad852a461cd89aef9bc91e4) )//round-the-town_mtx_ass.bin
+
+	sc2_town_sound
+ROM_END
+
+ROM_START( sc2town2 )
+	ROM_REGION( 0x10000, "maincpu", 0 )
+	ROM_LOAD( "95750069.p1", 0x0000, 0x010000, CRC(6bc0c2ff) SHA1(9a2bac50978f2b7d2072e0febe4bf4a935bf287d) )//round-the-town_std_ac_20p_20po_ass.bin
+
+	ROM_REGION( 0x20000, "matrix", 0 )
+	ROM_LOAD( "95000581.p1", 0x0000, 0x010000, CRC(1a3b2fb1) SHA1(3d51c6e16558c1ac8ad852a461cd89aef9bc91e4) )//round-the-town_mtx_ass.bin
+
+	sc2_town_sound
+ROM_END
+
+ROM_START( sc2town3 )
+	ROM_REGION( 0x10000, "maincpu", 0 )
+	ROM_LOAD( "round-the-town_std_var_ass.bin", 0x0000, 0x010000, CRC(1909994f) SHA1(47268e1119c808096ddff872e28444ed67bc5dbf) )
+
+	ROM_REGION( 0x20000, "matrix", 0 )
+	ROM_LOAD( "95000581.p1", 0x0000, 0x010000, CRC(1a3b2fb1) SHA1(3d51c6e16558c1ac8ad852a461cd89aef9bc91e4) )//round-the-town_mtx_ass.bin
+
+	sc2_town_sound
+ROM_END
+
+ROM_START( sc2town3p )
+	ROM_REGION( 0x10000, "maincpu", 0 )
+	ROM_LOAD( "round-the-town_dat_var_ass.bin", 0x0000, 0x010000, CRC(85110517) SHA1(30eba3987cc60ccbaecbc4c700bb2f1ba088d12f) )
+
+	ROM_REGION( 0x20000, "matrix", 0 )
+	ROM_LOAD( "95000581.p1", 0x0000, 0x010000, CRC(1a3b2fb1) SHA1(3d51c6e16558c1ac8ad852a461cd89aef9bc91e4) )//round-the-town_mtx_ass.bin
+
+	sc2_town_sound
+ROM_END
+
+ROM_START( sc2town4 )
+	ROM_REGION( 0x10000, "maincpu", 0 )
+	ROM_LOAD( "atown20p", 0x0000, 0x010000, CRC(4f7ec25e) SHA1(52af065633942a9e4c195f3294b81ae57bf0c414) )
+
+	ROM_REGION( 0x20000, "matrix", 0 )
+	ROM_LOAD( "95000581.p1", 0x0000, 0x010000, CRC(1a3b2fb1) SHA1(3d51c6e16558c1ac8ad852a461cd89aef9bc91e4) )//round-the-town_mtx_ass.bin
+
+	sc2_town_sound
+ROM_END
+
+ROM_START( sc2town5 )
+	ROM_REGION( 0x10000, "maincpu", 0 )
+	ROM_LOAD( "rtt8ac", 0x0000, 0x010000, CRC(e495e5ea) SHA1(4fb6a43cee1c79ce05b71b35b195f2d35913c40c) )
+
+	ROM_REGION( 0x20000, "matrix", 0 )
+	ROM_LOAD( "95000581.p1", 0x0000, 0x010000, CRC(1a3b2fb1) SHA1(3d51c6e16558c1ac8ad852a461cd89aef9bc91e4) )//round-the-town_mtx_ass.bin
+
+	sc2_town_sound
+ROM_END
+
+
+//Multiple matrix ROMS in the set, so bear in mind if something looks wrong, the other ones may be right. Tried to match set to label.
+//Similarly, multiple sound ROMs mean there's been an attempt to organise them into logical sets.
+ROM_START( sc2cpe )
+	ROM_REGION( 0x10000, "maincpu", 0 )
+	ROM_LOAD("ce1std25p.bin", 0x00000, 0x10000, CRC(2fad9a49) SHA1(5ffb53031eef8778363836143c4e8d2a65361d51))
+
+	ROM_REGION( 0x20000, "matrix", 0 )
+	ROM_LOAD("cpe1_mtx.bin",  0x00000, 0x10000, CRC(5fd1fd7c) SHA1(7645f8c011be77ac48f4eb2c75c92cc4245fdad4))
+
+	sc2_cpe_sound
+ROM_END
+
+ROM_START( sc2cpep )
+	ROM_REGION( 0x10000, "maincpu", 0 )
+	ROM_LOAD( "club-public-enemy-no1_dat_ac_25p_ass.bin", 0x0000, 0x010000, CRC(00bedbdf) SHA1(97b3e23fed6692ae88e6a6110008124422478355) )
+
+	ROM_REGION( 0x20000, "matrix", 0 )
+	ROM_LOAD("cpe1_mtx.bin",  0x00000, 0x10000, CRC(5fd1fd7c) SHA1(7645f8c011be77ac48f4eb2c75c92cc4245fdad4))
+
+	sc2_cpe_sound
+ROM_END
+
+ROM_START( sc2cpe1 )
+	ROM_REGION( 0x10000, "maincpu", 0 )
+	ROM_LOAD( "club-public-enemy-no1_std_ac_250pnd-25p_p65_ass.bin", 0x0000, 0x010000, CRC(2d56a73b) SHA1(31195fa16c1c95d49716448b80f1d0aa973f29d5) )
+
+	ROM_REGION( 0x20000, "matrix", 0 )
+	ROM_LOAD( "95000572.p1", 0x0000, 0x010000, CRC(551ef8ca) SHA1(825f4c3ff56cb2da20ffe1b2ec33f1692f6806b2) )
+
+	ROM_REGION( 0x20000, "altmatrix", 0 )
+	ROM_LOAD( "95000572.hex", 0x0000, 0x01be8c, CRC(e57e66b5) SHA1(f3e44cdb697e6e666bd0008824e802a2cf997aa5) )//club-public-enemy-no1_mtx_25pss.hex
+
+	sc2_cpe_sound_alt1
+ROM_END
+
+ROM_START( sc2cpe1p )
+	ROM_REGION( 0x10000, "maincpu", 0 )
+	ROM_LOAD( "club-public-enemy-no1_dat_ac_250pnd-25p_p65_ass.bin", 0x0000, 0x010000, CRC(131375cd) SHA1(4899e8dd4acec9563fa40109bb9b839c5d7209a8) )
+
+	ROM_REGION( 0x20000, "matrix", 0 )
+	ROM_LOAD( "95000572.p1", 0x0000, 0x010000, CRC(551ef8ca) SHA1(825f4c3ff56cb2da20ffe1b2ec33f1692f6806b2) )
+
+	sc2_cpe_sound_alt1
+ROM_END
+
+ROM_START( sc2cpe2 )
+	ROM_REGION( 0x10000, "maincpu", 0 )
+	ROM_LOAD( "club-public-enemy-no1_std_fe_ac_250pnd-25p_ass.bin", 0x0000, 0x010000, CRC(0a36fd07) SHA1(6338858eb0dd6ba43bfea66afde0d6d1d5097aee) )
+
+	ROM_REGION( 0x20000, "matrix", 0 )
+	ROM_LOAD( "95000572.p1", 0x0000, 0x010000, CRC(551ef8ca) SHA1(825f4c3ff56cb2da20ffe1b2ec33f1692f6806b2) )
+
+	sc2_cpe_sound_alt1
+ROM_END
+
+ROM_START( sc2cpe2p )
+	ROM_REGION( 0x10000, "maincpu", 0 )
+	ROM_LOAD( "club-public-enemy-no1_dat_fe_ac_250pnd-25p_ass.bin", 0x0000, 0x010000, CRC(5a79358b) SHA1(bf728108aad6937be0a5d79fa604f7ac3b191b42) )
+
+	ROM_REGION( 0x20000, "matrix", 0 )
+	ROM_LOAD( "95000572.p1", 0x0000, 0x010000, CRC(551ef8ca) SHA1(825f4c3ff56cb2da20ffe1b2ec33f1692f6806b2) )
+
+	sc2_cpe_sound_alt1
+ROM_END
+
+ROM_START( sc2cpe3 )
+	ROM_REGION( 0x10000, "maincpu", 0 )
+	ROM_LOAD( "club-public-enemy-no1_std_ac_200pnd_ass.bin", 0x0000, 0x010000, CRC(5704e52d) SHA1(dfae48734794cea2e9a952d808dedb96fd5204b3) )
+
+	ROM_REGION( 0x20000, "matrix", 0 )
+	ROM_LOAD( "matrix.bin", 0x0000, 0x010000, CRC(64014f73) SHA1(67d44db91944738fcadc38bfd0d2b7c0536adb9a) )
+
+	sc2_cpe_sound_alt2
+ROM_END
+
+ROM_START( sc2cpe3p )
+	ROM_REGION( 0x10000, "maincpu", 0 )
+	ROM_LOAD( "club-public-enemy-no1_dat_ac_200pnd_ass.bin", 0x0000, 0x010000, CRC(fec925a3) SHA1(5ce3b6f1236f511ae8975c7ecd1549e8d427a245) )
+
+	ROM_REGION( 0x20000, "matrix", 0 )
+	ROM_LOAD( "matrix.bin", 0x0000, 0x010000, CRC(64014f73) SHA1(67d44db91944738fcadc38bfd0d2b7c0536adb9a) )
+
+	sc2_cpe_sound_alt2
+ROM_END
+
+ROM_START( sc2cpe4 )
+	ROM_REGION( 0x10000, "maincpu", 0 )
+	ROM_LOAD( "95750273.p1", 0x0000, 0x010000, CRC(950da13c) SHA1(2c544e06112969f7914a5b4fd15e6b0dfedf6b0b) )
+
+	ROM_REGION( 0x20000, "matrix", 0 )
+	ROM_LOAD( "matrix.bin", 0x0000, 0x010000, CRC(64014f73) SHA1(67d44db91944738fcadc38bfd0d2b7c0536adb9a) )
+
+	sc2_cpe_sound_alt2
+ROM_END
+
+ROM_START( sc2cpe5p )
+	ROM_REGION( 0x10000, "maincpu", 0 )
+	ROM_LOAD( "club-public-enemy-no1_dat_fe_ac_200pnd_p65_rot_ass.bin", 0x0000, 0x010000, CRC(8d5ff953) SHA1(bdf6b5e014c46f6abac792a5913e98cb897b2a73) )
+
+	ROM_REGION( 0x20000, "matrix", 0 )
+	ROM_LOAD( "matrix.bin", 0x0000, 0x010000, CRC(64014f73) SHA1(67d44db91944738fcadc38bfd0d2b7c0536adb9a) )
+
+	sc2_cpe_sound_alt2
+ROM_END
+
+
+
+//Multiple matrix roms again, best guesses based on labelling but may need to swap them about
+//It'll probably becom clear when the casino hardware is working
+ROM_START( sc2cops )
+	ROM_REGION( 0x10000, "maincpu", 0 )
+	ROM_LOAD( "cops & robbers 10 p1 (27512)", 0x0000, 0x010000, CRC(2a74bf68) SHA1(e6d0cf5c26815184d74bc2b1769d13321ce5e33a) )
 
 	ROM_REGION( 0x10000, "altrevs", 0 )
-	ROM_LOAD( "fools scor ii 10p.bin", 0x0000, 0x010000, CRC(1d6245b7) SHA1(f73b4741cf07d96ec79d907b88d07cd20c748dd3) )
-	ROM_LOAD( "fools.bin", 0x0000, 0x010000, CRC(eaa0757a) SHA1(b6bec8f4f443d6c22c18e16ec0d65839fe30b61c) )
-	ROM_LOAD( "fools6ac.bin", 0x0000, 0x010000, CRC(5fe48a02) SHA1(fd5b07a58567e0c5eb75bf1526a853b3a60ddfa9) )
-	ROM_LOAD( "game 147s only fools.bin", 0x0000, 0x010000, CRC(6cb6cef1) SHA1(bfa40f517b1455e4d563be5964605be63e950e87) )
-	ROM_LOAD( "onlyfoolsnhorses_std.bin", 0x0000, 0x010000, CRC(03cc611a) SHA1(e37d6b87017a52f8de339bbd69b2ccbff9872fae) )
+	// are these different HW? (SC1?) Will add in next pass
+	ROM_LOAD( "cop56cp1", 0x0000, 0x008000, CRC(214edd7d) SHA1(007c17cc522c8f0d30bc1fd08bb18850344f62ad) )
+	ROM_LOAD( "cop56cp2", 0x0000, 0x008000, CRC(c862ee34) SHA1(e807d1072953e67581ce0181bfd82a7efcee7bf0) )
+	ROM_LOAD( "cops&robbers5pv1-3a(27256)", 0x0000, 0x008000, CRC(29513083) SHA1(f2ce0b573d6756e7d835488b8d8eed3266787255) )
+	ROM_LOAD( "cops&robbers5pv1-3b(27256)", 0x0000, 0x008000, CRC(6f5425d6) SHA1(7673841ccfe16eaa0a5cfca1596383f7711f2dbe) )
+	ROM_LOAD( "cops & robbers 5p v1-3 a (27256)", 0x0000, 0x008000, CRC(29513083) SHA1(f2ce0b573d6756e7d835488b8d8eed3266787255) )
+	ROM_LOAD( "cops & robbers 5p v1-3 b (27256)", 0x0000, 0x008000, CRC(6f5425d6) SHA1(7673841ccfe16eaa0a5cfca1596383f7711f2dbe) )
+
+	ROM_REGION( 0x20000, "matrix", 0 )
+	ROM_LOAD( "95000578.p1", 0x0000, 0x010000, CRC(bdd56a09) SHA1(92d0416578c55075a127f1c2af8d6de5216dd189) )//official part number for cops-and-robbers-mtx-ass.bin, cops & robbers 10 p2 (27512
+
+	sc2_cops_sound
+ROM_END
+
+ROM_START( sc2copsp )
+	ROM_REGION( 0x10000, "maincpu", 0 )
+	ROM_LOAD( "cops-and-robbers_dat_ar_var_ass.bin", 0x0000, 0x010000, CRC(6f544505) SHA1(177a8d4038759dc0e52c14b463aaa6afce81d338) )
+
+	ROM_REGION( 0x20000, "matrix", 0 )
+	ROM_LOAD( "95000578.p1", 0x0000, 0x010000, CRC(bdd56a09) SHA1(92d0416578c55075a127f1c2af8d6de5216dd189) )//official part number for cops-and-robbers-mtx-ass.bin, cops & robbers 10 p2 (27512
+
+	sc2_cops_sound
+ROM_END
+
+ROM_START( sc2cops1 )
+	ROM_REGION( 0x10000, "maincpu", 0 )
+	ROM_LOAD( "cops-and-robbers_std_ac_10pnd_ass.bin", 0x0000, 0x010000, CRC(2a74bf68) SHA1(e6d0cf5c26815184d74bc2b1769d13321ce5e33a) )
+
+	ROM_REGION( 0x20000, "matrix", 0 )
+	ROM_LOAD( "95000578.p1", 0x0000, 0x010000, CRC(bdd56a09) SHA1(92d0416578c55075a127f1c2af8d6de5216dd189) )//official part number for cops-and-robbers-mtx-ass.bin, cops & robbers 10 p2 (27512
+
+	sc2_cops_sound
+ROM_END
+
+ROM_START( sc2cops1p )
+	ROM_REGION( 0x10000, "maincpu", 0 )
+	ROM_LOAD( "cops-and-robbers_dat_ac_10pnd_ass.bin", 0x0000, 0x010000, CRC(2e3d0614) SHA1(b8be9a1d0be643d0dde7f6d89c067af1e85018bf) )
+
+	ROM_REGION( 0x20000, "matrix", 0 )
+	ROM_LOAD( "95000578.p1", 0x0000, 0x010000, CRC(bdd56a09) SHA1(92d0416578c55075a127f1c2af8d6de5216dd189) )//official part number for cops-and-robbers-mtx-ass.bin, cops & robbers 10 p2 (27512
+
+	sc2_cops_sound
+ROM_END
+
+ROM_START( sc2cops2 )
+	ROM_REGION( 0x10000, "maincpu", 0 )
+	ROM_LOAD( "cops1020", 0x0000, 0x010000, CRC(3219a07f) SHA1(1f775189b50eeb55c584dd1054c9119d02b2f738) )
+
+	ROM_REGION( 0x20000, "matrix", 0 )
+	ROM_LOAD( "copdot10", 0x0000, 0x010000, CRC(30c41ddd) SHA1(9aa66c30aa0fcbd3fb79a6d0d45d777a116f951c) )
+
+	sc2_cops_sound
+ROM_END
+
+ROM_START( sc2cops3 )
+	ROM_REGION( 0x10000, "maincpu", 0 )
+	ROM_LOAD( "cops-and-robbers_std_ss_var_ass.bin", 0x0000, 0x010000, CRC(664216d2) SHA1(e222147d71f251554207627b7e5e9de5f10cfff8) )
+
+	ROM_REGION( 0x20000, "matrix", 0 )
+	ROM_LOAD( "copsdot8", 0x0000, 0x010000, CRC(0eff2127) SHA1(e9788999ac6006faf0eb4e9d8ef1fd52f092be5a) )
+
+	sc2_cops_sound
+ROM_END
+
+ROM_START( sc2cops3p )
+	ROM_REGION( 0x10000, "maincpu", 0 )
+	ROM_LOAD( "cops-and-robbers_dat_ss_var_ass.bin", 0x0000, 0x010000, CRC(f14af5f8) SHA1(8bb4d9fc78f1f2c274c4b21c7f4e67c3856f0019) )
+
+	ROM_REGION( 0x20000, "matrix", 0 )
+	ROM_LOAD( "copsdot8", 0x0000, 0x010000, CRC(0eff2127) SHA1(e9788999ac6006faf0eb4e9d8ef1fd52f092be5a) )
+
+	sc2_cops_sound
+ROM_END
+
+ROM_START( sc2cops4 )
+	ROM_REGION( 0x10000, "maincpu", 0 )
+	ROM_LOAD( "cops8ac", 0x0000, 0x010000, CRC(c2ef20ff) SHA1(3841fcaacb739ee90ddc064d42d3275dc6a64016) )
+
+	ROM_REGION( 0x20000, "matrix", 0 )
+	ROM_LOAD( "copsdot8", 0x0000, 0x010000, CRC(0eff2127) SHA1(e9788999ac6006faf0eb4e9d8ef1fd52f092be5a) )
+
+	sc2_cops_sound
+ROM_END
+
+//Does this even need a matrix?
+ROM_START( sc2cops5 )
+	ROM_REGION( 0x10000, "maincpu", 0 )
+	ROM_LOAD( "cops & robbers 6 25p (27512)", 0x0000, 0x010000, CRC(0ad3fedf) SHA1(25775a80272c72234be9f528cc8f13cf9e1adbf7) )
+
+	ROM_REGION( 0x20000, "matrix", 0 )
+	ROM_LOAD( "copsdot8", 0x0000, 0x010000, CRC(0eff2127) SHA1(e9788999ac6006faf0eb4e9d8ef1fd52f092be5a) )
+
+	sc2_cops_sound
+ROM_END
+
+ROM_START( sc2copsc )
+	ROM_REGION( 0x10000, "maincpu", 0 )
+	ROM_LOAD( "casino-cops-and-robbers_std_ac_var_10pnd_ass.bin", 0x0000, 0x010000, CRC(549457c2) SHA1(271c7077fd3ee5de67c914faf095b5295dfb6207) )
+
+	ROM_REGION( 0x20000, "matrix", 0 )
+	ROM_LOAD( "95000578.p1", 0x0000, 0x010000, CRC(bdd56a09) SHA1(92d0416578c55075a127f1c2af8d6de5216dd189) )//official part number for cops-and-robbers-mtx-ass.bin, cops & robbers 10 p2 (27512
+
+	sc2_cops_sound
+ROM_END
+
+ROM_START( sc2copscp )
+	ROM_REGION( 0x10000, "maincpu", 0 )
+	ROM_LOAD( "casino-cops-and-robbers_dat_ac_var_10pnd_ass.bin", 0x0000, 0x010000, CRC(fadde12b) SHA1(9b041c932558a0132c853514ca3f325f6f97bc65) )
+
+	ROM_REGION( 0x20000, "matrix", 0 )
+	ROM_LOAD( "95000578.p1", 0x0000, 0x010000, CRC(bdd56a09) SHA1(92d0416578c55075a127f1c2af8d6de5216dd189) )//official part number for cops-and-robbers-mtx-ass.bin, cops & robbers 10 p2 (27512
+
+	sc2_cops_sound
+ROM_END
+
+ROM_START( sc2copsc1 )
+	ROM_REGION( 0x10000, "maincpu", 0 )
+	ROM_LOAD( "casino-cops-and-robbers_std_ms_to_8pnd_ass.bin", 0x0000, 0x010000, CRC(600a91fd) SHA1(b04bce98df824d2c217c70bd8a49349f93043360) )
+
+	ROM_REGION( 0x20000, "matrix", 0 )
+	ROM_LOAD( "copsdot8", 0x0000, 0x010000, CRC(0eff2127) SHA1(e9788999ac6006faf0eb4e9d8ef1fd52f092be5a) )
+
+	sc2_cops_sound
+ROM_END
+
+ROM_START( sc2copsc1p )
+	ROM_REGION( 0x10000, "maincpu", 0 )
+	ROM_LOAD( "casino-cops-and-robbers_dat_ms_to_8pnd_ass.bin", 0x0000, 0x010000, CRC(361ad99f) SHA1(444f2aeef404b087d49e2283bb36bde5e4e673ee) )
+
+	ROM_REGION( 0x20000, "matrix", 0 )
+	ROM_LOAD( "copsdot8", 0x0000, 0x010000, CRC(0eff2127) SHA1(e9788999ac6006faf0eb4e9d8ef1fd52f092be5a) )
+
+	sc2_cops_sound
+ROM_END
+
+ROM_START( sc2copsc2 )
+	ROM_REGION( 0x10000, "maincpu", 0 )
+	ROM_LOAD( "casino-cops-and-robbers_dat_ms_to_8pnd_ass.bin", 0x0000, 0x010000, CRC(361ad99f) SHA1(444f2aeef404b087d49e2283bb36bde5e4e673ee) )
+
+	ROM_REGION( 0x20000, "matrix", 0 )
+	ROM_LOAD( "casino-cops-n-robbers.rom", 0x0000, 0x010000, CRC(54a5168f) SHA1(dfc2bf940ced5a53255238cd9e7d0503e3227691) )
+
+	sc2_cops_sound
+ROM_END
+
+
+//Some of these are labelled as for different cabinets, which probably means different reel motors or configurations
+ROM_START( sc2copcl )
+	ROM_REGION( 0x10000, "maincpu", 0 )
+	ROM_LOAD( "club-cops-and-robbers_std_ac_250pnd-25p_phx_ass.bin", 0x0000, 0x010000, CRC(668def2e) SHA1(802ca565a20d0fce2f5e4340c646429af6aadff6) )
+	sc2_copcl_sound
+ROM_END
+
+ROM_START( sc2copclp )
+	ROM_REGION( 0x10000, "maincpu", 0 )
+	ROM_LOAD( "club-cops-and-robbers_dat_ac_250pnd-25p_phx_ass.bin", 0x0000, 0x010000, CRC(f6e9a013) SHA1(02b6c203c3facdd7015ba1119bcb70bf34b4ec00) )
+	sc2_copcl_sound
+ROM_END
+
+ROM_START( sc2copcl1 )
+	ROM_REGION( 0x10000, "maincpu", 0 )
+	ROM_LOAD( "club-cops-and-robbers_std_ac_250pnd-20p_rot_ass.bin", 0x0000, 0x010000, CRC(078651b5) SHA1(2acc45e5d66625753e5869f6f3ac1379d0c9dfcd) )
+	sc2_copcl_sound
+ROM_END
+
+ROM_START( sc2copcl1p )
+	ROM_REGION( 0x10000, "maincpu", 0 )
+	ROM_LOAD( "club-cops-and-robbers_dat_ac_250pnd-20p_rot_ass.bin", 0x0000, 0x010000, CRC(05635f8b) SHA1(d3cf98e3858189db725621d4ba07728a585d7a3b) )
+	sc2_copcl_sound
+ROM_END
+
+ROM_START( sc2copcl2 )
+	ROM_REGION( 0x10000, "maincpu", 0 )
+	ROM_LOAD( "club-cops-and-robbers_std_ac_250pnd-20p_ass.bin", 0x0000, 0x010000, CRC(229c65c1) SHA1(8052c4b8702275235545807e7b075571fc97d4f3) )
+	sc2_copcl_sound
+ROM_END
+
+ROM_START( sc2copcl3 )
+	ROM_REGION( 0x10000, "maincpu", 0 )
+	ROM_LOAD( "club-cops-and-robbers_std_fe_ac_p67_ass.bin", 0x0000, 0x010000, CRC(4906d170) SHA1(c304a2986560d675b2e776965fdf444e4d56f104) )
+	sc2_copcl_sound
+ROM_END
+
+ROM_START( sc2copcl3p )
+	ROM_REGION( 0x10000, "maincpu", 0 )
+	ROM_LOAD( "club-cops-and-robbers_dat_fe_ac_p67_ass.bin", 0x0000, 0x010000, CRC(327db998) SHA1(aa8583cedd52a3cd06be6423a32e48273ec6218a) )
+	sc2_copcl_sound
+ROM_END
+
+ROM_START( sc2copcl4 )
+	ROM_REGION( 0x10000, "maincpu", 0 )
+	ROM_LOAD( "club-cops-and-robbers_std_ac_var_p65_ass.bin", 0x0000, 0x010000, CRC(23d80392) SHA1(d7f5bab4fc8f42c1a38e26b54bc519e0f03d20bc) )
+	sc2_copcl_sound
+ROM_END
+
+ROM_START( sc2copcl5 )
+	ROM_REGION( 0x10000, "maincpu", 0 )
+	ROM_LOAD( "club-cops-and-robbers_std_fe_ac_p63_ass.bin", 0x0000, 0x010000, CRC(fc7f9b85) SHA1(d9f940bca29919d097fa7d128869725e01d6dbc3) )
+	sc2_copcl_sound
+ROM_END
+
+ROM_START( sc2copcl6 )
+	ROM_REGION( 0x10000, "maincpu", 0 )
+	ROM_LOAD( "club-cops-and-robbers_std_ac_200pnd-20p_ass.bin", 0x0000, 0x010000, CRC(214cda40) SHA1(fc585f211256495bfaaa6cb6c4d9c8a110ab5051) )
+	sc2_copcl_sound
+ROM_END
+
+ROM_START( sc2copcl6p )
+	ROM_REGION( 0x10000, "maincpu", 0 )
+	ROM_LOAD( "club-cops-and-robbers_dat_ac_200pnd-20p_ass.bin", 0x0000, 0x010000, CRC(b4071611) SHA1(2596ccee2b94bb56aa629ee892bd357b706005b0) )
+	sc2_copcl_sound
+ROM_END
+
+ROM_START( sc2copcl7 )
+	ROM_REGION( 0x10000, "maincpu", 0 )
+	ROM_LOAD( "club-cops-and-robbers_std_ac_var_200pnd_ijf_ass.bin", 0x0000, 0x010000, CRC(db5a287e) SHA1(5615480767348061b7f08a709a16aa0b9cf0658e) )
+	sc2_copcl_sound
+ROM_END
+
+ROM_START( sc2copcl8 )
+	ROM_REGION( 0x10000, "maincpu", 0 )
+	ROM_LOAD( "club-cops-and-robbers_std_ac_ffp_ass.bin", 0x0000, 0x010000, CRC(347255bf) SHA1(7f96277579e68bdf1e21788cc5e35941d98df87f) )
+	sc2_copcl_sound
+ROM_END
+
+ROM_START( sc2copcl8p )
+	ROM_REGION( 0x10000, "maincpu", 0 )
+	ROM_LOAD( "club-cops-and-robbers_dat_ac_ffp_ass.bin", 0x0000, 0x010000, CRC(ec92b62d) SHA1(f10bc8fa55cd59127f179a35a61c1a57597856b6) )
+	sc2_copcl_sound
+ROM_END
+
+ROM_START( sc2copcl9 )
+	ROM_REGION( 0x10000, "maincpu", 0 )
+	ROM_LOAD( "club-cops-and-robbers_std_fe_ac_ass.bin", 0x0000, 0x010000, CRC(c7461e95) SHA1(f4088056e848742d3795f5b067476b56071f99bd) )
+	sc2_copcl_sound
+ROM_END
+
+ROM_START( sc2copcl9p )
+	ROM_REGION( 0x10000, "maincpu", 0 )
+	ROM_LOAD( "club-cops-and-robbers_dat_fe_ac_ass.bin", 0x0000, 0x010000, CRC(ead8cbe5) SHA1(5594eb9a736e0f15a6f0f097a8cbbd8352e46fc4) )
+	sc2_copcl_sound
+ROM_END
+
+ROM_START( sc2copcl10 )
+	ROM_REGION( 0x10000, "maincpu", 0 )
+	ROM_LOAD( "club-cops-and-robbers_std_ac_npr_ass.bin", 0x0000, 0x010000, CRC(b9c0bcb4) SHA1(c1a398bd58097411b80d36030760e7820dc346f4) )
+	sc2_copcl_sound
+ROM_END
+
+ROM_START( sc2copcl11 )
+	ROM_REGION( 0x10000, "maincpu", 0 )
+	ROM_LOAD( "cops200", 0x0000, 0x010000, CRC(05d29adc) SHA1(06a986356c1b48ad5ee92c9a7f6fb2531e1806af) )
+	sc2_copcl_sound
+ROM_END
+
+ROM_START( sc2copcl11p )
+	ROM_REGION( 0x10000, "maincpu", 0 )
+	ROM_LOAD( "club-cops-and-robbers_dat_fr_ac_p63_ass.bin", 0x0000, 0x010000, CRC(93965bfc) SHA1(52af75234f56a77f082132d9532d3ffcaef5d271) )
+	sc2_copcl_sound
+ROM_END
+
+
+
+ROM_START( sc2copdc )
+	ROM_REGION( 0x10000, "maincpu", 0 )
+	ROM_LOAD( "club-deluxe-cops-and-robbers_std_ac_250pnd-25p_p67_ass.bin", 0x0000, 0x010000, CRC(fd19db9a) SHA1(441d80b8463ffd5f8783b3cb80d8321f64e8fcc5) )
 
 	ROM_REGION( 0x20000, "matrix", 0 )
-	ROM_LOAD( "onlyfoolsnhorsesdotmatrix.bin", 0x0000, 0x010000, CRC(521611f7) SHA1(08cdc9f7434657151d90fcfd26ce4668477c2998) )
+	ROM_LOAD( "club-deluxe-cops-and-robbers_mtx_250pnd-25p.bin", 0x0000, 0x010000, CRC(e1e4c10d) SHA1(5c508fe8ed96191eb1fa7156a09441f2f840544f) )
 
-	ROM_REGION( 0x80000, "upd", 0 )
-	ROM_LOAD( "onlyfools_snd.bin", 0x0000, 0x080000, CRC(c073bb0c) SHA1(54b3df8c8d814af1fbb662834739a32a693fc7ee) )
+	ROM_REGION( 0x20000, "altmatrix", 0 )//HEX equivalent of above?
+	ROM_LOAD( "club-deluxe-cops-and-robbers_mtx_250pnd-25pss.hex", 0x0000, 0x01cfbf, CRC(b2abbab4) SHA1(40e202e1678f637f7c0097b4f8f4884de439935e) )
+
+	sc2_copdc_sound
 ROM_END
 
+ROM_START( sc2copdcp )
+	ROM_REGION( 0x10000, "maincpu", 0 )
+	ROM_LOAD( "club-deluxe-cops-and-robbers_dat_ac_250pnd-25p_p67_ass.bin", 0x0000, 0x010000, CRC(734c5e16) SHA1(e6a6a31ef5156e207dd77c40f5b29b10ef4f9def) )
 
+	ROM_REGION( 0x20000, "matrix", 0 )
+	ROM_LOAD( "club-deluxe-cops-and-robbers_mtx_250pnd-25p.bin", 0x0000, 0x010000, CRC(e1e4c10d) SHA1(5c508fe8ed96191eb1fa7156a09441f2f840544f) )
 
+	sc2_copdc_sound
+ROM_END
 
-ROM_START( sc2town )
+ROM_START( sc2copdc1 )
 	ROM_REGION( 0x10000, "maincpu", 0 )
-	ROM_LOAD( "atown20p", 0x0000, 0x010000, CRC(4f7ec25e) SHA1(52af065633942a9e4c195f3294b81ae57bf0c414) )
-
-	ROM_REGION( 0x10000, "altrevs", 0 )
-	ROM_LOAD( "round-the-town_dat_ac_10pnd-20p-25p_ass.bin", 0x0000, 0x010000, CRC(8291ad4e) SHA1(cd304052123dfe6d8504a6f5e92413c569bcaf8e) )
-	ROM_LOAD( "round-the-town_dat_ar_var_ass.bin", 0x0000, 0x010000, CRC(3d811bb4) SHA1(134e1c65f4f8377eca6d7ccfded5d4600d2949bf) )
-	ROM_LOAD( "round-the-town_dat_var_ass.bin", 0x0000, 0x010000, CRC(85110517) SHA1(30eba3987cc60ccbaecbc4c700bb2f1ba088d12f) )
-	ROM_LOAD( "round-the-town_std_ac_10pnd-20p-25p_ass.bin", 0x0000, 0x010000, CRC(8394c0e9) SHA1(b9b45e0c855a5f7270259543337fb441694b61e2) )
-	ROM_LOAD( "round-the-town_std_ac_20p_20po_ass.bin", 0x0000, 0x010000, CRC(6bc0c2ff) SHA1(9a2bac50978f2b7d2072e0febe4bf4a935bf287d) )
-	ROM_LOAD( "round-the-town_std_ar_var_ass.bin", 0x0000, 0x010000, CRC(e5be3a13) SHA1(8a31c67641bce3c2160bb1c651535902374349b4) )
-	ROM_LOAD( "round-the-town_std_var_ass.bin", 0x0000, 0x010000, CRC(1909994f) SHA1(47268e1119c808096ddff872e28444ed67bc5dbf) )
-	ROM_LOAD( "rtt8ac", 0x0000, 0x010000, CRC(e495e5ea) SHA1(4fb6a43cee1c79ce05b71b35b195f2d35913c40c) )
-	ROM_LOAD( "95750069.p1", 0x0000, 0x010000, CRC(6bc0c2ff) SHA1(9a2bac50978f2b7d2072e0febe4bf4a935bf287d) )
+	ROM_LOAD( "club-deluxe-cops-and-robbers_std_ac_250pnd-25p_p65_ass.bin", 0x0000, 0x010000, CRC(8f5396a6) SHA1(c7cd83bdeca3a852a8203330ca14574608b9a9e9) )
 
 	ROM_REGION( 0x20000, "matrix", 0 )
-	ROM_LOAD( "round-the-town_mtx.bin", 0x0000, 0x010000, CRC(aa6aac1d) SHA1(57ed376f602dd70495b3bd356bea5113fa8e861e) )
-	//ROM_LOAD( "attdot.bin", 0x0000, 0x010000, CRC(aa6aac1d) SHA1(57ed376f602dd70495b3bd356bea5113fa8e861e) )
-
-	ROM_REGION( 0x20000, "altmatrix", 0 )
-	ROM_LOAD( "round-the-town_mtx_ass.bin", 0x0000, 0x010000, CRC(1a3b2fb1) SHA1(3d51c6e16558c1ac8ad852a461cd89aef9bc91e4) )
-	ROM_LOAD( "95000581.mtx", 0x0000, 0x005c57, CRC(55c55c76) SHA1(3db65ba2acd8cd09f8c12a9135a1d93b71e0838b) )
+	ROM_LOAD( "club-deluxe-cops-and-robbers_mtx_250pnd-25p.bin", 0x0000, 0x010000, CRC(e1e4c10d) SHA1(5c508fe8ed96191eb1fa7156a09441f2f840544f) )
 
-	ROM_REGION( 0x80000, "upd", 0 )
-	ROM_LOAD( "attsnd.bin", 0x0000, 0x040000, CRC(9b5327c8) SHA1(b9e5aeb3e9a6ece796e9164e425829d97c5f3a82) )
+	sc2_copdc_sound
 ROM_END
 
-
-ROM_START( sc2cpe )
+ROM_START( sc2copdc1p )
 	ROM_REGION( 0x10000, "maincpu", 0 )
-	ROM_LOAD("ce1std25p.bin", 0x00000, 0x10000, CRC(2fad9a49) SHA1(5ffb53031eef8778363836143c4e8d2a65361d51))
+	ROM_LOAD( "club-deluxe-cops-and-robbers_dat_ac_250pnd-25p_p65_ass.bin", 0x0000, 0x010000, CRC(f2433167) SHA1(88c90c047f67361e1974ea29a887f11c79c78b55) )
 
-	ROM_REGION( 0x10000, "altrevs", 0 )
-	ROM_LOAD( "95000572.p1", 0x0000, 0x010000, CRC(551ef8ca) SHA1(825f4c3ff56cb2da20ffe1b2ec33f1692f6806b2) )
-	ROM_LOAD( "95750273.p1", 0x0000, 0x010000, CRC(950da13c) SHA1(2c544e06112969f7914a5b4fd15e6b0dfedf6b0b) )
-	ROM_LOAD( "club-public-enemy-no1_dat_ac_200pnd_ass.bin", 0x0000, 0x010000, CRC(fec925a3) SHA1(5ce3b6f1236f511ae8975c7ecd1549e8d427a245) )
-	ROM_LOAD( "club-public-enemy-no1_dat_ac_250pnd-25p_p65_ass.bin", 0x0000, 0x010000, CRC(131375cd) SHA1(4899e8dd4acec9563fa40109bb9b839c5d7209a8) )
-	ROM_LOAD( "club-public-enemy-no1_dat_ac_25p_ass.bin", 0x0000, 0x010000, CRC(00bedbdf) SHA1(97b3e23fed6692ae88e6a6110008124422478355) )
-	ROM_LOAD( "club-public-enemy-no1_dat_fe_ac_200pnd_p65_rot_ass.bin", 0x0000, 0x010000, CRC(8d5ff953) SHA1(bdf6b5e014c46f6abac792a5913e98cb897b2a73) )
-	ROM_LOAD( "club-public-enemy-no1_dat_fe_ac_250pnd-25p_ass.bin", 0x0000, 0x010000, CRC(5a79358b) SHA1(bf728108aad6937be0a5d79fa604f7ac3b191b42) )
-	ROM_LOAD( "club-public-enemy-no1_std_ac_200pnd_ass.bin", 0x0000, 0x010000, CRC(5704e52d) SHA1(dfae48734794cea2e9a952d808dedb96fd5204b3) )
-	ROM_LOAD( "club-public-enemy-no1_std_ac_250pnd-25p_p65_ass.bin", 0x0000, 0x010000, CRC(2d56a73b) SHA1(31195fa16c1c95d49716448b80f1d0aa973f29d5) )
-	ROM_LOAD( "club-public-enemy-no1_std_fe_ac_250pnd-25p_ass.bin", 0x0000, 0x010000, CRC(0a36fd07) SHA1(6338858eb0dd6ba43bfea66afde0d6d1d5097aee) )
-	ROM_LOAD( "pe1.bin", 0x0000, 0x010000, CRC(5704e52d) SHA1(dfae48734794cea2e9a952d808dedb96fd5204b3) )
+	ROM_REGION( 0x20000, "matrix", 0 )
+	ROM_LOAD( "club-deluxe-cops-and-robbers_mtx_250pnd-25p.bin", 0x0000, 0x010000, CRC(e1e4c10d) SHA1(5c508fe8ed96191eb1fa7156a09441f2f840544f) )
+
+	sc2_copdc_sound
+ROM_END
 
+ROM_START( sc2copdc2 )
+	ROM_REGION( 0x10000, "maincpu", 0 )
+	ROM_LOAD( "club-deluxe-cops-and-robbers_std_ac_250pnd-20p_ass.bin", 0x0000, 0x010000, CRC(4e7da1cb) SHA1(1c61f47f30a9d27f558548c23ddf6de2e5366344) )
 
 	ROM_REGION( 0x20000, "matrix", 0 )
-	ROM_LOAD("cpe1_mtx.bin",  0x00000, 0x10000, CRC(5fd1fd7c) SHA1(7645f8c011be77ac48f4eb2c75c92cc4245fdad4))
+	ROM_LOAD( "club-deluxe-cops-and-robbers_mtx_250pnd-25p.bin", 0x0000, 0x010000, CRC(e1e4c10d) SHA1(5c508fe8ed96191eb1fa7156a09441f2f840544f) )
 
-	ROM_REGION( 0x20000, "altmatrix", 0 )
-	ROM_LOAD( "club-public-enemy-no1_mtx_25pss.hex", 0x0000, 0x01be8c, CRC(e57e66b5) SHA1(f3e44cdb697e6e666bd0008824e802a2cf997aa5) )
-	ROM_LOAD( "matrix.bin", 0x0000, 0x010000, CRC(64014f73) SHA1(67d44db91944738fcadc38bfd0d2b7c0536adb9a) )
-	ROM_LOAD( "95000572.mtx", 0x0000, 0x008680, CRC(b7f486a0) SHA1(298ae0cf1b256517daa052efd25769230d0ce8a5) )
+	sc2_copdc_sound
+ROM_END
 
-	ROM_REGION( 0x80000, "upd", 0 )
-	ROM_LOAD("cpe1_snd.bin",  0x00000, 0x80000, CRC(ca8a56bb) SHA1(36434dae4369f004fa5b4dd00eb6b1a965be60f9))
+ROM_START( sc2copdc2p )
+	ROM_REGION( 0x10000, "maincpu", 0 )
+	ROM_LOAD( "club-deluxe-cops-and-robbers_dat_ac_250pnd-20p_ass.bin", 0x0000, 0x010000, CRC(c5f6c4f6) SHA1(69be1c6f134406a5457cf4bd7ed78dc4524bac6d) )
 
-	ROM_REGION( 0x80000, "altupd", 0 )
-	ROM_LOAD( "pen1c_snd.bin", 0x0000, 0x080000, CRC(57f3d152) SHA1(f5ccd11042d54396352df149e85c4aa271342d49) )
-	ROM_LOAD( "95004012.p1", 0x0000, 0x080000, CRC(30d1f22a) SHA1(73cb2d12b090841a12a2ed21653248f41d02e125) )
+	ROM_REGION( 0x20000, "matrix", 0 )
+	ROM_LOAD( "club-deluxe-cops-and-robbers_mtx_250pnd-25p.bin", 0x0000, 0x010000, CRC(e1e4c10d) SHA1(5c508fe8ed96191eb1fa7156a09441f2f840544f) )
+
+	sc2_copdc_sound
 ROM_END
 
+ROM_START( sc2copdc3 )
+	ROM_REGION( 0x10000, "maincpu", 0 )
+	ROM_LOAD( "club-deluxe-cops-and-robbers_std_ac_250pnd_ass.bin", 0x0000, 0x010000, CRC(10a9d7d3) SHA1(7d147ce9c2c98f10694ee99e14286be3f74bbdf4) )
 
+	ROM_REGION( 0x20000, "matrix", 0 )
+	ROM_LOAD( "club-deluxe-cops-and-robbers_mtx_250pnd-25p.bin", 0x0000, 0x010000, CRC(e1e4c10d) SHA1(5c508fe8ed96191eb1fa7156a09441f2f840544f) )
 
+	sc2_copdc_sound
+ROM_END
 
-ROM_START( sc2cops )
+ROM_START( sc2copdc3p )
 	ROM_REGION( 0x10000, "maincpu", 0 )
-	ROM_LOAD( "cops & robbers 10 p1 (27512)", 0x0000, 0x010000, CRC(2a74bf68) SHA1(e6d0cf5c26815184d74bc2b1769d13321ce5e33a) )
+	ROM_LOAD( "club-deluxe-cops-and-robbers_dat_ac_250pnd_ass.bin", 0x0000, 0x010000, CRC(6b899a10) SHA1(58b7e2e9eda0d3715de8a4af31b49e059942b6f2) )
 
-	ROM_REGION( 0x10000, "altrevs", 0 )
-	ROM_LOAD( "casino-cops-and-robbers_dat_ac_var_10pnd_ass.bin", 0x0000, 0x010000, CRC(fadde12b) SHA1(9b041c932558a0132c853514ca3f325f6f97bc65) )
-	ROM_LOAD( "casino-cops-and-robbers_dat_ms_to_8pnd_ass.bin", 0x0000, 0x010000, CRC(361ad99f) SHA1(444f2aeef404b087d49e2283bb36bde5e4e673ee) )
-	ROM_LOAD( "casino-cops-and-robbers_std_ac_var_10pnd_ass.bin", 0x0000, 0x010000, CRC(549457c2) SHA1(271c7077fd3ee5de67c914faf095b5295dfb6207) )
-	ROM_LOAD( "casino-cops-and-robbers_std_ms_to_8pnd_ass.bin", 0x0000, 0x010000, CRC(600a91fd) SHA1(b04bce98df824d2c217c70bd8a49349f93043360) )
-	ROM_LOAD( "casino-cops-n-robbers.rom", 0x0000, 0x010000, CRC(54a5168f) SHA1(dfc2bf940ced5a53255238cd9e7d0503e3227691) )
-	ROM_LOAD( "cops & robbers 6 25p (27512)", 0x0000, 0x010000, CRC(0ad3fedf) SHA1(25775a80272c72234be9f528cc8f13cf9e1adbf7) )
-	ROM_LOAD( "cops-and-robbers_dat_ac_10pnd_ass.bin", 0x0000, 0x010000, CRC(2e3d0614) SHA1(b8be9a1d0be643d0dde7f6d89c067af1e85018bf) )
-	ROM_LOAD( "cops-and-robbers_dat_ar_var_ass.bin", 0x0000, 0x010000, CRC(6f544505) SHA1(177a8d4038759dc0e52c14b463aaa6afce81d338) )
-	ROM_LOAD( "cops-and-robbers_dat_ss_var_ass.bin", 0x0000, 0x010000, CRC(f14af5f8) SHA1(8bb4d9fc78f1f2c274c4b21c7f4e67c3856f0019) )
-	ROM_LOAD( "cops-and-robbers_std_ac_10pnd_a.bin", 0x0000, 0x010000, CRC(2a74bf68) SHA1(e6d0cf5c26815184d74bc2b1769d13321ce5e33a) )
-	ROM_LOAD( "cops-and-robbers_std_ac_10pnd_ass.bin", 0x0000, 0x010000, CRC(2a74bf68) SHA1(e6d0cf5c26815184d74bc2b1769d13321ce5e33a) )
-	ROM_LOAD( "cops-and-robbers_std_ss_var_ass.bin", 0x0000, 0x010000, CRC(664216d2) SHA1(e222147d71f251554207627b7e5e9de5f10cfff8) )
-	ROM_LOAD( "cops1020", 0x0000, 0x010000, CRC(3219a07f) SHA1(1f775189b50eeb55c584dd1054c9119d02b2f738) )
-	ROM_LOAD( "cops8ac", 0x0000, 0x010000, CRC(c2ef20ff) SHA1(3841fcaacb739ee90ddc064d42d3275dc6a64016) )
-	// are these different HW? (SC1?)
-	ROM_LOAD( "cop56cp1", 0x0000, 0x008000, CRC(214edd7d) SHA1(007c17cc522c8f0d30bc1fd08bb18850344f62ad) )
-	ROM_LOAD( "cop56cp2", 0x0000, 0x008000, CRC(c862ee34) SHA1(e807d1072953e67581ce0181bfd82a7efcee7bf0) )
-	ROM_LOAD( "cops&robbers5pv1-3a(27256)", 0x0000, 0x008000, CRC(29513083) SHA1(f2ce0b573d6756e7d835488b8d8eed3266787255) )
-	ROM_LOAD( "cops&robbers5pv1-3b(27256)", 0x0000, 0x008000, CRC(6f5425d6) SHA1(7673841ccfe16eaa0a5cfca1596383f7711f2dbe) )
-	ROM_LOAD( "cops & robbers 5p v1-3 a (27256)", 0x0000, 0x008000, CRC(29513083) SHA1(f2ce0b573d6756e7d835488b8d8eed3266787255) )
-	ROM_LOAD( "cops & robbers 5p v1-3 b (27256)", 0x0000, 0x008000, CRC(6f5425d6) SHA1(7673841ccfe16eaa0a5cfca1596383f7711f2dbe) )
+	ROM_REGION( 0x20000, "matrix", 0 )
+	ROM_LOAD( "club-deluxe-cops-and-robbers_mtx_250pnd-25p.bin", 0x0000, 0x010000, CRC(e1e4c10d) SHA1(5c508fe8ed96191eb1fa7156a09441f2f840544f) )
+
+	sc2_copdc_sound
+ROM_END
 
+//Cannot be sure the matrix rom matches these, but we have no alternative...
+ROM_START( sc2copdc4 )
+	ROM_REGION( 0x10000, "maincpu", 0 )
+	ROM_LOAD( "club-deluxe-cops-and-robbers_std_ac_20p_p63_ass.bin", 0x0000, 0x010000, CRC(cb2c995c) SHA1(2a618eb611637e048dc054de0d8f6466f5071617) )
 
 	ROM_REGION( 0x20000, "matrix", 0 )
-	ROM_LOAD( "cops & robbers 10 p2 (27512)", 0x0000, 0x010000, CRC(bdd56a09) SHA1(92d0416578c55075a127f1c2af8d6de5216dd189) )
+	ROM_LOAD( "club-deluxe-cops-and-robbers_mtx_250pnd-25p.bin", 0x0000, 0x010000, CRC(e1e4c10d) SHA1(5c508fe8ed96191eb1fa7156a09441f2f840544f) )
 
-	ROM_REGION( 0x20000, "altmatrix", 0 )
-	ROM_LOAD( "copsdot8", 0x0000, 0x010000, CRC(0eff2127) SHA1(e9788999ac6006faf0eb4e9d8ef1fd52f092be5a) )
-	ROM_LOAD( "cops-and-robbers_mtx_a.bin", 0x0000, 0x010000, CRC(bdd56a09) SHA1(92d0416578c55075a127f1c2af8d6de5216dd189) )
-	ROM_LOAD( "cops-and-robbers_mtx_ass.bin", 0x0000, 0x010000, CRC(bdd56a09) SHA1(92d0416578c55075a127f1c2af8d6de5216dd189) )
-	ROM_LOAD( "copdot10", 0x0000, 0x010000, CRC(30c41ddd) SHA1(9aa66c30aa0fcbd3fb79a6d0d45d777a116f951c) )
-	ROM_LOAD( "95000578.mtx", 0x0000, 0x00438f, CRC(8fd08810) SHA1(fbb278629067ed2fb17479f6a9fd439e41809f53) ) // same as bdd56a09 rom, but zipped? check
+	sc2_copdc_sound
+ROM_END
 
+ROM_START( sc2copdc4p )
+	ROM_REGION( 0x10000, "maincpu", 0 )
+	ROM_LOAD( "club-deluxe-cops-and-robbers_dat_ac_20p_p63_ass.bin", 0x0000, 0x010000, CRC(5c97d505) SHA1(6ade77a6dcf1cc57afe879502534f855f6bd4cc8) )
 
-	ROM_REGION( 0x80000, "upd", 0 )
-	ROM_LOAD( "copssnd.bin", 0x0000, 0x040000, CRC(4bebbc37) SHA1(10eb8542a9de35efc0f75b532c94e1b3e0d21e47) )
+	ROM_REGION( 0x20000, "matrix", 0 )
+	ROM_LOAD( "club-deluxe-cops-and-robbers_mtx_250pnd-25p.bin", 0x0000, 0x010000, CRC(e1e4c10d) SHA1(5c508fe8ed96191eb1fa7156a09441f2f840544f) )
 
-	ROM_REGION( 0x80000, "altupd", 0 ) // probably just the same but with data repeated, check
-	ROM_LOAD( "copsnrobbers.bin", 0x0000, 0x080000, CRC(04ebfc07) SHA1(3c8e9f0e47f3b9b4d787dcd576e11a9b4a71757e) )
+	sc2_copdc_sound
 ROM_END
 
-
-ROM_START( sc2copcl )
+ROM_START( sc2copdc5 )
 	ROM_REGION( 0x10000, "maincpu", 0 )
-	ROM_LOAD( "club-cops-and-robbers_std_fe_ac_ass.bin", 0x0000, 0x010000, CRC(c7461e95) SHA1(f4088056e848742d3795f5b067476b56071f99bd) )
-
-	ROM_REGION( 0x10000, "altrevs", 0 )
-	ROM_LOAD( "club-cops-and-robbers_dat_ac_200pnd-20p_ass.bin", 0x0000, 0x010000, CRC(b4071611) SHA1(2596ccee2b94bb56aa629ee892bd357b706005b0) )
-	ROM_LOAD( "club-cops-and-robbers_dat_ac_250pnd-20p_rot_ass.bin", 0x0000, 0x010000, CRC(05635f8b) SHA1(d3cf98e3858189db725621d4ba07728a585d7a3b) )
-	ROM_LOAD( "club-cops-and-robbers_dat_ac_250pnd-25p_phx_ass.bin", 0x0000, 0x010000, CRC(f6e9a013) SHA1(02b6c203c3facdd7015ba1119bcb70bf34b4ec00) )
-	ROM_LOAD( "club-cops-and-robbers_dat_ac_ffp_ass.bin", 0x0000, 0x010000, CRC(ec92b62d) SHA1(f10bc8fa55cd59127f179a35a61c1a57597856b6) )
-	ROM_LOAD( "club-cops-and-robbers_dat_fe_ac_ass.bin", 0x0000, 0x010000, CRC(ead8cbe5) SHA1(5594eb9a736e0f15a6f0f097a8cbbd8352e46fc4) )
-	ROM_LOAD( "club-cops-and-robbers_dat_fe_ac_p67_ass.bin", 0x0000, 0x010000, CRC(327db998) SHA1(aa8583cedd52a3cd06be6423a32e48273ec6218a) )
-	ROM_LOAD( "club-cops-and-robbers_dat_fr_ac_p63_ass.bin", 0x0000, 0x010000, CRC(93965bfc) SHA1(52af75234f56a77f082132d9532d3ffcaef5d271) )
-	ROM_LOAD( "club-cops-and-robbers_std_ac_200pnd-20p_ass.bin", 0x0000, 0x010000, CRC(214cda40) SHA1(fc585f211256495bfaaa6cb6c4d9c8a110ab5051) )
-	ROM_LOAD( "club-cops-and-robbers_std_ac_250pnd-20p_ass.bin", 0x0000, 0x010000, CRC(229c65c1) SHA1(8052c4b8702275235545807e7b075571fc97d4f3) )
-	ROM_LOAD( "club-cops-and-robbers_std_ac_250pnd-20p_rot_ass.bin", 0x0000, 0x010000, CRC(078651b5) SHA1(2acc45e5d66625753e5869f6f3ac1379d0c9dfcd) )
-	ROM_LOAD( "club-cops-and-robbers_std_ac_250pnd-25p_phx_a.bin", 0x0000, 0x010000, CRC(668def2e) SHA1(802ca565a20d0fce2f5e4340c646429af6aadff6) )
-	ROM_LOAD( "club-cops-and-robbers_std_ac_250pnd-25p_phx_ass.bin", 0x0000, 0x010000, CRC(668def2e) SHA1(802ca565a20d0fce2f5e4340c646429af6aadff6) )
-	ROM_LOAD( "club-cops-and-robbers_std_ac_ffp_ass.bin", 0x0000, 0x010000, CRC(347255bf) SHA1(7f96277579e68bdf1e21788cc5e35941d98df87f) )
-	ROM_LOAD( "club-cops-and-robbers_std_ac_npr_ass.bin", 0x0000, 0x010000, CRC(b9c0bcb4) SHA1(c1a398bd58097411b80d36030760e7820dc346f4) )
-	ROM_LOAD( "club-cops-and-robbers_std_ac_var_200pnd_ijf_ass.bin", 0x0000, 0x010000, CRC(db5a287e) SHA1(5615480767348061b7f08a709a16aa0b9cf0658e) )
-	ROM_LOAD( "club-cops-and-robbers_std_ac_var_p65_ass.bin", 0x0000, 0x010000, CRC(23d80392) SHA1(d7f5bab4fc8f42c1a38e26b54bc519e0f03d20bc) )
-	ROM_LOAD( "club-cops-and-robbers_std_fe_ac_p63_ass.bin", 0x0000, 0x010000, CRC(fc7f9b85) SHA1(d9f940bca29919d097fa7d128869725e01d6dbc3) )
-	ROM_LOAD( "club-cops-and-robbers_std_fe_ac_p67_ass.bin", 0x0000, 0x010000, CRC(4906d170) SHA1(c304a2986560d675b2e776965fdf444e4d56f104) )
-	ROM_LOAD( "cop200.hex", 0x0000, 0x010000, CRC(db5a287e) SHA1(5615480767348061b7f08a709a16aa0b9cf0658e) )
-	ROM_LOAD( "cops200", 0x0000, 0x010000, CRC(05d29adc) SHA1(06a986356c1b48ad5ee92c9a7f6fb2531e1806af) )
+	ROM_LOAD( "club-deluxe-cops-and-robbers_std_ac_var_200pnd_ass.bin", 0x0000, 0x010000, CRC(23d239fa) SHA1(44dae2cd2be573df71b60ba3918cc2d728cde4b4) )
 
-	ROM_REGION( 0x20000, "matrix", 0 ) // based on the name this would belong with the deluxe set below...
+	ROM_REGION( 0x20000, "matrix", 0 )
 	ROM_LOAD( "club-deluxe-cops-and-robbers_mtx_250pnd-25p.bin", 0x0000, 0x010000, CRC(e1e4c10d) SHA1(5c508fe8ed96191eb1fa7156a09441f2f840544f) )
 
-	ROM_REGION( 0x80000, "upd", 0 )
-	ROM_LOAD( "club-cops-and-robbers-sound.bin", 0x0000, 0x040000, CRC(b5ba009d) SHA1(806b1d739fbf00b7e55ed0b8056440e47bfba87a) )
+	sc2_copdc_sound
 ROM_END
 
-ROM_START( sc2copdc )
+ROM_START( sc2copdc5p )
 	ROM_REGION( 0x10000, "maincpu", 0 )
-	ROM_LOAD( "club-deluxe-cops-and-robbers_std_ac_20p_p63_ass.bin", 0x0000, 0x010000, CRC(cb2c995c) SHA1(2a618eb611637e048dc054de0d8f6466f5071617) )
-
-	ROM_REGION( 0x10000, "altrevs", 0 )
-	ROM_LOAD( "club-deluxe-cops-and-robbers_dat_ac_20p_p63_ass.bin", 0x0000, 0x010000, CRC(5c97d505) SHA1(6ade77a6dcf1cc57afe879502534f855f6bd4cc8) )
-	ROM_LOAD( "club-deluxe-cops-and-robbers_dat_ac_250pnd-20p_ass.bin", 0x0000, 0x010000, CRC(c5f6c4f6) SHA1(69be1c6f134406a5457cf4bd7ed78dc4524bac6d) )
-	ROM_LOAD( "club-deluxe-cops-and-robbers_dat_ac_250pnd-25p_p65_ass.bin", 0x0000, 0x010000, CRC(f2433167) SHA1(88c90c047f67361e1974ea29a887f11c79c78b55) )
-	ROM_LOAD( "club-deluxe-cops-and-robbers_dat_ac_250pnd-25p_p67_ass.bin", 0x0000, 0x010000, CRC(734c5e16) SHA1(e6a6a31ef5156e207dd77c40f5b29b10ef4f9def) )
-	ROM_LOAD( "club-deluxe-cops-and-robbers_dat_ac_250pnd_ass.bin", 0x0000, 0x010000, CRC(6b899a10) SHA1(58b7e2e9eda0d3715de8a4af31b49e059942b6f2) )
 	ROM_LOAD( "club-deluxe-cops-and-robbers_dat_ac_var_200pnd_ass.bin", 0x0000, 0x010000, CRC(a914cb23) SHA1(cd3332506229184cf0c3db37c43d2fa4cd2e54d9) )
-	ROM_LOAD( "club-deluxe-cops-and-robbers_std_ac_250pnd-20p_ass.bin", 0x0000, 0x010000, CRC(4e7da1cb) SHA1(1c61f47f30a9d27f558548c23ddf6de2e5366344) )
-	ROM_LOAD( "club-deluxe-cops-and-robbers_std_ac_250pnd-25p_p65_ass.bin", 0x0000, 0x010000, CRC(8f5396a6) SHA1(c7cd83bdeca3a852a8203330ca14574608b9a9e9) )
-	ROM_LOAD( "club-deluxe-cops-and-robbers_std_ac_250pnd-25p_p67_ass.bin", 0x0000, 0x010000, CRC(fd19db9a) SHA1(441d80b8463ffd5f8783b3cb80d8321f64e8fcc5) )
-	ROM_LOAD( "club-deluxe-cops-and-robbers_std_ac_250pnd_ass.bin", 0x0000, 0x010000, CRC(10a9d7d3) SHA1(7d147ce9c2c98f10694ee99e14286be3f74bbdf4) )
-	ROM_LOAD( "club-deluxe-cops-and-robbers_std_ac_var_200pnd_ass.bin", 0x0000, 0x010000, CRC(23d239fa) SHA1(44dae2cd2be573df71b60ba3918cc2d728cde4b4) )
+
+	ROM_REGION( 0x20000, "matrix", 0 )
+	ROM_LOAD( "club-deluxe-cops-and-robbers_mtx_250pnd-25p.bin", 0x0000, 0x010000, CRC(e1e4c10d) SHA1(5c508fe8ed96191eb1fa7156a09441f2f840544f) )
+
+	sc2_copdc_sound
+ROM_END
+
+ROM_START( sc2copdc6 )
+	ROM_REGION( 0x10000, "maincpu", 0 )
 	ROM_LOAD( "clubcopsnrobbersdeluxe.bin", 0x0000, 0x010000, CRC(055e0f2c) SHA1(8aa7386031fd381deb7d79ce3217bab0d01671f0) )
 
 	ROM_REGION( 0x20000, "matrix", 0 )
-	ROM_LOAD( "club-deluxe-cops-and-robbers_mtx_250pnd-25pss.hex", 0x0000, 0x01cfbf, CRC(b2abbab4) SHA1(40e202e1678f637f7c0097b4f8f4884de439935e) )
+	ROM_LOAD( "club-deluxe-cops-and-robbers_mtx_250pnd-25p.bin", 0x0000, 0x010000, CRC(e1e4c10d) SHA1(5c508fe8ed96191eb1fa7156a09441f2f840544f) )
 
-	ROM_REGION( 0x80000, "upd", ROMREGION_ERASE00 )
+	sc2_copdc_sound
 ROM_END
 
+
 ROM_START( sc2dels )
 	ROM_REGION( 0x10000, "maincpu", 0 )
 	ROM_LOAD( "del's-millions_std_ac_10pnd-20p-25p_a.bin", 0x0000, 0x010000, CRC(b1e8d4ef) SHA1(189184aa6f9ff2204e35d0f7ae40493bcb0751bd) )
+	sc2_dels_sound
+ROM_END
 
-	ROM_REGION( 0x10000, "altrevs", 0 )
-	ROM_LOAD( "95751541.p1", 0x0000, 0x010000, CRC(495b7cec) SHA1(779a80371580b9154f0915e7c438dbf965dd1a02) )
+ROM_START( sc2delsp )
+	ROM_REGION( 0x10000, "maincpu", 0 )
 	ROM_LOAD( "del's-millions_dat_ac_10pnd-20p-25p_a.bin", 0x0000, 0x010000, CRC(c81f200f) SHA1(8a9ee842e17a63276a0850adc52159dc46a239c0) )
-	ROM_LOAD( "del's-millions_dat_ac_8pnd-20p_a.bin", 0x0000, 0x010000, CRC(92c0e403) SHA1(5410365137ab8debb10358f24cdd0b0b74755677) )
-	ROM_LOAD( "del's-millions_dat_ac_8pnd_a.bin", 0x0000, 0x010000, CRC(23eca216) SHA1(f427d92929e51d6f0148d212e13067ddc15e2307) )
-	ROM_LOAD( "del's-millions_dat_ms_20p_a.bin", 0x0000, 0x010000, CRC(57ade491) SHA1(3aed99d92c391f99fa8ff7d61370d59245156121) )
+	sc2_dels_sound
+ROM_END
+
+ROM_START( sc2dels1 )
+	ROM_REGION( 0x10000, "maincpu", 0 )
+	ROM_LOAD( "del's-millions_std_wi_ac_10pnd-20p_a.bin", 0x0000, 0x010000, CRC(dd44aecb) SHA1(1e8ced54323580f43facf683c1f489f1ea281e16) )
+	sc2_dels_sound
+ROM_END
+
+ROM_START( sc2dels1p )
+	ROM_REGION( 0x10000, "maincpu", 0 )
 	ROM_LOAD( "del's-millions_dat_wi_ac_10pnd-20p_a.bin", 0x0000, 0x010000, CRC(fdb33c9b) SHA1(2506fe8e7e1e49f90652309996813ac5967442a0) )
+	sc2_dels_sound
+ROM_END
+
+ROM_START( sc2dels2 )
+	ROM_REGION( 0x10000, "maincpu", 0 )
 	ROM_LOAD( "del's-millions_std_ac_8pnd-20p_a.bin", 0x0000, 0x010000, CRC(9194fb69) SHA1(30d2c5a8a16c96c081f442a66172f8b9fb1d602d) )
+	sc2_dels_sound
+ROM_END
+
+ROM_START( sc2dels2p )
+	ROM_REGION( 0x10000, "maincpu", 0 )
+	ROM_LOAD( "del's-millions_dat_ac_8pnd-20p_a.bin", 0x0000, 0x010000, CRC(92c0e403) SHA1(5410365137ab8debb10358f24cdd0b0b74755677) )
+	sc2_dels_sound
+ROM_END
+
+ROM_START( sc2dels3 )
+	ROM_REGION( 0x10000, "maincpu", 0 )
 	ROM_LOAD( "del's-millions_std_ac_8pnd_a.bin", 0x0000, 0x010000, CRC(58f87c90) SHA1(a6dcdf1edc7620226d89c907a5910c4a4b2d4190) )
+	sc2_dels_sound
+ROM_END
+
+ROM_START( sc2dels3p )
+	ROM_REGION( 0x10000, "maincpu", 0 )
+	ROM_LOAD( "del's-millions_dat_ac_8pnd_a.bin", 0x0000, 0x010000, CRC(23eca216) SHA1(f427d92929e51d6f0148d212e13067ddc15e2307) )
+	sc2_dels_sound
+ROM_END
+
+ROM_START( sc2dels4 )
+	ROM_REGION( 0x10000, "maincpu", 0 )
 	ROM_LOAD( "del's-millions_std_ms_20p_ass.bin", 0x0000, 0x010000, CRC(f4a5803d) SHA1(c9b6f71847a4dd87ea34b51935618df5a735150d) )
+	sc2_dels_sound
+ROM_END
+
+ROM_START( sc2dels4p )
+	ROM_REGION( 0x10000, "maincpu", 0 )
+	ROM_LOAD( "del's-millions_dat_ms_20p_a.bin", 0x0000, 0x010000, CRC(57ade491) SHA1(3aed99d92c391f99fa8ff7d61370d59245156121) )
+	sc2_dels_sound
+ROM_END
+
+ROM_START( sc2dels5 )
+	ROM_REGION( 0x10000, "maincpu", 0 )
 	ROM_LOAD( "del's-millions_std_ss_20p_a.bin", 0x0000, 0x010000, CRC(755b8546) SHA1(67d2bb5556c03acf71e0b50c8cf54ac92acbce69) )
-	ROM_LOAD( "del's-millions_std_wi_ac_10pnd-20p_a.bin", 0x0000, 0x010000, CRC(dd44aecb) SHA1(1e8ced54323580f43facf683c1f489f1ea281e16) )
+	sc2_dels_sound
+ROM_END
+
+ROM_START( sc2dels6 )
+	ROM_REGION( 0x10000, "maincpu", 0 )
 	ROM_LOAD( "delm20p", 0x0000, 0x010000, CRC(9d8acc21) SHA1(04d9cb4d01ddfb4e33774b313446dcd763f869fa) )
-	ROM_LOAD( "dels millions ck 8f98 std 8.bin", 0x0000, 0x010000, CRC(755b8546) SHA1(67d2bb5556c03acf71e0b50c8cf54ac92acbce69) )
+	sc2_dels_sound
+ROM_END
+
+ROM_START( sc2dels7 )
+	ROM_REGION( 0x10000, "maincpu", 0 )
+	ROM_LOAD( "dem20arc", 0x0000, 0x010000, CRC(9ae6291d) SHA1(966416d234e2ec708984595dedbfbe554ff1c867) )
+	sc2_dels_sound
+ROM_END
+
+ROM_START( sc2dels8 )
+	ROM_REGION( 0x10000, "maincpu", 0 )
 	ROM_LOAD( "dels10", 0x0000, 0x010000, CRC(8bf1b9f5) SHA1(eb9c36579d56f83d72952fab9911a991aeec0579) )
-	ROM_LOAD( "dels8mss", 0x0000, 0x002000, CRC(a91764fc) SHA1(3196cfbe04af74ea330a23a1155a6e223cb670bb) ) // bad dump?
+	sc2_dels_sound
+ROM_END
+
+ROM_START( sc2dels9 )
+	ROM_REGION( 0x10000, "maincpu", 0 )
+	ROM_LOAD( "95751541.p1", 0x0000, 0x010000, CRC(495b7cec) SHA1(779a80371580b9154f0915e7c438dbf965dd1a02) )
+	sc2_dels_sound
+ROM_END
+
+ROM_START( sc2delsd )
+	ROM_REGION( 0x10000, "maincpu", 0 )
 	ROM_LOAD( "delsdlx6", 0x0000, 0x010000, CRC(64acb285) SHA1(7a011b915809712fd69902258f1e6c9b42f163eb) )
-	ROM_LOAD( "delsmillions.bin", 0x0000, 0x010000, CRC(58f87c90) SHA1(a6dcdf1edc7620226d89c907a5910c4a4b2d4190) )
-	ROM_LOAD( "dem20arc", 0x0000, 0x010000, CRC(9ae6291d) SHA1(966416d234e2ec708984595dedbfbe554ff1c867) )
-	// sets below are mazooma
+	sc2_dels_sound
+ROM_END
+
+// sets below are mazooma
+//Protocol status is guessed from part number for now until we're certain everything works with Mazooma games.
+ROM_START( sc2delsm )
+	ROM_REGION( 0x10000, "maincpu", 0 )
+	ROM_LOAD( "98400005", 0x0000, 0x010000, CRC(bd9153cf) SHA1(695a897077b2136ba4d0699cad616df5ceadf824) )
+	sc2_dels_sound_alt
+ROM_END
+
+ROM_START( sc2delsmp )
+	ROM_REGION( 0x10000, "maincpu", 0 )
 	ROM_LOAD( "98400006", 0x0000, 0x010000, CRC(2dc3355c) SHA1(6db6ddc93e05516b75d0dd27d5ab190d183a2bd1) )
+	sc2_dels_sound_alt
+ROM_END
+
+ROM_START( sc2delsm1 )
+	ROM_REGION( 0x10000, "maincpu", 0 )
 	ROM_LOAD( "98400007", 0x0000, 0x010000, CRC(f29b0110) SHA1(b2a56e68a2bb4f4cc5b0f32933bf9e9acb0582d2) )
+	sc2_dels_sound_alt
+ROM_END
+
+ROM_START( sc2delsm1p )
+	ROM_REGION( 0x10000, "maincpu", 0 )
 	ROM_LOAD( "98400008", 0x0000, 0x010000, CRC(38a0159b) SHA1(2f25ae4d858f68750a627d298556a7ce461480e5) )
+	sc2_dels_sound_alt
+ROM_END
+
+ROM_START( sc2delsm2 )
+	ROM_REGION( 0x10000, "maincpu", 0 )
 	ROM_LOAD( "98401005", 0x0000, 0x010000, CRC(d91beaa2) SHA1(b018d335e8551efe4cc09381324d7ae3d77b2907) )
+	sc2_dels_sound_alt
+ROM_END
+
+ROM_START( sc2delsm2p )
+	ROM_REGION( 0x10000, "maincpu", 0 )
 	ROM_LOAD( "98401006", 0x0000, 0x010000, CRC(262d57f9) SHA1(157bfa2d9de8da9f7791295b1e476bf2329f55cd) )
+	sc2_dels_sound_alt
+ROM_END
+
+ROM_START( sc2delsm3 )
+	ROM_REGION( 0x10000, "maincpu", 0 )
 	ROM_LOAD( "98401007", 0x0000, 0x010000, CRC(013c5e7c) SHA1(f3e960b44faecc7d19c6e058b62a30e45c3cfeae) )
+	sc2_dels_sound_alt
+ROM_END
+
+ROM_START( sc2delsm3p )
+	ROM_REGION( 0x10000, "maincpu", 0 )
 	ROM_LOAD( "98401008", 0x0000, 0x010000, CRC(665b3af4) SHA1(a7d51976caa8c373ac772e1315a33f0f042974a6) )
-	ROM_LOAD( "98400005", 0x0000, 0x010000, CRC(bd9153cf) SHA1(695a897077b2136ba4d0699cad616df5ceadf824) )
+	sc2_dels_sound_alt
+ROM_END
 
-	ROM_REGION( 0x80000, "upd", 0 )
-	ROM_LOAD( "dmsnd.bin", 0x0000, 0x080000, CRC(0a68550b) SHA1(82a4a8d2a754a59da553b3568df870107e33f978) )
 
-	ROM_REGION( 0x80000, "altupd", 0 )
-	ROM_LOAD( "delssnd.bin", 0x0000, 0x080000, CRC(cb298f06) SHA1(fdc857101ad15d58aeb7ffc4a489c3de9373fc80) )
+ROM_START( sc2wembl )
+	ROM_REGION( 0x10000, "maincpu", 0 )
+	ROM_LOAD( "road-to-wembley_std_ac_10pnd_15rm_ass.bin", 0x0000, 0x010000, CRC(7b8e7a47) SHA1(3026850a18ef9cb44584550e28f62165bfa690e9) )
+	sc2_wembl_sound
+ROM_END
+
+ROM_START( sc2wemblp )
+	ROM_REGION( 0x10000, "maincpu", 0 )
+	ROM_LOAD( "road-to-wembley_dat_ac_10pnd_15rm_ass.bin", 0x0000, 0x010000, CRC(6ab89e2f) SHA1(6b2faa587153f453e9fdf043c6ca5a90d8c6b66d) )
+	sc2_wembl_sound
+ROM_END
+
+ROM_START( sc2wembl1 )
+	ROM_REGION( 0x10000, "maincpu", 0 )
+	ROM_LOAD( "road-to-wembley_std_20p_15rm_ass.bin", 0x0000, 0x010000, CRC(065f2f8b) SHA1(81471db8de879b7d5b8741beefa5214f2c48ef84) )
+	sc2_wembl_sound
+ROM_END
+
+ROM_START( sc2wembl1p )
+	ROM_REGION( 0x10000, "maincpu", 0 )
+	ROM_LOAD( "road-to-wembley_dat_20p_15rm_ass.bin", 0x0000, 0x010000, CRC(45c3df4c) SHA1(48ef0e46a94a815e1e429f402cc8fd13bde4d738) )
+	sc2_wembl_sound
 ROM_END
 
+ROM_START( sc2wembl2 )
+	ROM_REGION( 0x10000, "maincpu", 0 )
+	ROM_LOAD( "road-to-wembley_std_ac_10pnd_ass.bin", 0x0000, 0x010000, CRC(ae2330f0) SHA1(d309284f0f0333f6e065f30d7ac9416b2fc4ee1f) )
+	sc2_wembl_sound
+ROM_END
 
+ROM_START( sc2wembl2p )
+	ROM_REGION( 0x10000, "maincpu", 0 )
+	ROM_LOAD( "road-to-wembley_dat_ac_10pnd_ass.bin", 0x0000, 0x010000, CRC(bf15d498) SHA1(f94d21d1202107db7955829340ada445d59f74ff) )
+	sc2_wembl_sound
+ROM_END
 
-ROM_START( sc2wembl )
+ROM_START( sc2wembl3 )
 	ROM_REGION( 0x10000, "maincpu", 0 )
-	ROM_LOAD( "road-to-wembley_std_ac_10pnd_15rm_ass.bin", 0x0000, 0x010000, CRC(7b8e7a47) SHA1(3026850a18ef9cb44584550e28f62165bfa690e9) )
+	ROM_LOAD( "rtwn8arc.bin", 0x0000, 0x010000, CRC(b054b38e) SHA1(98aa68a4fb6db4a53a63a4976954277c082ee8bf) )
+	sc2_wembl_sound
+ROM_END
 
-	ROM_REGION( 0x10000, "altrevs", 0 )
-	ROM_LOAD( "95750499.p1", 0x0000, 0x010000, CRC(a2b11ca6) SHA1(cc1931504f8da98119f771499db616898d92e0d9) )
-	ROM_LOAD( "95750500.p1", 0x0000, 0x010000, CRC(bfe45926) SHA1(6a2814735e0894bb5152cba8f90d98cfa98c250b) )
-	ROM_LOAD( "95750501.p1", 0x0000, 0x010000, CRC(cab3da07) SHA1(8ef7ed8427cbb213f218328666da3ebd92aca5a5) )
-	ROM_LOAD( "road-to-wembley_dat_20p_15rm_ass.bin", 0x0000, 0x010000, CRC(45c3df4c) SHA1(48ef0e46a94a815e1e429f402cc8fd13bde4d738) )
-	ROM_LOAD( "road-to-wembley_dat_ac_10pnd_15rm_ass.bin", 0x0000, 0x010000, CRC(6ab89e2f) SHA1(6b2faa587153f453e9fdf043c6ca5a90d8c6b66d) )
-	ROM_LOAD( "road-to-wembley_dat_ac_10pnd_ass.bin", 0x0000, 0x010000, CRC(bf15d498) SHA1(f94d21d1202107db7955829340ada445d59f74ff) )
-	ROM_LOAD( "road-to-wembley_dat_ac_8pnd_16rm_ass.bin", 0x0000, 0x010000, CRC(512fafcb) SHA1(fe90c7fc58bd3dc0bc84e060c6b7a37dd855733b) )
-	ROM_LOAD( "road-to-wembley_dat_ar_20p_16rm_ass.bin", 0x0000, 0x010000, CRC(550f82ec) SHA1(80b1d0839f600b01f2a60de0e191add0faaad089) )
+ROM_START( sc2wembl4p )
+	ROM_REGION( 0x10000, "maincpu", 0 )
 	ROM_LOAD( "road-to-wembley_dat_ss_10p_ass.bin", 0x0000, 0x010000, CRC(630b5306) SHA1(aa23645cc7f1c86e88a62420a837ab64c5090d09) )
-	ROM_LOAD( "road-to-wembley_dat_ss_20p_16rm_ass.bin", 0x0000, 0x010000, CRC(55b1764a) SHA1(1b1e5b89eda0d07662af003d1259e0da725abbc9) )
-	ROM_LOAD( "road-to-wembley_std_20p_15rm_ass.bin", 0x0000, 0x010000, CRC(065f2f8b) SHA1(81471db8de879b7d5b8741beefa5214f2c48ef84) )
-	ROM_LOAD( "road-to-wembley_std_ac_10pnd_ass.bin", 0x0000, 0x010000, CRC(ae2330f0) SHA1(d309284f0f0333f6e065f30d7ac9416b2fc4ee1f) )
+	sc2_wembl_sound
+ROM_END
+
+ROM_START( sc2wembl5a )
+	ROM_REGION( 0x10000, "maincpu", 0 )
 	ROM_LOAD( "road-to-wembley_std_ss_20p_16rm_ass.bin", 0x0000, 0x010000, CRC(17cd6162) SHA1(80129b26db4617281bb6e5aa1f573cf222660303) )
+	sc2_wembl_sound
+ROM_END
+
+ROM_START( sc2wembl5ap )
+	ROM_REGION( 0x10000, "maincpu", 0 )
+	ROM_LOAD( "road-to-wembley_dat_ss_20p_16rm_ass.bin", 0x0000, 0x010000, CRC(55b1764a) SHA1(1b1e5b89eda0d07662af003d1259e0da725abbc9) )
+	sc2_wembl_sound
+ROM_END
+
+ROM_START( sc2wembl6ap )
+	ROM_REGION( 0x10000, "maincpu", 0 )
+	ROM_LOAD( "road-to-wembley_dat_ar_20p_16rm_ass.bin", 0x0000, 0x010000, CRC(550f82ec) SHA1(80b1d0839f600b01f2a60de0e191add0faaad089) )
+	sc2_wembl_sound
+ROM_END
+
+ROM_START( sc2wembl7a )
+	ROM_REGION( 0x10000, "maincpu", 0 )
 	ROM_LOAD( "rtw816rm", 0x0000, 0x010000, CRC(337264ae) SHA1(5e3e67bd20416331df6e35c6a384d5b88b70aa17) )
-	ROM_LOAD( "rtwn8arc.bin", 0x0000, 0x010000, CRC(b054b38e) SHA1(98aa68a4fb6db4a53a63a4976954277c082ee8bf) )
+	sc2_wembl_sound
+ROM_END
 
-	ROM_REGION( 0x80000, "upd", ROMREGION_ERASE00 )
-	ROM_LOAD( "wembley_sound.bin", 0x0000, 0x080000, CRC(5ce2fc50) SHA1(26533428582058f0cd618e3657f967bc64e551fc) )
+ROM_START( sc2wembl7ap )
+	ROM_REGION( 0x10000, "maincpu", 0 )
+	ROM_LOAD( "road-to-wembley_dat_ac_8pnd_16rm_ass.bin", 0x0000, 0x010000, CRC(512fafcb) SHA1(fe90c7fc58bd3dc0bc84e060c6b7a37dd855733b) )
+	sc2_wembl_sound
+ROM_END
+
+ROM_START( sc2wembl8 )
+	ROM_REGION( 0x10000, "maincpu", 0 )
+	ROM_LOAD( "95750499.p1", 0x0000, 0x010000, CRC(a2b11ca6) SHA1(cc1931504f8da98119f771499db616898d92e0d9) )
+	sc2_wembl_sound
+ROM_END
+
+ROM_START( sc2wembl9 )
+	ROM_REGION( 0x10000, "maincpu", 0 )
+	ROM_LOAD( "95750500.p1", 0x0000, 0x010000, CRC(bfe45926) SHA1(6a2814735e0894bb5152cba8f90d98cfa98c250b) )
+	sc2_wembl_sound
+ROM_END
+
+ROM_START( sc2wembl10 )
+	ROM_REGION( 0x10000, "maincpu", 0 )
+	ROM_LOAD( "95750501.p1", 0x0000, 0x010000, CRC(cab3da07) SHA1(8ef7ed8427cbb213f218328666da3ebd92aca5a5) )
+	sc2_wembl_sound
 ROM_END
 
 ROM_START( sc2wemblm )
@@ -4639,149 +5975,396 @@
 	ROM_LOAD( "wembley_sound.bin", 0x0000, 0x080000, CRC(5ce2fc50) SHA1(26533428582058f0cd618e3657f967bc64e551fc) )
 ROM_END
 
-
-
-
-
+//There are two matrix ROMs here, presumably for different payouts or stakes, I've made my best guess as to which matches which but bear in mind
+//the other one exists if there are any issues when these games start running
 
 
 ROM_START( sc2prem )
 	ROM_REGION( 0x10000, "maincpu", 0 )
 	ROM_LOAD( "premier-club-manager_std_ac_250pnd-25p_ass.bin", 0x0000, 0x010000, CRC(404716ed) SHA1(57916fb70621c96eccb0e5bbee821ca2133aaa5f) )
 
-	ROM_REGION( 0x10000, "altrevs", 0 )
-	ROM_LOAD( "premclub.bin", 0x0000, 0x010000, CRC(5231ab3e) SHA1(a9e16a5bbeaa0612212d3ef0e78fbc7628cfc0fa) )
+	ROM_REGION( 0x20000, "matrix", 0 )
+	ROM_LOAD( "95000571.p1", 0x0000, 0x010000, CRC(4b4bdb8b) SHA1(de9b52da600629e680fd96f0d82a9f76fbc84bdf) )//premier-club-manager_mtx_250pnd-25p_ass.bin
+	sc2_prem_sound
+ROM_END
+
+ROM_START( sc2premp )
+	ROM_REGION( 0x10000, "maincpu", 0 )
 	ROM_LOAD( "premier-club-manager_dat_ac_250pnd-25p_ass.bin", 0x0000, 0x010000, CRC(6446176c) SHA1(17cccc00d443ffde11943ebda112ef1e79134455) )
-	ROM_LOAD( "premier-club-manager_dat_ac_var_ass.bin", 0x0000, 0x010000, CRC(d1880c7a) SHA1(d1f7891fc8d4570e02c0bfc23e1ed0b159e280c1) )
+
+	ROM_REGION( 0x20000, "matrix", 0 )
+	ROM_LOAD( "95000571.p1", 0x0000, 0x010000, CRC(4b4bdb8b) SHA1(de9b52da600629e680fd96f0d82a9f76fbc84bdf) )//premier-club-manager_mtx_250pnd-25p_ass.bin
+	sc2_prem_sound
+ROM_END
+
+ROM_START( sc2prem1 )
+	ROM_REGION( 0x10000, "maincpu", 0 )
 	ROM_LOAD( "premier-club-manager_std_ac_var_ass.bin", 0x0000, 0x010000, CRC(68e5474e) SHA1(927d41f73e287c71546823ffe829f1e046f3cca6) )
 
 	ROM_REGION( 0x20000, "matrix", 0 )
-	ROM_LOAD( "premier-club-manager_mtx_250pnd-25p_ass.bin", 0x0000, 0x010000, CRC(4b4bdb8b) SHA1(de9b52da600629e680fd96f0d82a9f76fbc84bdf) )
+	ROM_LOAD( "95000570.p1", 0x0000, 0x010000, CRC(7ac2a278) SHA1(f95a7451d1514be19d747707a32bf7280dcfb8b6) )//premier-club-manager_mtx_ass.bin
+	sc2_prem_sound
+ROM_END
 
-	ROM_REGION( 0x20000, "altmatrix", 0 )
-	ROM_LOAD( "premier-club-manager_mtx_ass.bin", 0x0000, 0x010000, CRC(7ac2a278) SHA1(f95a7451d1514be19d747707a32bf7280dcfb8b6) )
-	ROM_LOAD( "95000570.mtx", 0x0000, 0x004e21, CRC(1b38ddeb) SHA1(86795dcb67306eccabbf0d2a214667497104ef77) )
-	ROM_LOAD( "95000571.mtx", 0x0000, 0x004ddc, CRC(0772adea) SHA1(6d3beb1662fd4e1eeef0ca57cdc07f347879bf15) )
+ROM_START( sc2prem1p )
+	ROM_REGION( 0x10000, "maincpu", 0 )
+	ROM_LOAD( "premier-club-manager_dat_ac_var_ass.bin", 0x0000, 0x010000, CRC(d1880c7a) SHA1(d1f7891fc8d4570e02c0bfc23e1ed0b159e280c1) )
 
-	ROM_REGION( 0x80000, "upd", ROMREGION_ERASE00 )
-	ROM_LOAD( "premclubsnd.bin", 0x0000, 0x080000, CRC(b20c74f1) SHA1(b43a79f8f59387ef777fffd07a39b7333811d464) )
+	ROM_REGION( 0x20000, "matrix", 0 )
+	ROM_LOAD( "95000570.p1", 0x0000, 0x010000, CRC(7ac2a278) SHA1(f95a7451d1514be19d747707a32bf7280dcfb8b6) )//premier-club-manager_mtx_ass.bin
+	sc2_prem_sound
 ROM_END
 
+ROM_START( sc2prem2 )
+	ROM_REGION( 0x10000, "maincpu", 0 )
+	ROM_LOAD( "premclub.bin", 0x0000, 0x010000, CRC(5231ab3e) SHA1(a9e16a5bbeaa0612212d3ef0e78fbc7628cfc0fa) )
+
+	ROM_REGION( 0x20000, "matrix", 0 )
+	ROM_LOAD( "95000570.p1", 0x0000, 0x010000, CRC(7ac2a278) SHA1(f95a7451d1514be19d747707a32bf7280dcfb8b6) )//premier-club-manager_mtx_ass.bin
+	sc2_prem_sound
+ROM_END
 
 
 ROM_START( sc2downt )
 	ROM_REGION( 0x10000, "maincpu", 0 )
 	ROM_LOAD( "down-town_std_ar_20p_15rm_ass.bin", 0x0000, 0x010000, CRC(bffe2f17) SHA1(c9daeec2b715d318649c8883b4437fdd997d0dc8) )
+	sc2_downt_sound
+ROM_END
 
-	ROM_REGION( 0x10000, "altrevs", 0 )
+
+ROM_START( sc2downtp )
+	ROM_REGION( 0x10000, "maincpu", 0 )
 	ROM_LOAD( "down-town_dat_20p_15rm_ass.bin", 0x0000, 0x010000, CRC(3390da28) SHA1(80abda7a0d6913b701fb030b525db794d130df5b) )
-	ROM_LOAD( "down-town_dat_ac_10pnd-20p_15rm_ass.bin", 0x0000, 0x010000, CRC(b082210f) SHA1(cd8d18fc2dcaf6fc02bc05d4c9e4a76f2199ad8d) )
-	ROM_LOAD( "down-town_dat_ac_10pnd-20p_16rm_ass.bin", 0x0000, 0x010000, CRC(d6d95ff4) SHA1(55d2b97a0609e305d28c92f439eb3b834d29aff5) )
-	ROM_LOAD( "down-town_dat_ar_20p_15rm_ass.bin", 0x0000, 0x010000, CRC(39fc9af0) SHA1(3b3a2a2ada79fa822332c066d50d81e64860292b) )
+	sc2_downt_sound
+ROM_END
+
+ROM_START( sc2downt1 )
+	ROM_REGION( 0x10000, "maincpu", 0 )
+	ROM_LOAD( "down-town_std_ar_20p_ass.bin", 0x0000, 0x010000, CRC(a162c04a) SHA1(516f754b2e9cc33d43bac37f1f0697c1a886027e) )
+	sc2_downt_sound
+ROM_END
+
+ROM_START( sc2downt1p )
+	ROM_REGION( 0x10000, "maincpu", 0 )
 	ROM_LOAD( "down-town_dat_ar_20p_ass.bin", 0x0000, 0x010000, CRC(a84c92c7) SHA1(99519d3e6166ab80236f1c16be82f7b2648f0aff) )
-	ROM_LOAD( "down-town_dat_ss_20p_16rm_ass.bin", 0x0000, 0x010000, CRC(39a1cd5d) SHA1(bce1e1bfe4e9e3bc62bdf8a57b0b2db2b3accd4f) )
-	ROM_LOAD( "down-town_dat_wi_ac_10pnd_15rm_ass.bin", 0x0000, 0x010000, CRC(29a1a709) SHA1(6b2de1e7902ba5b678aebf04b0f8c3bceed8f637) )
-	ROM_LOAD( "down-town_dat_wi_ac_10pnd_16rm_ass.bin", 0x0000, 0x010000, CRC(6f6f8c71) SHA1(5fba18cc092a04b3b737bb17a03d5e37a33da985) )
+	sc2_downt_sound
+ROM_END
+
+ROM_START( sc2downt2 )
+	ROM_REGION( 0x10000, "maincpu", 0 )
 	ROM_LOAD( "down-town_std_20p_15rm_ass.bin", 0x0000, 0x010000, CRC(ef4c489f) SHA1(3b4e0c811edcb4f1f9c133ce92b7d965e167e51c) )
+	sc2_downt_sound
+ROM_END
+
+ROM_START( sc2downt2p )
+	ROM_REGION( 0x10000, "maincpu", 0 )
+	ROM_LOAD( "down-town_dat_ar_20p_15rm_ass.bin", 0x0000, 0x010000, CRC(39fc9af0) SHA1(3b3a2a2ada79fa822332c066d50d81e64860292b) )
+	sc2_downt_sound
+ROM_END
+
+ROM_START( sc2downt3 )
+	ROM_REGION( 0x10000, "maincpu", 0 )
 	ROM_LOAD( "down-town_std_ac_10pnd-20p_15rm_ass.bin", 0x0000, 0x010000, CRC(7ef9d60d) SHA1(54000f31eac051efd2fd3fe485076f845ef3da30) )
-	ROM_LOAD( "down-town_std_ac_10pnd-20p_16rm_ass.bin", 0x0000, 0x010000, CRC(932e49d9) SHA1(05ae4751f55eefe9884444745bcf3f2ecb69e332) )
-	ROM_LOAD( "down-town_std_ar_20p_ass.bin", 0x0000, 0x010000, CRC(a162c04a) SHA1(516f754b2e9cc33d43bac37f1f0697c1a886027e) )
-	ROM_LOAD( "down-town_std_ss_20p_16rm_ass.bin", 0x0000, 0x010000, CRC(593f59a5) SHA1(578173ec26980072a00bb46370c2c1113916c279) )
+	sc2_downt_sound
+ROM_END
+
+ROM_START( sc2downt3p )
+	ROM_REGION( 0x10000, "maincpu", 0 )
+	ROM_LOAD( "down-town_dat_ac_10pnd-20p_15rm_ass.bin", 0x0000, 0x010000, CRC(b082210f) SHA1(cd8d18fc2dcaf6fc02bc05d4c9e4a76f2199ad8d) )
+	sc2_downt_sound
+ROM_END
+
+
+ROM_START( sc2downt4 )
+	ROM_REGION( 0x10000, "maincpu", 0 )
 	ROM_LOAD( "down-town_std_wi_ac_10pnd_15rm_ass.bin", 0x0000, 0x010000, CRC(bb448916) SHA1(ed62858cb78c9f08a55679cfdb19a3fa951d1aed) )
-	ROM_LOAD( "down-town_std_wi_ac_10pnd_16rm_ass.bin", 0x0000, 0x010000, CRC(96ddfacd) SHA1(9085cdafc7b3ddf5ef77251a9ff4d4b4beff4ff1) )
+	sc2_downt_sound
+ROM_END
+
+ROM_START( sc2downt4p )
+	ROM_REGION( 0x10000, "maincpu", 0 )
+	ROM_LOAD( "down-town_dat_wi_ac_10pnd_15rm_ass.bin", 0x0000, 0x010000, CRC(29a1a709) SHA1(6b2de1e7902ba5b678aebf04b0f8c3bceed8f637) )
+	sc2_downt_sound
+ROM_END
+
+ROM_START( sc2downt5 )
+	ROM_REGION( 0x10000, "maincpu", 0 )
 	ROM_LOAD( "dtown8c.bin", 0x0000, 0x010000, CRC(6b93171c) SHA1(90e01e827b473bb6ffb567a350d9d8de9119cf8d) )
+	sc2_downt_sound
+ROM_END
+
+ROM_START( sc2downt6 )
+	ROM_REGION( 0x10000, "maincpu", 0 )
 	ROM_LOAD( "dtwn20v", 0x0000, 0x010000, CRC(5e6f05e4) SHA1(78ba0636aca6d6f5d8aee0f27c337975c5680e98) )
+	sc2_downt_sound
+ROM_END
+
+ROM_START( sc2downt7 )
+	ROM_REGION( 0x10000, "maincpu", 0 )
 	ROM_LOAD( "dtwnac", 0x0000, 0x010000, CRC(f553e337) SHA1(1881912807e4d245b8f2455ca8ca6d0c158ac5a8) )
+	sc2_downt_sound
+ROM_END
 
-	ROM_REGION( 0x80000, "upd", ROMREGION_ERASE00 )
-	ROM_LOAD( "dtownsnd.dat", 0x0000, 0x080000, CRC(a41b109b) SHA1(22470d731741521321d004fc56ff8217e506ef69) )
+
+//All these ROMs are near identical to their similarly named counterparts, but are designed to handle the characteristics of a different motor
+//(Starpoint 16RM vs Starpoint 15RM)
+
+ROM_START( sc2downt3a )
+	ROM_REGION( 0x10000, "maincpu", 0 )
+	ROM_LOAD( "down-town_std_ac_10pnd-20p_16rm_ass.bin", 0x0000, 0x010000, CRC(932e49d9) SHA1(05ae4751f55eefe9884444745bcf3f2ecb69e332) )
+	sc2_downt_sound
 ROM_END
 
-ROM_START( sc2goldr )
+ROM_START( sc2downt3ap )
 	ROM_REGION( 0x10000, "maincpu", 0 )
-	ROM_LOAD( "gold_reserve_game", 0x0000, 0x010000, CRC(581726a3) SHA1(7e122a9d48f49648feeeb3fe430013402a5dc8d7) )
+	ROM_LOAD( "down-town_dat_ac_10pnd-20p_16rm_ass.bin", 0x0000, 0x010000, CRC(d6d95ff4) SHA1(55d2b97a0609e305d28c92f439eb3b834d29aff5) )
+	sc2_downt_sound
+ROM_END
 
-	ROM_REGION( 0x10000, "altrevs", 0 )
+ROM_START( sc2downt4a )
+	ROM_REGION( 0x10000, "maincpu", 0 )
+	ROM_LOAD( "down-town_std_wi_ac_10pnd_16rm_ass.bin", 0x0000, 0x010000, CRC(96ddfacd) SHA1(9085cdafc7b3ddf5ef77251a9ff4d4b4beff4ff1) )
+	sc2_downt_sound
+ROM_END
+
+ROM_START( sc2downt4ap )
+	ROM_REGION( 0x10000, "maincpu", 0 )
+	ROM_LOAD( "down-town_dat_wi_ac_10pnd_16rm_ass.bin", 0x0000, 0x010000, CRC(6f6f8c71) SHA1(5fba18cc092a04b3b737bb17a03d5e37a33da985) )
+	sc2_downt_sound
+ROM_END
+
+ROM_START( sc2downt8a )
+	ROM_REGION( 0x10000, "maincpu", 0 )
+	ROM_LOAD( "down-town_std_ss_20p_16rm_ass.bin", 0x0000, 0x010000, CRC(593f59a5) SHA1(578173ec26980072a00bb46370c2c1113916c279) )
+	sc2_downt_sound
+ROM_END
+
+ROM_START( sc2downt8ap )
+	ROM_REGION( 0x10000, "maincpu", 0 )
+	ROM_LOAD( "down-town_dat_ss_20p_16rm_ass.bin", 0x0000, 0x010000, CRC(39a1cd5d) SHA1(bce1e1bfe4e9e3bc62bdf8a57b0b2db2b3accd4f) )
+	sc2_downt_sound
+ROM_END
+
+ROM_START( sc2goldr )
+	ROM_REGION( 0x10000, "maincpu", 0 )
 	ROM_LOAD( "gr1_3.bin", 0x0000, 0x010000, CRC(caed7c10) SHA1(3ea4b786d7574a3274131554885a372283eb1cf4) )
+	sc2_goldr_sound
+ROM_END
+
+ROM_START( sc2goldrp )
+	ROM_REGION( 0x10000, "maincpu", 0 )
 	ROM_LOAD( "gr1_3d.bin", 0x0000, 0x010000, CRC(e5ad5d10) SHA1(8a2bf68b923848421b90af8a1c42f5cef1a02121) )
+	sc2_goldr_sound
+ROM_END
 
-	ROM_REGION( 0x80000, "upd", ROMREGION_ERASE00 )
-	ROM_LOAD( "gold_reserve_snd", 0x0000, 0x080000, CRC(e8e7ab7b) SHA1(ce43e8ffccc0421548c6683a72267b7e5f805db4) )
+ROM_START( sc2goldr1 )
+	ROM_REGION( 0x10000, "maincpu", 0 )
+	ROM_LOAD( "gold_reserve_game", 0x0000, 0x010000, CRC(581726a3) SHA1(7e122a9d48f49648feeeb3fe430013402a5dc8d7) )
+	sc2_goldr_sound
 ROM_END
 
 ROM_START( sc2hifly )
 	ROM_REGION( 0x10000, "maincpu", 0 )
-	ROM_LOAD( "hiflyergame.bin", 0x0000, 0x010000, CRC(b3627b55) SHA1(105ff7da69eb2ca722ee251a4a6af49c46ab1bc8) )
+	ROM_LOAD( "hf4_1.bin", 0x0000, 0x010000, CRC(ee58ed3b) SHA1(4372ca48854b5a4b2c9ac24b17afce899a88da15) )
+	sc2_hifly_sound
+ROM_END
 
-	ROM_REGION( 0x10000, "altrevs", 0 )
-	ROM_LOAD( "hf2_1dat", 0x0000, 0x010000, CRC(6c1350eb) SHA1(062e4533c28c8129aae787805bdf99a2837f93f5) )
+ROM_START( sc2hifly2 )
+	ROM_REGION( 0x10000, "maincpu", 0 )
 	ROM_LOAD( "hf3_1.bin", 0x0000, 0x010000, CRC(0ec80578) SHA1(8bbe5aaefe7c5ab77e27daad3fe43d7bbe600a54) )
-	ROM_LOAD( "hf4_1.bin", 0x0000, 0x010000, CRC(ee58ed3b) SHA1(4372ca48854b5a4b2c9ac24b17afce899a88da15) )
+	sc2_hifly_sound
+ROM_END
 
-	ROM_REGION( 0x80000, "upd", ROMREGION_ERASE00 )
-	ROM_LOAD( "hiflyersound.bin", 0x0000, 0x080000, CRC(acdef7dc) SHA1(c2cc219ca8f4a3e3cdcb1147ad49cd69adb3751b) )
+ROM_START( sc2hifly3 )
+	ROM_REGION( 0x10000, "maincpu", 0 )
+	ROM_LOAD( "hf2_1.bin", 0x0000, 0x010000, CRC(6c1350eb) SHA1(062e4533c28c8129aae787805bdf99a2837f93f5) )
+	sc2_hifly_sound
 ROM_END
 
+ROM_START( sc2hifly4 )
+	ROM_REGION( 0x10000, "maincpu", 0 )
+	ROM_LOAD( "hiflyergame.bin", 0x0000, 0x010000, CRC(b3627b55) SHA1(105ff7da69eb2ca722ee251a4a6af49c46ab1bc8) )
+	sc2_hifly_sound
+ROM_END
 
 ROM_START( sc2inst )
 	ROM_REGION( 0x10000, "maincpu", 0 )
 	ROM_LOAD( "instant-jackpot_std_ac_var_10pnd_ass.bin", 0x0000, 0x010000, CRC(81a235e9) SHA1(3ed26da7511b2b2324d74f8395215157c41850ce) )
+	sc2_inst_sound
+ROM_END
 
-	ROM_REGION( 0x10000, "altrevs", 0 )
+ROM_START( sc2instp )
+	ROM_REGION( 0x10000, "maincpu", 0 )
 	ROM_LOAD( "instant-jackpot_dat_ac_var_10pnd_ass.bin", 0x0000, 0x010000, CRC(01034a5b) SHA1(c4f7b05d5c15c309d0c13f4bef72429e54e4fd5e) )
-	ROM_LOAD( "instant-jackpot_dat_var_8pnd_ass.bin", 0x0000, 0x010000, CRC(5ded0d95) SHA1(6f1f57e6883f4b0421ca4d49f7593a937918f9e4) )
-	ROM_LOAD( "instant-jackpot_dat_var_ass.bin", 0x0000, 0x010000, CRC(26f50252) SHA1(587ca9490e04247c8b93c4c931caadf0b5aea4b3) )
-	ROM_LOAD( "instant-jackpot_dat_var_to_htpa_ass.bin", 0x0000, 0x010000, CRC(0dcd87a1) SHA1(4d53a346665bf22e467cc0e0859ee44c177b7661) )
+	sc2_inst_sound
+ROM_END
+
+ROM_START( sc2inst1 )
+	ROM_REGION( 0x10000, "maincpu", 0 )
+	ROM_LOAD( "instant-jackpot_std_wi_ac_10pnd_ass.bin", 0x0000, 0x010000, CRC(641928a0) SHA1(8d68af148838987a4ebfd7927b8eda5cfa4bbb53) )
+	sc2_inst_sound
+ROM_END
+
+ROM_START( sc2inst1p )
+	ROM_REGION( 0x10000, "maincpu", 0 )
 	ROM_LOAD( "instant-jackpot_dat_wi_ac_10pnd_ass.bin", 0x0000, 0x010000, CRC(6d289dfa) SHA1(a1245373ad5a99e2794751dd8e4d3ea28dcb0a53) )
+	sc2_inst_sound
+ROM_END
+
+ROM_START( sc2inst2 )
+	ROM_REGION( 0x10000, "maincpu", 0 )
+	ROM_LOAD( "instant-jackpot_std_var_to_htpa_ass.bin", 0x0000, 0x010000, CRC(1566696f) SHA1(c8cda3f1d15bcb8ba67fab8cb4b972c02106eceb) )
+	sc2_inst_sound
+ROM_END
+
+ROM_START( sc2inst2p )
+	ROM_REGION( 0x10000, "maincpu", 0 )
+	ROM_LOAD( "instant-jackpot_dat_var_to_htpa_ass.bin", 0x0000, 0x010000, CRC(0dcd87a1) SHA1(4d53a346665bf22e467cc0e0859ee44c177b7661) )
+	sc2_inst_sound
+ROM_END
+
+ROM_START( sc2inst3 )
+	ROM_REGION( 0x10000, "maincpu", 0 )
 	ROM_LOAD( "instant-jackpot_std_var_8pnd_ass.bin", 0x0000, 0x010000, CRC(f21c8970) SHA1(67ecb5202cc4a8f2568df6c0a4ed36f4c85b8bb4) )
+	sc2_inst_sound
+ROM_END
+
+ROM_START( sc2inst3p )
+	ROM_REGION( 0x10000, "maincpu", 0 )
+	ROM_LOAD( "instant-jackpot_dat_var_8pnd_ass.bin", 0x0000, 0x010000, CRC(5ded0d95) SHA1(6f1f57e6883f4b0421ca4d49f7593a937918f9e4) )
+	sc2_inst_sound
+ROM_END
+
+ROM_START( sc2inst4 )
+	ROM_REGION( 0x10000, "maincpu", 0 )
 	ROM_LOAD( "instant-jackpot_std_var_ass.bin", 0x0000, 0x010000, CRC(ca8ab34a) SHA1(ecf5ccf0f95a8d149326d24ac468660dde073a16) )
-	ROM_LOAD( "instant-jackpot_std_var_to_htpa_ass.bin", 0x0000, 0x010000, CRC(1566696f) SHA1(c8cda3f1d15bcb8ba67fab8cb4b972c02106eceb) )
-	ROM_LOAD( "instant-jackpot_std_wi_ac_10pnd_ass.bin", 0x0000, 0x010000, CRC(641928a0) SHA1(8d68af148838987a4ebfd7927b8eda5cfa4bbb53) )
-	ROM_LOAD( "instantjackpotgame.bin", 0x0000, 0x010000, CRC(183d53bf) SHA1(4ceca64324a95580270b66d60e678996c79db965) )
-	ROM_LOAD( "instantjackpotgame21.bin", 0x0000, 0x010000, CRC(478a4ee9) SHA1(bb33c63d3db961dc14a02f9ab69908757b8ccd87) )
+	sc2_inst_sound
+ROM_END
 
-	ROM_REGION( 0x80000, "upd", ROMREGION_ERASE00 )
-	ROM_LOAD( "instantjackpotssnd.bin", 0x0000, 0x080000, CRC(ba922860) SHA1(7d84c7fa72b1fb567faccf8464e0fd859c76838d) )
+ROM_START( sc2inst4p )
+	ROM_REGION( 0x10000, "maincpu", 0 )
+	ROM_LOAD( "instant-jackpot_dat_var_ass.bin", 0x0000, 0x010000, CRC(26f50252) SHA1(587ca9490e04247c8b93c4c931caadf0b5aea4b3) )
+	sc2_inst_sound
 ROM_END
 
+ROM_START( sc2inst5 )
+	ROM_REGION( 0x10000, "maincpu", 0 )
+	ROM_LOAD( "instantjackpotgame21.bin", 0x0000, 0x010000, CRC(478a4ee9) SHA1(bb33c63d3db961dc14a02f9ab69908757b8ccd87) )
+	sc2_inst_sound
+ROM_END
+
+ROM_START( sc2inst6 )
+	ROM_REGION( 0x10000, "maincpu", 0 )
+	ROM_LOAD( "instantjackpotgame.bin", 0x0000, 0x010000, CRC(183d53bf) SHA1(4ceca64324a95580270b66d60e678996c79db965) )
+	sc2_inst_sound
+ROM_END
 
 ROM_START( sc2mam )
 	ROM_REGION( 0x10000, "maincpu", 0 )
 	ROM_LOAD( "make-a-million_std_ac_10pnd-20p-25p_ass.bin", 0x0000, 0x010000, CRC(33fce86f) SHA1(1fa06c834397f97e3723091eb331adab91e3d720) )
+	sc2_mam_sound
+ROM_END
+
+ROM_START( sc2mamp )
+	ROM_REGION( 0x10000, "maincpu", 0 )
+	ROM_LOAD( "make-a-million_dat_ac_10pnd-25p-20p_ass.bin", 0x0000, 0x010000, CRC(b721a965) SHA1(23c8f3e98b7a2d7aa11593bff2caea26c893a98a) )
+	sc2_mam_sound
+ROM_END
+
+ROM_START( sc2mam1 )
+	ROM_REGION( 0x10000, "maincpu", 0 )
+	ROM_LOAD( "make-a-million_std_wi_ac_10pnd-20p_ass.bin", 0x0000, 0x010000, CRC(d2dceb05) SHA1(f4dd4f0ce3aa97caba0356a19fe78e3c3455af54) )
+	sc2_mam_sound
+ROM_END
+
+ROM_START( sc2mam1p )
+	ROM_REGION( 0x10000, "maincpu", 0 )
+	ROM_LOAD( "make-a-million_dat_wi_ac_10pnd-20p_ass.bin", 0x0000, 0x010000, CRC(a63f1ae3) SHA1(37920ade2a162f6663a8384ff3cf55e1de71d3d6) )
+	sc2_mam_sound
+ROM_END
+
+ROM_START( sc2mam2 )
+	ROM_REGION( 0x10000, "maincpu", 0 )
+	ROM_LOAD( "make-a-million_std_ac_var_8pnd_ass.bin", 0x0000, 0x010000, CRC(9150bd44) SHA1(0ef8884337c188c696a15cf2bc5a821bdc64d8ae) )
+	sc2_mam_sound
+ROM_END
+
+ROM_START( sc2mam2p )
+	ROM_REGION( 0x10000, "maincpu", 0 )
+	ROM_LOAD( "make-a-million_dat_ac_var_8pnd_ass.bin", 0x0000, 0x010000, CRC(722420ea) SHA1(7c3a8a7218770645f5644a68c65b8e2104857367) )
+	sc2_mam_sound
+ROM_END
+
+ROM_START( sc2mam3 )
+	ROM_REGION( 0x10000, "maincpu", 0 )
+	ROM_LOAD( "make-a-million_std_ar_var_ass.bin", 0x0000, 0x010000, CRC(06759280) SHA1(168743d4d116850c3c23db3cd0149c7f5f8b4da3) )
+	sc2_mam_sound
+ROM_END
 
-	ROM_REGION( 0x10000, "altrevs", 0 )
-	ROM_LOAD( "make-a-million_dat_ac_10pnd-25p-20p_ass.bin", 0x0000, 0x010000, CRC(b721a965) SHA1(23c8f3e98b7a2d7aa11593bff2caea26c893a98a) )
-	ROM_LOAD( "make-a-million_dat_ac_var_8pnd_ass.bin", 0x0000, 0x010000, CRC(722420ea) SHA1(7c3a8a7218770645f5644a68c65b8e2104857367) )
+ROM_START( sc2mam3p )
+	ROM_REGION( 0x10000, "maincpu", 0 )
 	ROM_LOAD( "make-a-million_dat_ar_var_ass.bin", 0x0000, 0x010000, CRC(f9307781) SHA1(56bef9b7d4db0d4569a855dba49d931125f038a4) )
-	ROM_LOAD( "make-a-million_dat_ss_var_ass.bin", 0x0000, 0x010000, CRC(be526b6b) SHA1(e3e6eb91480015edc3ef46158a277c90d1bf5662) )
-	ROM_LOAD( "make-a-million_dat_wi_ac_10pnd-20p_ass.bin", 0x0000, 0x010000, CRC(a63f1ae3) SHA1(37920ade2a162f6663a8384ff3cf55e1de71d3d6) )
-	ROM_LOAD( "make-a-million_std_ac_var_8pnd_a.bin", 0x0000, 0x010000, CRC(9150bd44) SHA1(0ef8884337c188c696a15cf2bc5a821bdc64d8ae) )
-	ROM_LOAD( "make-a-million_std_ac_var_8pnd_ass.bin", 0x0000, 0x010000, CRC(9150bd44) SHA1(0ef8884337c188c696a15cf2bc5a821bdc64d8ae) )
-	ROM_LOAD( "make-a-million_std_ar_var_ass.bin", 0x0000, 0x010000, CRC(06759280) SHA1(168743d4d116850c3c23db3cd0149c7f5f8b4da3) )
+	sc2_mam_sound
+ROM_END
+
+ROM_START( sc2mam4 )
+	ROM_REGION( 0x10000, "maincpu", 0 )
 	ROM_LOAD( "make-a-million_std_ss_var_ass.bin", 0x0000, 0x010000, CRC(4de6346a) SHA1(ae30a5adfad59dd282ca3c2e16e18cbd17d956e9) )
-	ROM_LOAD( "make-a-million_std_wi_ac_10pnd-20p_ass.bin", 0x0000, 0x010000, CRC(d2dceb05) SHA1(f4dd4f0ce3aa97caba0356a19fe78e3c3455af54) )
-	ROM_LOAD( "mam8arc.bin", 0x0000, 0x010000, CRC(91ee99ca) SHA1(8e7e26e0ab518e55784b91b5d8c9780eb1f72525) )
+	sc2_mam_sound
+ROM_END
 
+ROM_START( sc2mam4p )
+	ROM_REGION( 0x10000, "maincpu", 0 )
+	ROM_LOAD( "make-a-million_dat_ss_var_ass.bin", 0x0000, 0x010000, CRC(be526b6b) SHA1(e3e6eb91480015edc3ef46158a277c90d1bf5662) )
+	sc2_mam_sound
+ROM_END
 
-	ROM_REGION( 0x80000, "upd", ROMREGION_ERASE00 )
-	// ROM_LOAD( "makeamillionsnd1.bin", 0x0000, 0x080000, CRC(9a80977a) SHA1(0a6dc9465efa9e3d12894daf88a2746e74409349) ) // this is in the club set too, belongs there instead?
-	ROM_LOAD( "mamsnd.bin", 0x0000, 0x080000, CRC(32537b18) SHA1(c26697162edde97ec999ed0459656edb85a01a50) )
+ROM_START( sc2mam5 )
+	ROM_REGION( 0x10000, "maincpu", 0 )
+	ROM_LOAD( "mam8arc.bin", 0x0000, 0x010000, CRC(91ee99ca) SHA1(8e7e26e0ab518e55784b91b5d8c9780eb1f72525) )
+	sc2_mam_sound
 ROM_END
 
 ROM_START( sc2mamcl )
 	ROM_REGION( 0x10000, "maincpu", 0 )
 	ROM_LOAD( "club-make-a-million_std_ac_250pnd-20p_ass.bin", 0x0000, 0x010000, CRC(f7b67981) SHA1(ccddb63cd24969fb74a3e4c51c8ab7453b3e99a1) )
+	sc2_mamcl_sound
+ROM_END
 
-	ROM_REGION( 0x10000, "altrevs", 0 )
+ROM_START( sc2mamclp )
+	ROM_REGION( 0x10000, "maincpu", 0 )
 	ROM_LOAD( "club-make-a-million_dat_ac_250pnd-20p_ass.bin", 0x0000, 0x010000, CRC(4a6a6e05) SHA1(684bb86de514e66409cc04255d4212569ad5f2e6) )
-	ROM_LOAD( "club-make-a-million_dat_ac_var_ass.bin", 0x0000, 0x010000, CRC(484ea479) SHA1(c1542dcd664508e4ebea3b66b9961680b7f4d711) )
+	sc2_mamcl_sound
+ROM_END
+
+ROM_START( sc2mamcl1 )
+	ROM_REGION( 0x10000, "maincpu", 0 )
+	ROM_LOAD( "club-make-a-million_std_ac_var_p65_ass.bin", 0x0000, 0x010000, CRC(296b5724) SHA1(437d789313960db9e4da147353da81d3e162e563) )
+	sc2_mamcl_sound
+ROM_END
+
+ROM_START( sc2mamcl1p )
+	ROM_REGION( 0x10000, "maincpu", 0 )
 	ROM_LOAD( "club-make-a-million_dat_ac_var_p65_ass.bin", 0x0000, 0x010000, CRC(ee687364) SHA1(a414c71659a81fc464bc167c05e9426a37d33f82) )
+	sc2_mamcl_sound
+ROM_END
+
+ROM_START( sc2mamcl2 )
+	ROM_REGION( 0x10000, "maincpu", 0 )
 	ROM_LOAD( "club-make-a-million_std_ac_var_ass.bin", 0x0000, 0x010000, CRC(c0685075) SHA1(4906d1e81e7d9b43e6c147ebc72081634dd7cd45) )
-	ROM_LOAD( "club-make-a-million_std_ac_var_p65_ass.bin", 0x0000, 0x010000, CRC(296b5724) SHA1(437d789313960db9e4da147353da81d3e162e563) )
-	ROM_LOAD( "mmilclub", 0x0000, 0x010000, CRC(c3c6856a) SHA1(6163bfcf4271bef2517bdf16b526a882574c0bf1) )
+	sc2_mamcl_sound
+ROM_END
 
-	ROM_REGION( 0x80000, "upd", ROMREGION_ERASE00 )
-	ROM_LOAD( "cmamsnd.bin", 0x0000, 0x080000, CRC(9a80977a) SHA1(0a6dc9465efa9e3d12894daf88a2746e74409349) )
+ROM_START( sc2mamcl2p )
+	ROM_REGION( 0x10000, "maincpu", 0 )
+	ROM_LOAD( "club-make-a-million_dat_ac_var_ass.bin", 0x0000, 0x010000, CRC(484ea479) SHA1(c1542dcd664508e4ebea3b66b9961680b7f4d711) )
+	sc2_mamcl_sound
+ROM_END
+
+ROM_START( sc2mamcl3 )
+	ROM_REGION( 0x10000, "maincpu", 0 )
+	ROM_LOAD( "mmilclub", 0x0000, 0x010000, CRC(c3c6856a) SHA1(6163bfcf4271bef2517bdf16b526a882574c0bf1) )
+	sc2_mamcl_sound
 ROM_END
 
 ROM_START( sc2scc )
@@ -4792,47 +6375,119 @@
 	ROM_LOAD( "scsnd", 0x0000, 0x040000, CRC(5f201e1a) SHA1(cc67bcd3a59681b7eb535c966a1e100a17ca1acc) )
 ROM_END
 
-
 ROM_START( sc2showt )
 	ROM_REGION( 0x10000, "maincpu", 0 )
 	ROM_LOAD( "showtime-spectacular_std_ac_8-10pnd-20p_ass.bin", 0x0000, 0x010000, CRC(44176459) SHA1(e7321fb659be162507f095e3b586706837892c2d) )
+	sc2_showt_sound
+ROM_END
 
-	ROM_REGION( 0x10000, "altrevs", 0 )
-	ROM_LOAD( "showtime-spectacular_dat_ac_8-10pnd20p_ass.bin", 0x0000, 0x010000, CRC(98111157) SHA1(ddc0e194d330348ce133467324155787f98bf8fd) )
-	ROM_LOAD( "showtime-spectacular_dat_ac_var_8pnd_ass.bin", 0x0000, 0x010000, CRC(99bddd9c) SHA1(256b11ffc0415c21ad20d7192cf5bb67dca38a54) )
-	ROM_LOAD( "showtime-spectacular_dat_ar_var_ass.bin", 0x0000, 0x010000, CRC(f70d696e) SHA1(5ddaa1323586dd7de87ee18f666c632a149b8c6c) )
-	ROM_LOAD( "showtime-spectacular_dat_ss_var_ass.bin", 0x0000, 0x010000, CRC(180984c3) SHA1(789cf4e7d99ad25d21ea02ec4de39f30fb6e7474) )
+ROM_START( sc2showtp )
+	ROM_REGION( 0x10000, "maincpu", 0 )
+	ROM_LOAD( "showtime-spectacular_dat_ac_8-10pnd-20p_ass.bin", 0x0000, 0x010000, CRC(98111157) SHA1(ddc0e194d330348ce133467324155787f98bf8fd) )
+	sc2_showt_sound
+ROM_END
+
+ROM_START( sc2showt1 )
+	ROM_REGION( 0x10000, "maincpu", 0 )
+	ROM_LOAD( "showtime-spectacular_std_wi_ac_8-10.pnd_ass.bin", 0x0000, 0x010000, CRC(d4867696) SHA1(7d8d9eed052ab6a84c52136bb604b91987f6120e) )
+	sc2_showt_sound
+ROM_END
+
+ROM_START( sc2showt1p )
+	ROM_REGION( 0x10000, "maincpu", 0 )
 	ROM_LOAD( "showtime-spectacular_dat_wi_ac_8-10pnd_ass.bin", 0x0000, 0x010000, CRC(9233e7e2) SHA1(fafc9fe99fb3b04e494302e2e1c566e611c1cd54) )
+	sc2_showt_sound
+ROM_END
+
+ROM_START( sc2showt2 )
+	ROM_REGION( 0x10000, "maincpu", 0 )
 	ROM_LOAD( "showtime-spectacular_std_ac_var_8pnd_ass.bin", 0x0000, 0x010000, CRC(c6760a9b) SHA1(bf85edd0a0d10da04b1a3608fa2f2f3c5d4ed7ec) )
+	sc2_showt_sound
+ROM_END
+
+ROM_START( sc2showt2p )
+	ROM_REGION( 0x10000, "maincpu", 0 )
+	ROM_LOAD( "showtime-spectacular_dat_ac_var_8pnd_ass.bin", 0x0000, 0x010000, CRC(99bddd9c) SHA1(256b11ffc0415c21ad20d7192cf5bb67dca38a54) )
+	sc2_showt_sound
+ROM_END
+
+ROM_START( sc2showt3 )
+	ROM_REGION( 0x10000, "maincpu", 0 )
 	ROM_LOAD( "showtime-spectacular_std_ar_var_ass.bin", 0x0000, 0x010000, CRC(b2a8470c) SHA1(43eecd76e6a028595ee91a7be92490bda9d8eef0) )
-	ROM_LOAD( "showtime-spectacular_std_ss_var_ass.bin", 0x0000, 0x010000, CRC(a42d951d) SHA1(e6c0491e69195043f0f228b80ded6c84116b8ddc) )
-	ROM_LOAD( "showtime-spectacular_std_wi_ac_8-10.pnd_ass.bin", 0x0000, 0x010000, CRC(d4867696) SHA1(7d8d9eed052ab6a84c52136bb604b91987f6120e) )
-	ROM_LOAD( "stspecss", 0x0000, 0x002000, CRC(e7f3c2ad) SHA1(9fe0cda10d1778d42ebc8db7d1f1e393c00848c4) ) // looks like a bad dump, first 0x2000 of some of the above roms?
+	sc2_showt_sound
+ROM_END
 
-	ROM_REGION( 0x80000, "upd", ROMREGION_ERASE00 )
-	ROM_LOAD( "stspec", 0x0000, 0x080000, CRC(01e4a017) SHA1(f2f0cadf2334edf35db98af0dcb6d827c991f3f2) )
+ROM_START( sc2showt3p )
+	ROM_REGION( 0x10000, "maincpu", 0 )
+	ROM_LOAD( "showtime-spectacular_dat_ar_var_ass.bin", 0x0000, 0x010000, CRC(f70d696e) SHA1(5ddaa1323586dd7de87ee18f666c632a149b8c6c) )
+	sc2_showt_sound
+ROM_END
+
+ROM_START( sc2showt4 )
+	ROM_REGION( 0x10000, "maincpu", 0 )
+	ROM_LOAD( "showtime-spectacular_std_ss_var_ass.bin", 0x0000, 0x010000, CRC(a42d951d) SHA1(e6c0491e69195043f0f228b80ded6c84116b8ddc) )
+	sc2_showt_sound
 ROM_END
 
+ROM_START( sc2showt4p )
+	ROM_REGION( 0x10000, "maincpu", 0 )
+	ROM_LOAD( "showtime-spectacular_dat_ss_var_ass.bin", 0x0000, 0x010000, CRC(180984c3) SHA1(789cf4e7d99ad25d21ea02ec4de39f30fb6e7474) )
+	sc2_showt_sound
+ROM_END
 
 ROM_START( sc2sstar )
 	ROM_REGION( 0x10000, "maincpu", 0 )
-	ROM_LOAD( "superstar_std_ac_var_4-8-10pnd_tri2_rot_ass.bin", 0x0000, 0x010000, CRC(1e294299) SHA1(c961be1289bc77e34535d913ff19c75b1edeaba7) )
+	ROM_LOAD( "superstar_std_ac_tri3_ass.bin", 0x0000, 0x010000, CRC(7a6c9f8d) SHA1(2a721823a95b2c324dd8500b32a04e8492e49f67) )
+	sc2_sstar_sound
+ROM_END
 
-	ROM_REGION( 0x10000, "altrevs", 0 )
-	ROM_LOAD( "superstar.bin", 0x0000, 0x010000, CRC(1e294299) SHA1(c961be1289bc77e34535d913ff19c75b1edeaba7) )
-	ROM_LOAD( "superstar_dat_ac_8pnd-20p_tri2_ass.bin", 0x0000, 0x010000, CRC(c1134d01) SHA1(d36ea1c58261353c86da562825ccadcdc2ddb9e8) )
+ROM_START( sc2sstarp )
+	ROM_REGION( 0x10000, "maincpu", 0 )
 	ROM_LOAD( "superstar_dat_ac_tri3_ass.bin", 0x0000, 0x010000, CRC(caeaf463) SHA1(c07569da462de24f477a974f7d18368ea7b6b461) )
+	sc2_sstar_sound
+ROM_END
+
+ROM_START( sc2sstar1 )
+	ROM_REGION( 0x10000, "maincpu", 0 )
+	ROM_LOAD( "superstar_std_ac_var_4-8-10pnd_tri2_rot_ass.bin", 0x0000, 0x010000, CRC(1e294299) SHA1(c961be1289bc77e34535d913ff19c75b1edeaba7) )
+	sc2_sstar_sound
+ROM_END
+
+ROM_START( sc2sstar1p )
+	ROM_REGION( 0x10000, "maincpu", 0 )
 	ROM_LOAD( "superstar_dat_ac_var_4-8-10pnd_tri2_rot_ass.bin", 0x0000, 0x010000, CRC(f65ed8c9) SHA1(c0322c63d02d11425518fdacb98d30e7e49e498b) )
-	ROM_LOAD( "superstar_dat_wi_ac_10pnd_tri2_rot_ass.bin", 0x0000, 0x010000, CRC(71ef63d6) SHA1(c0b1cbca8c801002a3eb7fd11474107c6bc6a1d1) )
+	sc2_sstar_sound
+ROM_END
+
+ROM_START( sc2sstar2 )
+	ROM_REGION( 0x10000, "maincpu", 0 )
 	ROM_LOAD( "superstar_std_ac_8pnd-20p_tri2_ass.bin", 0x0000, 0x010000, CRC(441b76ff) SHA1(46b1ac77798cee4dfdd703af768c83b5c246f135) )
-	ROM_LOAD( "superstar_std_ac_tri3_ass.bin", 0x0000, 0x010000, CRC(7a6c9f8d) SHA1(2a721823a95b2c324dd8500b32a04e8492e49f67) )
+	sc2_sstar_sound
+ROM_END
+
+ROM_START( sc2sstar2p )
+	ROM_REGION( 0x10000, "maincpu", 0 )
+	ROM_LOAD( "superstar_dat_ac_8pnd-20p_tri2_ass.bin", 0x0000, 0x010000, CRC(c1134d01) SHA1(d36ea1c58261353c86da562825ccadcdc2ddb9e8) )
+	sc2_sstar_sound
+ROM_END
+
+ROM_START( sc2sstar3 )
+	ROM_REGION( 0x10000, "maincpu", 0 )
 	ROM_LOAD( "superstar_std_wi_ac_10pnd_tri2_rot_ass.bin", 0x0000, 0x010000, CRC(adca7b5a) SHA1(4c889a0cda94c2698a4102a53d04594f7f931ee5) )
-	ROM_LOAD( "supst20.15", 0x0000, 0x010000, CRC(c3446ec4) SHA1(3c1ad27385547a33993a839b53873d8b92214ade) )
+	sc2_sstar_sound
+ROM_END
 
-	ROM_REGION( 0x80000, "upd", ROMREGION_ERASE00 )
-	ROM_LOAD( "superstarsnd.bin", 0x0000, 0x080000, CRC(9a2609b5) SHA1(d29a5029e39cd44739682954f034f2d1f2e1cebf) )
+ROM_START( sc2sstar3p )
+	ROM_REGION( 0x10000, "maincpu", 0 )
+	ROM_LOAD( "superstar_dat_wi_ac_10pnd_tri2_rot_ass.bin", 0x0000, 0x010000, CRC(71ef63d6) SHA1(c0b1cbca8c801002a3eb7fd11474107c6bc6a1d1) )
+	sc2_sstar_sound
 ROM_END
 
+ROM_START( sc2sstar4 )
+	ROM_REGION( 0x10000, "maincpu", 0 )
+	ROM_LOAD( "supst20.15", 0x0000, 0x010000, CRC(c3446ec4) SHA1(3c1ad27385547a33993a839b53873d8b92214ade) )
+	sc2_sstar_sound
+ROM_END
 
 ROM_START( sc2pe1g )
 	ROM_REGION( 0x10000, "maincpu", 0 )
@@ -4846,78 +6501,148 @@
 ROM_END
 
 
+
+
+
 ROM_START( sc2wwcl )
 	ROM_REGION( 0x10000, "maincpu", 0 )
 	ROM_LOAD( "club-wild-west_std_ac_var_250pnd_ass.bin", 0x0000, 0x010000, CRC(a4c33524) SHA1(34d46b912488f630ddec301bde5ee1d87661b2a4) )
+	sc2_wwcl_sound
+ROM_END
 
-	ROM_REGION( 0x10000, "altrevs", 0 )
+ROM_START( sc2wwclp )
+	ROM_REGION( 0x10000, "maincpu", 0 )
 	ROM_LOAD( "club-wild-west_dat_ac_var_250pnd_ass.bin", 0x0000, 0x010000, CRC(deca21f2) SHA1(a79ef84271742f98e4557cba7b6b976f4d5b220f) )
-	ROM_LOAD( "club-wild-west_dat_ac_var_ffp_ass.bin", 0x0000, 0x010000, CRC(2361e6c7) SHA1(5277d8d784a358441b86f4b9e3999511c74b7b09) )
+	sc2_wwcl_sound
+ROM_END
+
+ROM_START( sc2wwcl1 )
+	ROM_REGION( 0x10000, "maincpu", 0 )
 	ROM_LOAD( "club-wild-west_std_ac_var_ffp_ass.bin", 0x0000, 0x010000, CRC(74b2592a) SHA1(f83a1fb5db69403a6b2922d2e3654fb753e0079c) )
+	sc2_wwcl_sound
+ROM_END
 
-	ROM_REGION( 0x80000, "upd", ROMREGION_ERASE00 )
-	ROM_LOAD( "club-wild-west_sound.bin", 0x0000, 0x080000, NO_DUMP ) // guessing it's missing
+ROM_START( sc2wwcl1p )
+	ROM_REGION( 0x10000, "maincpu", 0 )
+	ROM_LOAD( "club-wild-west_dat_ac_var_ffp_ass.bin", 0x0000, 0x010000, CRC(2361e6c7) SHA1(5277d8d784a358441b86f4b9e3999511c74b7b09) )
+	sc2_wwcl_sound
 ROM_END
 
 
 ROM_START( sc2dick )
 	ROM_REGION( 0x10000, "maincpu", 0 )
+	ROM_LOAD( "spot3-1n.p1", 0x0000, 0x010000, CRC(794cec5b) SHA1(91ba4fcc459194fcf89f27e9c687cbdb8a10bb78) )
+	sc2_dick_sound
+ROM_END
+
+ROM_START( sc2dickp )
+	ROM_REGION( 0x10000, "maincpu", 0 )
+	ROM_LOAD( "spot3-1p.p1", 0x0000, 0x010000, CRC(fa027939) SHA1(7fc6d26d179d976add3ca18c5df71dd9df7af1f2) )
+	sc2_dick_sound
+ROM_END
+
+ROM_START( sc2dick1 )
+	ROM_REGION( 0x10000, "maincpu", 0 )
 	ROM_LOAD( "spotteddick2_2.bin", 0x0000, 0x010000, CRC(497ef3b2) SHA1(f5021e35397081c62e817b86ff9e8a49d78748a5) )
+	sc2_dick_sound
+ROM_END
 
-	ROM_REGION( 0x10000, "altrevs", 0 )
+ROM_START( sc2dick2 )
+	ROM_REGION( 0x10000, "maincpu", 0 )
 	ROM_LOAD( "sp151-4n.p1", 0x0000, 0x010000, CRC(ee18a5a1) SHA1(17c2984fb305a571df83c663c9e42164f2322938) )
+	sc2_dick_sound
+ROM_END
+
+ROM_START( sc2dick2p )
+	ROM_REGION( 0x10000, "maincpu", 0 )
 	ROM_LOAD( "sp151-4p.p1", 0x0000, 0x010000, CRC(94d96a28) SHA1(307e1cb5fe3c6050eb039dcd97e6ac88494707b3) )
-	ROM_LOAD( "spot3-1p.p1", 0x0000, 0x010000, CRC(fa027939) SHA1(7fc6d26d179d976add3ca18c5df71dd9df7af1f2) )
-//  ROM_LOAD( "spotd_v2_2.bin", 0x0000, 0x010000, CRC(497ef3b2) SHA1(f5021e35397081c62e817b86ff9e8a49d78748a5) )
-	ROM_LOAD( "global-spotted-dick_euro.bin", 0x0000, 0x010000, CRC(695a3ec4) SHA1(f9f2f47f74479ef444997e2deef1c5f4677368ca) ) // this one isn't scrambled
-	ROM_LOAD( "spotd31", 0x0000, 0x010000, CRC(794cec5b) SHA1(91ba4fcc459194fcf89f27e9c687cbdb8a10bb78) )
+	sc2_dick_sound
+ROM_END
+
+ROM_START( sc2dick2e )
+	ROM_REGION( 0x10000, "maincpu", 0 )
 	ROM_LOAD( "spotteddickeuro.bin", 0x0000, 0x010000, CRC(c3b68821) SHA1(d86e098c3f0aec4f8068942934134e394075473d) )
+	sc2_dick_sound
+ROM_END
 
-	ROM_REGION( 0x100000, "upd", ROMREGION_ERASE00 ) // not upd?
-	ROM_LOAD( "global-spotted-dick_snd.bin", 0x0000, 0x100000, CRC(f2c66aab) SHA1(6fe94a193779c91711588365591cf42d197cb7b9) )
+ROM_START( sc2dick2eu )
+	ROM_REGION( 0x10000, "maincpu", 0 )
+	ROM_LOAD( "global-spotted-dick_euro.bin", 0x0000, 0x010000, CRC(695a3ec4) SHA1(f9f2f47f74479ef444997e2deef1c5f4677368ca) ) // this one isn't scrambled
+	sc2_dick_sound
 ROM_END
 
 ROM_START( sc2pick )
 	ROM_REGION( 0x10000, "maincpu", 0 )
 	ROM_LOAD( "pick2-3n.p1", 0x0000, 0x010000, CRC(b89c1dde) SHA1(8e1ece392dbb8e88daece79c5bea832149d8f442) )
+	sc2_pick_sound
+ROM_END
 
-	ROM_REGION( 0x10000, "altrevs", 0 )
+ROM_START( sc2pickp )
+	ROM_REGION( 0x10000, "maincpu", 0 )
 	ROM_LOAD( "pick2-3p.p1", 0x0000, 0x010000, CRC(53ced0cb) SHA1(113a5e9414a3fcf0dacb6024748681f2b8e8bb55) )
+	sc2_pick_sound
+ROM_END
 
-	// club version roms
+ROM_START( sc2pickc )
+	ROM_REGION( 0x10000, "maincpu", 0 )
 	ROM_LOAD( "dpic1-9n.p1", 0x0000, 0x010000, CRC(89b24a0b) SHA1(f56a79258497bc787b50d37ddf75b5d4920848e8) )
-	ROM_LOAD( "dpic1-9p.p1", 0x0000, 0x010000, CRC(1c0adb51) SHA1(aeca44490c8b0517eddd69fcdc36cf2cafb4d844) )
-
+	sc2_pick_sound
+ROM_END
 
-	ROM_REGION( 0x200000, "upd", ROMREGION_ERASE00 ) // not upd?
-	ROM_LOAD( "pickofthebunchsnd1.bin", 0x000000, 0x100000, CRC(f717b9c7) SHA1(06c90cc9779d475100926e986c742f0acffa0dc3) )
-	ROM_LOAD( "pickofthebunchsnd2.bin", 0x100000, 0x100000, CRC(eaac3e67) SHA1(3aaed6514eeeb41c26f365789d8736908785b1c2) )
+ROM_START( sc2pickcp )
+	ROM_REGION( 0x10000, "maincpu", 0 )
+	ROM_LOAD( "dpic1-9p.p1", 0x0000, 0x010000, CRC(1c0adb51) SHA1(aeca44490c8b0517eddd69fcdc36cf2cafb4d844) )
+	sc2_pick_sound
 ROM_END
 
 
+
 ROM_START( sc2rock )
 	ROM_REGION( 0x10000, "maincpu", 0 )
 	ROM_LOAD( "hb151-6n.p1", 0x0000, 0x010000, CRC(982de54a) SHA1(20e65e163f0455d683eb47ac37bc1e3355548c9a) )
+	sc2_rock_sound
+ROM_END
 
-	ROM_REGION( 0x10000, "altrevs", 0 )
+ROM_START( sc2rockp )
+	ROM_REGION( 0x10000, "maincpu", 0 )
 	ROM_LOAD( "hb151-6p.p1", 0x0000, 0x010000, CRC(c9063e3c) SHA1(e47765ff56abb8d25c559cc5ebbe679ca40c498b) )
-	ROM_LOAD( "hbiyr_euro.bin", 0x0000, 0x010000, CRC(bc4f8ffe) SHA1(de51fda4fe1c57945133a25c2ad8fba48064a23c) )
+	sc2_rock_sound
+ROM_END
+
+ROM_START( sc2rock1 )
+	ROM_REGION( 0x10000, "maincpu", 0 )
 	ROM_LOAD( "rock1-4n.p1", 0x0000, 0x010000, CRC(e3888e8b) SHA1(7e394cbc219259a5eed9ccb283fff5f4b257e87f) )
+	sc2_rock_sound
+ROM_END
+
+ROM_START( sc2rock1p )
+	ROM_REGION( 0x10000, "maincpu", 0 )
 	ROM_LOAD( "rock1-4p.p1", 0x0000, 0x010000, CRC(a4b61df4) SHA1(ffbfab5fc976edc68bb599625387295df793f449) )
+	sc2_rock_sound
+ROM_END
 
-	ROM_REGION( 0x200000, "upd", ROMREGION_ERASE00 ) // not upd?
-	ROM_LOAD( "hbiyr_snd.bin", 0x0000, 0x100000, CRC(96cc0d54) SHA1(612f8c7f353bb847c1a28e2b76b64916d5b2d36a) )
+ROM_START( sc2rocke )
+	ROM_REGION( 0x10000, "maincpu", 0 )
+	ROM_LOAD( "hbiyr_euro.bin", 0x0000, 0x010000, CRC(bc4f8ffe) SHA1(de51fda4fe1c57945133a25c2ad8fba48064a23c) )
+	sc2_rock_sound
 ROM_END
 
 ROM_START( sc2call )
 	ROM_REGION( 0x10000, "maincpu", 0 )
 	ROM_LOAD( "your2-7n.p1", 0x0000, 0x010000, CRC(9d3b4987) SHA1(131808aa90627b0aa830c6b49b12e15af96665a5) )
+	ROM_REGION( 0x200000, "upd", ROMREGION_ERASE00 ) // not upd?
+	/* missing? */
+ROM_END
 
-	ROM_REGION( 0x20000, "altrevs", 0 )
-	ROM_LOAD( "dyor1-6p.p1", 0x0000, 0x010000, CRC(843edbd2) SHA1(67496753f3687800413418d65dcfc764695b4997) )
-	ROM_LOAD( "your2-7p.p1", 0x0000, 0x020000, CRC(32ba485b) SHA1(00d962ba30f029ee2cc4447c42d57d9bc2592000) ) // seems to contain a different game in the 2nd half??
+ROM_START( sc2callp )
+	ROM_REGION( 0x10000, "maincpu", 0 )
+	ROM_LOAD( "your2-7p.p1", 0x0000, 0x010000, CRC(03af9c27) SHA1(03dcdb3d20903a116d85e4e0cfafc5495f0e9d60) )
+	ROM_REGION( 0x200000, "upd", ROMREGION_ERASE00 ) // not upd?
+	/* missing? */
+ROM_END
 
-	// club rom
+ROM_START( sc2callc )
+	ROM_REGION( 0x10000, "maincpu", 0 )
 	ROM_LOAD( "dyor1-6n.p1", 0x0000, 0x010000, CRC(5e516bd1) SHA1(52a108e3d7aa9fdffb25e09922fa84c0155f18f5) )
 
 
@@ -4925,6 +6650,13 @@
 	/* missing? */
 ROM_END
 
+ROM_START( sc2callcp )
+	ROM_REGION( 0x10000, "maincpu", 0 )
+	ROM_LOAD( "dyor1-6p.p1", 0x0000, 0x010000, CRC(843edbd2) SHA1(67496753f3687800413418d65dcfc764695b4997) )
+
+	ROM_REGION( 0x200000, "upd", ROMREGION_ERASE00 ) // not upd?
+	/* missing? */
+ROM_END
 
 ROM_START( sc2prom )
 	ROM_REGION( 0x10000, "maincpu", 0 )
@@ -5123,8 +6855,6 @@
 	ROM_REGION( 0x10000, "maincpu", 0 )
 	ROM_LOAD( "scxsp10(__star).bin", 0x0000, 0x010000, CRC(2fe512ad) SHA1(d409f27a62405dc45f487f9351e4d158e4d35440) )
 	ROM_REGION( 0x200000, "altrevs", ROMREGION_ERASE00 )
-	ROM_LOAD( "cxspv1gr", 0x0000, 0x010000, CRC(67f69bd4) SHA1(ee2dd0cd98c98a4727df8c7c721de9ac49b583ff) )
-	ROM_LOAD( "cxspv2gr", 0x0000, 0x010000, CRC(2fe512ad) SHA1(d409f27a62405dc45f487f9351e4d158e4d35440) )
 	ROM_LOAD( "scxspv1grn.bin", 0x0000, 0x010000, CRC(67f69bd4) SHA1(ee2dd0cd98c98a4727df8c7c721de9ac49b583ff) )
 	ROM_LOAD( "scxspv2grn.bin", 0x0000, 0x010000, CRC(2fe512ad) SHA1(d409f27a62405dc45f487f9351e4d158e4d35440) )
 	ROM_LOAD( "scxv1hi.str", 0x0000, 0x010000, CRC(5c7781d7) SHA1(0bbd48d6b506a31fe7d48122589f434a4473c225) )
@@ -5152,38 +6882,105 @@
 
 ROM_START( sc2cnile )
 	ROM_REGION( 0x10000, "maincpu", 0 )
-	ROM_LOAD( "club-cash-on-the-nile_std_ac_var_200pnd_rot_ass.bin", 0x0000, 0x010000, CRC(41cbb60d) SHA1(4fede32a8d0957a46732f6851d4af7fd959d9fb5) )
+	ROM_LOAD( "club-cash-on-the-nile_std_ac_var_150pnd_rot_ass.bin", 0x0000, 0x010000, CRC(4a5b4b9f) SHA1(aaeaa42cf42d91002c61e4c0df49d7ef97e00b2a) )
+	ROM_REGION( 0x200000, "upd", ROMREGION_ERASE00 )
+ROM_END
 
-	ROM_REGION( 0x80000, "altrevs", 0 )
+ROM_START( sc2cnile1 )
+	ROM_REGION( 0x10000, "maincpu", 0 )
 	ROM_LOAD( "cash-nile 150 047s.bin", 0x0000, 0x010000, CRC(2d8e9037) SHA1(b3d93488d662260cfaaf624baec68dbe92f71640) )
+	ROM_REGION( 0x200000, "upd", ROMREGION_ERASE00 )
+ROM_END
+
+ROM_START( sc2cnile2 )
+	ROM_REGION( 0x10000, "maincpu", 0 )
+	ROM_LOAD( "club-cash-on-the-nile_std_ac_var_200pnd_rot_ass.bin", 0x0000, 0x010000, CRC(41cbb60d) SHA1(4fede32a8d0957a46732f6851d4af7fd959d9fb5) )
+	ROM_REGION( 0x200000, "upd", ROMREGION_ERASE00 )
+ROM_END
+
+ROM_START( sc2cnile2p )
+	ROM_REGION( 0x10000, "maincpu", 0 )
 	ROM_LOAD( "club-cash-on-the-nile_dat_ac_var_200pnd_rot_ass.bin", 0x0000, 0x010000, CRC(3bfac54c) SHA1(ecfd7607676c1620ee37718578675437911cf147) )
+	ROM_REGION( 0x200000, "upd", ROMREGION_ERASE00 )
+ROM_END
+
+ROM_START( sc2cnile3p )
+	ROM_REGION( 0x10000, "maincpu", 0 )
 	ROM_LOAD( "club-cash-on-the-nile_dat_ac_var_250pnd_rot_ass.bin", 0x0000, 0x010000, CRC(42d0a11d) SHA1(b38fa1360f0b8d465bb0e0759f73e0b98a545ad3) )
-	ROM_LOAD( "club-cash-on-the-nile_std_ac_var_150pnd_rot_ass.bin", 0x0000, 0x010000, CRC(4a5b4b9f) SHA1(aaeaa42cf42d91002c61e4c0df49d7ef97e00b2a) )
 	ROM_REGION( 0x200000, "upd", ROMREGION_ERASE00 )
 ROM_END
 
 ROM_START( sc2casr )
 	ROM_REGION( 0x10000, "maincpu", 0 )
-	ROM_LOAD( "casino-royale_std_wit_ac_10pnd-20p_ass.bin", 0x0000, 0x010000, CRC(11663ae8) SHA1(f8e0fb8b23c192f48df4e5d9fc94f8c625d4771c) )
+	ROM_LOAD( "casino-royale_std_wit_ac_10pnd_tri3_ass.bin", 0x0000, 0x010000, CRC(cc2ef9dd) SHA1(9e85e319fbe74f31de1fddc4f15dd0ce49691d2c) )
+	ROM_REGION( 0x200000, "upd", ROMREGION_ERASE00 )
+ROM_END
 
-	ROM_REGION( 0x80000, "altrevs", 0 )
-	ROM_LOAD( "casino-royale_dat_ac_var_8-10pnd_ass.bin", 0x0000, 0x010000, CRC(8c59c768) SHA1(fec9cfbd9a8c262d053ae84c09535a7d8331bfa2) )
+ROM_START( sc2casrp )
+	ROM_REGION( 0x10000, "maincpu", 0 )
+	ROM_LOAD( "casino-royale_dat_wit_ac_10pnd_tri3_ass.bin", 0x0000, 0x010000, CRC(6436974c) SHA1(419d4f58f518582f0fe334323d0d9fa68f9458a6) )
+	ROM_REGION( 0x200000, "upd", ROMREGION_ERASE00 )
+ROM_END
+
+ROM_START( sc2casr1 )
+	ROM_REGION( 0x10000, "maincpu", 0 )
+	ROM_LOAD( "casino-royale_std_ac_var_tri3_ass.bin", 0x0000, 0x010000, CRC(5f47c57b) SHA1(5ce7baab279ee28c337a4ee72038b6d6cee1da9c) )
+	ROM_REGION( 0x200000, "upd", ROMREGION_ERASE00 )
+ROM_END
+
+ROM_START( sc2casr1p )
+	ROM_REGION( 0x10000, "maincpu", 0 )
 	ROM_LOAD( "casino-royale_dat_ac_var_tri3_ass.bin", 0x0000, 0x010000, CRC(bc805e51) SHA1(c6b0e2fc1011688ca9c374bb5cca5788e6dea005) )
-	ROM_LOAD( "casino-royale_dat_ss_ac_var_8pnd_ass.bin", 0x0000, 0x010000, CRC(341e69a8) SHA1(3b719a437e11ca71a9acccc76cd5f2b05325e203) )
+	ROM_REGION( 0x200000, "upd", ROMREGION_ERASE00 )
+ROM_END
+
+ROM_START( sc2casr2 )
+	ROM_REGION( 0x10000, "maincpu", 0 )
+	ROM_LOAD( "casino-royale_std_wit_ac_10pnd-20p_ass.bin", 0x0000, 0x010000, CRC(11663ae8) SHA1(f8e0fb8b23c192f48df4e5d9fc94f8c625d4771c) )
+	ROM_REGION( 0x200000, "upd", ROMREGION_ERASE00 )
+ROM_END
+
+ROM_START( sc2casr2p )
+	ROM_REGION( 0x10000, "maincpu", 0 )
 	ROM_LOAD( "casino-royale_dat_wit_ac_10pnd-20p_ass.bin", 0x0000, 0x010000, CRC(8a6eab70) SHA1(ef2bb7f7fd534dfee1322b9fd151e24642cb28bf) )
-	ROM_LOAD( "casino-royale_dat_wit_ac_10pnd_tri3_ass.bin", 0x0000, 0x010000, CRC(6436974c) SHA1(419d4f58f518582f0fe334323d0d9fa68f9458a6) )
-	ROM_LOAD( "casino-royale_std_ac_var_8-10pnd_ass.bin", 0x0000, 0x010000, CRC(a25c051a) SHA1(6b7e954c53e3f1f90d24f88c7fd09606a1cd8630) )
-	ROM_LOAD( "casino-royale_std_ac_var_tri3ss.bin", 0x0000, 0x010000, CRC(5f47c57b) SHA1(5ce7baab279ee28c337a4ee72038b6d6cee1da9c) )
+	ROM_REGION( 0x200000, "upd", ROMREGION_ERASE00 )
+ROM_END
+
+ROM_START( sc2casr3 )
+	ROM_REGION( 0x10000, "maincpu", 0 )
 	ROM_LOAD( "casino-royale_std_ss_ac_var_8pnd_ass.bin", 0x0000, 0x010000, CRC(6a585c28) SHA1(8ac91085efd8382544868b8b0b45fddede38b5ec) )
-	ROM_LOAD( "casino-royale_std_wit_ac_10pnd_tri3_ass.bin", 0x0000, 0x010000, CRC(cc2ef9dd) SHA1(9e85e319fbe74f31de1fddc4f15dd0ce49691d2c) )
 	ROM_REGION( 0x200000, "upd", ROMREGION_ERASE00 )
 ROM_END
 
+ROM_START( sc2casr3p )
+	ROM_REGION( 0x10000, "maincpu", 0 )
+	ROM_LOAD( "casino-royale_dat_ss_ac_var_8pnd_ass.bin", 0x0000, 0x010000, CRC(341e69a8) SHA1(3b719a437e11ca71a9acccc76cd5f2b05325e203) )
+	ROM_REGION( 0x200000, "upd", ROMREGION_ERASE00 )
+ROM_END
+
+ROM_START( sc2casr4 )
+	ROM_REGION( 0x10000, "maincpu", 0 )
+	ROM_LOAD( "casino-royale_std_ac_var_8-10pnd_ass.bin", 0x0000, 0x010000, CRC(a25c051a) SHA1(6b7e954c53e3f1f90d24f88c7fd09606a1cd8630) )
+	ROM_REGION( 0x200000, "upd", ROMREGION_ERASE00 )
+ROM_END
+
+ROM_START( sc2casr4p )
+	ROM_REGION( 0x10000, "maincpu", 0 )
+	ROM_LOAD( "casino-royale_dat_ac_var_8-10pnd_ass.bin", 0x0000, 0x010000, CRC(8c59c768) SHA1(fec9cfbd9a8c262d053ae84c09535a7d8331bfa2) )
+	ROM_REGION( 0x200000, "upd", ROMREGION_ERASE00 )
+ROM_END
+
+
+
+
 ROM_START( sc2cmbt )
 	ROM_REGION( 0x10000, "maincpu", 0 )
 	ROM_LOAD( "cat-and-mouse-and-bonzo-too_std_ac_10pnd_ass.bin", 0x0000, 0x010000, CRC(6d1612e7) SHA1(641104b4ebc99ec3b20a081fccbde70084cc329a) )
+	ROM_REGION( 0x200000, "upd", ROMREGION_ERASE00 )
+ROM_END
 
-	ROM_REGION( 0x80000, "altrevs", 0 )
+ROM_START( sc2cmbtp )
+	ROM_REGION( 0x10000, "maincpu", 0 )
 	ROM_LOAD( "cat-and-mouse-and-bonzo-too_dat_ac_10pnd_ass.bin", 0x0000, 0x010000, CRC(14770ed7) SHA1(6e7a0f596063c28cad0ecc13241e53e4a5b025f9) )
 	ROM_REGION( 0x200000, "upd", ROMREGION_ERASE00 )
 ROM_END
@@ -5191,47 +6988,118 @@
 
 
 
-
 ROM_START( sc2dbl )
 	ROM_REGION( 0x10000, "maincpu", 0 )
 	ROM_LOAD( "double-diamond_std_ga_20p_ass.bin", 0x0000, 0x010000, CRC(eded5c38) SHA1(31a687de56f95f0ab730fed2b618e492fbc0c749) )
+	ROM_REGION( 0x200000, "upd", ROMREGION_ERASE00 )
+ROM_END
 
-	ROM_REGION( 0x80000, "altrevs", 0 )
+ROM_START( sc2dblp )
+	ROM_REGION( 0x10000, "maincpu", 0 )
 	ROM_LOAD( "double-diamond_dat_ga_20p_ass.bin", 0x0000, 0x010000, CRC(7e117a69) SHA1(d73ec1cfe3d2b9d9e1f18a3979d76b13b5d89988) )
-	ROM_LOAD( "double-diamond_dat_ms_20p_ass.bin", 0x0000, 0x010000, CRC(d45b4a5c) SHA1(ccf33b36c01155e78492e861ae4a328b4086ade9) )
+	ROM_REGION( 0x200000, "upd", ROMREGION_ERASE00 )
+ROM_END
+
+ROM_START( sc2dbl1 )
+	ROM_REGION( 0x10000, "maincpu", 0 )
 	ROM_LOAD( "double-diamond_std_ms_20p_ass.bin", 0x0000, 0x010000, CRC(90a52fc4) SHA1(afb6078fc884e08afb4f6a9ac2a8abcb36fae2bd) )
 	ROM_REGION( 0x200000, "upd", ROMREGION_ERASE00 )
 ROM_END
 
+ROM_START( sc2dbl1p )
+	ROM_REGION( 0x10000, "maincpu", 0 )
+	ROM_LOAD( "double-diamond_dat_ms_20p_ass.bin", 0x0000, 0x010000, CRC(d45b4a5c) SHA1(ccf33b36c01155e78492e861ae4a328b4086ade9) )
+	ROM_REGION( 0x200000, "upd", ROMREGION_ERASE00 )
+ROM_END
 
 
 
 ROM_START( sc2flaca )
 	ROM_REGION( 0x10000, "maincpu", 0 )
+	ROM_LOAD( "flashcash_std_ac_var_10pnd_tri3_ass.bin", 0x0000, 0x010000, CRC(2cb1802a) SHA1(ae7bc9374f5882ba4142d67ad83335d4d2accf0c) )
+	ROM_REGION( 0x200000, "upd", ROMREGION_ERASE00 )
+ROM_END
+
+ROM_START( sc2flacap )
+	ROM_REGION( 0x10000, "maincpu", 0 )
+	ROM_LOAD( "flashcash_dat_ac_var_10pnd_tri3_ass.bin", 0x0000, 0x010000, CRC(0d6d8eb2) SHA1(c47e61d08afbeb542132b2f8e157417a008e9387) )
+	ROM_REGION( 0x200000, "upd", ROMREGION_ERASE00 )
+ROM_END
+
+ROM_START( sc2flaca1 )
+	ROM_REGION( 0x10000, "maincpu", 0 )
 	ROM_LOAD( "flashcash_std_ac_var_10pnd_tri2_ass.bin", 0x0000, 0x010000, CRC(e7e0fe1f) SHA1(a6c1f6565d785aa36daecb55a5c33042a84117e6) )
+	ROM_REGION( 0x200000, "upd", ROMREGION_ERASE00 )
+ROM_END
 
-	ROM_REGION( 0x80000, "altrevs", 0 )
+ROM_START( sc2flaca1p )
+	ROM_REGION( 0x10000, "maincpu", 0 )
 	ROM_LOAD( "flashcash_dat_ac_var_10pnd_tri2_ass.bin", 0x0000, 0x010000, CRC(89d6df7f) SHA1(cc8f6ca2233d77cbdcb0735cb31de9cdd9a66408) )
-	ROM_LOAD( "flashcash_dat_ac_var_10pnd_tri3_ass.bin", 0x0000, 0x010000, CRC(0d6d8eb2) SHA1(c47e61d08afbeb542132b2f8e157417a008e9387) )
-	ROM_LOAD( "flashcash_dat_wi_ac_10pnd_tri2_ass.bin", 0x0000, 0x010000, CRC(b781ecf9) SHA1(1d62a315f8292144d8129c1be9a83a5e717c6ed9) )
-	ROM_LOAD( "flashcash_std_ac_var_10pnd_tri3_ass.bin", 0x0000, 0x010000, CRC(2cb1802a) SHA1(ae7bc9374f5882ba4142d67ad83335d4d2accf0c) )
+	ROM_REGION( 0x200000, "upd", ROMREGION_ERASE00 )
+ROM_END
+
+ROM_START( sc2flaca2 )
+	ROM_REGION( 0x10000, "maincpu", 0 )
 	ROM_LOAD( "flashcash_std_wi_ac_10pnd_tri2_ass.bin", 0x0000, 0x010000, CRC(5f5b879b) SHA1(1b0f0cf54112615ea6b2ecdebc4076d132531a2c) )
 	ROM_REGION( 0x200000, "upd", ROMREGION_ERASE00 )
 ROM_END
 
+ROM_START( sc2flaca2p )
+	ROM_REGION( 0x10000, "maincpu", 0 )
+	ROM_LOAD( "flashcash_dat_wi_ac_10pnd_tri2_ass.bin", 0x0000, 0x010000, CRC(b781ecf9) SHA1(1d62a315f8292144d8129c1be9a83a5e717c6ed9) )
+	ROM_REGION( 0x200000, "upd", ROMREGION_ERASE00 )
+ROM_END
+
 ROM_START( sc2foot )
 	ROM_REGION( 0x10000, "maincpu", 0 )
 	ROM_LOAD( "football-club_std_ac_250pnd-20p_ass.bin", 0x0000, 0x010000, CRC(b4d46ee2) SHA1(3cbe603c2703570eb49682ca9dbb6ad9ede020e6) )
 
-	ROM_REGION( 0x80000, "altrevs", 0 )
-	ROM_LOAD( "95000590.mtx", 0x0000, 0x004d18, CRC(cc596be2) SHA1(190d9b9e3e06b933be7ff0b6bc69955709dedd7d) )
+	sc2_foot_matrix
+	ROM_REGION( 0x200000, "upd", ROMREGION_ERASE00 )
+ROM_END
+
+ROM_START( sc2footp )
+	ROM_REGION( 0x10000, "maincpu", 0 )
 	ROM_LOAD( "football-club_dat_ac_250pnd-20p_ass.bin", 0x0000, 0x010000, CRC(fabaf221) SHA1(ddefc6f46339f83b6cfbacbe1ff6cf065d0157aa) )
-	ROM_LOAD( "football-club_dat_ac_var_100pnd-5p_ass.bin", 0x0000, 0x010000, CRC(7f6acf47) SHA1(b6e8254d4af1e5a85166e4eca1dc2b1ea2eed292) )
-	ROM_LOAD( "football-club_dat_var_ass.bin", 0x0000, 0x010000, CRC(ac088604) SHA1(d1db45aa19b645aad56bbf84e551dc1cca22f92d) )
-	ROM_LOAD( "football-club_mtx_ass.bin", 0x0000, 0x010000, CRC(6b78de57) SHA1(84638836cdbfa6e4b3b76cd38e238d12bb312c53) )
+
+	sc2_foot_matrix
+
+	ROM_REGION( 0x200000, "upd", ROMREGION_ERASE00 )
+ROM_END
+
+ROM_START( sc2foot1 )
+	ROM_REGION( 0x10000, "maincpu", 0 )
 	ROM_LOAD( "football-club_std_ac_var_100pnd-5p_ass.bin", 0x0000, 0x010000, CRC(bf35ad75) SHA1(c5e8906138184449b90eea2e280e6f75e6768776) )
+
+	sc2_foot_matrix
+
+	ROM_REGION( 0x200000, "upd", ROMREGION_ERASE00 )
+ROM_END
+
+ROM_START( sc2foot1p )
+	ROM_REGION( 0x10000, "maincpu", 0 )
+	ROM_LOAD( "football-club_dat_ac_var_100pnd-5p_ass.bin", 0x0000, 0x010000, CRC(7f6acf47) SHA1(b6e8254d4af1e5a85166e4eca1dc2b1ea2eed292) )
+
+	sc2_foot_matrix
+
+	ROM_REGION( 0x200000, "upd", ROMREGION_ERASE00 )
+ROM_END
+
+ROM_START( sc2foot2 )
+	ROM_REGION( 0x10000, "maincpu", 0 )
 	ROM_LOAD( "football-club_std_var_ass.bin", 0x0000, 0x010000, CRC(cae35c7a) SHA1(2beda0150cd2d413269c350e34102c0e1d3ed007) )
-	ROM_LOAD( "footballclub_std_var_ass.bin", 0x0000, 0x010000, CRC(cae35c7a) SHA1(2beda0150cd2d413269c350e34102c0e1d3ed007) )
+
+	sc2_foot_matrix
+
+	ROM_REGION( 0x200000, "upd", ROMREGION_ERASE00 )
+ROM_END
+
+ROM_START( sc2foot2p )
+	ROM_REGION( 0x10000, "maincpu", 0 )
+	ROM_LOAD( "football-club_dat_var_ass.bin", 0x0000, 0x010000, CRC(ac088604) SHA1(d1db45aa19b645aad56bbf84e551dc1cca22f92d) )
+
+	sc2_foot_matrix
+
 	ROM_REGION( 0x200000, "upd", ROMREGION_ERASE00 )
 ROM_END
 
@@ -5240,24 +7108,56 @@
 	ROM_REGION( 0x10000, "maincpu", 0 )
 	ROM_LOAD( "club-golden-casino_std_ac_250pnd-20p_ass.bin", 0x0000, 0x010000, CRC(5f7fc343) SHA1(264c5bba36c820440c2ed97c04d4dd3592e111da) )
 
-	ROM_REGION( 0x80000, "altrevs", 0 )
+	ROM_REGION( 0x80000, "altrevs", 0 )//Wrong hardware?
 	ROM_LOAD( "95004065.p1", 0x0000, 0x080000, CRC(2670726b) SHA1(0f8045c68131191fceea5728e14c901d159bfb57) )
-	ROM_LOAD( "club-golden-casino_dat_ac_100pnd-5p_ass.bin", 0x0000, 0x010000, CRC(1f5c2a2b) SHA1(facaab47716ae3c4a10839523f3249074ae8abb1) )
+
+	sc2_gcclb_sound
+ROM_END
+
+ROM_START( sc2gcclbp )
+	ROM_REGION( 0x10000, "maincpu", 0 )
 	ROM_LOAD( "club-golden-casino_dat_ac_250pnd-20p_ass.bin", 0x0000, 0x010000, CRC(b4dee6d2) SHA1(856672fb4767f66e976619392fc8e659fbca3c2e) )
-	ROM_LOAD( "club-golden-casino_dat_ac_var_ass.bin", 0x0000, 0x010000, CRC(2ad9647e) SHA1(d423c060996417f3f7f1b61e911b6e523ad08e7a) )
+	sc2_gcclb_sound
+ROM_END
+
+ROM_START( sc2gcclb1 )
+	ROM_REGION( 0x10000, "maincpu", 0 )
 	ROM_LOAD( "club-golden-casino_std_ac_100pnd-5p_ass.bin", 0x0000, 0x010000, CRC(bf7b9ff1) SHA1(890a6b96592e9d2e890bea95e711b890c1cda7ad) )
+	sc2_gcclb_sound
+ROM_END
+
+ROM_START( sc2gcclb1p )
+	ROM_REGION( 0x10000, "maincpu", 0 )
+	ROM_LOAD( "club-golden-casino_dat_ac_100pnd-5p_ass.bin", 0x0000, 0x010000, CRC(1f5c2a2b) SHA1(facaab47716ae3c4a10839523f3249074ae8abb1) )
+	sc2_gcclb_sound
+ROM_END
+
+ROM_START( sc2gcclb2 )
+	ROM_REGION( 0x10000, "maincpu", 0 )
 	ROM_LOAD( "club-golden-casino_std_ac_var_ass.bin", 0x0000, 0x010000, CRC(2de27b80) SHA1(57f1c40ceeb6ab82e9bac547aa00d8c1c1c07dab) )
+	sc2_gcclb_sound
+ROM_END
+
+ROM_START( sc2gcclb2p )
+	ROM_REGION( 0x10000, "maincpu", 0 )
+	ROM_LOAD( "club-golden-casino_dat_ac_var_ass.bin", 0x0000, 0x010000, CRC(2ad9647e) SHA1(d423c060996417f3f7f1b61e911b6e523ad08e7a) )
+	sc2_gcclb_sound
+ROM_END
+
+ROM_START( sc2gcclb3 )
+	ROM_REGION( 0x10000, "maincpu", 0 )
 	ROM_LOAD( "95000589.p1", 0x0000, 0x010000, CRC(36400074) SHA1(611b48650e59b52f661be2730afaef2e5772607c) )
-	ROM_REGION( 0x200000, "upd", ROMREGION_ERASE00 )
-	// guess
-	ROM_LOAD( "gold_cas.snd", 0x0000, 0x080000, CRC(d93d39fb) SHA1(ce0c0c1430a6136ce39ffae018b009e629cbad61) )
+	sc2_gcclb_sound
 ROM_END
 
 ROM_START( sc2groul )
 	ROM_REGION( 0x10000, "maincpu", 0 )
 	ROM_LOAD( "golden-roulette_std_ms_20p_ass.bin", 0x0000, 0x010000, CRC(d865188a) SHA1(c4318984b6abdb5671fe7c323608e4af84d1ae6e) )
+	ROM_REGION( 0x200000, "upd", ROMREGION_ERASE00 )
+ROM_END
 
-	ROM_REGION( 0x10000, "altrevs", 0 )
+ROM_START( sc2groulp )
+	ROM_REGION( 0x10000, "maincpu", 0 )
 	ROM_LOAD( "golden-roulette_dat_ms_20p_ass.bin", 0x0000, 0x010000, CRC(c388fa79) SHA1(4ce7d183130fd2aae2c4ffeff652e2602208c3ff) )
 	ROM_REGION( 0x200000, "upd", ROMREGION_ERASE00 )
 ROM_END
@@ -5279,36 +7179,64 @@
 ROM_START( sc2heypr )
 	ROM_REGION( 0x10000, "maincpu", 0 )
 	ROM_LOAD( "hey-presto_std_ac_4pnd-10p_ass.bin", 0x0000, 0x010000, CRC(7f3803fa) SHA1(56a12bb96fe7cce07734842f6c5581648154154e) )
+	ROM_REGION( 0x200000, "upd", ROMREGION_ERASE00 )
+ROM_END
 
-	ROM_REGION( 0x10000, "altrevs", 0 )
+ROM_START( sc2heyprp )
+	ROM_REGION( 0x10000, "maincpu", 0 )
 	ROM_LOAD( "hey-presto_dat_ac_4pnd-10p_ass.bin", 0x0000, 0x010000, CRC(cb8780ad) SHA1(a0a3cd2c9c3caf6607b55d2d14f6e3d581540808) )
 	ROM_REGION( 0x200000, "upd", ROMREGION_ERASE00 )
 ROM_END
 
 
-
 ROM_START( sc2hypr )
 	ROM_REGION( 0x10000, "maincpu", 0 )
 	ROM_LOAD( "hyperactive_std_ac_var_10pnd_ass.bin", 0x0000, 0x010000, CRC(042b848c) SHA1(ceec2cb26ae9b969c5da3cc0be25455b1f89d09f) )
+	ROM_REGION( 0x200000, "upd", ROMREGION_ERASE00 )
+ROM_END
 
-	ROM_REGION( 0x10000, "altrevs", 0 )
+ROM_START( sc2hyprp )
+	ROM_REGION( 0x10000, "maincpu", 0 )
 	ROM_LOAD( "hyperactive_dat_ac_var_10pnd_ass.bin", 0x0000, 0x010000, CRC(e6956fec) SHA1(ea8e25e16a451a1f52f30567571090f635379f4c) )
-	ROM_LOAD( "hyperactive_dat_wi_ac_10pnd-20p_ass.bin", 0x0000, 0x010000, CRC(6d11a9eb) SHA1(d68564a96984c5dde536add4507bc8bae75e19ea) )
+	ROM_REGION( 0x200000, "upd", ROMREGION_ERASE00 )
+ROM_END
+
+ROM_START( sc2hypr1 )
+	ROM_REGION( 0x10000, "maincpu", 0 )
 	ROM_LOAD( "hyperactive_std_wi_ac_10pnd-20p_ass.bin", 0x0000, 0x010000, CRC(2d01bc08) SHA1(c2186fb639735d4e1d46ceaeae6eee63c7a740b7) )
 	ROM_REGION( 0x200000, "upd", ROMREGION_ERASE00 )
 ROM_END
 
+ROM_START( sc2hypr1p )
+	ROM_REGION( 0x10000, "maincpu", 0 )
+	ROM_LOAD( "hyperactive_dat_wi_ac_10pnd-20p_ass.bin", 0x0000, 0x010000, CRC(6d11a9eb) SHA1(d68564a96984c5dde536add4507bc8bae75e19ea) )
+	ROM_REGION( 0x200000, "upd", ROMREGION_ERASE00 )
+ROM_END
+
 ROM_START( sc2kcclb )
 	ROM_REGION( 0x10000, "maincpu", 0 )
 	ROM_LOAD( "club-king-cash_std_ac_var_ass.bin", 0x0000, 0x010000, CRC(60c1eccd) SHA1(5b9f5c8c7cc501b557eadcf7e520967c58b8ce1a) )
+	ROM_REGION( 0x200000, "upd", ROMREGION_ERASE00 )
+ROM_END
 
-	ROM_REGION( 0x10000, "altrevs", 0 )
-	ROM_LOAD( "club-king-cash_dat_ac_ds_rot_ass.bin", 0x0000, 0x010000, CRC(3fb9f61f) SHA1(176e517d049b4e588a2fe425041d701ff8e3e7b8) )
+ROM_START( sc2kcclbp )
+	ROM_REGION( 0x10000, "maincpu", 0 )
 	ROM_LOAD( "club-king-cash_dat_ac_var_ass.bin", 0x0000, 0x010000, CRC(c83be316) SHA1(9e87152977fdabb71ee6d8be1d382b978d856c83) )
+	ROM_REGION( 0x200000, "upd", ROMREGION_ERASE00 )
+ROM_END
+
+ROM_START( sc2kcclb1 )
+	ROM_REGION( 0x10000, "maincpu", 0 )
 	ROM_LOAD( "club-king-cash_std_ac_ds_rot_ass.bin", 0x0000, 0x010000, CRC(cf13d7e4) SHA1(6b3bfc8e7e4877e7ab7e5d3adbd89a6bcc2ebde9) )
 	ROM_REGION( 0x200000, "upd", ROMREGION_ERASE00 )
 ROM_END
 
+ROM_START( sc2kcclb1p )
+	ROM_REGION( 0x10000, "maincpu", 0 )
+	ROM_LOAD( "club-king-cash_dat_ac_ds_rot_ass.bin", 0x0000, 0x010000, CRC(3fb9f61f) SHA1(176e517d049b4e588a2fe425041d701ff8e3e7b8) )
+	ROM_REGION( 0x200000, "upd", ROMREGION_ERASE00 )
+ROM_END
+
 ROM_START( sc2maina )
 	ROM_REGION( 0x10000, "maincpu", 0 )
 	ROM_LOAD( "game115s.rom", 0x0000, 0x010000, CRC(6f3b16d2) SHA1(b5c7796a4a87dc5ffa6243863ac3f9bc777228ca) )
@@ -5320,29 +7248,56 @@
 ROM_START( sc2olgld )
 	ROM_REGION( 0x10000, "maincpu", 0 )
 	ROM_LOAD( "olympic-gold_std_var_ac_8-10pnd_ass.bin", 0x0000, 0x010000, CRC(baa98b60) SHA1(2b73eb21d6b612fabf855edf9f6c46897714729b) )
+	ROM_REGION( 0x200000, "upd", ROMREGION_ERASE00 )
+ROM_END
 
-	ROM_REGION( 0x10000, "altrevs", 0 )
+ROM_START( sc2olgldp )
+	ROM_REGION( 0x10000, "maincpu", 0 )
 	ROM_LOAD( "olympic-gold_dat_var_ac_8-10pnd_ass.bin", 0x0000, 0x010000, CRC(1348a519) SHA1(e7a2434235347433522c55e4d4f89fbb97759765) )
-	ROM_LOAD( "olympic-gold_dat_wi_var_ac_10pnd_ass.bin", 0x0000, 0x010000, CRC(bb50e0a2) SHA1(b208053e114f7fb411f16f02aab3061f6075b42c) )
+	ROM_REGION( 0x200000, "upd", ROMREGION_ERASE00 )
+ROM_END
+
+ROM_START( sc2olgld1 )
+	ROM_REGION( 0x10000, "maincpu", 0 )
 	ROM_LOAD( "olympic-gold_std_wi_var_ac_10pnd_ass.bin", 0x0000, 0x010000, CRC(8a8b8429) SHA1(ba886878d4ef428653032d04e21a9031fdea68e0) )
 	ROM_REGION( 0x200000, "upd", ROMREGION_ERASE00 )
 ROM_END
 
+ROM_START( sc2olgld1p )
+	ROM_REGION( 0x10000, "maincpu", 0 )
+	ROM_LOAD( "olympic-gold_dat_wi_var_ac_10pnd_ass.bin", 0x0000, 0x010000, CRC(bb50e0a2) SHA1(b208053e114f7fb411f16f02aab3061f6075b42c) )
+	ROM_REGION( 0x200000, "upd", ROMREGION_ERASE00 )
+ROM_END
+
 ROM_START( sc2relgm )
 	ROM_REGION( 0x10000, "maincpu", 0 )
 	ROM_LOAD( "reel-gems_std_ms_20p_ass.bin", 0x0000, 0x010000, CRC(ebbae111) SHA1(6372e19b0dd030aac517344449ce47e8f6f74b29) )
 
-	ROM_REGION( 0x10000, "altrevs", 0 )
-	ROM_LOAD( "reel-gems_dat_ga_20p_ass.bin", 0x0000, 0x010000, CRC(86e81781) SHA1(7b59efa627f70b2c3598c5abd276a7c2737b0751) )
+	ROM_REGION( 0x200000, "upd", ROMREGION_ERASE00 )
+ROM_END
+
+ROM_START( sc2relgmp )
+	ROM_REGION( 0x10000, "maincpu", 0 )
 	ROM_LOAD( "reel-gems_dat_ms_20p_ass.bin", 0x0000, 0x010000, CRC(5abde2bc) SHA1(74a745938934533b1b33c99828b79fa9d1e86a91) )
+
 	ROM_REGION( 0x200000, "upd", ROMREGION_ERASE00 )
 ROM_END
 
+ROM_START( sc2relgm1p )
+	ROM_REGION( 0x10000, "maincpu", 0 )
+	ROM_LOAD( "reel-gems_dat_ga_20p_ass.bin", 0x0000, 0x010000, CRC(86e81781) SHA1(7b59efa627f70b2c3598c5abd276a7c2737b0751) )
+
+	ROM_REGION( 0x200000, "upd", ROMREGION_ERASE00 )
+ROM_END
 
 ROM_START( sc2topwk )
 	ROM_REGION( 0x10000, "maincpu", 0 )
 	ROM_LOAD( "top-wack_std_wi_ac_10pnd_tri1_ass.bin", 0x0000, 0x010000, CRC(248080cf) SHA1(067077af93dd6a41bd6d84d9ace9ac4cea36f01b) )
-	ROM_REGION( 0x10000, "altrevs", 0 )
+	ROM_REGION( 0x200000, "upd", ROMREGION_ERASE00 )
+ROM_END
+
+ROM_START( sc2topwkp )
+	ROM_REGION( 0x10000, "maincpu", 0 )
 	ROM_LOAD( "top-wack_dat_wi_ac_10pnd_tri1_ass.bin", 0x0000, 0x010000, CRC(56fd3003) SHA1(37ef5c9a750f9bdc609fc78ea5131424eb74c79d) )
 	ROM_REGION( 0x200000, "upd", ROMREGION_ERASE00 )
 ROM_END
@@ -5352,45 +7307,109 @@
 	ROM_REGION( 0x10000, "maincpu", 0 )
 	ROM_LOAD( "bar7.bin", 0x0000, 0x010000, CRC(c5b426e8) SHA1(a60aed70f2a4cf4356fae61c1031124fd5987d86) )
 
-	ROM_REGION( 0x10000, "altrevs", 0 )
-	ROM_LOAD( "casino-bar-7_std_10pnd_ass.bin", 0x0000, 0x010000, CRC(3d0ae920) SHA1(4c6575d979f686e928842afc3ee9b344e45e3a31) )
-	ROM_LOAD( "casino-bar-7_dat_10pnd_ass.bin", 0x0000, 0x010000, CRC(6960f4f8) SHA1(7274276d1d4032ed7fe660ac0f87eea1e9c6e4e4) )
-	ROM_LOAD( "casinobar7_bfm_allcash.bin", 0x0000, 0x010000, CRC(2d459734) SHA1(293cf250b7b71b55325b18a10be7dead1cddb565) )
+	sc2_cb7_sound
+ROM_END
+
+ROM_START( sc2cb7p )
+	ROM_REGION( 0x10000, "maincpu", 0 )
 	ROM_LOAD( "bar7protocol.bin", 0x8000, 0x008000, CRC(e9c022ed) SHA1(e93b4506830a2f098eceb0b419d648bf3a9d02a4) ) // half size?
+	//It might be that the first half of bar7 needs to be included here?
 
-	ROM_REGION( 0x80000, "upd", ROMREGION_ERASE00 )
-	ROM_LOAD( "casinobar7_bfm_snd1.bin", 0x0000, 0x080000, CRC(9a2609b5) SHA1(d29a5029e39cd44739682954f034f2d1f2e1cebf) ) // == superstarsnd.bin
+	sc2_cb7_sound
+ROM_END
+
+ROM_START( sc2cb71 )
+	ROM_REGION( 0x10000, "maincpu", 0 )
+	ROM_LOAD( "casinobar7_bfm_allcash.bin", 0x0000, 0x010000, CRC(2d459734) SHA1(293cf250b7b71b55325b18a10be7dead1cddb565) )
+
+	sc2_cb7_sound
 ROM_END
 
+ROM_START( sc2cb72 )
+	ROM_REGION( 0x10000, "maincpu", 0 )
+	ROM_LOAD( "casino-bar-7_std_10pnd_ass.bin", 0x0000, 0x010000, CRC(3d0ae920) SHA1(4c6575d979f686e928842afc3ee9b344e45e3a31) )
+
+	sc2_cb7_sound
+ROM_END
+
+ROM_START( sc2cb72p )
+	ROM_REGION( 0x10000, "maincpu", 0 )
+	ROM_LOAD( "casino-bar-7_dat_10pnd_ass.bin", 0x0000, 0x010000, CRC(6960f4f8) SHA1(7274276d1d4032ed7fe660ac0f87eea1e9c6e4e4) )
+
+	sc2_cb7_sound
+ROM_END
 
 ROM_START( sc2cgcas )
 	ROM_REGION( 0x10000, "maincpu", 0 )
 	ROM_LOAD( "club-grand-casino_std_ac_p65_ass.bin", 0x0000, 0x010000, CRC(6ca2cccb) SHA1(762e0809e70d4dd2161a2ffcc30d191720e8ad9a) )
-	ROM_REGION( 0x10000, "altrevs", 0 )
-	ROM_LOAD( "club-grand-casino_dat_ac_250pnd-25p_ass.bin", 0x0000, 0x010000, CRC(77cf0f11) SHA1(88da3f2e18f621033a8d32428b1422d5e3873ab5) )
+	ROM_REGION( 0x200000, "upd", ROMREGION_ERASE00 )
+ROM_END
+
+ROM_START( sc2cgcasp )
+	ROM_REGION( 0x10000, "maincpu", 0 )
 	ROM_LOAD( "club-grand-casino_dat_ac_var_ass.bin", 0x0000, 0x010000, CRC(15c3b640) SHA1(94a4e105b9fbd4b12ec246a0f1a6751acf25eac2) )
+	ROM_REGION( 0x200000, "upd", ROMREGION_ERASE00 )
+ROM_END
+
+ROM_START( sc2cgcas1 )
+	ROM_REGION( 0x10000, "maincpu", 0 )
 	ROM_LOAD( "club-grand-casino_std_ac_250pnd-25p_ass.bin", 0x0000, 0x010000, CRC(edfc3d74) SHA1(192a893b5a9b188de094d0f45881788306523e0b) )
 	ROM_REGION( 0x200000, "upd", ROMREGION_ERASE00 )
 ROM_END
 
+ROM_START( sc2cgcas1p )
+	ROM_REGION( 0x10000, "maincpu", 0 )
+	ROM_LOAD( "club-grand-casino_dat_ac_250pnd-25p_ass.bin", 0x0000, 0x010000, CRC(77cf0f11) SHA1(88da3f2e18f621033a8d32428b1422d5e3873ab5) )
+	ROM_REGION( 0x200000, "upd", ROMREGION_ERASE00 )
+ROM_END
 
 ROM_START( sc2cvega )
 	ROM_REGION( 0x10000, "maincpu", 0 )
 	ROM_LOAD( "cash_vegas_std_ac_var_a.bin", 0x0000, 0x010000, CRC(88dd09b9) SHA1(36b4f3504794b638a31e45d1f155360166f77ab2) )
-	ROM_REGION( 0x10000, "altrevs", 0 )
-	ROM_LOAD( "cash_vegas_dat_ac_var_10pnd_a.bin", 0x0000, 0x010000, CRC(e880c6b6) SHA1(387f7e3659e42ac488db9a4768c2035f7c870c44) )
-	ROM_LOAD( "cash_vegas_dat_ac_var_10pnd_tri3.bin", 0x0000, 0x010000, CRC(ab3e503c) SHA1(2c26865eab6cf128d8f3ff09077daa3c4d2aee30) )
-	ROM_LOAD( "cash_vegas_dat_to_8pnd_a.bin", 0x0000, 0x010000, CRC(cabec1cd) SHA1(acbe41e0d5fa77f11df8d119ad09aeccd421f603) )
-	ROM_LOAD( "cash_vegas_dat_wi_10pnd_20p_a.bin", 0x0000, 0x010000, CRC(99ee9eef) SHA1(c4b325a39e898f069ac3471af8ea955c62c488a5) )
+	ROM_REGION( 0x200000, "upd", ROMREGION_ERASE00 )
+ROM_END
+
+ROM_START( sc2cvega1 )
+	ROM_REGION( 0x10000, "maincpu", 0 )
 	ROM_LOAD( "cash_vegas_std_ac_var_10pnd_tri3_a.bin", 0x0000, 0x010000, CRC(3d808af5) SHA1(db29c03a33dce6342fec4da3664590ab072dd6d9) )
+	ROM_REGION( 0x200000, "upd", ROMREGION_ERASE00 )
+ROM_END
+
+ROM_START( sc2cvega1p )
+	ROM_REGION( 0x10000, "maincpu", 0 )
+	ROM_LOAD( "cash_vegas_dat_ac_var_10pnd_tri3.bin", 0x0000, 0x010000, CRC(ab3e503c) SHA1(2c26865eab6cf128d8f3ff09077daa3c4d2aee30) )
+	ROM_REGION( 0x200000, "upd", ROMREGION_ERASE00 )
+ROM_END
+
+ROM_START( sc2cvega2 )
+	ROM_REGION( 0x10000, "maincpu", 0 )
 	ROM_LOAD( "cash_vegas_std_to_var_8pnd_a.bin", 0x0000, 0x010000, CRC(c8e98a0e) SHA1(1436f3a464b2f298b161e5328f0540cf23441803) )
-	ROM_LOAD( "cash_vegas_std_w_i_10pnd_20p_a.bin", 0x0000, 0x010000, CRC(521b918d) SHA1(4d9b94d561d89aa1dd8746a33eb27d89b53b6ba9) )
 	ROM_REGION( 0x200000, "upd", ROMREGION_ERASE00 )
 ROM_END
 
+ROM_START( sc2cvega2p )
+	ROM_REGION( 0x10000, "maincpu", 0 )
+	ROM_LOAD( "cash_vegas_dat_to_8pnd_a.bin", 0x0000, 0x010000, CRC(cabec1cd) SHA1(acbe41e0d5fa77f11df8d119ad09aeccd421f603) )
+	ROM_REGION( 0x200000, "upd", ROMREGION_ERASE00 )
+ROM_END
 
+ROM_START( sc2cvega3 )
+	ROM_REGION( 0x10000, "maincpu", 0 )
+	ROM_LOAD( "cash_vegas_std_w_i_10pnd_20p_a.bin", 0x0000, 0x010000, CRC(521b918d) SHA1(4d9b94d561d89aa1dd8746a33eb27d89b53b6ba9) )
+	ROM_REGION( 0x200000, "upd", ROMREGION_ERASE00 )
+ROM_END
 
+ROM_START( sc2cvega3p )
+	ROM_REGION( 0x10000, "maincpu", 0 )
+	ROM_LOAD( "cash_vegas_dat_wi_10pnd_20p_a.bin", 0x0000, 0x010000, CRC(99ee9eef) SHA1(c4b325a39e898f069ac3471af8ea955c62c488a5) )
+	ROM_REGION( 0x200000, "upd", ROMREGION_ERASE00 )
+ROM_END
 
+ROM_START( sc2cvega4p )
+	ROM_REGION( 0x10000, "maincpu", 0 )
+	ROM_LOAD( "cash_vegas_dat_ac_var_10pnd_a.bin", 0x0000, 0x010000, CRC(e880c6b6) SHA1(387f7e3659e42ac488db9a4768c2035f7c870c44) )
+	ROM_REGION( 0x200000, "upd", ROMREGION_ERASE00 )
+ROM_END
 
 
 
@@ -5415,22 +7434,22 @@
 
 /* Non-Video */
 
-GAMEL( 1994, sc2drwho	, 0			,  scorpion2		, drwho		, drwho		, 0,		 "BFM",      "Dr.Who The Timelord (set 1, UK, Game Card 95-750-288) (Scorpion 2/3)", GAME_SUPPORTS_SAVE|GAME_REQUIRES_ARTWORK|GAME_MECHANICAL,layout_drwho)
+GAMEL( 1994, sc2drwho	, 0			,  scorpion2		, drwho		, drwho		, 0,		 "BFM",      "Dr.Who The Timelord (set 1, UK, Single Site, Game Card 95-750-288) (Scorpion 2/3)", GAME_SUPPORTS_SAVE|GAME_REQUIRES_ARTWORK|GAME_MECHANICAL,layout_drwho)
 GAMEL( 1994, sc2drwho1	, sc2drwho	,  scorpion2		, drwho		, drwho		, 0,		 "BFM",      "Dr.Who The Timelord (set 2, UK, Game Card 95-750-661) (Scorpion 2/3)", GAME_SUPPORTS_SAVE|GAME_REQUIRES_ARTWORK|GAME_MECHANICAL,layout_drwho)
-GAMEL( 1994, sc2drwho2	, sc2drwho	,  scorpion2		, drwho		, drwho		, 0,		 "BFM",      "Dr.Who The Timelord (set 3) (Scorpion 2/3)", GAME_SUPPORTS_SAVE|GAME_REQUIRES_ARTWORK|GAME_MECHANICAL,layout_drwho)
-GAMEL( 1994, sc2drwho3	, sc2drwho	,  scorpion2		, drwho		, drwho		, 0,		 "BFM",      "Dr.Who The Timelord (set 4) (Scorpion 2/3)", GAME_SUPPORTS_SAVE|GAME_REQUIRES_ARTWORK|GAME_MECHANICAL,layout_drwho)
-GAMEL( 1994, sc2drwho4	, sc2drwho	,  scorpion2		, drwho		, drwho		, 0,		 "BFM",      "Dr.Who The Timelord (set 5) (Scorpion 2/3)", GAME_SUPPORTS_SAVE|GAME_REQUIRES_ARTWORK|GAME_MECHANICAL,layout_drwho)
-GAMEL( 1994, sc2drwho5	, sc2drwho	,  scorpion2		, drwho		, drwho		, 0,		 "BFM",      "Dr.Who The Timelord (set 6) (Scorpion 2/3)", GAME_SUPPORTS_SAVE|GAME_REQUIRES_ARTWORK|GAME_MECHANICAL,layout_drwho)
-GAMEL( 1994, sc2drwho6	, sc2drwho	,  scorpion2		, drwho		, drwho		, 0,		 "BFM",      "Dr.Who The Timelord (set 7) (Scorpion 2/3)", GAME_SUPPORTS_SAVE|GAME_REQUIRES_ARTWORK|GAME_MECHANICAL,layout_drwho)
-GAMEL( 1994, sc2drwho7	, sc2drwho	,  scorpion2		, drwho		, drwho		, 0,		 "BFM",      "Dr.Who The Timelord (set 8) (Scorpion 2/3)", GAME_SUPPORTS_SAVE|GAME_REQUIRES_ARTWORK|GAME_MECHANICAL,layout_drwho)
-GAMEL( 1994, sc2drwho8	, sc2drwho	,  scorpion2		, drwho		, drwho		, 0,		 "BFM",      "Dr.Who The Timelord (set 9) (Scorpion 2/3)", GAME_SUPPORTS_SAVE|GAME_REQUIRES_ARTWORK|GAME_MECHANICAL,layout_drwho)
-GAMEL( 1994, sc2drwho9	, sc2drwho	,  scorpion2		, drwho		, drwho		, 0,		 "BFM",      "Dr.Who The Timelord (set 10) (Scorpion 2/3)", GAME_SUPPORTS_SAVE|GAME_REQUIRES_ARTWORK|GAME_MECHANICAL,layout_drwho)
-GAMEL( 1994, sc2drwho10	, sc2drwho	,  scorpion2		, drwho		, drwho		, 0,		 "BFM",      "Dr.Who The Timelord (set 11) (Scorpion 2/3)", GAME_SUPPORTS_SAVE|GAME_REQUIRES_ARTWORK|GAME_MECHANICAL,layout_drwho)
-GAMEL( 1994, sc2drwho11	, sc2drwho	,  scorpion2		, drwho		, drwho		, 0,		 "BFM",      "Dr.Who The Timelord (set 12) (Scorpion 2/3)", GAME_SUPPORTS_SAVE|GAME_REQUIRES_ARTWORK|GAME_MECHANICAL,layout_drwho)
-GAMEL( 1994, sc2drwho12	, sc2drwho	,  scorpion2		, drwho		, drwho		, 0,		 "BFM",      "Dr.Who The Timelord (set 13) (Scorpion 2/3)", GAME_SUPPORTS_SAVE|GAME_REQUIRES_ARTWORK|GAME_MECHANICAL,layout_drwho)
-GAMEL( 1994, sc2drwho13	, sc2drwho	,  scorpion2		, drwho		, drwho		, 0,		 "BFM",      "Dr.Who The Timelord (set 14) (Scorpion 2/3)", GAME_SUPPORTS_SAVE|GAME_REQUIRES_ARTWORK|GAME_MECHANICAL,layout_drwho)
-GAMEL( 1994, sc2drwho14	, sc2drwho	,  scorpion2		, drwho		, drwho		, 0,		 "BFM",      "Dr.Who The Timelord (set 15) (Scorpion 2/3)", GAME_SUPPORTS_SAVE|GAME_REQUIRES_ARTWORK|GAME_MECHANICAL,layout_drwho)
-GAMEL( 1994, sc2drwho15	, sc2drwho	,  scorpion2		, drwho		, drwho		, 0,		 "BFM",      "Dr.Who The Timelord (set 16) (Scorpion 2/3)", GAME_SUPPORTS_SAVE|GAME_REQUIRES_ARTWORK|GAME_MECHANICAL,layout_drwho)
+GAMEL( 1994, sc2drwho2	, sc2drwho	,  scorpion2		, drwho		, drwho		, 0,		 "BFM",      "Dr.Who The Timelord (set 3, UK, Arcade, Protocol) (Scorpion 2/3)", GAME_SUPPORTS_SAVE|GAME_REQUIRES_ARTWORK|GAME_MECHANICAL,layout_drwho)
+GAMEL( 1994, sc2drwho3	, sc2drwho	,  scorpion2		, drwho		, drwho		, 0,		 "BFM",      "Dr.Who The Timelord (set 4, UK Single Site, Protocol) (Scorpion 2/3)", GAME_SUPPORTS_SAVE|GAME_REQUIRES_ARTWORK|GAME_MECHANICAL,layout_drwho)
+GAMEL( 1994, sc2drwho4	, sc2drwho	,  scorpion2		, drwho		, drwho		, 0,		 "BFM",      "Dr.Who The Timelord (set 5, UK, Arcade) (Scorpion 2/3)", GAME_SUPPORTS_SAVE|GAME_REQUIRES_ARTWORK|GAME_MECHANICAL,layout_drwho)
+GAMEL( 1994, sc2drwho5	, sc2drwho	,  scorpion2		, drwho		, drwho		, 0,		 "BFM",      "Dr.Who The Timelord (set 6, UK) (Scorpion 2/3)", GAME_SUPPORTS_SAVE|GAME_REQUIRES_ARTWORK|GAME_MECHANICAL,layout_drwho)
+GAMEL( 1994, sc2drwho6	, sc2drwho	,  scorpion2		, drwho		, drwho		, 0,		 "BFM",      "Dr.Who The Timelord (set 7, UK, Protocol) (Scorpion 2/3)", GAME_SUPPORTS_SAVE|GAME_REQUIRES_ARTWORK|GAME_MECHANICAL,layout_drwho)
+GAMEL( 1994, sc2drwho7	, sc2drwho	,  scorpion2		, drwho		, drwho		, 0,		 "BFM",      "Dr.Who The Timelord (set 8, UK, Arcade, 10GBP Jackpot, Protocol) (Scorpion 2/3)", GAME_SUPPORTS_SAVE|GAME_REQUIRES_ARTWORK|GAME_MECHANICAL,layout_drwho)
+GAMEL( 1994, sc2drwho8	, sc2drwho	,  scorpion2		, drwho		, drwho		, 0,		 "BFM",      "Dr.Who The Timelord (set 9, UK, Arcade, 8GBP Jackpot, Protocol) (Scorpion 2/3)", GAME_SUPPORTS_SAVE|GAME_REQUIRES_ARTWORK|GAME_MECHANICAL,layout_drwho)
+GAMEL( 1994, sc2drwho9	, sc2drwho	,  scorpion2		, drwho		, drwho		, 0,		 "BFM",      "Dr.Who The Timelord (set 10, UK, Arcade, Protocol) (Scorpion 2/3)", GAME_SUPPORTS_SAVE|GAME_REQUIRES_ARTWORK|GAME_MECHANICAL,layout_drwho)
+GAMEL( 1994, sc2drwho10	, sc2drwho	,  scorpion2		, drwho		, drwho		, 0,		 "BFM",      "Dr.Who The Timelord (set 11, UK, Arcade, Protocol) (Scorpion 2/3)", GAME_SUPPORTS_SAVE|GAME_REQUIRES_ARTWORK|GAME_MECHANICAL,layout_drwho)
+GAMEL( 1994, sc2drwho11	, sc2drwho	,  scorpion2		, drwho		, drwho		, 0,		 "BFM",      "Dr.Who The Timelord (set 12, UK, no Jackpot spin, Protocol) (Scorpion 2/3)", GAME_SUPPORTS_SAVE|GAME_REQUIRES_ARTWORK|GAME_MECHANICAL,layout_drwho)
+GAMEL( 1994, sc2drwho12	, sc2drwho	,  scorpion2		, drwho		, drwho		, 0,		 "BFM",      "Dr.Who The Timelord (set 13, UK) (Scorpion 2/3)", GAME_SUPPORTS_SAVE|GAME_REQUIRES_ARTWORK|GAME_MECHANICAL,layout_drwho)
+GAMEL( 1994, sc2drwho13	, sc2drwho	,  scorpion2		, drwho		, drwho		, 0,		 "BFM",      "Dr.Who The Timelord (set 14, UK, Arcade, 8GBP Jackpot) (Scorpion 2/3)", GAME_SUPPORTS_SAVE|GAME_REQUIRES_ARTWORK|GAME_MECHANICAL,layout_drwho)
+GAMEL( 1994, sc2drwho14	, sc2drwho	,  scorpion2		, drwho		, drwho		, 0,		 "BFM",      "Dr.Who The Timelord (set 15, UK, Arcade) (Scorpion 2/3)", GAME_SUPPORTS_SAVE|GAME_REQUIRES_ARTWORK|GAME_MECHANICAL,layout_drwho)
+GAMEL( 1994, sc2drwho15	, sc2drwho	,  scorpion2		, drwho		, drwho		, 0,		 "BFM",      "Dr.Who The Timelord (set 16, UK, Arcade) (Scorpion 2/3)", GAME_SUPPORTS_SAVE|GAME_REQUIRES_ARTWORK|GAME_MECHANICAL,layout_drwho)
 GAMEL( 1994, sc2drwho16	, sc2drwho	,  scorpion2		, drwho		, drwho		, 0,		 "BFM",      "Dr.Who The Timelord (set 17) (Scorpion 2/3)", GAME_SUPPORTS_SAVE|GAME_REQUIRES_ARTWORK|GAME_MECHANICAL,layout_drwho)
 GAMEL( 1994, sc2drwho17	, sc2drwho	,  scorpion2		, drwho		, drwhon	, 0,		 "BFM",      "Dr.Who The Timelord (set 18, not encrypted) (Scorpion 2/3)", GAME_SUPPORTS_SAVE|GAME_REQUIRES_ARTWORK|GAME_MECHANICAL,layout_drwho)
 GAMEL( 1994, sc2drwho18	, sc2drwho	,  scorpion2		, drwho		, drwhon	, 0,		 "BFM/Mazooma",      "Dr.Who The Timelord (set 19) (Scorpion 2/3)", GAME_SUPPORTS_SAVE|GAME_REQUIRES_ARTWORK|GAME_MECHANICAL | GAME_NOT_WORKING,layout_drwho) // error 99
@@ -5438,47 +7457,280 @@
 GAMEL( 1994, sc2drwho20	, sc2drwho	,  scorpion2		, drwho		, drwhon	, 0,		 "BFM",      "Dr.Who The Timelord Deluxe (Scorpion 2/3)", GAME_SUPPORTS_SAVE|GAME_REQUIRES_ARTWORK|GAME_MECHANICAL,layout_drwho)
 
 GAME( 1994, sc2brkfs	, 0			,  scorpion2		, bbrkfst	, bbrkfst	, 0,		 "BFM",      "The Big Breakfast (set 1 UK, Game Card 95-750-524) (Scorpion 2/3)", GAME_FLAGS)
-GAME( 1994, sc2brkfs1	, sc2brkfs	,  scorpion2		, bbrkfst	, bbrkfst	, 0,		 "BFM",      "The Big Breakfast (set 2) (Scorpion 2/3)", GAME_FLAGS)
-GAME( 1994, sc2brkfs2	, sc2brkfs	,  scorpion2		, bbrkfst	, bbrkfst	, 0,		 "BFM",      "The Big Breakfast (set 3) (Scorpion 2/3)", GAME_FLAGS)
-GAME( 1994, sc2brkfs3	, sc2brkfs	,  scorpion2		, bbrkfst	, bbrkfst	, 0,		 "BFM",      "The Big Breakfast (set 4) (Scorpion 2/3)", GAME_FLAGS)
-GAME( 1994, sc2brkfs4	, sc2brkfs	,  scorpion2		, bbrkfst	, bbrkfst	, 0,		 "BFM",      "The Big Breakfast (set 5) (Scorpion 2/3)", GAME_FLAGS)
-GAME( 1994, sc2brkfs5	, sc2brkfs	,  scorpion2		, bbrkfst	, bbrkfst	, 0,		 "BFM",      "The Big Breakfast (set 6) (Scorpion 2/3)", GAME_FLAGS)
-GAME( 1994, sc2brkfsm	, sc2brkfs	,  scorpion2		, bbrkfst	, bbrkfst	, 0,		 "BFM/Mazooma",      "The Big Breakfast Casino (Scorpion 2/3)", GAME_FLAGS)
+GAME( 1994, sc2brkfsp	, sc2brkfs	,  scorpion2		, bbrkfst	, bbrkfst	, 0,		 "BFM",      "The Big Breakfast (set 1, Protocol) (Scorpion 2/3)", GAME_FLAGS)
+GAME( 1994, sc2brkfs1	, sc2brkfs	,  scorpion2		, bbrkfst	, bbrkfst	, 0,		 "BFM",      "The Big Breakfast (set 2 UK, Single Site) (Scorpion 2/3)", GAME_FLAGS)
+GAME( 1994, sc2brkfs1p	, sc2brkfs	,  scorpion2		, bbrkfst	, bbrkfst	, 0,		 "BFM",      "The Big Breakfast (set 2 UK, Single Site, Protocol) (Scorpion 2/3)", GAME_FLAGS)
+GAME( 1994, sc2brkfs2	, sc2brkfs	,  scorpion2		, bbrkfst	, bbrkfst	, 0,		 "BFM",      "The Big Breakfast (set 3 UK, Arcade, 8GBP Jackpot) (Scorpion 2/3)", GAME_FLAGS)
+GAME( 1994, sc2brkfs3	, sc2brkfs	,  scorpion2		, bbrkfst	, bbrkfst	, 0,		 "BFM",      "The Big Breakfast (set 4 UK, Arcade, 8GBP Jackpot) (Scorpion 2/3)", GAME_FLAGS)
+GAME( 1994, sc2brkfs3p	, sc2brkfs	,  scorpion2		, bbrkfst	, bbrkfst	, 0,		 "BFM",      "The Big Breakfast (set 4 UK, Arcade, 8GBP Jackpot, Protocol) (Scorpion 2/3)", GAME_FLAGS)
+GAME( 1994, sc2brkfs4	, sc2brkfs	,  scorpion2		, bbrkfst	, bbrkfst	, 0,		 "BFM",      "The Big Breakfast (set 5 UK, Arcade, 10GBP Jackpot) (Scorpion 2/3)", GAME_FLAGS)
+GAME( 1994, sc2brkfs4p	, sc2brkfs	,  scorpion2		, bbrkfst	, bbrkfst	, 0,		 "BFM",      "The Big Breakfast (set 5 UK, Arcade, 10GBP Jackpot, Protocol) (Scorpion 2/3)", GAME_FLAGS)
+GAME( 1994, sc2brkfs5	, sc2brkfs	,  scorpion2		, bbrkfst	, bbrkfst	, 0,		 "BFM",      "The Big Breakfast (set 6 UK, Arcade, 10GBP Jackpot) (Scorpion 2/3)", GAME_FLAGS)
+GAME( 1994, sc2brkfs5p	, sc2brkfs	,  scorpion2		, bbrkfst	, bbrkfst	, 0,		 "BFM",      "The Big Breakfast (set 6 UK, Arcade, 10GBP Jackpot, Protocol) (Scorpion 2/3)", GAME_FLAGS)
+
+GAME( 1994, sc2brkfsm	, sc2brkfs	,  scorpion2		, bbrkfst	, bbrkfst	, 0,		 "BFM/Mazooma",      "The Big Breakfast Casino (set 1) (Scorpion 2/3)", GAME_FLAGS)
+GAME( 1994, sc2brkfsm1	, sc2brkfs	,  scorpion2		, bbrkfst	, bbrkfst	, 0,		 "BFM/Mazooma",      "The Big Breakfast Casino (set 2) (Scorpion 2/3)", GAME_FLAGS)
+GAME( 1994, sc2brkfsm2	, sc2brkfs	,  scorpion2		, bbrkfst	, bbrkfst	, 0,		 "BFM/Mazooma",      "The Big Breakfast Casino (set 3) (Scorpion 2/3)", GAME_FLAGS)
 
 GAME( 1995, sc2focus	, 0			,  scorpion3		, scorpion3	, focus		, 0,		 "BFM/ELAM", "Focus (Dutch, Game Card 95-750-347) (Scorpion 2/3)", GAME_NOT_WORKING|GAME_SUPPORTS_SAVE|GAME_REQUIRES_ARTWORK|GAME_MECHANICAL)
-GAME( 1996, sc2gslam	, 0			,  scorpion2		, bfmcgslm	, bfmcgslm	, 0,		 "BFM",      "Grandslam Club (UK, Game Card 95-750-843) (Scorpion 2/3)", GAME_NOT_WORKING|GAME_SUPPORTS_SAVE|GAME_REQUIRES_ARTWORK|GAME_MECHANICAL)
-GAME( 199?, sc2cshcl	, 0			,  scorpion2		, bbrkfst	, bbrkfst	, 0,		 "BFM",      "Cashino Club (Bellfruit) (Scorpion 2/3)", GAME_FLAGS)
+GAME( 1996, sc2gslam	, 0			,  scorpion2		, bfmcgslm	, bfmcgslm	, 0,		 "BFM",      "Grandslam Club (UK, set 1, Game Card 95-750-843) (Scorpion 2/3)", GAME_NOT_WORKING|GAME_SUPPORTS_SAVE|GAME_REQUIRES_ARTWORK|GAME_MECHANICAL)
+GAME( 1996, sc2gslamp	, sc2gslam	,  scorpion2		, bfmcgslm	, bfmcgslm	, 0,		 "BFM",      "Grandslam Club (UK, set 1, Protocol) (Scorpion 2/3)", GAME_NOT_WORKING|GAME_SUPPORTS_SAVE|GAME_REQUIRES_ARTWORK|GAME_MECHANICAL)
+GAME( 1996, sc2gslam1	, sc2gslam	,  scorpion2		, bfmcgslm	, bfmcgslm	, 0,		 "BFM",      "Grandslam Club (UK, set 2) (Scorpion 2/3)", GAME_NOT_WORKING|GAME_SUPPORTS_SAVE|GAME_REQUIRES_ARTWORK|GAME_MECHANICAL)
+GAME( 1996, sc2gslam1p	, sc2gslam	,  scorpion2		, bfmcgslm	, bfmcgslm	, 0,		 "BFM",      "Grandslam Club (UK, set 2, Arcade, Protocol) (Scorpion 2/3)", GAME_NOT_WORKING|GAME_SUPPORTS_SAVE|GAME_REQUIRES_ARTWORK|GAME_MECHANICAL)
+GAME( 1996, sc2gslam2	, sc2gslam	,  scorpion2		, bfmcgslm	, bfmcgslm	, 0,		 "BFM",      "Grandslam Club (UK, set 3) (Scorpion 2/3)", GAME_NOT_WORKING|GAME_SUPPORTS_SAVE|GAME_REQUIRES_ARTWORK|GAME_MECHANICAL)
+GAME( 199?, sc2cshcl	, 0			,  scorpion2		, bbrkfst	, bbrkfst	, 0,		 "BFM",      "Cashino Club (Bellfruit) (set 1) (Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2cshclp	, sc2cshcl	,  scorpion2		, bbrkfst	, bbrkfst	, 0,		 "BFM",      "Cashino Club (Bellfruit) (set 1, Protocol) (Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2cshcl1	, sc2cshcl	,  scorpion2		, bbrkfst	, bbrkfst	, 0,		 "BFM",      "Cashino Club (Bellfruit) (set 2) (Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2cshcl1p	, sc2cshcl	,  scorpion2		, bbrkfst	, bbrkfst	, 0,		 "BFM",      "Cashino Club (Bellfruit) (set 2, Protocol) (Scorpion 2/3)", GAME_FLAGS)
+
 GAME( 199?, sc2catms	, 0			,  scorpion2		, bbrkfst	, bbrkfst	, 0,		 "BFM",      "Cat & Mouse (Bellfruit) (Scorpion 2/3)", GAME_FLAGS)
-GAME( 199?, sc2eggs		, 0			,  scorpion2		, drwho		, drwho		, 0,		 "BFM",      "Eggs On Legs Tour (Bellfruit) (Scorpion 2/3)", GAME_FLAGS)
-GAME( 199?, sc2gsclb	, 0			,  scorpion2		, drwho		, drwho		, 0,		 "BFM",      "The Game Show Club (Bellfruit) (Scorpion 2/3)", GAME_FLAGS)
-GAME( 199?, sc2suprz	, 0			,  scorpion2		, drwho		, drwho		, 0,		 "BFM",      "Surprise Surprize (Bellfruit) (Scorpion 2/3)", GAME_FLAGS)
-GAME( 199?, sc2cpg		, 0			,  scorpion2		, drwho		, drwho		, 0,		 "BFM",      "Pharaoh's Gold Club (Bellfruit) (Scorpion 2/3)", GAME_FLAGS)
-GAME( 199?, sc2motd		, 0			,  scorpion2		, drwho		, drwho		, 0,		 "BFM",      "Match Of The Day (Bellfruit) (Scorpion 2/3)", GAME_FLAGS)
-GAME( 199?, sc2easy		, 0			,  scorpion2		, drwho		, drwho		, 0,		 "BFM",      "Easy Money (Bellfruit) (Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2catms1	, sc2catms	,  scorpion2		, bbrkfst	, bbrkfst	, 0,		 "BFM",      "Cat & Mouse (Bellfruit) (set 2) (Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2catms1p	, sc2catms	,  scorpion2		, bbrkfst	, bbrkfst	, 0,		 "BFM",      "Cat & Mouse (Bellfruit) (set 2, Protocol) (Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2catms2	, sc2catms	,  scorpion2		, bbrkfst	, bbrkfst	, 0,		 "BFM",      "Cat & Mouse (Bellfruit) (set 3) (Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2catms2p	, sc2catms	,  scorpion2		, bbrkfst	, bbrkfst	, 0,		 "BFM",      "Cat & Mouse (Bellfruit) (set 3, Protocol) (Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2catms3	, sc2catms	,  scorpion2		, bbrkfst	, bbrkfst	, 0,		 "BFM",      "Cat & Mouse (Bellfruit) (set 4) (Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2catms4	, sc2catms	,  scorpion2		, bbrkfst	, bbrkfst	, 0,		 "BFM",      "Cat & Mouse (Bellfruit) (set 5) (Scorpion 2/3)", GAME_FLAGS)
+
+GAME( 199?, sc2ctms2	, 0			,  scorpion2		, bbrkfst	, bbrkfst	, 0,		 "BFM",      "Cat & Mouse (Mark 2) (Bellfruit) (set 1) (Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2ctms21	, sc2ctms2	,  scorpion2		, bbrkfst	, bbrkfst	, 0,		 "BFM",      "Cat & Mouse (Mark 2) (Bellfruit) (set 2) (Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2ctms21p	, sc2ctms2	,  scorpion2		, bbrkfst	, bbrkfst	, 0,		 "BFM",      "Cat & Mouse (Mark 2) (Bellfruit) (set 2, Protocol) (Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2ctms22	, sc2ctms2	,  scorpion2		, bbrkfst	, bbrkfst	, 0,		 "BFM",      "Cat & Mouse (Mark 2) (Bellfruit) (set 3) (Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2ctms22p	, sc2ctms2	,  scorpion2		, bbrkfst	, bbrkfst	, 0,		 "BFM",      "Cat & Mouse (Mark 2) (Bellfruit) (set 3, Protocol) (Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2ctms23	, sc2ctms2	,  scorpion2		, bbrkfst	, bbrkfst	, 0,		 "BFM",      "Cat & Mouse (Mark 2) (Bellfruit) (set 4) (Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2ctms23p	, sc2ctms2	,  scorpion2		, bbrkfst	, bbrkfst	, 0,		 "BFM",      "Cat & Mouse (Mark 2) (Bellfruit) (set 4, Protocol) (Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2ctms24p	, sc2ctms2	,  scorpion2		, bbrkfst	, bbrkfst	, 0,		 "BFM",      "Cat & Mouse (Mark 2) (Bellfruit) (set 5, Protocol) (Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2ctms25	, sc2ctms2	,  scorpion2		, bbrkfst	, bbrkfst	, 0,		 "BFM",      "Cat & Mouse (Mark 2) (Bellfruit) (set 6) (Scorpion 2/3)", GAME_FLAGS)
+
+GAME( 199?, sc2eggs		, 0			,  scorpion2		, drwho		, drwho		, 0,		 "BFM",      "Eggs On Legs Tour (Bellfruit) (set 1, UK, Arcade, 10GBP Jackpot) (Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2eggsp	, sc2eggs	,  scorpion2		, drwho		, drwho		, 0,		 "BFM",      "Eggs On Legs Tour (Bellfruit) (set 1, UK, Arcade, 10GBP Jackpot, Protocol) (Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2eggs1	, sc2eggs	,  scorpion2		, drwho		, drwho		, 0,		 "BFM",      "Eggs On Legs Tour (Bellfruit) (set 2, UK, Arcade, 10GBP Jackpot?) (Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2eggs1p	, sc2eggs	,  scorpion2		, drwho		, drwho		, 0,		 "BFM",      "Eggs On Legs Tour (Bellfruit) (set 2, UK, Arcade, 10GBP Jackpot, Protocol) (Scorpion 2/3)", GAME_FLAGS)
+
+GAME( 199?, sc2gsclb	, 0			,  scorpion2		, drwho		, drwho		, 0,		 "BFM",      "The Game Show Club (Bellfruit) (set 1, UK, Arcade, p65)(Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2gsclbp	, sc2gsclb	,  scorpion2		, drwho		, drwho		, 0,		 "BFM",      "The Game Show Club (Bellfruit) (set 1, UK, Arcade, p65, Protocol)(Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2gsclb1	, sc2gsclb	,  scorpion2		, drwho		, drwho		, 0,		 "BFM",      "The Game Show Club (Bellfruit) (set 2, UK, Arcade, 250GBP Jackpot, p65)(Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2gsclb1p	, sc2gsclb	,  scorpion2		, drwho		, drwho		, 0,		 "BFM",      "The Game Show Club (Bellfruit) (set 2, UK, Arcade, 250GBP Jackpot, p65, Protocol)(Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2gsclb2	, sc2gsclb	,  scorpion2		, drwho		, drwho		, 0,		 "BFM",      "The Game Show Club (Bellfruit) (set 3, UK, Arcade)(Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2gsclb2p	, sc2gsclb	,  scorpion2		, drwho		, drwho		, 0,		 "BFM",      "The Game Show Club (Bellfruit) (set 3, UK, Arcade, Protocol)(Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2gsclb3	, sc2gsclb	,  scorpion2		, drwho		, drwho		, 0,		 "BFM",      "The Game Show Club (Bellfruit) (set 4, UK, Arcade)(Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2gsclb3p	, sc2gsclb	,  scorpion2		, drwho		, drwho		, 0,		 "BFM",      "The Game Show Club (Bellfruit) (set 4, UK, Arcade, Protocol)(Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2gsclb4	, sc2gsclb	,  scorpion2		, drwho		, drwho		, 0,		 "BFM",      "The Game Show Club (Bellfruit) (set 5, UK, Arcade)(Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2gsclb4p	, sc2gsclb	,  scorpion2		, drwho		, drwho		, 0,		 "BFM",      "The Game Show Club (Bellfruit) (set 5, UK, Arcade, Protocol)(Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2gsclb5	, sc2gsclb	,  scorpion2		, drwho		, drwho		, 0,		 "BFM",      "The Game Show Club (Bellfruit) (set 6, UK)(Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2gsclb6	, sc2gsclb	,  scorpion2		, drwho		, drwho		, 0,		 "BFM",      "The Game Show Club (Bellfruit) (set 7, UK)(Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2gsclb7p	, sc2gsclb	,  scorpion2		, drwho		, drwho		, 0,		 "BFM",      "The Game Show Club (Bellfruit) (set 8, UK, Protocol)(Scorpion 2/3)", GAME_FLAGS)
+
+GAME( 199?, sc2cpg		, 0			,  scorpion2		, drwho		, drwho		, 0,		 "BFM",      "Pharaoh's Gold Club (Bellfruit) (set 1, UK, 250GBP Jackpot)(Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2cpgp		, sc2cpg	,  scorpion2		, drwho		, drwho		, 0,		 "BFM",      "Pharaoh's Gold Club (Bellfruit) (set 1, UK, 250GBP Jackpot, Protocol)(Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2cpg1		, sc2cpg	,  scorpion2		, drwho		, drwho		, 0,		 "BFM",      "Pharaoh's Gold Club (Bellfruit) (set 2, UK, p65)(Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2cpg1p	, sc2cpg	,  scorpion2		, drwho		, drwho		, 0,		 "BFM",      "Pharaoh's Gold Club (Bellfruit) (set 2, UK, p65, Protocol)(Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2cpg2		, sc2cpg	,  scorpion2		, drwho		, drwho		, 0,		 "BFM",      "Pharaoh's Gold Club (Bellfruit) (set 3, UK)(Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2cpg2p	, sc2cpg	,  scorpion2		, drwho		, drwho		, 0,		 "BFM",      "Pharaoh's Gold Club (Bellfruit) (set 3, UK, Protocol)(Scorpion 2/3)", GAME_FLAGS)
+
+GAME( 199?, sc2suprz	, 0			,  scorpion2		, drwho		, drwho		, 0,		 "BFM",      "Surprise Surprize (Bellfruit) (set 1, UK) (Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2suprzp	, sc2suprz	,  scorpion2		, drwho		, drwho		, 0,		 "BFM",      "Surprise Surprize (Bellfruit) (set 1, UK, Protocol)(Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2suprz1	, sc2suprz	,  scorpion2		, drwho		, drwho		, 0,		 "BFM",      "Surprise Surprize (Bellfruit) (set 2, UK) (Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2suprz1p	, sc2suprz	,  scorpion2		, drwho		, drwho		, 0,		 "BFM",      "Surprise Surprize (Bellfruit) (set 2, UK, Protocol)(Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2suprz2	, sc2suprz	,  scorpion2		, drwho		, drwho		, 0,		 "BFM",      "Surprise Surprize (Bellfruit) (set 3, UK) (Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2suprz2p	, sc2suprz	,  scorpion2		, drwho		, drwho		, 0,		 "BFM",      "Surprise Surprize (Bellfruit) (set 3, UK, Protocol)(Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2suprz3	, sc2suprz	,  scorpion2		, drwho		, drwho		, 0,		 "BFM",      "Surprise Surprize (Bellfruit) (set 4, UK) (Scorpion 2/3)", GAME_FLAGS)
+
+GAME( 199?, sc2motd		, 0			,  scorpion2		, drwho		, drwho		, 0,		 "BFM",      "Match Of The Day (Bellfruit) (set 1, UK, 10GBP Jackpot) (Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2motdp	, sc2motd	,  scorpion2		, drwho		, drwho		, 0,		 "BFM",      "Match Of The Day (Bellfruit) (set 1, UK, 10GBP Jackpot, Protocol) (Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2motd1	, sc2motd	,  scorpion2		, drwho		, drwho		, 0,		 "BFM",      "Match Of The Day (Bellfruit) (set 2, UK, 10GBP Jackpot, 1st Triennial) (Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2motd1p	, sc2motd	,  scorpion2		, drwho		, drwho		, 0,		 "BFM",      "Match Of The Day (Bellfruit) (set 2, UK, 10GBP Jackpot, 1st Triennial, Protocol) (Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2motd2	, sc2motd	,  scorpion2		, drwho		, drwho		, 0,		 "BFM",      "Match Of The Day (Bellfruit) (set 3, UK, 10GBP Jackpot) (Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2motd2p	, sc2motd	,  scorpion2		, drwho		, drwho		, 0,		 "BFM",      "Match Of The Day (Bellfruit) (set 3, UK, 10GBP Jackpot, Protocol) (Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2motd3	, sc2motd	,  scorpion2		, drwho		, drwho		, 0,		 "BFM",      "Match Of The Day (Bellfruit) (set 4, UK) (Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2motd3p	, sc2motd	,  scorpion2		, drwho		, drwho		, 0,		 "BFM",      "Match Of The Day (Bellfruit) (set 4, UK, Protocol) (Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2motd4	, sc2motd	,  scorpion2		, drwho		, drwho		, 0,		 "BFM",      "Match Of The Day (Bellfruit) (set 5, UK, Arcade) (Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2motd4p	, sc2motd	,  scorpion2		, drwho		, drwho		, 0,		 "BFM",      "Match Of The Day (Bellfruit) (set 5, UK, Arcade, Protocol) (Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2motd5	, sc2motd	,  scorpion2		, drwho		, drwho		, 0,		 "BFM",      "Match Of The Day (Bellfruit) (set 6, UK, Single Site) (Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2motd5p	, sc2motd	,  scorpion2		, drwho		, drwho		, 0,		 "BFM",      "Match Of The Day (Bellfruit) (set 6, UK, Single Site, Protocol) (Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2motd6	, sc2motd	,  scorpion2		, drwho		, drwho		, 0,		 "BFM",      "Match Of The Day (Bellfruit) (set 7, UK, 8GBP Jackpot) (Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2motd6p	, sc2motd	,  scorpion2		, drwho		, drwho		, 0,		 "BFM",      "Match Of The Day (Bellfruit) (set 7, UK, 8GBP Jackpot, Protocol) (Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2motd7	, sc2motd	,  scorpion2		, drwho		, drwho		, 0,		 "BFM",      "Match Of The Day (Bellfruit) (set 8, UK) (Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2motd7p	, sc2motd	,  scorpion2		, drwho		, drwho		, 0,		 "BFM",      "Match Of The Day (Bellfruit) (set 8, UK, Protocol) (Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2motd8	, sc2motd	,  scorpion2		, drwho		, drwho		, 0,		 "BFM",      "Match Of The Day (Bellfruit) (set 9, UK) (Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2motd8p	, sc2motd	,  scorpion2		, drwho		, drwho		, 0,		 "BFM",      "Match Of The Day (Bellfruit) (set 9, UK, Protocol) (Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2motd9	, sc2motd	,  scorpion2		, drwho		, drwho		, 0,		 "BFM",      "Match Of The Day (Bellfruit) (set 10, UK, 6GBP Jackpot) (Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2motd10p	, sc2motd	,  scorpion2		, drwho		, drwho		, 0,		 "BFM",      "Match Of The Day (Bellfruit) (set 11, UK, 8GBP Jackpot, Protocol) (Scorpion 2/3)", GAME_FLAGS)
+
+GAME( 199?, sc2easy		, 0			,  scorpion2		, drwho		, drwho		, 0,		 "BFM",      "Easy Money (Bellfruit) (set 1) (Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2easyp	, sc2easy	,  scorpion2		, drwho		, drwho		, 0,		 "BFM",      "Easy Money (Bellfruit) (set 1, Protocol) (Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2easy1	, sc2easy	,  scorpion2		, drwho		, drwho		, 0,		 "BFM",      "Easy Money (Bellfruit) (set 2) (Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2easy1p	, sc2easy	,  scorpion2		, drwho		, drwho		, 0,		 "BFM",      "Easy Money (Bellfruit) (set 2, Protocol) (Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2easy2	, sc2easy	,  scorpion2		, drwho		, drwho		, 0,		 "BFM",      "Easy Money (Bellfruit) (set 3) (Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2easy2p	, sc2easy	,  scorpion2		, drwho		, drwho		, 0,		 "BFM",      "Easy Money (Bellfruit) (set 3, Protocol) (Scorpion 2/3)", GAME_FLAGS)
+
 GAME( 199?, sc2majes	, 0			,  scorpion2		, drwho		, drwho		, 0,		 "BFM",      "Majestic Bells (Bellfruit) (Scorpion 2/3)", GAME_FLAGS)
-GAME( 199?, sc2dels		, 0			,  scorpion2		, drwho		, drwho		, 0,		 "BFM",      "Del's Millions (Bellfruit) (Scorpion 2/3)", GAME_FLAGS)
-GAME( 199?, sc2wembl	, 0			,  scorpion2		, drwho		, drwho		, 0,		 "BFM",      "Road To Wembley (Bellfruit) (Scorpion 2/3)", GAME_FLAGS)
+
+GAME( 199?, sc2dels		, 0			,  scorpion2		, drwho		, drwho		, 0,		 "BFM",      "Del's Millions (Bellfruit) (set 1, UK, 10GBP Jackpot) (Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2delsp	, sc2dels	,  scorpion2		, drwho		, drwho		, 0,		 "BFM",      "Del's Millions (Bellfruit) (set 1, UK, 10GBP Jackpot, Protocol) (Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2dels1	, sc2dels	,  scorpion2		, drwho		, drwho		, 0,		 "BFM",      "Del's Millions (Bellfruit) (set 2, UK, 10GBP Jackpot) (Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2dels1p	, sc2dels	,  scorpion2		, drwho		, drwho		, 0,		 "BFM",      "Del's Millions (Bellfruit) (set 2, UK, 10GBP Jackpot, Protocol) (Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2dels2	, sc2dels	,  scorpion2		, drwho		, drwho		, 0,		 "BFM",      "Del's Millions (Bellfruit) (set 3, UK, 8GBP Jackpot) (Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2dels2p	, sc2dels	,  scorpion2		, drwho		, drwho		, 0,		 "BFM",      "Del's Millions (Bellfruit) (set 3, UK, 8GBP Jackpot, Protocol) (Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2dels3	, sc2dels	,  scorpion2		, drwho		, drwho		, 0,		 "BFM",      "Del's Millions (Bellfruit) (set 4, UK, 8GBP Jackpot) (Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2dels3p	, sc2dels	,  scorpion2		, drwho		, drwho		, 0,		 "BFM",      "Del's Millions (Bellfruit) (set 4, UK, 8GBP Jackpot, Protocol) (Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2dels4	, sc2dels	,  scorpion2		, drwho		, drwho		, 0,		 "BFM",      "Del's Millions (Bellfruit) (set 5, UK) (Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2dels4p	, sc2dels	,  scorpion2		, drwho		, drwho		, 0,		 "BFM",      "Del's Millions (Bellfruit) (set 5, UK, Protocol) (Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2dels5	, sc2dels	,  scorpion2		, drwho		, drwho		, 0,		 "BFM",      "Del's Millions (Bellfruit) (set 6, UK) (Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2dels6	, sc2dels	,  scorpion2		, drwho		, drwho		, 0,		 "BFM",      "Del's Millions (Bellfruit) (set 7, UK) (Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2dels7	, sc2dels	,  scorpion2		, drwho		, drwho		, 0,		 "BFM",      "Del's Millions (Bellfruit) (set 8, UK) (Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2dels8	, sc2dels	,  scorpion2		, drwho		, drwho		, 0,		 "BFM",      "Del's Millions (Bellfruit) (set 9, UK) (Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2dels9	, sc2dels	,  scorpion2		, drwho		, drwho		, 0,		 "BFM",      "Del's Millions (Bellfruit) (set 10, UK) (Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2delsd	, sc2dels	,  scorpion2		, drwho		, drwho		, 0,		 "BFM",      "Del's Millions (Bellfruit) ('Deluxe', UK) (Scorpion 2/3)", GAME_FLAGS)
+
+GAME( 199?, sc2delsm	, 0			,  scorpion2		, drwho		, drwho		, 0,		 "BFM/Mazooma",  "Del's Millions (Bellfruit/Mazooma) (set 1, UK) (Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2delsmp	, sc2delsm	,  scorpion2		, drwho		, drwho		, 0,		 "BFM/Mazooma",  "Del's Millions (Bellfruit/Mazooma) (set 1, UK, Protocol) (Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2delsm1	, sc2delsm	,  scorpion2		, drwho		, drwho		, 0,		 "BFM/Mazooma",  "Del's Millions (Bellfruit/Mazooma) (set 2, UK) (Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2delsm1p	, sc2delsm	,  scorpion2		, drwho		, drwho		, 0,		 "BFM/Mazooma",  "Del's Millions (Bellfruit/Mazooma) (set 2, UK, Protocol) (Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2delsm2	, sc2delsm	,  scorpion2		, drwho		, drwho		, 0,		 "BFM/Mazooma",  "Del's Millions (Bellfruit/Mazooma) (set 3, UK) (Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2delsm2p	, sc2delsm	,  scorpion2		, drwho		, drwho		, 0,		 "BFM/Mazooma",  "Del's Millions (Bellfruit/Mazooma) (set 3, UK, Protocol) (Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2delsm3	, sc2delsm	,  scorpion2		, drwho		, drwho		, 0,		 "BFM/Mazooma",  "Del's Millions (Bellfruit/Mazooma) (set 4, UK) (Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2delsm3p	, sc2delsm	,  scorpion2		, drwho		, drwho		, 0,		 "BFM/Mazooma",  "Del's Millions (Bellfruit/Mazooma) (set 4, UK, Protocol) (Scorpion 2/3)", GAME_FLAGS)
+
+GAME( 199?, sc2wembl	, 0			,  scorpion2		, drwho		, drwho		, 0,		 "BFM",      "Road To Wembley (Bellfruit) (set 1, UK, 10GBP Jackpot, 15RM motor) (Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2wemblp	, sc2wembl	,  scorpion2		, drwho		, drwho		, 0,		 "BFM",      "Road To Wembley (Bellfruit) (set 1, UK, 10GBP Jackpot, 15RM motor, Protocol) (Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2wembl1	, sc2wembl	,  scorpion2		, drwho		, drwho		, 0,		 "BFM",      "Road To Wembley (Bellfruit) (set 2, UK, 15RM motor) (Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2wembl1p	, sc2wembl	,  scorpion2		, drwho		, drwho		, 0,		 "BFM",      "Road To Wembley (Bellfruit) (set 2, UK, 15RM motor, Protocol) (Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2wembl2	, sc2wembl	,  scorpion2		, drwho		, drwho		, 0,		 "BFM",      "Road To Wembley (Bellfruit) (set 3, UK) (Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2wembl2p	, sc2wembl	,  scorpion2		, drwho		, drwho		, 0,		 "BFM",      "Road To Wembley (Bellfruit) (set 3, UK, Protocol) (Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2wembl3	, sc2wembl	,  scorpion2		, drwho		, drwho		, 0,		 "BFM",      "Road To Wembley (Bellfruit) (set 4, UK) (Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2wembl4p	, sc2wembl	,  scorpion2		, drwho		, drwho		, 0,		 "BFM",      "Road To Wembley (Bellfruit) (set 5, UK, Protocol) (Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2wembl5a	, sc2wembl	,  scorpion2		, drwho		, drwho		, 0,		 "BFM",      "Road To Wembley (Bellfruit) (set 6, UK, 16RM motor) (Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2wembl5ap	, sc2wembl	,  scorpion2		, drwho		, drwho		, 0,		 "BFM",      "Road To Wembley (Bellfruit) (set 6, UK, 16RM motor, Protocol) (Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2wembl6ap	, sc2wembl	,  scorpion2		, drwho		, drwho		, 0,		 "BFM",      "Road To Wembley (Bellfruit) (set 7, UK, 16RM motor, Protocol) (Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2wembl7a	, sc2wembl	,  scorpion2		, drwho		, drwho		, 0,		 "BFM",      "Road To Wembley (Bellfruit) (set 8, UK, 8GBP Jackpot, 16RM motor) (Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2wembl7ap	, sc2wembl	,  scorpion2		, drwho		, drwho		, 0,		 "BFM",      "Road To Wembley (Bellfruit) (set 8, UK, 8GBP Jackpot, 16RM motor, Protocol) (Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2wembl8	, sc2wembl	,  scorpion2		, drwho		, drwho		, 0,		 "BFM",      "Road To Wembley (Bellfruit) (set 9, UK) (Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2wembl9	, sc2wembl	,  scorpion2		, drwho		, drwho		, 0,		 "BFM",      "Road To Wembley (Bellfruit) (set 10, UK) (Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2wembl10	, sc2wembl	,  scorpion2		, drwho		, drwho		, 0,		 "BFM",      "Road To Wembley (Bellfruit) (set 11, UK) (Scorpion 2/3)", GAME_FLAGS)
+
 GAME( 199?, sc2wemblm	, sc2wembl	,  scorpion2		, drwho		, drwho		, 0,		 "BFM/Mazooma",      "Road To Wembley (Bellfruit/Mazooma) (Scorpion 2/3)", GAME_FLAGS) // error 99
-GAME( 199?, sc2downt	, 0			,  scorpion2		, drwho		, drwho		, 0,		 "BFM",	     "Down Town (Bellfruit) (Scorpion 2/3)", GAME_FLAGS)
-GAME( 199?, sc2inst		, 0			,  scorpion2		, drwho		, drwho		, 0,		 "BFM",      "Instant Jackpot (Bellfruit) (Scorpion 2/3)", GAME_FLAGS)
-GAME( 199?, sc2mam		, 0			,  scorpion2		, drwho		, drwho		, 0,		 "BFM",      "Make A Million (Bellfruit) (Scorpion 2/3)", GAME_FLAGS)
-GAME( 199?, sc2mamcl	, 0			,  scorpion2		, drwho		, drwho		, 0,		 "BFM",      "Make A Million Club (Bellfruit) (Scorpion 2/3)", GAME_FLAGS)
-GAME( 199?, sc2showt	, 0			,  scorpion2		, drwho		, drwho		, 0,		 "BFM",      "Showtime Spectacular (Bellfruit) (Scorpion 2/3)", GAME_FLAGS)
-GAME( 199?, sc2sstar	, 0			,  scorpion2		, drwho		, drwho		, 0,		 "BFM",      "Superstar (Bellfruit) (Scorpion 2/3)", GAME_FLAGS)
-GAME( 199?, sc2wwcl		, 0			,  scorpion2		, drwho		, drwho		, 0,		 "BFM",      "Wild West Club (Bellfruit) (Scorpion 2/3)", GAME_FLAGS)
+
+GAME( 199?, sc2downt	, 0			,  scorpion2		, drwho		, drwho		, 0,		 "BFM",	     "Down Town (Bellfruit) (set 1, UK, 15RM motor) (Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2downtp	, sc2downt	,  scorpion2		, drwho		, drwho		, 0,		 "BFM",	     "Down Town (Bellfruit) (set 1, UK, 15RM motor, Protocol) (Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2downt1	, sc2downt	,  scorpion2		, drwho		, drwho		, 0,		 "BFM",	     "Down Town (Bellfruit) (set 2, UK, 15RM motor) (Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2downt1p	, sc2downt	,  scorpion2		, drwho		, drwho		, 0,		 "BFM",	     "Down Town (Bellfruit) (set 2, UK, 15RM motor, Protocol) (Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2downt2	, sc2downt	,  scorpion2		, drwho		, drwho		, 0,		 "BFM",	     "Down Town (Bellfruit) (set 3, UK, 15RM motor) (Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2downt2p	, sc2downt	,  scorpion2		, drwho		, drwho		, 0,		 "BFM",	     "Down Town (Bellfruit) (set 3, UK, 15RM motor, Protocol) (Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2downt3	, sc2downt	,  scorpion2		, drwho		, drwho		, 0,		 "BFM",	     "Down Town (Bellfruit) (set 4, UK, 15RM motor) (Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2downt3p	, sc2downt	,  scorpion2		, drwho		, drwho		, 0,		 "BFM",	     "Down Town (Bellfruit) (set 4, UK, 15RM motor, Protocol) (Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2downt3a	, sc2downt	,  scorpion2		, drwho		, drwho		, 0,		 "BFM",	     "Down Town (Bellfruit) (set 4, UK, 16RM motor) (Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2downt3ap	, sc2downt	,  scorpion2		, drwho		, drwho		, 0,		 "BFM",	     "Down Town (Bellfruit) (set 4, UK, 16RM motor, Protocol) (Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2downt4	, sc2downt	,  scorpion2		, drwho		, drwho		, 0,		 "BFM",	     "Down Town (Bellfruit) (set 5, UK, 15RM motor) (Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2downt4p	, sc2downt	,  scorpion2		, drwho		, drwho		, 0,		 "BFM",	     "Down Town (Bellfruit) (set 5, UK, 15RM motor, Protocol) (Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2downt4a	, sc2downt	,  scorpion2		, drwho		, drwho		, 0,		 "BFM",	     "Down Town (Bellfruit) (set 5, UK, 16RM motor) (Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2downt4ap	, sc2downt	,  scorpion2		, drwho		, drwho		, 0,		 "BFM",	     "Down Town (Bellfruit) (set 5, UK, 16RM motor, Protocol) (Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2downt5	, sc2downt	,  scorpion2		, drwho		, drwho		, 0,		 "BFM",	     "Down Town (Bellfruit) (set 6, UK, 15RM motor) (Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2downt6	, sc2downt	,  scorpion2		, drwho		, drwho		, 0,		 "BFM",	     "Down Town (Bellfruit) (set 7, UK, 15RM motor) (Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2downt7	, sc2downt	,  scorpion2		, drwho		, drwho		, 0,		 "BFM",	     "Down Town (Bellfruit) (set 8, UK, 15RM motor) (Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2downt8a	, sc2downt	,  scorpion2		, drwho		, drwho		, 0,		 "BFM",	     "Down Town (Bellfruit) (set 9, UK, 16RM motor) (Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2downt8ap	, sc2downt	,  scorpion2		, drwho		, drwho		, 0,		 "BFM",	     "Down Town (Bellfruit) (set 9, UK, 16RM motor, Protocol) (Scorpion 2/3)", GAME_FLAGS)
+
+GAME( 199?, sc2inst		, 0			,  scorpion2		, drwho		, drwho		, 0,		 "BFM",      "Instant Jackpot (Bellfruit) (set 1, UK, 10GBP Jackpot) (Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2instp	, sc2inst	,  scorpion2		, drwho		, drwho		, 0,		 "BFM",      "Instant Jackpot (Bellfruit) (set 1, UK, 10GBP Jackpot, Protocol) (Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2inst1	, sc2inst	,  scorpion2		, drwho		, drwho		, 0,		 "BFM",      "Instant Jackpot (Bellfruit) (set 2, UK, 10GBP Jackpot) (Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2inst1p	, sc2inst	,  scorpion2		, drwho		, drwho		, 0,		 "BFM",      "Instant Jackpot (Bellfruit) (set 2, UK, 10GBP Jackpot, Protocol) (Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2inst2	, sc2inst	,  scorpion2		, drwho		, drwho		, 0,		 "BFM",      "Instant Jackpot (Bellfruit) (set 3, UK) (Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2inst2p	, sc2inst	,  scorpion2		, drwho		, drwho		, 0,		 "BFM",      "Instant Jackpot (Bellfruit) (set 3, UK, Protocol) (Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2inst3	, sc2inst	,  scorpion2		, drwho		, drwho		, 0,		 "BFM",      "Instant Jackpot (Bellfruit) (set 4, UK, 8GBP Jackpot) (Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2inst3p	, sc2inst	,  scorpion2		, drwho		, drwho		, 0,		 "BFM",      "Instant Jackpot (Bellfruit) (set 4, UK, 8GBP Jackpot, Protocol) (Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2inst4	, sc2inst	,  scorpion2		, drwho		, drwho		, 0,		 "BFM",      "Instant Jackpot (Bellfruit) (set 5, UK) (Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2inst4p	, sc2inst	,  scorpion2		, drwho		, drwho		, 0,		 "BFM",      "Instant Jackpot (Bellfruit) (set 5, UK, Protocol) (Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2inst5	, sc2inst	,  scorpion2		, drwho		, drwho		, 0,		 "BFM",      "Instant Jackpot (Bellfruit) (set 6, UK) (Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2inst6	, sc2inst	,  scorpion2		, drwho		, drwho		, 0,		 "BFM",      "Instant Jackpot (Bellfruit) (set 7, UK) (Scorpion 2/3)", GAME_FLAGS)
+
+GAME( 199?, sc2mam		, 0			,  scorpion2		, drwho		, drwho		, 0,		 "BFM",      "Make A Million (Bellfruit) (set 1, UK, 10GBP Jackpot) (Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2mamp		, sc2mam	,  scorpion2		, drwho		, drwho		, 0,		 "BFM",      "Make A Million (Bellfruit) (set 1, UK, 10GBP Jackpot, Protocol) (Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2mam1		, sc2mam	,  scorpion2		, drwho		, drwho		, 0,		 "BFM",      "Make A Million (Bellfruit) (set 2, UK, 10GBP Jackpot) (Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2mam1p	, sc2mam	,  scorpion2		, drwho		, drwho		, 0,		 "BFM",      "Make A Million (Bellfruit) (set 2, UK, 10GBP Jackpot, Protocol) (Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2mam2		, sc2mam	,  scorpion2		, drwho		, drwho		, 0,		 "BFM",      "Make A Million (Bellfruit) (set 3, UK, 8GBP Jackpot) (Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2mam2p	, sc2mam	,  scorpion2		, drwho		, drwho		, 0,		 "BFM",      "Make A Million (Bellfruit) (set 3, UK, 8GBP Jackpot, Protocol) (Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2mam3		, sc2mam	,  scorpion2		, drwho		, drwho		, 0,		 "BFM",      "Make A Million (Bellfruit) (set 4, UK) (Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2mam3p	, sc2mam	,  scorpion2		, drwho		, drwho		, 0,		 "BFM",      "Make A Million (Bellfruit) (set 4, UK, Protocol) (Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2mam4		, sc2mam	,  scorpion2		, drwho		, drwho		, 0,		 "BFM",      "Make A Million (Bellfruit) (set 5, UK) (Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2mam4p	, sc2mam	,  scorpion2		, drwho		, drwho		, 0,		 "BFM",      "Make A Million (Bellfruit) (set 5, UK, Protocol) (Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2mam5		, sc2mam	,  scorpion2		, drwho		, drwho		, 0,		 "BFM",      "Make A Million (Bellfruit) (set 6, UK) (Scorpion 2/3)", GAME_FLAGS)
+
+GAME( 199?, sc2mamcl	, 0			,  scorpion2		, drwho		, drwho		, 0,		 "BFM",      "Make A Million Club (Bellfruit) (set 1, UK, 250GBP Jackpot) (Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2mamclp	, sc2mamcl	,  scorpion2		, drwho		, drwho		, 0,		 "BFM",      "Make A Million Club (Bellfruit) (set 1, UK, 250GBP Jackpot, Protocol) (Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2mamcl1	, sc2mamcl	,  scorpion2		, drwho		, drwho		, 0,		 "BFM",      "Make A Million Club (Bellfruit) (set 2, UK) (Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2mamcl1p	, sc2mamcl	,  scorpion2		, drwho		, drwho		, 0,		 "BFM",      "Make A Million Club (Bellfruit) (set 2, UK, Protocol) (Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2mamcl2	, sc2mamcl	,  scorpion2		, drwho		, drwho		, 0,		 "BFM",      "Make A Million Club (Bellfruit) (set 3, UK) (Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2mamcl2p	, sc2mamcl	,  scorpion2		, drwho		, drwho		, 0,		 "BFM",      "Make A Million Club (Bellfruit) (set 3, UK, Protocol) (Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2mamcl3	, sc2mamcl	,  scorpion2		, drwho		, drwho		, 0,		 "BFM",      "Make A Million Club (Bellfruit) (set 4, UK) (Scorpion 2/3)", GAME_FLAGS)
+
+GAME( 199?, sc2showt	, 0			,  scorpion2		, drwho		, drwho		, 0,		 "BFM",      "Showtime Spectacular (Bellfruit) (set 1, UK) (Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2showtp	, sc2showt	,  scorpion2		, drwho		, drwho		, 0,		 "BFM",      "Showtime Spectacular (Bellfruit) (set 1, UK, Protocol) (Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2showt1	, sc2showt	,  scorpion2		, drwho		, drwho		, 0,		 "BFM",      "Showtime Spectacular (Bellfruit) (set 2, UK) (Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2showt1p	, sc2showt	,  scorpion2		, drwho		, drwho		, 0,		 "BFM",      "Showtime Spectacular (Bellfruit) (set 2, UK, Protocol) (Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2showt2	, sc2showt	,  scorpion2		, drwho		, drwho		, 0,		 "BFM",      "Showtime Spectacular (Bellfruit) (set 3, UK) (Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2showt2p	, sc2showt	,  scorpion2		, drwho		, drwho		, 0,		 "BFM",      "Showtime Spectacular (Bellfruit) (set 3, UK, Protocol) (Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2showt3	, sc2showt	,  scorpion2		, drwho		, drwho		, 0,		 "BFM",      "Showtime Spectacular (Bellfruit) (set 4, UK) (Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2showt3p	, sc2showt	,  scorpion2		, drwho		, drwho		, 0,		 "BFM",      "Showtime Spectacular (Bellfruit) (set 4, UK, Protocol) (Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2showt4	, sc2showt	,  scorpion2		, drwho		, drwho		, 0,		 "BFM",      "Showtime Spectacular (Bellfruit) (set 5, UK) (Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2showt4p	, sc2showt	,  scorpion2		, drwho		, drwho		, 0,		 "BFM",      "Showtime Spectacular (Bellfruit) (set 5, UK, Protocol) (Scorpion 2/3)", GAME_FLAGS)
+
+GAME( 199?, sc2sstar	, 0			,  scorpion2		, drwho		, drwho		, 0,		 "BFM",      "Superstar (Bellfruit) (set 1, UK, 3rd Triennial) (Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2sstarp	, sc2sstar	,  scorpion2		, drwho		, drwho		, 0,		 "BFM",      "Superstar (Bellfruit) (set 1, UK, 3rd Triennial, Protocol) (Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2sstar1	, sc2sstar	,  scorpion2		, drwho		, drwho		, 0,		 "BFM",      "Superstar (Bellfruit) (set 2, UK, 2nd Triennial) (Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2sstar1p	, sc2sstar	,  scorpion2		, drwho		, drwho		, 0,		 "BFM",      "Superstar (Bellfruit) (set 2, UK, 2nd Triennial, Protocol) (Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2sstar2	, sc2sstar	,  scorpion2		, drwho		, drwho		, 0,		 "BFM",      "Superstar (Bellfruit) (set 3, UK, 2nd Triennial) (Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2sstar2p	, sc2sstar	,  scorpion2		, drwho		, drwho		, 0,		 "BFM",      "Superstar (Bellfruit) (set 3, UK, 2nd Triennial, Protocol) (Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2sstar3	, sc2sstar	,  scorpion2		, drwho		, drwho		, 0,		 "BFM",      "Superstar (Bellfruit) (set 4, UK, 2nd Triennial) (Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2sstar3p	, sc2sstar	,  scorpion2		, drwho		, drwho		, 0,		 "BFM",      "Superstar (Bellfruit) (set 4, UK, 2nd Triennial, Protocol) (Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2sstar4	, sc2sstar	,  scorpion2		, drwho		, drwho		, 0,		 "BFM",      "Superstar (Bellfruit) (set 5, UK) (Scorpion 2/3)", GAME_FLAGS)
+
+
+GAME( 199?, sc2wwcl		, 0			,  scorpion2		, drwho		, drwho		, 0,		 "BFM",      "Wild West Club (Bellfruit) (set 1, UK, 250GBP Jackpot) (Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2wwclp	, sc2wwcl	,  scorpion2		, drwho		, drwho		, 0,		 "BFM",      "Wild West Club (Bellfruit) (set 1, UK, 250GBP Jackpot, Protocol) (Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2wwcl1	, sc2wwcl	,  scorpion2		, drwho		, drwho		, 0,		 "BFM",      "Wild West Club (Bellfruit) (set 2, UK) (Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2wwcl1p	, sc2wwcl	,  scorpion2		, drwho		, drwho		, 0,		 "BFM",      "Wild West Club (Bellfruit) (set 2, UK, Protocol) (Scorpion 2/3)", GAME_FLAGS)
+
 // this one is a bit strange (not encrypted, gives 'PROM ERROR 2'), is it really sc2? BFMemulator layout dat says it is
 GAME( 199?, sc2pe1g		, 0			,  scorpion2		, drwho		, drwhon	, 0,		 "BFM",      "Public Enemy No.1 (Bellfruit) [German] (Scorpion 2/3)", GAME_FLAGS)
 
 // these need inverted service door, and seem to have some issues with the reels jumping between 2 values?
-GAME( 199?, sc2goldr	, 0			,  scorpion2		, drwho		, drwho		, 0,		 "Mdm",      "Gold Reserve (Mdm) (Scorpion 2/3)", GAME_FLAGS)
-GAME( 199?, sc2hifly	, 0			,  scorpion2		, drwho		, drwho		, 0,		 "Mdm",      "High Flyer (Mdm) (Scorpion 2/3)", GAME_FLAGS)
-GAME( 199?, sc2scc		, 0			,  scorpion2		, drwho		, drwho		, 0,		 "Mdm",      "Safe Cracker Club (Mdm) (Scorpion 2/3)", GAME_FLAGS) // also marked as 'GLOBAL'?
+GAME( 199?, sc2goldr	, 0			,  scorpion2		, drwho		, drwho		, 0,		 "Mdm",      "Gold Reserve (Mdm) (v1.3) (Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2goldrp	, sc2goldr	,  scorpion2		, drwho		, drwho		, 0,		 "Mdm",      "Gold Reserve (Mdm) (v1.3 Protocol) (Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2goldr1	, sc2goldr	,  scorpion2		, drwho		, drwho		, 0,		 "Mdm",      "Gold Reserve (Mdm) (set 2) (Scorpion 2/3)", GAME_FLAGS)
+
+GAME( 199?, sc2hifly	, 0			,  scorpion2		, drwho		, drwho		, 0,		 "Mdm",      "High Flyer (Mdm) (v4.1) (Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2hifly2	, sc2hifly	,  scorpion2		, drwho		, drwho		, 0,		 "Mdm",      "High Flyer (Mdm) (v3.1) (Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2hifly3	, sc2hifly	,  scorpion2		, drwho		, drwho		, 0,		 "Mdm",      "High Flyer (Mdm) (v2.1) (Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2hifly4	, sc2hifly	,  scorpion2		, drwho		, drwho		, 0,		 "Mdm",      "High Flyer (Mdm) (v?.?) (Scorpion 2/3)", GAME_FLAGS)
+
+GAME( 199?, sc2scc		, 0			,  scorpion2		, drwho		, drwho		, 0,		 "Mdm",      "Safe Cracker Club (Mdm) (v4.4) (Scorpion 2/3)", GAME_FLAGS) // also marked as 'GLOBAL'?
 
 // custom Global sound system?
-GAME( 199?, sc2dick		, 0			,  scorpion2		, drwho		, drwho		, 0,		 "Global",   "Spotted Dick (Global) (Scorpion 2/3)", GAME_FLAGS)
-GAME( 199?, sc2pick		, 0			,  scorpion2		, drwho		, drwho		, 0,		 "Global",   "Pick Of The Bunch (Global) (Scorpion 2/3)", GAME_FLAGS)
-GAME( 199?, sc2rock		, 0			,  scorpion2		, drwho		, drwho		, 0,		 "Global",   "How Big's Your Rock? (Global) (Scorpion 2/3)", GAME_FLAGS)
-GAME( 199?, sc2call		, 0			,  scorpion2		, drwho		, drwho		, 0,		 "Global",   "It's Your Call (Global) (Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2dick		, 0			,  scorpion2		, drwho		, drwho		, 0,		 "Global",   "Spotted Dick (Global) (v3.1) (Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2dickp	, sc2dick	,  scorpion2		, drwho		, drwho		, 0,		 "Global",   "Spotted Dick (Global) (v3.1 Protocol) (Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2dick1	, sc2dick	,  scorpion2		, drwho		, drwho		, 0,		 "Global",   "Spotted Dick (Global) (v2.2) (Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2dick2	, sc2dick	,  scorpion2		, drwho		, drwho		, 0,		 "Global",   "Spotted Dick (Global) (v1.5) (Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2dick2p	, sc2dick	,  scorpion2		, drwho		, drwho		, 0,		 "Global",   "Spotted Dick (Global) (v1.5 Protocol ) (Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2dick2e	, sc2dick	,  scorpion2		, drwho		, drwho		, 0,		 "Global",   "Spotted Dick (Global) (v?.? Euro) (Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2dick2eu	, sc2dick	,  scorpion2		, drwho		, drwho		, 0,		 "Global",   "Spotted Dick (Global) (v?.? Euro unencrypted) (Scorpion 2/3)", GAME_FLAGS)
+
+GAME( 199?, sc2pick		, 0			,  scorpion2		, drwho		, drwho		, 0,		 "Global",   "Pick Of The Bunch (Global) (v2.3) (Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2pickp	, sc2pick	,  scorpion2		, drwho		, drwho		, 0,		 "Global",   "Pick Of The Bunch (Global) (v2.3 Protocol) (Scorpion 2/3)", GAME_FLAGS)
+
+GAME( 199?, sc2pickc	, 0			,  scorpion2		, drwho		, drwho		, 0,		 "Global",   "Pick Of The Bunch (Club?) (Global) (v1.9) (Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2pickcp	, sc2pick	,  scorpion2		, drwho		, drwho		, 0,		 "Global",   "Pick Of The Bunch (Club?) (Global) (v1.9 Protocol) (Scorpion 2/3)", GAME_FLAGS)
+
+GAME( 199?, sc2rock		, 0			,  scorpion2		, drwho		, drwho		, 0,		 "Global",   "How Big's Your Rock? (Global) (v1.5) (Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2rockp	, sc2rock	,  scorpion2		, drwho		, drwho		, 0,		 "Global",   "How Big's Your Rock? (Global) (v1.5 Protocol) (Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2rock1	, sc2rock	,  scorpion2		, drwho		, drwho		, 0,		 "Global",   "How Big's Your Rock? (Global) (v1.4) (Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2rock1p	, sc2rock	,  scorpion2		, drwho		, drwho		, 0,		 "Global",   "How Big's Your Rock? (Global) (v1.4 Protocol) (Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2rocke	, sc2rock	,  scorpion2		, drwho		, drwho		, 0,		 "Global",   "How Big's Your Rock? (Global) (v?.? Euro) (Scorpion 2/3)", GAME_FLAGS)
+
+GAME( 199?, sc2call		, 0			,  scorpion2		, drwho		, drwho		, 0,		 "Global",   "It's Your Call (Global) (v2.7) (Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2callp	, sc2call	,  scorpion2		, drwho		, drwho		, 0,		 "Global",   "It's Your Call (Global) (v2.7 Protocol) (Scorpion 2/3)", GAME_FLAGS)
+
+GAME( 199?, sc2callc	, 0			,  scorpion2		, drwho		, drwho		, 0,		 "Global",   "It's Your Call (Club?) (Global) (v1.6) (Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2callcp	, sc2callc	,  scorpion2		, drwho		, drwho		, 0,		 "Global",   "It's Your Call (Club?) (Global) (v1.6 Protocol) (Scorpion 2/3)", GAME_FLAGS)
 
 GAME( 199?, sc2payr		, 0			,  scorpion2		, drwho		, drwho		, 0,		 "BFM/Mazooma",   "Pay Roll Casino (Bellfruit/Mazooma) (Scorpion 2/3)", GAME_FLAGS)
 
@@ -5488,45 +7740,214 @@
 GAME( 199?, sc2smnud	, 0			,  scorpion2		, drwho		, drwho		, 0,		 "Concept",   "Super Multi Nudger (Concept)", GAME_FLAGS)
 
 //Seems to be plain Scorpion 2 - keeps tripping watchdog?
-GAME( 199?, sc2scshx	, 0			,  scorpion2		, drwho		, drwho			, 0,		 "Concept",   "Super Cash X (Concept)", GAME_FLAGS)
-GAME( 199?, sc2sghst	, 0			,  scorpion2		, drwho		, drwho			, 0,		 "Concept",   "Super Ghost (Concept)", GAME_FLAGS)
-GAME( 199?, sc2scshxgman, sc2scshx	,  scorpion2		, drwho		, drwho			, 0,		 "Concept",   "Super Cash X (Concept) (Gamesman Hardware)", GAME_FLAGS)
-GAME( 199?, sc2scshxstar, sc2scshx	,  scorpion2		, drwho		, drwho			, 0,		 "Concept",   "Super Cash X (Concept) (Starpoint Hardware)", GAME_FLAGS)
-GAME( 199?, sc2scshxcas,  sc2scshx	,  scorpion2		, drwho		, drwho			, 0,		 "Concept",   "Super Casino Cash X (Concept)", GAME_FLAGS)
-
-GAME( 199?, sc2cgc		, 0			,  scorpion2		, drwho		, drwho		, 0,		 "BFM",   "Carrot Gold Club (Bellfruit) (Scorpion 2/3)", GAME_FLAGS)
-GAME( 199?, sc2cnile		, 0			,  scorpion2		, drwho		, drwho		, 0,		 "BFM",   "Cash On The Nile Club (Bellfruit) (Scorpion 2/3)", GAME_FLAGS)
-GAME( 199?, sc2casr		, 0			,  scorpion2		, drwho		, drwho		, 0,		 "BFM",   "Casino Royale (Bellfruit) (Scorpion 2/3)", GAME_FLAGS)
-GAME( 199?, sc2cmbt		, 0			,  scorpion2		, drwho		, drwho		, 0,		 "BFM",   "Cat & Mouse & Bonzo Too (Bellfruit) (Scorpion 2/3)", GAME_FLAGS)
-GAME( 199?, sc2dbl		, 0			,  scorpion2		, drwho		, drwho		, 0,		 "BFM",   "Double Diamond (Bellfruit) (Scorpion 2/3)", GAME_FLAGS)
-GAME( 199?, sc2flaca		, 0			,  scorpion2		, drwho		, drwho		, 0,		 "BFM",   "Flash Cash (Bellfruit) (Scorpion 2/3)", GAME_FLAGS)
-GAME( 199?, sc2foot		, 0			,  scorpion2		, drwho		, drwho		, 0,		 "BFM",   "Football Club (Bellfruit) (Scorpion 2/3)", GAME_FLAGS)
-GAME( 199?, sc2gcclb		, 0			,  scorpion2		, drwho		, drwho		, 0,		 "BFM",   "Golden Casino Club (Bellfruit) (Scorpion 2/3)", GAME_FLAGS)
-GAME( 199?, sc2groul		, 0			,  scorpion2		, drwho		, drwho		, 0,		 "BFM",   "Golden Roulette (Bellfruit) (Scorpion 2/3)", GAME_FLAGS)
-GAME( 199?, sc2gldsh		, 0			,  scorpion2		, drwho		, drwho		, 0,		 "BFM",   "Golden Shot (Bellfruit) (Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2scshx	, 0			,  scorpion2		, drwho		, drwho		, 0,		 "Concept",   "Super Cash X (Concept)", GAME_FLAGS)
+GAME( 199?, sc2sghst	, 0			,  scorpion2		, drwho		, drwho		, 0,		 "Concept",   "Super Ghost (Concept)", GAME_FLAGS)
+GAME( 199?, sc2scshxgman, sc2scshx	,  scorpion2		, drwho		, drwho		, 0,		 "Concept",   "Super Cash X (Concept) (Gamesman Hardware)", GAME_FLAGS)
+GAME( 199?, sc2scshxstar, sc2scshx	,  scorpion2		, drwho		, drwho		, 0,		 "Concept",   "Super Cash X (Concept) (Starpoint Hardware)", GAME_FLAGS)
+GAME( 199?, sc2scshxcas,  sc2scshx	,  scorpion2		, drwho		, drwho		, 0,		 "Concept",   "Super Casino Cash X (Concept)", GAME_FLAGS)
+
+GAME( 199?, sc2cgc		, 0			,  scorpion2		, drwho		, drwho		, 0,		 "BFM", 	 "Carrot Gold Club (Bellfruit) (Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2cnile	, 0			,  scorpion2		, drwho		, drwho		, 0,		 "BFM", 	 "Cash On The Nile Club (Bellfruit) (set 1 UK, 150GBP Jackpot) (Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2cnile1	, sc2cnile	,  scorpion2		, drwho		, drwho		, 0,		 "BFM", 	 "Cash On The Nile Club (Bellfruit) (set 2 UK, 150GBP Jackpot) (Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2cnile2	, sc2cnile	,  scorpion2		, drwho		, drwho		, 0,		 "BFM", 	 "Cash On The Nile Club (Bellfruit) (set 2 UK, 200GBP Jackpot) (Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2cnile2p	, sc2cnile	,  scorpion2		, drwho		, drwho		, 0,		 "BFM", 	 "Cash On The Nile Club (Bellfruit) (set 2 UK, 150GBP Jackpot, Protocol) (Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2cnile3p	, sc2cnile	,  scorpion2		, drwho		, drwho		, 0,		 "BFM", 	 "Cash On The Nile Club (Bellfruit) (set 3 UK, 150GBP Jackpot) (Scorpion 2/3)", GAME_FLAGS)
+
+GAME( 199?, sc2casr		, 0			,  scorpion2		, drwho		, drwho		, 0,		 "BFM", 	 "Casino Royale (Bellfruit) (set 1, UK, 10GBP Jackpot, 3rd Triennial) (Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2casrp	, sc2casr	,  scorpion2		, drwho		, drwho		, 0,		 "BFM", 	 "Casino Royale (Bellfruit) (set 1, UK, 10GBP Jackpot, 3rd Triennial, Protocol) (Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2casr1	, sc2casr	,  scorpion2		, drwho		, drwho		, 0,		 "BFM", 	 "Casino Royale (Bellfruit) (set 2, UK, 3rd Triennial) (Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2casr1p	, sc2casr	,  scorpion2		, drwho		, drwho		, 0,		 "BFM", 	 "Casino Royale (Bellfruit) (set 2, UK, 3rd Triennial, Protocol) (Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2casr2	, sc2casr	,  scorpion2		, drwho		, drwho		, 0,		 "BFM", 	 "Casino Royale (Bellfruit) (set 3, UK) (Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2casr2p	, sc2casr	,  scorpion2		, drwho		, drwho		, 0,		 "BFM", 	 "Casino Royale (Bellfruit) (set 3, UK, Protocol) (Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2casr3	, sc2casr	,  scorpion2		, drwho		, drwho		, 0,		 "BFM", 	 "Casino Royale (Bellfruit) (set 4, UK, 8GBP Jackpot) (Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2casr3p	, sc2casr	,  scorpion2		, drwho		, drwho		, 0,		 "BFM", 	 "Casino Royale (Bellfruit) (set 4, UK, 8GBP Jackpot, Protocol) (Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2casr4	, sc2casr	,  scorpion2		, drwho		, drwho		, 0,		 "BFM", 	 "Casino Royale (Bellfruit) (set 5, UK) (Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2casr4p	, sc2casr	,  scorpion2		, drwho		, drwho		, 0,		 "BFM", 	 "Casino Royale (Bellfruit) (set 5, UK, Protocol) (Scorpion 2/3)", GAME_FLAGS)
+
+GAME( 199?, sc2cmbt		, 0			,  scorpion2		, drwho		, drwho		, 0,		 "BFM",		 "Cat & Mouse & Bonzo Too (Bellfruit) (set 1, UK) (Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2cmbtp	, sc2cmbt	,  scorpion2		, drwho		, drwho		, 0,		 "BFM",		 "Cat & Mouse & Bonzo Too (Bellfruit) (set 1, UK, Protocol) (Scorpion 2/3)", GAME_FLAGS)
+
+GAME( 199?, sc2copcl	, 0			,  scorpion2		, drwho		, drwho		, 0,		 "BFM",      "Cops 'n' Robbers Club (Bellfruit) (set 1, UK, 250GBP Jackpot) (Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2copclp	, sc2copcl	,  scorpion2		, drwho		, drwho		, 0,		 "BFM",      "Cops 'n' Robbers Club (Bellfruit) (set 1, UK, 250GBP Jackpot, Protocol) (Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2copcl1	, sc2copcl	,  scorpion2		, drwho		, drwho		, 0,		 "BFM",      "Cops 'n' Robbers Club (Bellfruit) (set 2, UK, 250GBP Jackpot) (Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2copcl1p	, sc2copcl	,  scorpion2		, drwho		, drwho		, 0,		 "BFM",      "Cops 'n' Robbers Club (Bellfruit) (set 2, UK, 250GBP Jackpot, Protocol) (Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2copcl2	, sc2copcl	,  scorpion2		, drwho		, drwho		, 0,		 "BFM",      "Cops 'n' Robbers Club (Bellfruit) (set 3, UK) (Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2copcl3	, sc2copcl	,  scorpion2		, drwho		, drwho		, 0,		 "BFM",      "Cops 'n' Robbers Club (Bellfruit) (set 4, UK) (Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2copcl3p	, sc2copcl	,  scorpion2		, drwho		, drwho		, 0,		 "BFM",      "Cops 'n' Robbers Club (Bellfruit) (set 4, UK, Protocol) (Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2copcl4	, sc2copcl	,  scorpion2		, drwho		, drwho		, 0,		 "BFM",      "Cops 'n' Robbers Club (Bellfruit) (set 5, UK) (Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2copcl5	, sc2copcl	,  scorpion2		, drwho		, drwho		, 0,		 "BFM",      "Cops 'n' Robbers Club (Bellfruit) (set 6, UK) (Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2copcl6	, sc2copcl	,  scorpion2		, drwho		, drwho		, 0,		 "BFM",      "Cops 'n' Robbers Club (Bellfruit) (set 7, UK) (Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2copcl6p	, sc2copcl	,  scorpion2		, drwho		, drwho		, 0,		 "BFM",      "Cops 'n' Robbers Club (Bellfruit) (set 7, UK, Protocol) (Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2copcl7	, sc2copcl	,  scorpion2		, drwho		, drwho		, 0,		 "BFM",      "Cops 'n' Robbers Club (Bellfruit) (set 8, UK) (Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2copcl8	, sc2copcl	,  scorpion2		, drwho		, drwho		, 0,		 "BFM",      "Cops 'n' Robbers Club (Bellfruit) (set 9, UK) (Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2copcl8p	, sc2copcl	,  scorpion2		, drwho		, drwho		, 0,		 "BFM",      "Cops 'n' Robbers Club (Bellfruit) (set 9, UK, Protocol) (Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2copcl9	, sc2copcl	,  scorpion2		, drwho		, drwho		, 0,		 "BFM",      "Cops 'n' Robbers Club (Bellfruit) (set 10, UK) (Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2copcl9p	, sc2copcl	,  scorpion2		, drwho		, drwho		, 0,		 "BFM",      "Cops 'n' Robbers Club (Bellfruit) (set 10, UK, Protocol) (Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2copcl10	, sc2copcl	,  scorpion2		, drwho		, drwho		, 0,		 "BFM",      "Cops 'n' Robbers Club (Bellfruit) (set 11, UK) (Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2copcl11	, sc2copcl	,  scorpion2		, drwho		, drwho		, 0,		 "BFM",      "Cops 'n' Robbers Club (Bellfruit) (set 12, UK) (Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2copcl11p	, sc2copcl	,  scorpion2		, drwho		, drwho		, 0,		 "BFM",      "Cops 'n' Robbers Club (Bellfruit) (set 12, UK, Protocol) (Scorpion 2/3)", GAME_FLAGS)
+
+
+
+GAME( 199?, sc2dbl		, 0			,  scorpion2		, drwho		, drwho		, 0,		 "BFM",   "Double Diamond (Bellfruit) (set 1, UK) (Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2dblp		, sc2dbl	,  scorpion2		, drwho		, drwho		, 0,		 "BFM",   "Double Diamond (Bellfruit) (set 1, UK, Protocol) (Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2dbl1		, sc2dbl	,  scorpion2		, drwho		, drwho		, 0,		 "BFM",   "Double Diamond (Bellfruit) (set 2, UK) (Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2dbl1p	, sc2dbl	,  scorpion2		, drwho		, drwho		, 0,		 "BFM",   "Double Diamond (Bellfruit) (set 2, UK, Protocol) (Scorpion 2/3)", GAME_FLAGS)
+
+GAME( 199?, sc2flaca	, 0			,  scorpion2		, drwho		, drwho		, 0,		 "BFM",   "Flash Cash (Bellfruit) (set 1, UK, 10GBP Jackpot, 3rd Triennial) (Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2flacap	, sc2flaca	,  scorpion2		, drwho		, drwho		, 0,		 "BFM",   "Flash Cash (Bellfruit) (set 1, UK, 10GBP Jackpot, 3rd Triennial, Protocol) (Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2flaca1	, sc2flaca	,  scorpion2		, drwho		, drwho		, 0,		 "BFM",   "Flash Cash (Bellfruit) (set 2, UK, 10GBP Jackpot, 2nd Triennial) (Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2flaca1p	, sc2flaca	,  scorpion2		, drwho		, drwho		, 0,		 "BFM",   "Flash Cash (Bellfruit) (set 2, UK, 10GBP Jackpot, 2nd Triennial, Protocol) (Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2flaca2	, sc2flaca	,  scorpion2		, drwho		, drwho		, 0,		 "BFM",   "Flash Cash (Bellfruit) (set 3, UK, 10GBP Jackpot, 2nd Triennial) (Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2flaca2p	, sc2flaca	,  scorpion2		, drwho		, drwho		, 0,		 "BFM",   "Flash Cash (Bellfruit) (set 3, UK, 10GBP Jackpot, 2nd Triennial, Protocol) (Scorpion 2/3)", GAME_FLAGS)
+
+
+GAME( 199?, sc2foot		, 0			,  scorpion2		, drwho		, drwho		, 0,		 "BFM",   "Football Club (Bellfruit) (set 1, UK, 250GBP Jackpot) (Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2footp	, sc2foot	,  scorpion2		, drwho		, drwho		, 0,		 "BFM",   "Football Club (Bellfruit) (set 1, UK, 250GBP Jackpot, Protocol) (Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2foot1	, sc2foot	,  scorpion2		, drwho		, drwho		, 0,		 "BFM",   "Football Club (Bellfruit) (set 2, UK, 100GBP Jackpot) (Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2foot1p	, sc2foot	,  scorpion2		, drwho		, drwho		, 0,		 "BFM",   "Football Club (Bellfruit) (set 2, UK, 100GBP Jackpot, Protocol) (Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2foot2	, sc2foot	,  scorpion2		, drwho		, drwho		, 0,		 "BFM",   "Football Club (Bellfruit) (set 3, UK) (Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2foot2p	, sc2foot	,  scorpion2		, drwho		, drwho		, 0,		 "BFM",   "Football Club (Bellfruit) (set 3, UK, Protocol) (Scorpion 2/3)", GAME_FLAGS)
+
+
+GAME( 199?, sc2gcclb	, 0			,  scorpion2		, drwho		, drwho		, 0,		 "BFM",   "Golden Casino Club (Bellfruit) (set 1, UK, 250GBP Jackpot) (Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2gcclbp	, sc2gcclb	,  scorpion2		, drwho		, drwho		, 0,		 "BFM",   "Golden Casino Club (Bellfruit) (set 1, UK, 250GBP Jackpot, Protocol) (Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2gcclb1	, sc2gcclb	,  scorpion2		, drwho		, drwho		, 0,		 "BFM",   "Golden Casino Club (Bellfruit) (set 2, UK, 100GBP Jackpot) (Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2gcclb1p	, sc2gcclb	,  scorpion2		, drwho		, drwho		, 0,		 "BFM",   "Golden Casino Club (Bellfruit) (set 2, UK, 100GBP Jackpot, Protocol) (Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2gcclb2	, sc2gcclb	,  scorpion2		, drwho		, drwho		, 0,		 "BFM",   "Golden Casino Club (Bellfruit) (set 3, UK) (Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2gcclb2p	, sc2gcclb	,  scorpion2		, drwho		, drwho		, 0,		 "BFM",   "Golden Casino Club (Bellfruit) (set 3, UK, Protocol) (Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2gcclb3	, sc2gcclb	,  scorpion2		, drwho		, drwho		, 0,		 "BFM",   "Golden Casino Club (Bellfruit) (set 4, UK) (Scorpion 2/3)", GAME_FLAGS)
+
+GAME( 199?, sc2groul	, 0			,  scorpion2		, drwho		, drwho		, 0,		 "BFM",   "Golden Roulette (Bellfruit) (set 1, UK) (Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2groulp	, sc2groul	,  scorpion2		, drwho		, drwho		, 0,		 "BFM",   "Golden Roulette (Bellfruit) (set 2, UK, Protocol) (Scorpion 2/3)", GAME_FLAGS)
+
+GAME( 199?, sc2gldsh	, 0			,  scorpion2		, drwho		, drwho		, 0,		 "BFM",   "Golden Shot (Bellfruit) (Scorpion 2/3)", GAME_FLAGS)
 GAME( 199?, sc2gtr		, 0			,  scorpion2		, drwho		, drwho		, 0,		 "BFM",   "Great Train Robbery (Bellfruit) (Scorpion 2/3)", GAME_FLAGS)
-GAME( 199?, sc2heypr		, 0			,  scorpion2		, drwho		, drwho		, 0,		 "BFM",   "Hey Presto (Bellfruit) (Scorpion 2/3)", GAME_FLAGS)
-GAME( 199?, sc2hypr		, 0			,  scorpion2		, drwho		, drwho		, 0,		 "BFM",   "Hyperactive (Bellfruit) (Scorpion 2/3)", GAME_FLAGS)
-GAME( 199?, sc2kcclb		, 0			,  scorpion2		, drwho		, drwho		, 0,		 "BFM",   "King Cash Club (Bellfruit) (Scorpion 2/3)", GAME_FLAGS)
-GAME( 199?, sc2maina		, 0			,  scorpion2		, drwho		, drwho		, 0,		 "BFM",   "Main Attraction (Bellfruit) (Scorpion 2/3)", GAME_FLAGS)
-GAME( 199?, sc2olgld		, 0			,  scorpion2		, drwho		, drwho		, 0,		 "BFM",   "Olympic Gold (Bellfruit) (Scorpion 2/3)", GAME_FLAGS)
-GAME( 199?, sc2relgm		, 0			,  scorpion2		, drwho		, drwho		, 0,		 "BFM",   "Reel Gems (Bellfruit) (Scorpion 2/3)", GAME_FLAGS)
-GAME( 199?, sc2topwk		, 0			,  scorpion2		, drwho		, drwho		, 0,		 "BFM",   "Top Wack (Bellfruit) (Scorpion 2/3)", GAME_FLAGS)
-GAME( 199?, sc2cb7		, 0			,  scorpion2		, drwho		, drwho		, 0,		 "BFM",   "Casino Bar 7 (Bellfruit) (Scorpion 2/3)", GAME_FLAGS)
-GAME( 199?, sc2cgcas		, 0			,  scorpion2		, drwho		, drwho		, 0,		 "BFM",   "Club Grand Casino (Bellfruit) (Scorpion 2/3)", GAME_FLAGS)
-GAME( 199?, sc2cvega		, 0			,  scorpion2		, drwho		, drwho		, 0,		 "BFM",   "Cash Vegas (Bellfruit) (Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2heypr	, 0			,  scorpion2		, drwho		, drwho		, 0,		 "BFM",   "Hey Presto (Bellfruit) (set 1, UK) (Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2heyprp	, sc2heypr	,  scorpion2		, drwho		, drwho		, 0,		 "BFM",   "Hey Presto (Bellfruit) (set 1, UK, Protocol) (Scorpion 2/3)", GAME_FLAGS)
 
+GAME( 199?, sc2hypr		, 0			,  scorpion2		, drwho		, drwho		, 0,		 "BFM",   "Hyperactive (Bellfruit) (set 1, UK, 10GBP Jackpot) (Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2hyprp	, sc2hypr	,  scorpion2		, drwho		, drwho		, 0,		 "BFM",   "Hyperactive (Bellfruit) (set 1, UK, 10GBP Jackpot, Protocol) (Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2hypr1	, sc2hypr	,  scorpion2		, drwho		, drwho		, 0,		 "BFM",   "Hyperactive (Bellfruit) (set 2, UK, 10GBP Jackpot) (Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2hypr1p	, sc2hypr	,  scorpion2		, drwho		, drwho		, 0,		 "BFM",   "Hyperactive (Bellfruit) (set 2, UK, 10GBP Jackpot, Protocol) (Scorpion 2/3)", GAME_FLAGS)
+
+
+GAME( 199?, sc2kcclb	, 0			,  scorpion2		, drwho		, drwho		, 0,		 "BFM",   "King Cash Club (Bellfruit) (set 1, UK) (Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2kcclbp	, sc2kcclb	,  scorpion2		, drwho		, drwho		, 0,		 "BFM",   "King Cash Club (Bellfruit) (set 1, UK, Protocol) (Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2kcclb1	, sc2kcclb	,  scorpion2		, drwho		, drwho		, 0,		 "BFM",   "King Cash Club (Bellfruit) (set 2, UK) (Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2kcclb1p	, sc2kcclb	,  scorpion2		, drwho		, drwho		, 0,		 "BFM",   "King Cash Club (Bellfruit) (set 2, UK, Protocol) (Scorpion 2/3)", GAME_FLAGS)
+
+GAME( 199?, sc2maina	, 0			,  scorpion2		, drwho		, drwho		, 0,		 "BFM",   "Main Attraction (Bellfruit) (Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2olgld	, 0			,  scorpion2		, drwho		, drwho		, 0,		 "BFM",   "Olympic Gold (Bellfruit) (set 1, UK) (Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2olgldp	, sc2olgld	,  scorpion2		, drwho		, drwho		, 0,		 "BFM",   "Olympic Gold (Bellfruit) (set 1, UK, Protocol) (Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2olgld1	, sc2olgld	,  scorpion2		, drwho		, drwho		, 0,		 "BFM",   "Olympic Gold (Bellfruit) (set 2, UK, 10GBP Jackpot) (Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2olgld1p	, sc2olgld	,  scorpion2		, drwho		, drwho		, 0,		 "BFM",   "Olympic Gold (Bellfruit) (set 2, UK, 10GBP Jackpot, Protocol) (Scorpion 2/3)", GAME_FLAGS)
+
+GAME( 199?, sc2relgm	, 0			,  scorpion2		, drwho		, drwho		, 0,		 "BFM",   "Reel Gems (Bellfruit) (set 1, UK) (Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2relgmp	, sc2relgm	,  scorpion2		, drwho		, drwho		, 0,		 "BFM",   "Reel Gems (Bellfruit) (set 1, UK, Protocol) (Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2relgm1p	, sc2relgm	,  scorpion2		, drwho		, drwho		, 0,		 "BFM",   "Reel Gems (Bellfruit) (set 2, UK, Protocol) (Scorpion 2/3)", GAME_FLAGS)
+
+GAME( 199?, sc2topwk	, 0			,  scorpion2		, drwho		, drwho		, 0,		 "BFM",   "Top Wack (Bellfruit) (set 1, UK, 10GBP Jackpot, 1st Triennial) (Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2topwkp	, sc2topwk	,  scorpion2		, drwho		, drwho		, 0,		 "BFM",   "Top Wack (Bellfruit) (set 1, UK, 10GBP Jackpot, 1st Triennial, Protocol) (Scorpion 2/3)", GAME_FLAGS)
+
+GAME( 199?, sc2cb7		, 0			,  scorpion2		, drwho		, drwho		, 0,		 "BFM",   "Casino Bar 7 (Bellfruit) (set 1, UK) (Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2cb7p		, sc2cb7	,  scorpion2		, drwho		, drwho		, 0,		 "BFM",   "Casino Bar 7 (Bellfruit) (set 1, UK, Protocol) (Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2cb71		, sc2cb7	,  scorpion2		, drwho		, drwho		, 0,		 "BFM",   "Casino Bar 7 (Bellfruit) (set 2, UK, All Cash) (Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2cb72		, sc2cb7	,  scorpion2		, drwho		, drwho		, 0,		 "BFM",   "Casino Bar 7 (Bellfruit) (set 3, UK, 10GBP Jackpot) (Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2cb72p	, sc2cb7	,  scorpion2		, drwho		, drwho		, 0,		 "BFM",   "Casino Bar 7 (Bellfruit) (set 3, UK, 10GBP Jackpot, Protocol) (Scorpion 2/3)", GAME_FLAGS)
+
+GAME( 199?, sc2cgcas	, 0			,  scorpion2		, drwho		, drwho		, 0,		 "BFM",   "Club Grand Casino (Bellfruit) (set 1, UK) (Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2cgcasp	, sc2cgcas	,  scorpion2		, drwho		, drwho		, 0,		 "BFM",   "Club Grand Casino (Bellfruit) (set 1, UK, Protocol) (Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2cgcas1	, sc2cgcas	,  scorpion2		, drwho		, drwho		, 0,		 "BFM",   "Club Grand Casino (Bellfruit) (set 2, UK, 250GBP Jackpot) (Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2cgcas1p	, sc2cgcas	,  scorpion2		, drwho		, drwho		, 0,		 "BFM",   "Club Grand Casino (Bellfruit) (set 2, UK, 250GBP Jackpot, Protocol) (Scorpion 2/3)", GAME_FLAGS)
+
+GAME( 199?, sc2cvega	, 0			,  scorpion2		, drwho		, drwho		, 0,		 "BFM",   "Cash Vegas (Bellfruit) (set 1, UK) (Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2cvega1	, sc2cvega	,  scorpion2		, drwho		, drwho		, 0,		 "BFM",   "Cash Vegas (Bellfruit) (set 2, UK, 10GBP Jackpot, 3rd Triennial) (Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2cvega1p	, sc2cvega	,  scorpion2		, drwho		, drwho		, 0,		 "BFM",   "Cash Vegas (Bellfruit) (set 2, UK, 10GBP Jackpot, 3rd Triennial, Protocol) (Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2cvega2	, sc2cvega	,  scorpion2		, drwho		, drwho		, 0,		 "BFM",   "Cash Vegas (Bellfruit) (set 3, UK, 8GBP Jackpot) (Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2cvega2p	, sc2cvega	,  scorpion2		, drwho		, drwho		, 0,		 "BFM",   "Cash Vegas (Bellfruit) (set 3, UK, 8GBP Jackpot, Protocol) (Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2cvega3	, sc2cvega	,  scorpion2		, drwho		, drwho		, 0,		 "BFM",   "Cash Vegas (Bellfruit) (set 4, UK, 10GBP Jackpot) (Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2cvega3p	, sc2cvega	,  scorpion2		, drwho		, drwho		, 0,		 "BFM",   "Cash Vegas (Bellfruit) (set 4, UK, 10GBP Jackpot, Protocol) (Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2cvega4p	, sc2cvega	,  scorpion2		, drwho		, drwho		, 0,		 "BFM",   "Cash Vegas (Bellfruit) (set 5, UK, 10GBP Jackpot, Protocol) (Scorpion 2/3)", GAME_FLAGS)
 
 // Games with Dot Matrix Displays */
 
 GAME( 1996, sc2luvv		, 0			,  scorpion2_dm01	, luvjub	, luvjub	, 0,		 "BFM",      "Luvvly Jubbly (UK Multisite 10/25p, Game Card 95-750-808) (Scorpion 2/3)", GAME_NOT_WORKING|GAME_REQUIRES_ARTWORK|GAME_MECHANICAL)
+GAME( 1996, sc2luvv1	, sc2luvv	,  scorpion2_dm01	, luvjub	, luvjub	, 0,		 "BFM",      "Luvvly Jubbly (set 2, UK, Arcade, 10GBP Jackpot) (Scorpion 2/3)", GAME_NOT_WORKING|GAME_REQUIRES_ARTWORK|GAME_MECHANICAL)
+GAME( 1996, sc2luvv1p	, sc2luvv	,  scorpion2_dm01	, luvjub	, luvjub	, 0,		 "BFM",      "Luvvly Jubbly (set 2, UK, Arcade, 10GBP Jackpot, Protocol) (Scorpion 2/3)", GAME_NOT_WORKING|GAME_REQUIRES_ARTWORK|GAME_MECHANICAL)
+GAME( 1996, sc2luvv2	, sc2luvv	,  scorpion2_dm01	, luvjub	, luvjub	, 0,		 "BFM",      "Luvvly Jubbly (set 3, UK, Multisite) (Scorpion 2/3)", GAME_NOT_WORKING|GAME_REQUIRES_ARTWORK|GAME_MECHANICAL)
+GAME( 1996, sc2luvv2p	, sc2luvv	,  scorpion2_dm01	, luvjub	, luvjub	, 0,		 "BFM",      "Luvvly Jubbly (set 3, UK, Multisite, Protocol) (Scorpion 2/3)", GAME_NOT_WORKING|GAME_REQUIRES_ARTWORK|GAME_MECHANICAL)
+GAME( 1996, sc2luvv3	, sc2luvv	,  scorpion2_dm01	, luvjub	, luvjub	, 0,		 "BFM",      "Luvvly Jubbly (set 4, UK, Arcade) (Scorpion 2/3)", GAME_NOT_WORKING|GAME_REQUIRES_ARTWORK|GAME_MECHANICAL)
+GAME( 1996, sc2luvv4	, sc2luvv	,  scorpion2_dm01	, luvjub	, luvjub	, 0,		 "BFM",      "Luvvly Jubbly (set 5, UK, Arcade) (Scorpion 2/3)", GAME_NOT_WORKING|GAME_REQUIRES_ARTWORK|GAME_MECHANICAL)
+GAME( 1996, sc2luvv5p	, sc2luvv	,  scorpion2_dm01	, luvjub	, luvjub	, 0,		 "BFM",      "Luvvly Jubbly (set 6, UK, Protocol) (Scorpion 2/3)", GAME_NOT_WORKING|GAME_REQUIRES_ARTWORK|GAME_MECHANICAL)
+GAME( 1996, sc2luvv6p	, sc2luvv	,  scorpion2_dm01	, luvjub	, luvjub	, 0,		 "BFM",      "Luvvly Jubbly (set 7, UK, Protocol) (Scorpion 2/3)", GAME_NOT_WORKING|GAME_REQUIRES_ARTWORK|GAME_MECHANICAL)
+GAME( 1996, sc2luvv7p	, sc2luvv	,  scorpion2_dm01	, luvjub	, luvjub	, 0,		 "BFM",      "Luvvly Jubbly (set 8, UK, Protocol) (Scorpion 2/3)", GAME_NOT_WORKING|GAME_REQUIRES_ARTWORK|GAME_MECHANICAL)
+
+
 GAME( 1996, sc2cpe		, 0			,  scorpion2_dm01	, cpeno1	, cpeno1	, 0,		 "BFM",      "Club Public Enemy No.1 (UK, Game Card 95-750-846) (Scorpion 2/3)", GAME_NOT_WORKING|GAME_REQUIRES_ARTWORK|GAME_MECHANICAL)
-GAME( 199?, sc2town		, 0			,  scorpion2_dm01	, drwho		, drwho		, 0,		 "BFM",      "Round The Town (Bellfruit) (Scorpion 2/3)", GAME_FLAGS)
-GAME( 199?, sc2ofool	, 0			,  scorpion2_dm01	, drwho		, drwho		, 0,		 "BFM",      "Only Fools & Horses (Bellfruit) (Scorpion 2/3)", GAME_FLAGS)
-GAME( 199?, sc2ptytm	, 0			,  scorpion2_dm01	, drwho		, drwho		, 0,		 "BFM",      "Party Time (Bellfruit) (Scorpion 2/3)", GAME_FLAGS)
-GAME( 199?, sc2cops		, 0			,  scorpion2_dm01	, drwho		, drwho		, 0,		 "BFM",      "Cops 'n' Robbers (Bellfruit) (Scorpion 2/3)", GAME_FLAGS)
-GAME( 199?, sc2copcl	, 0			,  scorpion2_dm01	, drwho		, drwho		, 0,		 "BFM",      "Cops 'n' Robbers Club (Bellfruit) (Scorpion 2/3)", GAME_FLAGS)
-GAME( 199?, sc2copdc	, 0			,  scorpion2_dm01	, drwho		, drwho		, 0,		 "BFM",      "Cops 'n' Robbers Club Deluxe (Bellfruit) (Scorpion 2/3)", GAME_FLAGS)
+GAME( 1996, sc2cpep		, sc2cpe	,  scorpion2_dm01	, cpeno1	, cpeno1	, 0,		 "BFM",      "Club Public Enemy No.1 (set 2, UK, Protocol) (Scorpion 2/3)", GAME_NOT_WORKING|GAME_REQUIRES_ARTWORK|GAME_MECHANICAL)
+GAME( 1996, sc2cpe1		, sc2cpe	,  scorpion2_dm01	, cpeno1	, cpeno1	, 0,		 "BFM",      "Club Public Enemy No.1 (set 3, UK) (Scorpion 2/3)", GAME_NOT_WORKING|GAME_REQUIRES_ARTWORK|GAME_MECHANICAL)
+GAME( 1996, sc2cpe1p	, sc2cpe	,  scorpion2_dm01	, cpeno1	, cpeno1	, 0,		 "BFM",      "Club Public Enemy No.1 (set 3, UK, Protocol) (Scorpion 2/3)", GAME_NOT_WORKING|GAME_REQUIRES_ARTWORK|GAME_MECHANICAL)
+GAME( 1996, sc2cpe2		, sc2cpe	,  scorpion2_dm01	, cpeno1	, cpeno1	, 0,		 "BFM",      "Club Public Enemy No.1 (set 4, UK) (Scorpion 2/3)", GAME_NOT_WORKING|GAME_REQUIRES_ARTWORK|GAME_MECHANICAL)
+GAME( 1996, sc2cpe2p	, sc2cpe	,  scorpion2_dm01	, cpeno1	, cpeno1	, 0,		 "BFM",      "Club Public Enemy No.1 (set 4, UK, Protocol) (Scorpion 2/3)", GAME_NOT_WORKING|GAME_REQUIRES_ARTWORK|GAME_MECHANICAL)
+GAME( 1996, sc2cpe3		, sc2cpe	,  scorpion2_dm01	, cpeno1	, cpeno1	, 0,		 "BFM",      "Club Public Enemy No.1 (set 5, UK) (Scorpion 2/3)", GAME_NOT_WORKING|GAME_REQUIRES_ARTWORK|GAME_MECHANICAL)
+GAME( 1996, sc2cpe3p	, sc2cpe	,  scorpion2_dm01	, cpeno1	, cpeno1	, 0,		 "BFM",      "Club Public Enemy No.1 (set 5, UK, Protocol) (Scorpion 2/3)", GAME_NOT_WORKING|GAME_REQUIRES_ARTWORK|GAME_MECHANICAL)
+GAME( 1996, sc2cpe4		, sc2cpe	,  scorpion2_dm01	, cpeno1	, cpeno1	, 0,		 "BFM",      "Club Public Enemy No.1 (set 6, UK) (Scorpion 2/3)", GAME_NOT_WORKING|GAME_REQUIRES_ARTWORK|GAME_MECHANICAL)
+GAME( 1996, sc2cpe5p	, sc2cpe	,  scorpion2_dm01	, cpeno1	, cpeno1	, 0,		 "BFM",      "Club Public Enemy No.1 (set 7, UK, Protocol) (Scorpion 2/3)", GAME_NOT_WORKING|GAME_REQUIRES_ARTWORK|GAME_MECHANICAL)
+
+GAME( 199?, sc2town		, 0			,  scorpion2_dm01	, drwho		, drwho		, 0,		 "BFM",      "Round The Town (Bellfruit) (set 1) (Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2townp	, sc2town	,  scorpion2_dm01	, drwho		, drwho		, 0,		 "BFM",      "Round The Town (Bellfruit) (set 1, Protocol) (Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2town1	, sc2town	,  scorpion2_dm01	, drwho		, drwho		, 0,		 "BFM",      "Round The Town (Bellfruit) (set 2) (Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2town1p	, sc2town	,  scorpion2_dm01	, drwho		, drwho		, 0,		 "BFM",      "Round The Town (Bellfruit) (set 2, Protocol) (Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2town2	, sc2town	,  scorpion2_dm01	, drwho		, drwho		, 0,		 "BFM",      "Round The Town (Bellfruit) (set 3) (Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2town3	, sc2town	,  scorpion2_dm01	, drwho		, drwho		, 0,		 "BFM",      "Round The Town (Bellfruit) (set 4) (Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2town3p	, sc2town	,  scorpion2_dm01	, drwho		, drwho		, 0,		 "BFM",      "Round The Town (Bellfruit) (set 4, Protocol) (Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2town4	, sc2town	,  scorpion2_dm01	, drwho		, drwho		, 0,		 "BFM",      "Round The Town (Bellfruit) (set 5) (Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2town5	, sc2town	,  scorpion2_dm01	, drwho		, drwho		, 0,		 "BFM",      "Round The Town (Bellfruit) (set 6) (Scorpion 2/3)", GAME_FLAGS)
+
+GAME( 199?, sc2ofool	, 0			,  scorpion2_dm01	, drwho		, drwho		, 0,		 "BFM",      "Only Fools & Horses (Bellfruit) (set 1) (Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2ofool1	, sc2ofool	,  scorpion2_dm01	, drwho		, drwho		, 0,		 "BFM",      "Only Fools & Horses (Bellfruit) (set 2) (Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2ofool2	, sc2ofool	,  scorpion2_dm01	, drwho		, drwho		, 0,		 "BFM",      "Only Fools & Horses (Bellfruit) (set 3) (Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2ofool3	, sc2ofool	,  scorpion2_dm01	, drwho		, drwho		, 0,		 "BFM",      "Only Fools & Horses (Bellfruit) (set 4) (Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2ofool4	, sc2ofool	,  scorpion2_dm01	, drwho		, drwho		, 0,		 "BFM",      "Only Fools & Horses (Bellfruit) (set 5) (Scorpion 2/3)", GAME_FLAGS)
+
+GAME( 199?, sc2ptytm	, 0			,  scorpion2_dm01	, drwho		, drwho		, 0,		 "BFM",      "Party Time (Bellfruit) (set 1) (Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2ptytm1	, sc2ptytm	,  scorpion2_dm01	, drwho		, drwho		, 0,		 "BFM",      "Party Time (Bellfruit) (set 2) (Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2ptytm1p	, sc2ptytm	,  scorpion2_dm01	, drwho		, drwho		, 0,		 "BFM",      "Party Time (Bellfruit) (set 2, Protocol) (Scorpion 2/3)", GAME_FLAGS)
+
+GAME( 199?, sc2cops		, 0			,  scorpion2_dm01	, drwho		, drwho		, 0,		 "BFM",      "Cops 'n' Robbers (Bellfruit) (set 1) (Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2copsp	, sc2cops	,  scorpion2_dm01	, drwho		, drwho		, 0,		 "BFM",      "Cops 'n' Robbers (Bellfruit) (set 1, Protocol)  (Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2cops1	, sc2cops	,  scorpion2_dm01	, drwho		, drwho		, 0,		 "BFM",      "Cops 'n' Robbers (Bellfruit) (set 2) (Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2cops1p	, sc2cops	,  scorpion2_dm01	, drwho		, drwho		, 0,		 "BFM",      "Cops 'n' Robbers (Bellfruit) (set 2, Protocol)  (Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2cops2	, sc2cops	,  scorpion2_dm01	, drwho		, drwho		, 0,		 "BFM",      "Cops 'n' Robbers (Bellfruit) (set 3) (Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2cops3	, sc2cops	,  scorpion2_dm01	, drwho		, drwho		, 0,		 "BFM",      "Cops 'n' Robbers (Bellfruit) (set 4)  (Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2cops3p	, sc2cops	,  scorpion2_dm01	, drwho		, drwho		, 0,		 "BFM",      "Cops 'n' Robbers (Bellfruit) (set 4, Protocol)  (Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2cops4	, sc2cops	,  scorpion2_dm01	, drwho		, drwho		, 0,		 "BFM",      "Cops 'n' Robbers (Bellfruit) (set 5) (Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2cops5	, sc2cops	,  scorpion2_dm01	, drwho		, drwho		, 0,		 "BFM",      "Cops 'n' Robbers (Bellfruit) (set 6)  (Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2copsc	, sc2cops	,  scorpion2_dm01	, drwho		, drwho		, 0,		 "BFM",      "Casino Cops 'n' Robbers (Bellfruit) (set 1) (Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2copscp	, sc2cops	,  scorpion2_dm01	, drwho		, drwho		, 0,		 "BFM",      "Casino Cops 'n' Robbers (Bellfruit) (set 1, Protocol)  (Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2copsc1	, sc2cops	,  scorpion2_dm01	, drwho		, drwho		, 0,		 "BFM",      "Casino Cops 'n' Robbers (Bellfruit) (set 2) (Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2copsc1p	, sc2cops	,  scorpion2_dm01	, drwho		, drwho		, 0,		 "BFM",      "Casino Cops 'n' Robbers (Bellfruit) (set 2, Protocol)  (Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2copsc2	, sc2cops	,  scorpion2_dm01	, drwho		, drwho		, 0,		 "BFM",      "Casino Cops 'n' Robbers (Bellfruit) (set 3) (Scorpion 2/3)", GAME_FLAGS)
+
+GAME( 199?, sc2copdc	, 0			,  scorpion2_dm01	, drwho		, drwho		, 0,		 "BFM",      "Cops 'n' Robbers Club Deluxe (Bellfruit) (set 1, UK, 250GBP Jackpot) (Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2copdcp	, sc2copdc	,  scorpion2_dm01	, drwho		, drwho		, 0,		 "BFM",      "Cops 'n' Robbers Club Deluxe (Bellfruit) (set 1, UK, 250GBP Jackpot, Protocol) (Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2copdc1	, sc2copdc	,  scorpion2_dm01	, drwho		, drwho		, 0,		 "BFM",      "Cops 'n' Robbers Club Deluxe (Bellfruit) (set 2, UK, 250GBP Jackpot) (Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2copdc1p	, sc2copdc	,  scorpion2_dm01	, drwho		, drwho		, 0,		 "BFM",      "Cops 'n' Robbers Club Deluxe (Bellfruit) (set 2, UK, 250GBP Jackpot, Protocol) (Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2copdc2	, sc2copdc	,  scorpion2_dm01	, drwho		, drwho		, 0,		 "BFM",      "Cops 'n' Robbers Club Deluxe (Bellfruit) (set 3, UK, 250GBP Jackpot) (Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2copdc2p	, sc2copdc	,  scorpion2_dm01	, drwho		, drwho		, 0,		 "BFM",      "Cops 'n' Robbers Club Deluxe (Bellfruit) (set 3, UK, 250GBP Jackpot, Protocol) (Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2copdc3	, sc2copdc	,  scorpion2_dm01	, drwho		, drwho		, 0,		 "BFM",      "Cops 'n' Robbers Club Deluxe (Bellfruit) (set 4, UK, 250GBP Jackpot) (Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2copdc3p	, sc2copdc	,  scorpion2_dm01	, drwho		, drwho		, 0,		 "BFM",      "Cops 'n' Robbers Club Deluxe (Bellfruit) (set 4, UK, 250GBP Jackpot, Protocol) (Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2copdc4	, sc2copdc	,  scorpion2_dm01	, drwho		, drwho		, 0,		 "BFM",      "Cops 'n' Robbers Club Deluxe (Bellfruit) (set 5, UK, 200GBP Jackpot?) (Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2copdc4p	, sc2copdc	,  scorpion2_dm01	, drwho		, drwho		, 0,		 "BFM",      "Cops 'n' Robbers Club Deluxe (Bellfruit) (set 5, UK, 200GBP Jackpot?, Protocol) (Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2copdc5	, sc2copdc	,  scorpion2_dm01	, drwho		, drwho		, 0,		 "BFM",      "Cops 'n' Robbers Club Deluxe (Bellfruit) (set 6, UK, 200GBP Jackpot) (Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2copdc5p	, sc2copdc	,  scorpion2_dm01	, drwho		, drwho		, 0,		 "BFM",      "Cops 'n' Robbers Club Deluxe (Bellfruit) (set 6, UK, 200GBP Jackpot, Protocol) (Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2copdc6	, sc2copdc	,  scorpion2_dm01	, drwho		, drwho		, 0,		 "BFM",      "Cops 'n' Robbers Club Deluxe (Bellfruit) (set 7, UK) (Scorpion 2/3)", GAME_FLAGS)
+
 GAME( 199?, sc2prom		, 0			,  scorpion2_dm01	, drwho		, drwho		, 0,		 "BFM",      "Along The Prom (Bellfruit) (Scorpion 2/3)", GAME_FLAGS)
-GAME( 199?, sc2prem		, 0			,  scorpion2_dm01	, drwho		, drwho		, 0,		 "BFM",      "Premier Club Manager (Bellfruit) (Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2prem		, 0			,  scorpion2_dm01	, drwho		, drwho		, 0,		 "BFM",      "Premier Club Manager (Bellfruit) (set 1, UK, 250GBP Jackpot) (Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2premp	, sc2prem	,  scorpion2_dm01	, drwho		, drwho		, 0,		 "BFM",      "Premier Club Manager (Bellfruit) (set 1, UK, 250GBP Jackpot, Protocol) (Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2prem1	, sc2prem	,  scorpion2_dm01	, drwho		, drwho		, 0,		 "BFM",      "Premier Club Manager (Bellfruit) (set 2, UK) (Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2prem1p	, sc2prem	,  scorpion2_dm01	, drwho		, drwho		, 0,		 "BFM",      "Premier Club Manager (Bellfruit) (set 2, UK, Protocol) (Scorpion 2/3)", GAME_FLAGS)
+GAME( 199?, sc2prem2	, sc2prem	,  scorpion2_dm01	, drwho		, drwho		, 0,		 "BFM",      "Premier Club Manager (Bellfruit) (set 3, UK) (Scorpion 2/3)", GAME_FLAGS)
 
diff -Nru src-old/mame/drivers/bigstrkb.c src/mame/drivers/bigstrkb.c
--- src-old/mame/drivers/bigstrkb.c	2012-01-12 23:19:49.000000000 +0100
+++ src/mame/drivers/bigstrkb.c	2012-03-25 15:56:49.000000000 +0200
@@ -257,6 +257,39 @@
 	ROM_LOAD( "footgaa.009", 0x00000, 0x40000, CRC(19bf0896) SHA1(30c8e030d7dbcd38f213010596c8f9c5b8089f62) )
 ROM_END
 
+// same as bigstrkb, but less buggy/better presentation, and teams are Italian league instead of international
+ROM_START( bigstrkba )
+	ROM_REGION( 0x80000, "maincpu", 0 ) /* 68000 Code */
+    ROM_LOAD16_BYTE( "15.cpu16", 0x000000, 0x040000, CRC(204551b5) SHA1(bfc8d284801a2c11677431287bc2e5b8ba7737db) )
+    ROM_LOAD16_BYTE( "16.cpu17", 0x000001, 0x040000, CRC(3ba6997b) SHA1(86c0318a48b42b4622f3397c55584e0779e4f626) )
+
+	ROM_REGION( 0x40000, "gfx1", 0  ) /* 8x8x4 FG Tiles */
+    ROM_LOAD( "5.bin", 0x000000, 0x010000, CRC(f51ea151) SHA1(fd80280fa99cd08b9f458a4d4078ce59a926b4bc) )
+    ROM_LOAD( "6.bin", 0x010000, 0x010000, CRC(754d750e) SHA1(d0a6be6d373e95404733c125126bbeeed03e370e) )
+    ROM_LOAD( "7.bin", 0x020000, 0x010000, CRC(fbc52546) SHA1(daae9451629b67d532dfd4825b552944e1c585d8) )
+    ROM_LOAD( "8.bin", 0x030000, 0x010000, CRC(62c63eaa) SHA1(4a408703a3d70159d78b0c213ff52a95a8a07884) )
+
+	ROM_REGION( 0x200000, "gfx2", ROMREGION_INVERT  ) /* 16x16x4 BG Tiles */
+    ROM_LOAD( "1.bin", 0x000000, 0x080000, CRC(c4eb9746) SHA1(ed4436e79abdb043349ee20d22c5454590ab5837) )
+    ROM_LOAD( "2.bin", 0x080000, 0x080000, CRC(aa0beb78) SHA1(42cde54203cab4169099172cfce090725102e44c) )
+    ROM_LOAD( "3.bin", 0x100000, 0x080000, CRC(d02298c5) SHA1(d3da72cc4edc8a6c9c8ec76bb566ded6d0b7b453) )
+    ROM_LOAD( "4.bin", 0x180000, 0x080000, CRC(069ac008) SHA1(30b90d80177de744624e9d9618eebe5471042afd) )
+
+	ROM_REGION( 0x080000, "gfx3", ROMREGION_INVERT ) /* 16x16x4 Sprites */
+	ROM_LOAD( "footgaa.011", 0x000000, 0x20000, CRC(c3924fea) SHA1(85b6775b5aa8c518a1e169b97379a210e25e67c9) )
+    ROM_LOAD( "12.bin",      0x020000, 0x20000, CRC(8e15ea09) SHA1(e591811bb5ecb1782a77883b3ee27212fb703f22) )
+	ROM_LOAD( "footgaa.013", 0x040000, 0x20000, CRC(26ce4b7f) SHA1(4bfd1de6d73dc5e720972bba477081dba0b05ab3) )
+	ROM_LOAD( "footgaa.014", 0x060000, 0x20000, CRC(c3cfc500) SHA1(5dc5780b9977b0544601471004c656c2fd738bcd) )
+
+	ROM_REGION( 0x40000, "oki1", 0 ) /* Samples? */
+	ROM_LOAD( "footgaa.010", 0x00000, 0x40000, CRC(53014576) SHA1(7f3402b33ef5992a6ae51ce07f0fcdc267c51beb) )
+
+	ROM_REGION( 0x40000, "oki2", 0 ) /* Samples? */
+	ROM_LOAD( "footgaa.009", 0x00000, 0x40000, CRC(19bf0896) SHA1(30c8e030d7dbcd38f213010596c8f9c5b8089f62) )
+ROM_END
+
+
 /* GAME drivers */
 
 GAME( 1992, bigstrkb, bigstrik, bigstrkb, bigstrkb, 0, ROT0, "bootleg", "Big Striker (bootleg)", GAME_IMPERFECT_SOUND | GAME_NO_COCKTAIL )
+GAME( 1992, bigstrkba,bigstrik, bigstrkb, bigstrkb, 0, ROT0, "bootleg", "Big Striker (bootleg w/Italian teams)", GAME_IMPERFECT_SOUND | GAME_NO_COCKTAIL )
diff -Nru src-old/mame/drivers/bingo.c src/mame/drivers/bingo.c
--- src-old/mame/drivers/bingo.c	2011-12-23 18:44:48.000000000 +0100
+++ src/mame/drivers/bingo.c	2012-03-15 07:40:01.000000000 +0100
@@ -307,12 +307,12 @@
 GAME(19??,	topgame,		0,			splin,	splin,	splin,	ROT0,	"Splin",		"Top Game Laser L10 (Bingo)",				GAME_IS_SKELETON_MECHANICAL)
 GAME(19??,	topgamet,		topgame,	splin,	splin,	splin,	ROT0,	"Splin",		"Top Game Turbo (Bingo)",				GAME_IS_SKELETON_MECHANICAL)
 GAME(19??,	penalty,		0,			seeben,	seeben,	seeben,	ROT0,	"Seeben (Belgium)",	"Penalty (Bingo)",	GAME_IS_SKELETON_MECHANICAL)
-GAME(19??,	brooklyn,		0,			seeben,	seeben,	seeben,	ROT0,	"Seeben (Belgium)",	"Brooklyn (Bingo)",	GAME_IS_SKELETON_MECHANICAL)
-GAME(19??,	brooklyna,		brooklyn,	seeben,	seeben,	seeben,	ROT0,	"Seeben (Belgium)",	"Brooklyn (alternate set)(Bingo)",	GAME_IS_SKELETON_MECHANICAL)
+GAME(19??,	brooklyn,		0,			seeben,	seeben,	seeben,	ROT0,	"Seeben (Belgium)",	"Brooklyn (set 1) (Bingo)",	GAME_IS_SKELETON_MECHANICAL)
+GAME(19??,	brooklyna,		brooklyn,	seeben,	seeben,	seeben,	ROT0,	"Seeben (Belgium)",	"Brooklyn (set 2) (Bingo)",	GAME_IS_SKELETON_MECHANICAL)
 GAME(19??,	newdixie,		0,			seeben,	seeben,	seeben,	ROT0,	"Seeben (Belgium)",	"New Dixieland (Bingo)",	GAME_IS_SKELETON_MECHANICAL)
 GAME(19??,	superdix,		0,			seeben,	seeben,	seeben,	ROT0,	"Seeben (Belgium)",	"Super Dixieland (Bingo)",	GAME_IS_SKELETON_MECHANICAL)
 GAME(19??,	cntine31,		0,			seeben,	seeben,	seeben,	ROT0,	"Seeben (Belgium)",	"Continental 3 in 1 (Bingo)",				GAME_IS_SKELETON_MECHANICAL)
 GAME(19??,	domino2,		0,			seeben,	seeben,	seeben,	ROT0,	"Seeben (Belgium)",	"Domino II (Bingo)",				GAME_IS_SKELETON_MECHANICAL)
 GAME(19??,	tripjok,		0,			seeben,	seeben,	seeben,	ROT0,	"Seeben (Belgium)",	"Triple Joker (Bingo)",				GAME_IS_SKELETON_MECHANICAL)
-GAME(19??,	ggate,			0,			seeben,	seeben,	seeben,	ROT0,	"Seeben (Belgium)",	"Golden Gate (Bingo)",				GAME_IS_SKELETON_MECHANICAL)
-GAME(19??,	ggatea,			ggate,		seeben,	seeben,	seeben,	ROT0,	"Seeben (Belgium)",	"Golden Gate (alternate set)(Bingo)",				GAME_IS_SKELETON_MECHANICAL)
+GAME(19??,	ggate,			0,			seeben,	seeben,	seeben,	ROT0,	"Seeben (Belgium)",	"Golden Gate (set 1) (Bingo)",				GAME_IS_SKELETON_MECHANICAL)
+GAME(19??,	ggatea,			ggate,		seeben,	seeben,	seeben,	ROT0,	"Seeben (Belgium)",	"Golden Gate (set 2) (Bingo)",				GAME_IS_SKELETON_MECHANICAL)
diff -Nru src-old/mame/drivers/bublbobl.c src/mame/drivers/bublbobl.c
--- src-old/mame/drivers/bublbobl.c	2012-01-12 23:19:49.000000000 +0100
+++ src/mame/drivers/bublbobl.c	2012-03-25 15:56:49.000000000 +0200
@@ -1377,6 +1377,34 @@
 	ROM_LOAD( "pal16l8.u4",  0x0400, 0x0104, CRC(077d20a8) SHA1(8e568ffd6f66c3dd61708dd0f3be9c2ed488ae4b) )
 ROM_END
 
+ROM_START( boblbobl2 )
+	ROM_REGION( 0x30000, "maincpu", 0 )
+    ROM_LOAD( "cpu2-3.bin",   0x00000, 0x08000, CRC(2d9107b6) SHA1(ab1a4a20f4b533cd06cc458668f407a8a14c9d70) )
+	/* ROMs banked at 8000-bfff */
+	ROM_LOAD( "bb5",          0x10000, 0x08000, CRC(13118eb1) SHA1(5a5da40c2cc82420f70bc58ffa32de1088c6c82f) )
+    ROM_LOAD( "cpu2-4.bin",   0x18000, 0x08000, CRC(3f9fed10) SHA1(1cc18a58d9a27495048825836accfa81ebbc0c56) )
+	/* 20000-2ffff empty */
+
+	ROM_REGION( 0x10000, "slave", 0 )	/* 64k for the second CPU */
+	ROM_LOAD( "a78-08.37",    0x0000, 0x08000, CRC(ae11a07b) SHA1(af7a335c8da637103103cc274e077f123908ebb7) )
+
+	ROM_REGION( 0x10000, "audiocpu", 0 )	/* 64k for the third CPU */
+	ROM_LOAD( "a78-07.46",    0x0000, 0x08000, CRC(4f9a26e8) SHA1(3105b34b88a7134493c2b3f584729f8b0407a011) )
+
+	ROM_REGION( 0x80000, "gfx1", ROMREGION_INVERT )
+    ROM_LOAD( "gfx7.bin",     0x00000, 0x10000, CRC(702f61c0) SHA1(2f294ab2b0286736a64ea2bfc95d855aa5b41ada) )
+    ROM_LOAD( "gfx8.bin",     0x01000, 0x10000, CRC(677840e8) SHA1(995b2125ca18910d7d4b96078f4ecb17465c4151) )
+	ROM_LOAD( "a78-13.16",    0x20000, 0x08000, CRC(d0af35c5) SHA1(c5a89f4d73acc0db86654540b3abfd77b3757db5) )
+	ROM_LOAD( "a78-14.17",    0x28000, 0x08000, CRC(7b5369a8) SHA1(1307b26d80e6f36ebe6c442bebec41d20066eaf9) )   // match
+	/* 0x30000-0x3ffff empty */
+    ROM_LOAD( "gfx10.bin",    0x50000, 0x10000, CRC(d370f499) SHA1(94ce157ff1a53fabf08abe5467531b94a56666a5) )
+    ROM_LOAD( "gfx11.bin",    0x60000, 0x10000, CRC(76f2b367) SHA1(3e357a5642c8747df77a995057cecdf96f3130ab) )
+	ROM_LOAD( "a78-20.35",    0x68000, 0x08000, CRC(9ef863ad) SHA1(29f91b5a3765e4d6e6c3382db1d8d8297b6e56c8) )    // match
+	/* 0x70000-0x7ffff empty */
+
+	ROM_REGION( 0x0100, "proms", 0 )
+	ROM_LOAD( "a71-25.41",    0x0000, 0x0100, CRC(2d0f8545) SHA1(089c31e2f614145ef2743164f7b52ae35bc06808) )	/* video timing */
+ROM_END
 
 ROM_START( sboblboa )
 	ROM_REGION( 0x30000, "maincpu", 0 )
@@ -1587,6 +1615,7 @@
 GAME( 1986, bublboblr1, bublbobl, bublbobl, bublbobl, bublbobl, ROT0,  "Taito America Corporation (Romstar license)", "Bubble Bobble (US)", GAME_SUPPORTS_SAVE )
 
 GAME( 1986, boblbobl,   bublbobl, boblbobl, boblbobl, bublbobl, ROT0,  "bootleg", "Bobble Bobble", GAME_SUPPORTS_SAVE )
+GAME( 1986, boblbobl2,  bublbobl, boblbobl, boblbobl, bublbobl, ROT0,  "bootleg", "Bobble Bobble (set 2)", GAME_SUPPORTS_SAVE | GAME_NOT_WORKING )
 GAME( 1986, sboblboa,   bublbobl, boblbobl, boblbobl, bublbobl, ROT0,  "bootleg", "Super Bobble Bobble (set 1)", GAME_SUPPORTS_SAVE )
 GAME( 1986, sboblbob,   bublbobl, boblbobl, sboblbob, bublbobl, ROT0,  "bootleg", "Super Bobble Bobble (set 2)", GAME_SUPPORTS_SAVE )
 GAME( 1986, bub68705,   bublbobl, bub68705, bublbobl, bublbobl, ROT0,  "bootleg", "Bubble Bobble (bootleg with 68705)", GAME_SUPPORTS_SAVE )
diff -Nru src-old/mame/drivers/by35.c src/mame/drivers/by35.c
--- src-old/mame/drivers/by35.c	2011-12-23 18:44:48.000000000 +0100
+++ src/mame/drivers/by35.c	2012-03-15 07:40:01.000000000 +0100
@@ -1301,8 +1301,8 @@
 GAME( 1981, flashgdnv, flashgdn,	by35, by35, by35, ROT0, "Bally","Flash Gordon (Vocalizer sound)", GAME_IS_SKELETON_MECHANICAL)
 GAME( 1980, frontier, 0,		by35, by35, by35, ROT0, "Bally","Frontier", GAME_IS_SKELETON_MECHANICAL)
 GAME( 1979, futurspa, 0,		by35, by35, by35, ROT0, "Bally","Future Spa", GAME_IS_SKELETON_MECHANICAL)
-GAME( 1983, goldball, 0,		by35, by35, by35, ROT0, "Bally","Gold Ball", GAME_IS_SKELETON_MECHANICAL)
-GAME( 1983, goldballn, goldball,	by35, by35, by35, ROT0, "Bally / Oliver","Gold Ball (alternate set)", GAME_IS_SKELETON_MECHANICAL)
+GAME( 1983, goldball, 0,		by35, by35, by35, ROT0, "Bally","Gold Ball (set 1)", GAME_IS_SKELETON_MECHANICAL)
+GAME( 1983, goldballn, goldball,	by35, by35, by35, ROT0, "Bally / Oliver","Gold Ball (set 2)", GAME_IS_SKELETON_MECHANICAL)
 GAME( 1983, granslam, 0,		by35, by35, by35, ROT0, "Bally","Grand Slam", GAME_IS_SKELETON_MECHANICAL)
 GAME( 1983, granslam4, granslam,	by35, by35, by35, ROT0, "Bally","Grand Slam (4 Players)", GAME_IS_SKELETON_MECHANICAL)
 GAME( 1979, hglbtrtr, 0,		by35, by35, by35, ROT0, "Bally","Harlem Globetrotters On Tour", GAME_IS_SKELETON_MECHANICAL)
diff -Nru src-old/mame/drivers/cave.c src/mame/drivers/cave.c
--- src-old/mame/drivers/cave.c	2012-01-12 23:19:49.000000000 +0100
+++ src/mame/drivers/cave.c	2012-03-23 05:53:59.000000000 +0100
@@ -69,6 +69,17 @@
      PCBs were shown running (and could be played) at a Cave fan show known as Cave Festival 2006. There are
      videos of the game being played floating around the internet and on YouTube. AKA DDP-CV or DDP BLUE ROM
 
+  Dodonpachi Arrange: This version is a hack by trap15 and ment to be a tribute to the game. It is neither a
+                      long lost version or official release from Cave and therefore not suitable for MAME.
+
+     Known rom version 1.1:
+        File     CRC32    SHA1
+       ---------------------------------------------------------
+       u27.bin 44b899ae 798ec437d861b94fcd90c99a7015dd420887c788
+       u26.bin 727a09a8 91876386855f19e8a3d8d1df71dfe9b3d98e9ea9
+       u51.bin 0f3e5148 3016f4d075940feae691389606cd2aa7ac53849e
+       u62.bin 42e4c6c5 4d282f7592f5fc5e11839c57f39cae20b8422aa1
+
 ***************************************************************************/
 
 #include "emu.h"
diff -Nru src-old/mame/drivers/champbas.c src/mame/drivers/champbas.c
--- src-old/mame/drivers/champbas.c	2012-01-14 02:39:13.000000000 +0100
+++ src/mame/drivers/champbas.c	2012-03-15 07:40:01.000000000 +0100
@@ -1241,7 +1241,7 @@
 
 GAME( 1983, exctsccr,   0,        exctsccr, exctsccr, exctsccr, ROT270, "Alpha Denshi Co.", "Exciting Soccer", GAME_SUPPORTS_SAVE )
 GAME( 1983, exctsccra,  exctsccr, exctsccr, exctsccr, exctsccr, ROT270, "Alpha Denshi Co.", "Exciting Soccer (alternate music)", GAME_SUPPORTS_SAVE )
-GAME( 1983, exctsccrj,  exctsccr, exctsccr, exctsccr, exctsccr, ROT270, "Alpha Denshi Co.", "Exciting Soccer (Japan)", GAME_SUPPORTS_SAVE )
+GAME( 1983, exctsccrj,  exctsccr, exctsccr, exctsccr, exctsccr, ROT270, "Alpha Denshi Co.", "Exciting Soccer (Japan set 1)", GAME_SUPPORTS_SAVE )
 GAME( 1983, exctsccrj2, exctsccr, exctsccr, exctsccr, exctsccr, ROT270, "Alpha Denshi Co.", "Exciting Soccer (Japan set 2)", GAME_SUPPORTS_SAVE )
 GAME( 1983, exctsccrb,  exctsccr, exctsccrb,exctsccr, exctsccr, ROT270, "bootleg",          "Exciting Soccer (bootleg)", GAME_SUPPORTS_SAVE )
 GAME( 1984, exctscc2,   0,        exctsccr, exctsccr, exctsccr, ROT270, "Alpha Denshi Co.", "Exciting Soccer II", GAME_SUPPORTS_SAVE )
diff -Nru src-old/mame/drivers/chanbara.c src/mame/drivers/chanbara.c
--- src-old/mame/drivers/chanbara.c	2012-01-17 02:25:05.000000000 +0100
+++ src/mame/drivers/chanbara.c	2012-03-14 22:12:55.000000000 +0100
@@ -39,9 +39,11 @@
 ------------------------
 
  Driver by Tomasz Slanina & David Haywood
+ Inputs and Dip Switches by stephh
 
 ToDo:
  there might still be some sprite banking issues
+ support screen flipping for sprites
 
 
 ****************************************************************************************/
@@ -203,16 +205,19 @@
 	return 0;
 }
 
-static ADDRESS_MAP_START( memmap, AS_PROGRAM, 8 )
+/***************************************************************************/
+
+static ADDRESS_MAP_START( chanbara_map, AS_PROGRAM, 8 )
 	AM_RANGE(0x0000, 0x07ff) AM_RAM
 	AM_RANGE(0x0800, 0x0bff) AM_RAM_WRITE(chanbara_videoram_w) AM_BASE_MEMBER(chanbara_state, m_videoram)
 	AM_RANGE(0x0c00, 0x0fff) AM_RAM_WRITE(chanbara_colorram_w) AM_BASE_MEMBER(chanbara_state, m_colorram)
 	AM_RANGE(0x1000, 0x10ff) AM_RAM AM_BASE_MEMBER(chanbara_state, m_spriteram)
 	AM_RANGE(0x1800, 0x19ff) AM_RAM_WRITE(chanbara_videoram2_w) AM_BASE_MEMBER(chanbara_state, m_videoram2)
 	AM_RANGE(0x1a00, 0x1bff) AM_RAM_WRITE(chanbara_colorram2_w) AM_BASE_MEMBER(chanbara_state, m_colorram2)
-	AM_RANGE(0x2000, 0x2000) AM_READ_PORT("DSW0")
+	AM_RANGE(0x2000, 0x2000) AM_READ_PORT("DSW1")
 	AM_RANGE(0x2001, 0x2001) AM_READ_PORT("SYSTEM")
-	AM_RANGE(0x2003, 0x2003) AM_READ_PORT("JOY")
+	AM_RANGE(0x2002, 0x2002) AM_READ_PORT("P2")
+	AM_RANGE(0x2003, 0x2003) AM_READ_PORT("P1")
 	AM_RANGE(0x3800, 0x3801) AM_DEVREADWRITE("ymsnd", ym2203_r, ym2203_w)
 	AM_RANGE(0x4000, 0x7fff) AM_ROMBANK("bank1")
 	AM_RANGE(0x8000, 0xffff) AM_ROM
@@ -220,49 +225,43 @@
 
 /***************************************************************************/
 
+/* verified from M6809 code */
 static INPUT_PORTS_START( chanbara )
-	PORT_START ("DSW0")
-	PORT_DIPNAME( 0x01,   0x01, DEF_STR( Unused ) )
-	PORT_DIPSETTING(      0x01, DEF_STR( Off ) )
-	PORT_DIPSETTING(      0x00, DEF_STR( On ) )
-	PORT_DIPNAME( 0x02,   0x02, DEF_STR( Unused ) )
-	PORT_DIPSETTING(      0x02, DEF_STR( Off ) )
-	PORT_DIPSETTING(      0x00, DEF_STR( On ) )
-	PORT_DIPNAME( 0x04,   0x04, DEF_STR( Unused ) )
-	PORT_DIPSETTING(      0x04, DEF_STR( Off ) )
-	PORT_DIPSETTING(      0x00, DEF_STR( On ) )
-	PORT_DIPNAME( 0x08,   0x08, DEF_STR( Unused ) )
-	PORT_DIPSETTING(      0x08, DEF_STR( Off ) )
-	PORT_DIPSETTING(      0x00, DEF_STR( On ) )
-	PORT_DIPNAME( 0x10,   0x10, DEF_STR( Unused ) )
-	PORT_DIPSETTING(      0x10, DEF_STR( Off ) )
-	PORT_DIPSETTING(      0x00, DEF_STR( On ) )
-	PORT_DIPNAME( 0x20,   0x20, DEF_STR( Unused ) )
-	PORT_DIPSETTING(      0x20, DEF_STR( Off ) )
-	PORT_DIPSETTING(      0x00, DEF_STR( On ) )
-	PORT_DIPNAME( 0x40,   0x40, DEF_STR( Unused ) )
-	PORT_DIPSETTING(      0x40, DEF_STR( Off ) )
-	PORT_DIPSETTING(      0x00, DEF_STR( On ) )
-	PORT_DIPNAME( 0x80,   0x80, DEF_STR( Unused ) )
-	PORT_DIPSETTING(      0x80, DEF_STR( Off ) )
-	PORT_DIPSETTING(      0x00, DEF_STR( On ) )
+	PORT_START ("DSW1")
+	PORT_DIPNAME( 0x03, 0x03, DEF_STR( Coin_B ) )
+	PORT_DIPSETTING(    0x00, DEF_STR( 2C_1C ) )
+	PORT_DIPSETTING(    0x03, DEF_STR( 1C_1C ) )
+	PORT_DIPSETTING(    0x02, DEF_STR( 1C_2C ) )
+	PORT_DIPSETTING(    0x01, DEF_STR( 1C_3C ) )
+	PORT_DIPNAME( 0x0c, 0x0c, DEF_STR( Coin_A ) )
+	PORT_DIPSETTING(    0x00, DEF_STR( 2C_1C ) )
+	PORT_DIPSETTING(    0x0c, DEF_STR( 1C_1C ) )
+	PORT_DIPSETTING(    0x08, DEF_STR( 1C_2C ) )
+	PORT_DIPSETTING(    0x04, DEF_STR( 1C_3C ) )
+	PORT_DIPNAME( 0x10, 0x10, DEF_STR( Difficulty ) )       /* code at 0xedc0 */
+	PORT_DIPSETTING(    0x10, DEF_STR( Easy ) )
+	PORT_DIPSETTING(    0x00, DEF_STR( Hard ) )
+	PORT_DIPNAME( 0x20, 0x20, DEF_STR( Lives ) )
+	PORT_DIPSETTING(    0x00, "1" )
+	PORT_DIPSETTING(    0x20, "3" )
+	PORT_DIPNAME( 0x40, 0x40, DEF_STR( Bonus_Life ) )       /* table at 0xc249 (2 * 2 words) */
+	PORT_DIPSETTING(    0x40, "50k and 70k" )
+	PORT_DIPSETTING(    0x00, DEF_STR( None ) )
+	PORT_DIPNAME( 0x80, 0x00, DEF_STR( Cabinet ) )
+	PORT_DIPSETTING(    0x00, DEF_STR( Upright ) )
+	PORT_DIPSETTING(    0x80, DEF_STR( Cocktail ) )
 
 	PORT_START ("SYSTEM")
 	PORT_BIT( 0x01, IP_ACTIVE_LOW, IPT_START1 )
-	PORT_BIT( 0x02, IP_ACTIVE_LOW, IPT_BUTTON2	 )
-	PORT_DIPNAME( 0x04,   0x04, "2" )
-	PORT_DIPSETTING(      0x04, DEF_STR( Off ) )
-	PORT_DIPSETTING(      0x00, DEF_STR( On ) )
-	PORT_DIPNAME( 0x08,   0x08, DEF_STR( Unused ) )
-	PORT_DIPSETTING(      0x08, DEF_STR( Off ) )
-	PORT_DIPSETTING(      0x00, DEF_STR( On ) )
+	PORT_BIT( 0x02, IP_ACTIVE_LOW, IPT_START2 )
+	PORT_BIT( 0x04, IP_ACTIVE_LOW, IPT_UNKNOWN )
+	PORT_BIT( 0x08, IP_ACTIVE_LOW, IPT_UNKNOWN )
 	PORT_BIT( 0x10, IP_ACTIVE_LOW, IPT_COIN1 )
 	PORT_BIT( 0x20, IP_ACTIVE_LOW, IPT_COIN2 )
-	PORT_BIT( 0x40, IP_ACTIVE_LOW, IPT_SERVICE1 )
+	PORT_BIT( 0x40, IP_ACTIVE_LOW, IPT_SERVICE1 )           /* same coinage as COIN1 */
 	PORT_BIT( 0x80, IP_ACTIVE_HIGH, IPT_VBLANK )
 
-	/* System Port */
-	PORT_START ("JOY")
+	PORT_START ("P1")
 	PORT_BIT( 0x01, IP_ACTIVE_LOW, IPT_JOYSTICKLEFT_DOWN )
 	PORT_BIT( 0x02, IP_ACTIVE_LOW, IPT_JOYSTICKLEFT_UP )
 	PORT_BIT( 0x04, IP_ACTIVE_LOW, IPT_JOYSTICKLEFT_LEFT )
@@ -271,6 +270,16 @@
 	PORT_BIT( 0x20, IP_ACTIVE_LOW, IPT_JOYSTICKRIGHT_UP )
 	PORT_BIT( 0x40, IP_ACTIVE_LOW, IPT_JOYSTICKRIGHT_LEFT )
 	PORT_BIT( 0x80, IP_ACTIVE_LOW, IPT_JOYSTICKRIGHT_RIGHT )
+
+	PORT_START ("P2")
+	PORT_BIT( 0x01, IP_ACTIVE_LOW, IPT_JOYSTICKLEFT_DOWN )   PORT_COCKTAIL
+	PORT_BIT( 0x02, IP_ACTIVE_LOW, IPT_JOYSTICKLEFT_UP )     PORT_COCKTAIL
+	PORT_BIT( 0x04, IP_ACTIVE_LOW, IPT_JOYSTICKLEFT_LEFT )   PORT_COCKTAIL
+	PORT_BIT( 0x08, IP_ACTIVE_LOW, IPT_JOYSTICKLEFT_RIGHT )  PORT_COCKTAIL
+	PORT_BIT( 0x10, IP_ACTIVE_LOW, IPT_JOYSTICKRIGHT_DOWN )  PORT_COCKTAIL
+	PORT_BIT( 0x20, IP_ACTIVE_LOW, IPT_JOYSTICKRIGHT_UP )    PORT_COCKTAIL
+	PORT_BIT( 0x40, IP_ACTIVE_LOW, IPT_JOYSTICKRIGHT_LEFT )  PORT_COCKTAIL
+	PORT_BIT( 0x80, IP_ACTIVE_LOW, IPT_JOYSTICKRIGHT_RIGHT ) PORT_COCKTAIL
 INPUT_PORTS_END
 
 /***************************************************************************/
@@ -338,7 +347,9 @@
 	chanbara_state *state = device->machine().driver_data<chanbara_state>();
 	//printf("chanbara_ay_out_1_w %02x\n",data);
 
-	state->m_scrollhi = data & 0x03;
+	state->m_scrollhi = data & 0x01;
+
+	flip_screen_set(device->machine(), data & 0x02);
 
 	memory_set_bank(device->machine(), "bank1", (data & 0x04) >> 2);
 
@@ -387,7 +398,7 @@
 static MACHINE_CONFIG_START( chanbara, chanbara_state )
 
 	MCFG_CPU_ADD("maincpu", M6809, 12000000/8)
-	MCFG_CPU_PROGRAM_MAP(memmap)
+	MCFG_CPU_PROGRAM_MAP(chanbara_map)
 
 	MCFG_MACHINE_START(chanbara)
 	MCFG_MACHINE_RESET(chanbara)
@@ -470,4 +481,4 @@
 	memory_configure_bank(machine, "bank1", 0, 2, &bg[0x0000], 0x4000);
 }
 
-GAME( 1985, chanbara, 0,  chanbara, chanbara, chanbara, ROT270, "Data East", "Chanbara", GAME_SUPPORTS_SAVE )
+GAME( 1985, chanbara, 0,  chanbara, chanbara, chanbara, ROT270, "Data East", "Chanbara", GAME_SUPPORTS_SAVE | GAME_NO_COCKTAIL )
diff -Nru src-old/mame/drivers/chihiro.c src/mame/drivers/chihiro.c
--- src-old/mame/drivers/chihiro.c	2012-02-23 16:42:22.000000000 +0100
+++ src/mame/drivers/chihiro.c	2012-03-25 03:49:32.000000000 +0200
@@ -1227,7 +1227,7 @@
 	CHIHIRO_BIOS
 
 	DISK_REGION( "gdrom" )
-	DISK_IMAGE_READONLY( "gdx-0001", 0,  SHA1(174c72f851d0c97e8993227467f16b0781ed2f5c) )
+	DISK_IMAGE_READONLY( "gdx-0001", 0, BAD_DUMP  SHA1(174c72f851d0c97e8993227467f16b0781ed2f5c) )
 
 	ROM_REGION( 0x50, "pic", ROMREGION_ERASE)
 	ROM_LOAD("317-0348-com.data", 0x00, 0x50, CRC(d28219ef) SHA1(40dbbc092bc9f99b8d2ae67fbefacd62184f90ec) )
@@ -1237,7 +1237,7 @@
 	CHIHIRO_BIOS
 
 	DISK_REGION( "gdrom" )
-	DISK_IMAGE_READONLY( "gdx-0004a", 0, SHA1(27acd2d0680e6bafa0d052f60b4372adc37224fd) )
+	DISK_IMAGE_READONLY( "gdx-0004a", 0, BAD_DUMP SHA1(27acd2d0680e6bafa0d052f60b4372adc37224fd) )
 
 	ROM_REGION( 0x50, "pic", ROMREGION_ERASE)
 	ROM_LOAD("317-0372-com.data", 0x00, 0x50, CRC(a15c9666) SHA1(fd36c524744acb33e579ccb257c71375a5d3af67) )
@@ -1265,7 +1265,7 @@
 	CHIHIRO_BIOS
 
 	DISK_REGION( "gdrom" )
-	DISK_IMAGE_READONLY( "gdx-0012a", 0,  SHA1(d7d78ce4992cb16ee5b4ac6ca7a37c46b07e8c14) )
+	DISK_IMAGE_READONLY( "gdx-0012a", 0, BAD_DUMP  SHA1(d7d78ce4992cb16ee5b4ac6ca7a37c46b07e8c14) )
 
 	ROM_REGION( 0x50, "pic", ROMREGION_ERASE)
 	ROM_LOAD("317-0398-com.data", 0x00, 0x50, CRC(8c5391a2) SHA1(e64cadeb30c94c3cd4002630cd79cc76c7bde2ed) )
@@ -1276,7 +1276,7 @@
 	CHIHIRO_BIOS
 
 	DISK_REGION( "gdrom" )
-	DISK_IMAGE_READONLY( "gdx-0013", 0, SHA1(96b3dafcc2d2d6803fe3bf43a245d43ee5e0e5a6) )
+	DISK_IMAGE_READONLY( "gdx-0013", 0, BAD_DUMP SHA1(96b3dafcc2d2d6803fe3bf43a245d43ee5e0e5a6) )
 
 	ROM_REGION( 0x50, "pic", ROMREGION_ERASE)
 	ROM_LOAD("gdx-0013.data", 0x00, 0x50, CRC(0479c383) SHA1(7e86a037d2f9d09cec61a38cb19de510bf9482b3) )
@@ -1310,7 +1310,7 @@
 	CHIHIRO_BIOS
 
 	DISK_REGION( "gdrom" )
-	DISK_IMAGE_READONLY( "gdx-0003a", 0,  SHA1(cdfec1d2ef02ae9e29cb1462f08904177bc4c9ea) )
+	DISK_IMAGE_READONLY( "gdx-0003a", 0, BAD_DUMP  SHA1(cdfec1d2ef02ae9e29cb1462f08904177bc4c9ea) )
 
 	ROM_REGION( 0x50, "pic", ROMREGION_ERASE)
 	ROM_LOAD("317-0354-com.data", 0x00, 0x50,  CRC(df7e3217) SHA1(9f0f4bf6b15f3b6eeea81eaa27b3d25bd94110da) )
@@ -1321,7 +1321,7 @@
 	CHIHIRO_BIOS
 
 	DISK_REGION( "gdrom" )
-	DISK_IMAGE_READONLY( "gdx-0006c", 0, SHA1(505653117a73ed8b256ccf19450e7573a4dc57e9) )
+	DISK_IMAGE_READONLY( "gdx-0006c", 0, BAD_DUMP SHA1(505653117a73ed8b256ccf19450e7573a4dc57e9) )
 
 	ROM_REGION( 0x50, "pic", ROMREGION_ERASE) // key was missing
 	ROM_LOAD("gdx-0006c.pic_data", 0x00, 0x50, NO_DUMP )
@@ -1331,7 +1331,7 @@
 	CHIHIRO_BIOS
 
 	DISK_REGION( "gdrom" )
-	DISK_IMAGE_READONLY( "gdx-0007", 0, SHA1(8898a571a427936bffcecd3ef27cb79087d22798) )
+	DISK_IMAGE_READONLY( "gdx-0007", 0, BAD_DUMP SHA1(8898a571a427936bffcecd3ef27cb79087d22798) )
 
 	ROM_REGION( 0x50, "pic", ROMREGION_ERASE)
 	ROM_LOAD("gdx-0007.data", 0x00, 0x50, CRC(d2a8b31f) SHA1(e9ee2df30031826db6bc4bd91969e6680255dcf9) )
@@ -1343,7 +1343,7 @@
 	CHIHIRO_BIOS
 
 	DISK_REGION( "gdrom" )
-	DISK_IMAGE_READONLY( "gdx-0009b", 0, SHA1(e032b9fd8d5d09255592f02f7531a608e8179c9c) )
+	DISK_IMAGE_READONLY( "gdx-0009b", 0, BAD_DUMP SHA1(e032b9fd8d5d09255592f02f7531a608e8179c9c) )
 
 	ROM_REGION( 0x50, "pic", ROMREGION_ERASE)
 	ROM_LOAD("gdx-0009b.data", 0x00, 0x50, CRC(3af801f3) SHA1(e9a2558930f3f1f55d5b3c2cadad69329d931f26) )
@@ -1354,7 +1354,7 @@
 	CHIHIRO_BIOS
 
 	DISK_REGION( "gdrom" )
-	DISK_IMAGE_READONLY( "gdx-0015", 0, SHA1(259483fd211a70c23205ffd852316d616c5a2740) )
+	DISK_IMAGE_READONLY( "gdx-0015", 0, BAD_DUMP SHA1(259483fd211a70c23205ffd852316d616c5a2740) )
 
 	ROM_REGION( 0x50, "pic", ROMREGION_ERASE)
 	ROM_LOAD("317-5106-com.data", 0x00, 0x50, CRC(75c716aa) SHA1(5c2bcf3d28a80b336c6882d5aeb010d04327f8c1) )
@@ -1365,7 +1365,7 @@
 	CHIHIRO_BIOS
 
 	DISK_REGION( "gdrom" )
-	DISK_IMAGE_READONLY( "gdx-0016a", 0, SHA1(cb306df60550bbd8df312634cb97014bb39f1631) )
+	DISK_IMAGE_READONLY( "gdx-0016a", 0, BAD_DUMP SHA1(cb306df60550bbd8df312634cb97014bb39f1631) )
 
 	ROM_REGION( 0x50, "pic", ROMREGION_ERASE)
 	ROM_LOAD("317-5106-com.data", 0x00, 0x50, CRC(75c716aa) SHA1(5c2bcf3d28a80b336c6882d5aeb010d04327f8c1) )
@@ -1376,7 +1376,7 @@
 	CHIHIRO_BIOS
 
 	DISK_REGION( "gdrom" )
-	DISK_IMAGE_READONLY( "gdx-0017d", 0, SHA1(cfbbd452c8f4efe0e99f398f5521fc3574b913bb) )
+	DISK_IMAGE_READONLY( "gdx-0017d", 0, BAD_DUMP SHA1(cfbbd452c8f4efe0e99f398f5521fc3574b913bb) )
 
 	ROM_REGION( 0x50, "pic", ROMREGION_ERASE) // key was missing
 	ROM_LOAD("gdx-0017d.pic_data", 0x00, 0x50, NO_DUMP )
@@ -1386,7 +1386,7 @@
 	CHIHIRO_BIOS
 
 	DISK_REGION( "gdrom" )
-	DISK_IMAGE_READONLY( "gdx-0018a", 0, SHA1(e6f3dc8066392854ad7d83f81d3cbc81a5e340b3) )
+	DISK_IMAGE_READONLY( "gdx-0018a", 0, BAD_DUMP SHA1(e6f3dc8066392854ad7d83f81d3cbc81a5e340b3) )
 
 	ROM_REGION( 0x50, "pic", ROMREGION_ERASE)
 	ROM_LOAD("gdx-0018.data", 0x00, 0x50, CRC(1a210abd) SHA1(43a54d028315d2dfa9f8ea6fb59265e0b980b02f) )
@@ -1396,7 +1396,7 @@
 	CHIHIRO_BIOS
 
 	DISK_REGION( "gdrom" )
-	DISK_IMAGE_READONLY( "gdx-0014a", 0, SHA1(4f9656634c47631f63eab554a13d19b15558217e) )
+	DISK_IMAGE_READONLY( "gdx-0014a", 0, BAD_DUMP SHA1(4f9656634c47631f63eab554a13d19b15558217e) )
 
 	ROM_REGION( 0x4000, "pic", ROMREGION_ERASEFF)	// number was not readable on pic, please fix if known
 	ROM_LOAD( "317-0xxx-com.pic", 0x000000, 0x004000, CRC(f94cf26f) SHA1(dd4af2b52935c7b2d8cd196ec1a30c0ef0993322) )
@@ -1406,7 +1406,7 @@
 	CHIHIRO_BIOS
 
 	DISK_REGION( "gdrom" )
-	DISK_IMAGE_READONLY( "gdx-0002b", 0, SHA1(4056ebd5587d6c897f475240bc5a4075a995aa8c) )
+	DISK_IMAGE_READONLY( "gdx-0002b", 0, BAD_DUMP SHA1(4056ebd5587d6c897f475240bc5a4075a995aa8c) )
 
 	ROM_REGION( 0x4000, "pic", ROMREGION_ERASEFF)
 	ROM_LOAD( "317-0353-com.pic", 0x000000, 0x004000, CRC(1c6830b1) SHA1(75be47441783c18ee296209a34c432864deed70d) )
diff -Nru src-old/mame/drivers/cliffhgr.c src/mame/drivers/cliffhgr.c
--- src-old/mame/drivers/cliffhgr.c	2012-02-04 21:58:03.000000000 +0100
+++ src/mame/drivers/cliffhgr.c	2012-03-15 07:40:01.000000000 +0100
@@ -777,6 +777,6 @@
  *
  *************************************/
 
-GAME( 1983, cliffhgr, 0,        cliffhgr, cliffhgr,  cliff, ROT0, "Stern Electronics", "Cliff Hanger", 0)
-GAME( 1983, cliffhgra,cliffhgr, cliffhgr, cliffhgra, cliff, ROT0, "Stern Electronics", "Cliff Hanger (Alt)", 0)
+GAME( 1983, cliffhgr, 0,        cliffhgr, cliffhgr,  cliff, ROT0, "Stern Electronics", "Cliff Hanger (set 1)", 0)
+GAME( 1983, cliffhgra,cliffhgr, cliffhgr, cliffhgra, cliff, ROT0, "Stern Electronics", "Cliff Hanger (set 2)", 0)
 GAME( 1983, goaltogo, 0,        cliffhgr, goaltogo,  cliff, ROT0, "Stern Electronics", "Goal To Go", GAME_NOT_WORKING)
diff -Nru src-old/mame/drivers/cninja.c src/mame/drivers/cninja.c
--- src-old/mame/drivers/cninja.c	2012-03-11 19:17:00.000000000 +0100
+++ src/mame/drivers/cninja.c	2012-03-25 15:56:49.000000000 +0200
@@ -1508,6 +1508,45 @@
 	ROM_LOAD( "joe mac 6.samples",  0x00000,  0x80000, CRC(dbecad83) SHA1(de34653606f12d2c606ff7d1cbce993521772884) ) // 1ST AND 2ND HALF IDENTICAL
 ROM_END
 
+ROM_START( cninjabl2 )
+    ROM_REGION( 0xc0000, "maincpu", 0 ) /* 68000 code */
+    ROM_LOAD16_BYTE( "6.bin", 0x00001, 0x40000, CRC(a86ccfb7) SHA1(c4ac331d5750a35cd48e5d75f0247758b892b034) )
+    ROM_LOAD16_BYTE( "4.bin", 0x00000, 0x40000, CRC(88c7043a) SHA1(9981d10f6c88556ceda083158d9835fdeb191511) )
+    ROM_LOAD16_BYTE( "gn-00.rom",  0x80000, 0x20000, CRC(0b110b16) SHA1(a967c8aeae3f0cee1f354583cf26ee736636aaf8) )
+    ROM_LOAD16_BYTE( "gn-03.rom",  0x80001, 0x20000, CRC(1e28e697) SHA1(2313e97f3a34892dfdc338944c0f00538fcae800) )
+
+    ROM_REGION( 0x10000, "audiocpu", 0 ) /* Sound CPU */
+    ROM_LOAD( "audio-prg.3",  0x00000,  0x10000,  CRC(3eb65b6d) SHA1(e6d94223a7b98d33470ad4e387d6ce399b76ea4a) )
+
+    ROM_REGION( 0x020000, "gfx1", 0 )
+    ROM_LOAD16_BYTE( "gl-08.rom",  0x00001,  0x10000,  CRC(33a2b400) SHA1(fdb8de315f33705719c0ac03a61fb56ffbfdf597) )       /* chars */
+    ROM_LOAD16_BYTE( "gl-09.rom",  0x00000,  0x10000,  CRC(5a2d4752) SHA1(617dd10a99b5b55ca64dcdd22a0f133b0d6b770d) )
+
+    ROM_REGION( 0x080000, "gfx2", 0 )
+    ROM_LOAD( "mag-02.rom", 0x000000, 0x80000,  CRC(de89c69a) SHA1(b41bdf859854b5541c7eae7cd541b910cea1f839) )      /* tiles 3 */
+
+    ROM_REGION( 0x100000, "gfx3", 0 )
+    ROM_LOAD( "mag-00.rom", 0x000000, 0x40000,  CRC(a8f05d33) SHA1(a1330bc9ca4648219403db087622badfc632b47d) )      /* tiles 1 */
+    ROM_CONTINUE(           0x080000, 0x40000 )
+    ROM_LOAD( "mag-01.rom", 0x040000, 0x40000,  CRC(5b399eed) SHA1(490f8f9c0c557b0ba94c6019e3fe680641a0787e) )      /* tiles 2 */
+    ROM_CONTINUE(           0x0c0000, 0x40000 )
+
+    ROM_REGION( 0x200000, "gfx4", 0 )
+    ROM_LOAD16_BYTE( "mag-03.rom", 0x000000, 0x80000,  CRC(2220eb9f) SHA1(bdf0bd6e6ba375f0770b9d08a7efa32201cbb6ef) )       /* sprites */
+    ROM_LOAD16_BYTE( "mag-05.rom", 0x000001, 0x80000,  CRC(56a53254) SHA1(10940cfdc6fbe9013865107de3394ca7f782d9c7) )
+    ROM_LOAD16_BYTE( "mag-04.rom", 0x100000, 0x80000,  CRC(144b94cc) SHA1(d982508608942a714b428a2b721bf24e1627cbb6) )
+    ROM_LOAD16_BYTE( "mag-06.rom", 0x100001, 0x80000,  CRC(82d44749) SHA1(c471fa573e00c2f8ae44068439ba6d849a124c68) )
+
+    ROM_REGION( 0x40000, "oki1", 0 ) /* Oki samples */
+    ROM_LOAD( "audio-samp.2",  0x00000,  0x20000,  CRC(c6638568) SHA1(b5e38d807146b033d1a0b5fb013ac755cd4a2699) )
+    ROM_LOAD( "audio-samp.1",  0x00000,  0x10000,  CRC(7815e6ab) SHA1(3112b4e8a4008b519f73e6f2d1393ef1e620a0c5) )
+
+    ROM_REGION( 0x80000, "oki2", 0 ) /* Extra Oki samples */
+    ROM_LOAD( "audio-samp.18", 0x00000,  0x80000,  CRC(06f1bc18) SHA1(fe551d78466dc5b098263520f0ab00200d651593) )   /* banked */
+
+    ROM_REGION( 1024, "proms", 0 )
+    ROM_LOAD( "mb7122h.7v", 0x00000,  0x400,  CRC(a1267336) SHA1(d11ea9d78526ac3c0dc6e57a2da5914273ad1e3f) )        /* Priority  Unused */
+ROM_END
 
 ROM_START( edrandy ) /* World ver 3 */
 	ROM_REGION( 0x100000, "maincpu", 0 ) /* 68000 code */
@@ -2099,6 +2138,7 @@
 GAME( 1991, joemac,   cninja,  cninja,   cninja,  cninja,   ROT0, "Data East Corporation", "Tatakae Genshizin Joe & Mac (Japan ver 1)", GAME_SUPPORTS_SAVE )
 GAME( 1991, stoneage, cninja,  stoneage, cninja,  stoneage, ROT0, "bootleg", "Stoneage (bootleg of Caveman Ninja)", GAME_SUPPORTS_SAVE )
 GAME( 1991, cninjabl, cninja,  cninjabl, cninja,  0,        ROT0, "bootleg",               "Caveman Ninja (bootleg)", GAME_SUPPORTS_SAVE )
+GAME( 1991, cninjabl2,cninja,  cninjabl, cninja,  0,        ROT0, "bootleg",               "Caveman Ninja (bootleg, alt)", GAME_NOT_WORKING )
 GAME( 1991, robocop2, 0,       robocop2, robocop2,0,        ROT0, "Data East Corporation", "Robocop 2 (Euro/Asia v0.10)", GAME_SUPPORTS_SAVE )
 GAME( 1991, robocop2u,robocop2,robocop2, robocop2,0,        ROT0, "Data East Corporation", "Robocop 2 (US v0.05)", GAME_SUPPORTS_SAVE )
 GAME( 1991, robocop2j,robocop2,robocop2, robocop2,0,        ROT0, "Data East Corporation", "Robocop 2 (Japan v0.11)", GAME_SUPPORTS_SAVE )
diff -Nru src-old/mame/drivers/cps1.c src/mame/drivers/cps1.c
--- src-old/mame/drivers/cps1.c	2012-03-11 01:51:30.000000000 +0100
+++ src/mame/drivers/cps1.c	2012-03-25 15:56:49.000000000 +0200
@@ -3395,12 +3395,12 @@
 	ROMX_LOAD( "lw_14.10b", 0x200002, 0x20000, CRC(82862cce) SHA1(727ca4ee55e076185b071a49afc87533fde9ec27) , ROM_SKIP(7) )	// == lw-09.12f
 	ROMX_LOAD( "lw_13.10a", 0x200003, 0x20000, CRC(b81c0e96) SHA1(09f4235786b8ff92a57112669c0385b64477eb01) , ROM_SKIP(7) )	// == lw-09.12f
 	ROMX_LOAD( "lw-06.9d",  0x200004, 0x80000, CRC(5b9edffc) SHA1(6fd8f4a3ab070733b52365ab1945bf86acb2bf62) , ROM_GROUPWORD | ROM_SKIP(6) )	// == lw-06.12e
-	ROMX_LOAD( "lw_26.10e", 0x200006, 0x20000, CRC(57bcd032) SHA1(6db0f96fb909ed02fe4b7ee25fe662ea23f884d2) , ROM_SKIP(7) )
-	ROMX_LOAD( "lw_25.10c", 0x200007, 0x20000, CRC(bac91554) SHA1(52f5de144193e0f78b9824cc8fd6f934dc19bab0) , ROM_SKIP(7) )
+	ROMX_LOAD( "lw_26.10e", 0x200006, 0x20000, CRC(57bcd032) SHA1(6db0f96fb909ed02fe4b7ee25fe662ea23f884d2) , ROM_SKIP(7) )	// == lw-13.12g
+	ROMX_LOAD( "lw_25.10c", 0x200007, 0x20000, CRC(bac91554) SHA1(52f5de144193e0f78b9824cc8fd6f934dc19bab0) , ROM_SKIP(7) )	// == lw-13.12g
 	ROMX_LOAD( "lw_16.11b", 0x300002, 0x20000, CRC(40b26554) SHA1(b4b27573d6c329bc2bc4c64fd857475bf2a10877) , ROM_SKIP(7) )	// == lw-09.12f
 	ROMX_LOAD( "lw_15.11a", 0x300003, 0x20000, CRC(1b7d2e07) SHA1(0edf4d4b314fd9c29e7915d5d1adef6f9617f921) , ROM_SKIP(7) )	// == lw-09.12f
-	ROMX_LOAD( "lw_28.11e", 0x300006, 0x20000, CRC(a805ad30) SHA1(baded4ab5fe4e87d53233b5df88edc693c292fc4) , ROM_SKIP(7) )
-	ROMX_LOAD( "lw_27.11c", 0x300007, 0x20000, CRC(103c1bd2) SHA1(fc7ce74e108c30554139e55651c5348b11e9e3bd) , ROM_SKIP(7) )
+	ROMX_LOAD( "lw_28.11e", 0x300006, 0x20000, CRC(a805ad30) SHA1(baded4ab5fe4e87d53233b5df88edc693c292fc4) , ROM_SKIP(7) )	// == lw-13.12g
+	ROMX_LOAD( "lw_27.11c", 0x300007, 0x20000, CRC(103c1bd2) SHA1(fc7ce74e108c30554139e55651c5348b11e9e3bd) , ROM_SKIP(7) )	// == lw-13.12g
 
 	ROM_REGION( 0x8000, "stars", 0 )
 	ROM_COPY( "gfx", 0x200000, 0x000000, 0x8000 )
@@ -4933,9 +4933,44 @@
 	ROM_LOAD( "ioc1.ic1",     0x0000, 0x0117, CRC(0d182081) SHA1(475b3d417785da4bc512cce2b274bb00d4cc6792) )
 ROM_END
 
-/* B-Board 89624B-? */
+/* B-Board 89624B-3 */
 ROM_START( 1941 )
 	ROM_REGION( CODE_SIZE, "maincpu", 0 )      /* 68000 code */
+	ROM_LOAD16_BYTE( "41em_30.11f",    0x00000, 0x20000, CRC(4249ec61) SHA1(5323cfa6938e6d95db8469f09b2fb5b5c5068bfc) )	/* label is 41EM_30, pcb verified */
+	ROM_LOAD16_BYTE( "41em_35.11h",    0x00001, 0x20000, CRC(ddbee5eb) SHA1(0fef53398f4e2cd6ccc7bc122dd893e0a4e2e052) )	/* label is 41EM_35, pcb verified */
+	ROM_LOAD16_BYTE( "41em_31.12f",    0x40000, 0x20000, CRC(584e88e5) SHA1(af254408d939cc439b5653e60afbccdf59777085) )	/* label is 41EM_31, pcb verified */
+	ROM_LOAD16_BYTE( "41em_36.12h",    0x40001, 0x20000, CRC(3cfc31d0) SHA1(7c0614e4e25502ff2d18aa4a97c91bf05ead875f) )	/* label is 41EM_36, pcb verified */
+	ROM_LOAD16_WORD_SWAP( "41-32m.8h", 0x80000, 0x80000, CRC(4e9648ca) SHA1(d8e67e6e3a6dc79053e4f56cfd83431385ea7611) )
+
+	ROM_REGION( 0x200000, "gfx", 0 )
+	ROMX_LOAD( "41-5m.7a", 0x000000, 0x80000, CRC(01d1cb11) SHA1(621e5377d1aaa9f7270d85bea1bdeef6721cdd05) , ROM_GROUPWORD | ROM_SKIP(6) )
+	ROMX_LOAD( "41-7m.9a", 0x000002, 0x80000, CRC(aeaa3509) SHA1(6124ef06d9dfdd879181856bd49853f1800c3b87) , ROM_GROUPWORD | ROM_SKIP(6) )
+	ROMX_LOAD( "41-1m.3a", 0x000004, 0x80000, CRC(ff77985a) SHA1(7e08df3a829bf9617470a46c79b713d4d9ebacae) , ROM_GROUPWORD | ROM_SKIP(6) )
+	ROMX_LOAD( "41-3m.5a", 0x000006, 0x80000, CRC(983be58f) SHA1(83a4decdd775f859240771269b8af3a5981b244c) , ROM_GROUPWORD | ROM_SKIP(6) )
+
+	ROM_REGION( 0x18000, "audiocpu", 0 ) /* 64k for the audio CPU (+banks) */
+	ROM_LOAD( "41_9.12b",  0x00000, 0x08000, CRC(0f9d8527) SHA1(3a00dd5772f38081fde11d8d61ba467379e2a636) )
+	ROM_CONTINUE(          0x10000, 0x08000 )
+
+	ROM_REGION( 0x40000, "oki", 0 )	/* Samples */
+	ROM_LOAD( "41_18.11c", 0x00000, 0x20000, CRC(d1f15aeb) SHA1(88089383f2d54fc97026a67f067d448eee5bd0c2) )
+	ROM_LOAD( "41_19.12c", 0x20000, 0x20000, CRC(15aec3a6) SHA1(8153c03aba005bab62bf0e8b3d15ec1c346326fd) )
+
+	ROM_REGION( 0x0200, "aboardplds", 0 )
+	ROM_LOAD( "buf1",         0x0000, 0x0117, CRC(eb122de7) SHA1(b26b5bfe258e3e184f069719f9fd008d6b8f6b9b) )
+	ROM_LOAD( "ioa1",         0x0000, 0x0117, CRC(59c7ee3b) SHA1(fbb887c5b4f5cb8df77cec710eaac2985bc482a6) )
+	ROM_LOAD( "prg1",         0x0000, 0x0117, CRC(f1129744) SHA1(a5300f301c1a08a7da768f0773fa0fe3f683b237) )
+	ROM_LOAD( "rom1",         0x0000, 0x0117, CRC(41dc73b9) SHA1(7d4c9f1693c821fbf84e32dd6ef62ddf14967845) )
+	ROM_LOAD( "sou1",         0x0000, 0x0117, CRC(84f4b2fe) SHA1(dcc9e86cc36316fe42eace02d6df75d08bc8bb6d) )
+
+	ROM_REGION( 0x0200, "bboardplds", 0 )
+	ROM_LOAD( "yi24b.1a",     0x0000, 0x0117, CRC(3004dcdf) SHA1(a73d86d1545af1d99a03d88af83449ec82b03c5c) )
+	ROM_LOAD( "iob1.11e",     0x0000, 0x0117, CRC(3abc0700) SHA1(973043aa46ec6d5d1db20dc9d5937005a0f9f6ae) )
+ROM_END
+
+/* B-Board 89624B-? */
+ROM_START( 1941r1 )
+	ROM_REGION( CODE_SIZE, "maincpu", 0 )      /* 68000 code */
 	ROM_LOAD16_BYTE( "41e_30.11f",     0x00000, 0x20000, CRC(9deb1e75) SHA1(68d9f91bef6a5c9e1bcbf286629aed6b37b4acb9) )
 	ROM_LOAD16_BYTE( "41e_35.11h",     0x00001, 0x20000, CRC(d63942b3) SHA1(b4bc7d06dcefbc075d316f2d31abbd4c7a99dbae) )
 	ROM_LOAD16_BYTE( "41e_31.12f",     0x40000, 0x20000, CRC(df201112) SHA1(d84f63bffeb9255cbabc02f23d7511f9b3c6a96c) )
@@ -4988,7 +5023,7 @@
 	ROM_CONTINUE(           0x10000, 0x08000 )
 
 	ROM_REGION( 0x40000, "oki", 0 )	/* Samples */
-	ROM_LOAD( "41e_18.11c", 0x00000, 0x20000, CRC(d1f15aeb) SHA1(88089383f2d54fc97026a67f067d448eee5bd0c2) )	/* label is 41E_18, pcb verified */
+	ROM_LOAD( "41e_18.11c", 0x00000, 0x20000, CRC(d1f15aeb) SHA1(88089383f2d54fc97026a67f067d448eee5bd0c2) )	// == 41_18.11c /* label is 41E_18, pcb verified */
 	ROM_LOAD( "41_19.12c",  0x20000, 0x20000, CRC(15aec3a6) SHA1(8153c03aba005bab62bf0e8b3d15ec1c346326fd) )
 
 	ROM_REGION( 0x0200, "aboardplds", 0 )
@@ -5034,12 +5069,12 @@
 	ROMX_LOAD( "41_33.9f",  0x100007, 0x20000, CRC(7a31b0e2) SHA1(f2eca12f4e89266d923a94d0837c555bc1c6cb29) , ROM_SKIP(7) )	// == 41-3m.5a
 
 	ROM_REGION( 0x18000, "audiocpu", 0 ) /* 64k for the audio CPU (+banks) */
-	ROM_LOAD( "41_23.13b",  0x00000, 0x08000, CRC(0f9d8527) SHA1(3a00dd5772f38081fde11d8d61ba467379e2a636) )
+	ROM_LOAD( "41_23.13b",  0x00000, 0x08000, CRC(0f9d8527) SHA1(3a00dd5772f38081fde11d8d61ba467379e2a636) )	// == 41_9.12b
 	ROM_CONTINUE(           0x10000, 0x08000 )
 
 	ROM_REGION( 0x40000, "oki", 0 )	/* Samples */
-	ROM_LOAD( "41_30.12c",  0x00000, 0x20000, CRC(d1f15aeb) SHA1(88089383f2d54fc97026a67f067d448eee5bd0c2) )
-	ROM_LOAD( "41_31.13c",  0x20000, 0x20000, CRC(15aec3a6) SHA1(8153c03aba005bab62bf0e8b3d15ec1c346326fd) )
+	ROM_LOAD( "41_30.12c",  0x00000, 0x20000, CRC(d1f15aeb) SHA1(88089383f2d54fc97026a67f067d448eee5bd0c2) )	// == 41_18.11c
+	ROM_LOAD( "41_31.13c",  0x20000, 0x20000, CRC(15aec3a6) SHA1(8153c03aba005bab62bf0e8b3d15ec1c346326fd) )	// == 41_19.12c
 
 	ROM_REGION( 0x0200, "aboardplds", 0 )
 	ROM_LOAD( "buf1",         0x0000, 0x0117, CRC(eb122de7) SHA1(b26b5bfe258e3e184f069719f9fd008d6b8f6b9b) )
@@ -6431,8 +6466,8 @@
 	ROM_LOAD16_BYTE( "sf2j_38c.12f", 0x40001, 0x20000, CRC(8210fc0e) SHA1(7d6cfb99afa89d0e6e991d9f7c1808b740def125) )	// == sf2u_38c.12f
 	ROM_LOAD16_BYTE( "sf2j_28c.9e",  0x80000, 0x20000, CRC(6eddd5e8) SHA1(62bd1c2fc0321809421c9a592f691b5b1a1d8807) )	// == sf2u_28c.9e
 	ROM_LOAD16_BYTE( "sf2j_35c.9f",  0x80001, 0x20000, CRC(6bcb404c) SHA1(b5f24556c633c521aadd94e016d78db6922e3dfa) )	// == sf2u_35c.9f
-	ROM_LOAD16_BYTE( "sf2j_29c.10e", 0xc0000, 0x20000, CRC(bb4af315) SHA1(75f0827f4f7e9f292add46467f8d4fe19b2514c9) )	// == sf2_29b.10e
-	ROM_LOAD16_BYTE( "sf2j_36c.10f", 0xc0001, 0x20000, CRC(c02a13eb) SHA1(b807cc495bff3f95d03b061fc629c95f965cb6d8) )	// == sf2_36b.10f
+	ROM_LOAD16_BYTE( "sf2j_29a.10e", 0xc0000, 0x20000, CRC(bb4af315) SHA1(75f0827f4f7e9f292add46467f8d4fe19b2514c9) )	// == sf2_29b.10e
+	ROM_LOAD16_BYTE( "sf2j_36a.10f", 0xc0001, 0x20000, CRC(c02a13eb) SHA1(b807cc495bff3f95d03b061fc629c95f965cb6d8) )	// == sf2_36b.10f
 
 	ROM_REGION( 0x600000, "gfx", 0 )
 	ROMX_LOAD( "sf2_06.8a",  0x000000, 0x80000, CRC(22c9cc8e) SHA1(b9194fb337b30502c1c9501cd6c64ae4035544d4) , ROM_GROUPWORD | ROM_SKIP(6) )	// == sf2-5m.4a
@@ -6449,12 +6484,12 @@
 	ROMX_LOAD( "sf2_26.9d",  0x400006, 0x80000, CRC(0627c831) SHA1(f9a92d614e8877d648449de2612fc8b43c85e4c2) , ROM_GROUPWORD | ROM_SKIP(6) )	// == sf2-11m.5d
 
 	ROM_REGION( 0x18000, "audiocpu", 0 ) /* 64k for the audio CPU (+banks) */
-	ROM_LOAD( "sf2_09.12a",  0x00000, 0x08000, CRC(a4823a1b) SHA1(7b6bf59dfd578bfbbdb64c27988796783442d659) )	// == sf2_9.12a // could be sf2j_09.12a
+	ROM_LOAD( "sf2_09.12a",  0x00000, 0x08000, CRC(a4823a1b) SHA1(7b6bf59dfd578bfbbdb64c27988796783442d659) )	// == sf2_9.12a
 	ROM_CONTINUE(            0x10000, 0x08000 )
 
 	ROM_REGION( 0x40000, "oki", 0 )	/* Samples */
-	ROM_LOAD( "sf2_18.11c",  0x00000, 0x20000, CRC(7f162009) SHA1(346bf42992b4c36c593e21901e22c87ae4a7d86d) )	// could be sf2j_18.11c
-	ROM_LOAD( "sf2_19.12c",  0x20000, 0x20000, CRC(beade53f) SHA1(277c397dc12752719ec6b47d2224750bd1c07f79) )	// could be sf2j_19.12c
+	ROM_LOAD( "sf2j_18.11c", 0x00000, 0x20000, CRC(7f162009) SHA1(346bf42992b4c36c593e21901e22c87ae4a7d86d) )	// == sf2_18.11c
+	ROM_LOAD( "sf2j_19.12c", 0x20000, 0x20000, CRC(beade53f) SHA1(277c397dc12752719ec6b47d2224750bd1c07f79) )	// == sf2_19.12c
 
 	ROM_REGION( 0x0200, "aboardplds", 0 )
 	ROM_LOAD( "buf1",         0x0000, 0x0117, CRC(eb122de7) SHA1(b26b5bfe258e3e184f069719f9fd008d6b8f6b9b) )
@@ -6841,7 +6876,7 @@
 	ROM_LOAD16_BYTE( "kd_28.9e",    0x80000, 0x20000, CRC(9367bcd9) SHA1(8243b4b9bb9756f3fa726717e19a166cb2f5b50a) )
 	ROM_LOAD16_BYTE( "kd_35.9f",    0x80001, 0x20000, CRC(4ca6a48a) SHA1(9d440ecd8d2d0e293fecf64ca3915252b94e7aef) )
 	ROM_LOAD16_BYTE( "kd_29.10e",   0xc0000, 0x20000, CRC(0360fa72) SHA1(274769c8717a874397cf37369e3ef80a682d9ef2) )
-	ROM_LOAD16_BYTE( "kd_36a.10f",  0xc0001, 0x20000, CRC(95a3cef8) SHA1(9b75c1ed0eafacc230197ffd9b81e0c8f4f2c464) )
+	ROM_LOAD16_BYTE( "kd_36a.10f",  0xc0001, 0x20000, CRC(95a3cef8) SHA1(9b75c1ed0eafacc230197ffd9b81e0c8f4f2c464) )	/* seen the same pcb with KDE_36A.10F */
 
 	ROM_REGION( 0x400000, "gfx", 0 )
 	ROMX_LOAD( "kd-5m.4a", 0x000000, 0x80000, CRC(e45b8701) SHA1(604e39e455e81695ee4f899f102d0bcd789cedd0) , ROM_GROUPWORD | ROM_SKIP(6) )	// in "2" socket
@@ -7805,11 +7840,11 @@
 ROM_END
 
 /* B-Board 91634B-2 */
-ROM_START( sf2cejc )
+ROM_START( sf2ceja )
 	ROM_REGION( CODE_SIZE, "maincpu", 0 )      /* 68000 code */
-	ROM_LOAD16_WORD_SWAP( "s92j_23c.8f", 0x000000, 0x80000, CRC(f0120635) SHA1(5e4a9a4b0f65c6139e76ee4ffa02b9db245b1858) )
-	ROM_LOAD16_WORD_SWAP( "s92j_22c.7f", 0x080000, 0x80000, CRC(8c0b2ed6) SHA1(408db039b4dad72b41458723575ed5352b71e10b) )
-	ROM_LOAD16_WORD_SWAP( "s92j_21a.6f", 0x100000, 0x80000, CRC(925a7877) SHA1(1960dca35f0ca6f2b399a9fccfbc0132ac6425d1) )
+	ROM_LOAD16_WORD_SWAP( "s92j_23a.8f", 0x000000, 0x80000, CRC(4f42bb5a) SHA1(59d0587c554e06ea45d4092ea4299ff086509d4b) )
+	ROM_LOAD16_WORD_SWAP( "s92j_22a.7f", 0x080000, 0x80000, CRC(c4f64bcd) SHA1(262c0419bf727da80c2ac52b877a19276d9aac3c) )
+	ROM_LOAD16_WORD_SWAP( "s92_21a.6f",  0x100000, 0x80000, CRC(925a7877) SHA1(1960dca35f0ca6f2b399a9fccfbc0132ac6425d1) )
 
 	ROM_REGION( 0x600000, "gfx", 0 )
 	ROMX_LOAD( "s92_01.3a",  0x000000, 0x80000, CRC(03b0d852) SHA1(f370f25c96ad2b94f8c53d6b7139100285a25bef) , ROM_GROUPWORD | ROM_SKIP(6) )	// == s92-1m.3a
@@ -7855,7 +7890,7 @@
 	ROM_REGION( CODE_SIZE, "maincpu", 0 )      /* 68000 code */
 	ROM_LOAD16_WORD_SWAP( "s92j_23b.8f", 0x000000, 0x80000, CRC(140876c5) SHA1(304630e6d8bae9f8d29090e05f7e013c7dafe9cc) )
 	ROM_LOAD16_WORD_SWAP( "s92j_22b.7f", 0x080000, 0x80000, CRC(2fbb3bfe) SHA1(e364564a12022730c2c0d0e8fd435e2c30ef9410) )
-	ROM_LOAD16_WORD_SWAP( "s92j_21a.6f", 0x100000, 0x80000, CRC(925a7877) SHA1(1960dca35f0ca6f2b399a9fccfbc0132ac6425d1) )
+	ROM_LOAD16_WORD_SWAP( "s92_21a.6f",  0x100000, 0x80000, CRC(925a7877) SHA1(1960dca35f0ca6f2b399a9fccfbc0132ac6425d1) )	// could be s92j_21a.6f
 
 	ROM_REGION( 0x600000, "gfx", 0 )
 	ROMX_LOAD( "s92_01.3a",  0x000000, 0x80000, CRC(03b0d852) SHA1(f370f25c96ad2b94f8c53d6b7139100285a25bef) , ROM_GROUPWORD | ROM_SKIP(6) )	// == s92-1m.3a
@@ -7897,11 +7932,11 @@
 ROM_END
 
 /* B-Board 91634B-2 */
-ROM_START( sf2ceja )
+ROM_START( sf2cejc )
 	ROM_REGION( CODE_SIZE, "maincpu", 0 )      /* 68000 code */
-	ROM_LOAD16_WORD_SWAP( "s92j_23a.8f", 0x000000, 0x80000, CRC(4f42bb5a) SHA1(59d0587c554e06ea45d4092ea4299ff086509d4b) )
-	ROM_LOAD16_WORD_SWAP( "s92j_22a.7f", 0x080000, 0x80000, CRC(c4f64bcd) SHA1(262c0419bf727da80c2ac52b877a19276d9aac3c) )
-	ROM_LOAD16_WORD_SWAP( "s92j_21a.6f", 0x100000, 0x80000, CRC(925a7877) SHA1(1960dca35f0ca6f2b399a9fccfbc0132ac6425d1) )
+	ROM_LOAD16_WORD_SWAP( "s92j_23c.8f", 0x000000, 0x80000, CRC(f0120635) SHA1(5e4a9a4b0f65c6139e76ee4ffa02b9db245b1858) )
+	ROM_LOAD16_WORD_SWAP( "s92j_22c.7f", 0x080000, 0x80000, CRC(8c0b2ed6) SHA1(408db039b4dad72b41458723575ed5352b71e10b) )
+	ROM_LOAD16_WORD_SWAP( "s92j_21a.6f", 0x100000, 0x80000, CRC(925a7877) SHA1(1960dca35f0ca6f2b399a9fccfbc0132ac6425d1) )	// == s92_21a.6f
 
 	ROM_REGION( 0x600000, "gfx", 0 )
 	ROMX_LOAD( "s92_01.3a",  0x000000, 0x80000, CRC(03b0d852) SHA1(f370f25c96ad2b94f8c53d6b7139100285a25bef) , ROM_GROUPWORD | ROM_SKIP(6) )	// == s92-1m.3a
@@ -10841,7 +10876,8 @@
 GAME( 1989, ffightj1,    ffight,   cps1_10MHz, ffight,     cps1,     ROT0,   "Capcom", "Final Fight (Japan 900112)", GAME_SUPPORTS_SAVE )
 GAME( 1989, ffightj2,    ffight,   cps1_10MHz, ffight,     cps1,     ROT0,   "Capcom", "Final Fight (Japan 900305)", GAME_SUPPORTS_SAVE )
 GAME( 1989, ffightjh,    ffight,   cps1_10MHz, ffight,     cps1,     ROT0,   "bootleg", "Street Smart / Final Fight (Japan, hack)", GAME_SUPPORTS_SAVE )
-GAME( 1990, 1941,        0,        cps1_10MHz, 1941,       cps1,     ROT270, "Capcom", "1941: Counter Attack (World)", GAME_SUPPORTS_SAVE )
+GAME( 1990, 1941,        0,        cps1_10MHz, 1941,       cps1,     ROT270, "Capcom", "1941: Counter Attack (World 900227)", GAME_SUPPORTS_SAVE )	// "ETC"
+GAME( 1990, 1941r1,      1941,     cps1_10MHz, 1941,       cps1,     ROT270, "Capcom", "1941: Counter Attack (World)", GAME_SUPPORTS_SAVE )
 GAME( 1990, 1941u,       1941,     cps1_10MHz, 1941,       cps1,     ROT270, "Capcom", "1941: Counter Attack (USA 900227)", GAME_SUPPORTS_SAVE )
 GAME( 1990, 1941j,       1941,     cps1_10MHz, 1941,       cps1,     ROT270, "Capcom", "1941: Counter Attack (Japan)", GAME_SUPPORTS_SAVE )
 GAME( 1990, mercs,       0,        cps1_10MHz, mercs,      cps1,     ROT270, "Capcom", "Mercs (World 900302)", GAME_SUPPORTS_SAVE )	// "ETC"
diff -Nru src-old/mame/drivers/dec0.c src/mame/drivers/dec0.c
--- src-old/mame/drivers/dec0.c	2012-01-12 23:19:49.000000000 +0100
+++ src/mame/drivers/dec0.c	2012-03-25 15:56:49.000000000 +0200
@@ -1877,6 +1877,55 @@
 	ROM_LOAD( "eg08.2c",   0x0000, 0x10000, CRC(92f2c916) SHA1(38b4ed81edcc2069b096591bdc5baab8b9edfa9a) ) // different to baddudes
 ROM_END
 
+ROM_START( drgninjab )
+	ROM_REGION( 0x60000, "maincpu", 0 )	/* 6*64k for 68000 code, middle 0x20000 unused */
+    ROM_LOAD16_BYTE( "n-12.d2",  0x00000, 0x10000, CRC(5a70eb52) SHA1(26fd48ea71cd5196e3907eebcf1234f44a3d7dba) )
+    ROM_LOAD16_BYTE( "n-11.a2",  0x00001, 0x10000, CRC(3887eb92) SHA1(a8650ce128927955497540d7c6fbd23516afdb24) )
+	ROM_LOAD16_BYTE( "eg06.6c",  0x40000, 0x10000, CRC(2b81faf7) SHA1(6d10c29f5ee06856843d83e77ba24c2b6e00a9cb) )
+	ROM_LOAD16_BYTE( "eg03.6a",  0x40001, 0x10000, CRC(c52c2e9d) SHA1(399f2b7df9d558c8f33bf1a7c8048c62e0f54cec) )
+
+	ROM_REGION( 0x10000, "audiocpu", 0 )	/* Sound CPU */
+	ROM_LOAD( "eg07.8a",   0x8000, 0x8000, CRC(001d2f51) SHA1(f186671f0450ccf9201577a5caf0efc490c6645e) )
+
+	ROM_REGION( 0x1000, "mcu", 0 )	/* i8751 microcontroller */
+	ROM_LOAD( "i8751",     0x0000, 0x1000, NO_DUMP )
+
+	/* various graphic and sound roms also differ when compared to baddudes */
+
+	ROM_REGION( 0x10000, "gfx1", 0 ) /* chars */
+	//ROM_LOAD( "drgninja.25",  0x00000, 0x08000, CRC(6791bc20) SHA1(7240b2688cda04ee9ea331472a84fbffc85b8e90) )
+	// the rom below was found on a genuine 'dragonninja' pcb, compared to the other ROM it has the 'bad dudes' (unused) logo
+	// partially erased, and a bad pixel on the left arrow character.  Is the other rom a cleaned up hack, or from a bootleg,
+	// or did Data East actually clean it up on a later PCB?
+	ROM_LOAD( "eg25.15j",  0x00000, 0x08000, CRC(dd557b19) SHA1(ce1e76aeb7e147f373bb48dbc1becc1601953499) ) // different to baddudes
+	ROM_LOAD( "eg26.16j",  0x08000, 0x08000, CRC(5d75fc8f) SHA1(92947dd78bfe8067fb5f645fa1ef212e48b69c70) ) // different to baddudes
+
+	ROM_REGION( 0x40000, "gfx2", 0 ) /* tiles */
+	ROM_LOAD( "eg18.14d",  0x00000, 0x10000, CRC(05cfc3e5) SHA1(a0163921c77dc9706463a402c3dd45ec4341cd21) )
+	ROM_LOAD( "eg20.17d",  0x10000, 0x10000, CRC(e11e988f) SHA1(0c59f0d8d1abe414c7e1ebd49d454179fed2cd00) )
+	ROM_LOAD( "eg22.14f",  0x20000, 0x10000, CRC(b893d880) SHA1(99e228174677f2e3e96154f77bfa9bf0f1c0a6a5) )
+	ROM_LOAD( "eg24.17f",  0x30000, 0x10000, CRC(6f226dda) SHA1(65ebb16a292c57d49c135fce7ed7537146226eb5) )
+
+	ROM_REGION( 0x20000, "gfx3", 0 ) /* tiles */
+	ROM_LOAD( "eg30.9j",   0x08000, 0x08000, CRC(2438e67e) SHA1(5f143aeb83606a2c64d0b31bfee38156d231dcc9) )
+	ROM_CONTINUE(          0x00000, 0x08000 )	/* the two halves are swapped */
+	ROM_LOAD( "eg28.9f",   0x18000, 0x08000, CRC(5c692ab3) SHA1(4c58ff50833f869575f1a15c776fbf1429944fab) )
+	ROM_CONTINUE(          0x10000, 0x08000 )
+
+	ROM_REGION( 0x80000, "gfx4", 0 ) /* sprites */
+	ROM_LOAD( "eg15.16c",  0x00000, 0x10000, CRC(5617d67f) SHA1(8f684de27ae79c4d35720706cdd2733af0e0a9cc) ) // different to baddudes
+	ROM_LOAD( "eg16.17c",  0x10000, 0x08000, CRC(17e42633) SHA1(405f5296a741901677cca978a1b287d894eb1e54) )
+	ROM_LOAD( "eg11.16a",  0x20000, 0x10000, CRC(ba83e8d8) SHA1(63092a5d0da0c9228a72a83b43a67a47b1388724) ) // different to baddudes
+	ROM_LOAD( "eg12.17a",  0x30000, 0x08000, CRC(fea2a134) SHA1(525dd5f48993db1fe1e3c095442884178f75e8e0) )
+	ROM_LOAD( "eg13.13c",  0x40000, 0x10000, CRC(fd91e08e) SHA1(8998f020791c8830e963096dc7b8fcb430d041d4) ) // different to baddudes
+	ROM_LOAD( "eg14.14c",  0x50000, 0x08000, CRC(e83c760a) SHA1(d08db381658b8b3288c5eaa9048a906126e0f712) )
+	ROM_LOAD( "eg09.13a",  0x60000, 0x10000, CRC(601b7b23) SHA1(c1c665614f1377bc47720382b25c965266a2593f)) // different to baddudes
+	ROM_LOAD( "eg10.14a",  0x70000, 0x08000, CRC(eeee8a1a) SHA1(2bf8378ff38f6a7c7cbd4cbd489de25cb1f0fe71) )
+
+	ROM_REGION( 0x40000, "oki", 0 )	/* ADPCM samples */
+	ROM_LOAD( "eg08.2c",   0x0000, 0x10000, CRC(92f2c916) SHA1(38b4ed81edcc2069b096591bdc5baab8b9edfa9a) ) // different to baddudes
+ROM_END
+
 ROM_START( birdtry )
 	ROM_REGION( 0x60000, "maincpu", 0 )	/* 6*64k for 68000 code */
 	ROM_LOAD16_BYTE( "ek-04.bin",     0x00000, 0x10000, CRC(5f0f4686) SHA1(5eea74f5626339ebd50e623029f21f1cd0f93135) )
@@ -3026,6 +3075,7 @@
 GAME( 1987, hbarrelw,   hbarrel,  hbarrel,  hbarrel,  hbarrel,  ROT270, "Data East Corporation", "Heavy Barrel (World)", 0 )
 GAME( 1988, baddudes,   0,        baddudes, baddudes, baddudes, ROT0,   "Data East USA",         "Bad Dudes vs. Dragonninja (US)", 0 )
 GAME( 1988, drgninja,   baddudes, baddudes, drgninja, baddudes, ROT0,   "Data East Corporation", "Dragonninja (Japan)", 0 )
+GAME( 1988, drgninjab,  baddudes, baddudes, drgninja, baddudes, ROT0,   "bootleg", "Dragonninja (bootleg)", 0 )
 /* A Bad Dudes bootleg with 68705 like the midres and ffantasy ones exists, but is not dumped */
 GAME( 1988, birdtry,    0,        birdtry,  birdtry,  birdtry,  ROT270, "Data East Corporation", "Birdie Try (Japan)", GAME_UNEMULATED_PROTECTION )
 GAME( 1988, robocop,    0,        robocop,  robocop,  robocop,  ROT0,   "Data East Corporation", "Robocop (World revision 4)", 0 )
diff -Nru src-old/mame/drivers/dribling.c src/mame/drivers/dribling.c
--- src-old/mame/drivers/dribling.c	2012-01-12 23:19:49.000000000 +0100
+++ src/mame/drivers/dribling.c	2012-03-24 22:54:13.000000000 +0100
@@ -388,6 +388,23 @@
 	ROM_LOAD( "prom_2d.bin", 0x0500, 0x0100, CRC(5d8c57c6) SHA1(abfb54812d66a36e797be47653dadda4843e8a90) )
 ROM_END
 
+ROM_START( driblingbr )
+	ROM_REGION( 0x10000, "maincpu", 0 )
+	ROM_LOAD( "1",  0x0000, 0x1000, CRC(35d97f4f) SHA1(c82b1d2a91e25cf3e3f049e0127d300572f0f54c) )
+	ROM_LOAD( "2",  0x1000, 0x1000, CRC(bd0f223a) SHA1(f9fbc5670a8723c091d61012e545774d315eb18f) )
+	ROM_LOAD( "3",  0x4000, 0x1000, CRC(1fccfc85) SHA1(c0365ad54144414218f52209173b858b927c9626) )
+	ROM_LOAD( "4",  0x5000, 0x1000, CRC(3ed4073a) SHA1(dec36e9dda07ea5f50163b98051955783131773d) )
+	ROM_LOAD( "5",  0x6000, 0x1000, CRC(c21a1d32) SHA1(6e919f1416e6c4df133d3140f7331f65f65d4942) )
+
+	ROM_REGION( 0x2000, "gfx1", 0 )
+	ROM_LOAD( "6",  0x0000, 0x1000, CRC(208971b8) SHA1(f91f3ea04d75beb58a61c844472b4dba53d84c0f) )
+	ROM_LOAD( "7",  0x1000, 0x1000, CRC(356c9803) SHA1(8e2ce52f32b33886f4747dadf3aeb78148538173) )
+
+	ROM_REGION( 0x600, "proms", 0 )
+	ROM_LOAD( "prom_3c.bin", 0x0000, 0x0400, CRC(25f068de) SHA1(ea4c56c47fe8153069acb9df80df0b099f3b81f1) )
+	ROM_LOAD( "prom_3e.bin", 0x0400, 0x0100, CRC(73eba798) SHA1(7be0e253624df53092e26c28eb18afdcf71434aa) )
+	ROM_LOAD( "prom_2d.bin", 0x0500, 0x0100, CRC(5d8c57c6) SHA1(abfb54812d66a36e797be47653dadda4843e8a90) )
+ROM_END
 
 
 /*************************************
@@ -398,3 +415,4 @@
 
 GAME( 1983, dribling, 0,        dribling, dribling, 0, ROT0, "Model Racing", "Dribbling", GAME_NO_SOUND | GAME_SUPPORTS_SAVE )
 GAME( 1983, driblingo,dribling, dribling, dribling, 0, ROT0, "Model Racing (Olympia license)", "Dribbling (Olympia)", GAME_NO_SOUND | GAME_SUPPORTS_SAVE )
+GAME( 1983, driblingbr,dribling, dribling, dribling, 0, ROT0, "bootleg (Videomac)", "Dribbling (bootleg, Brazil)", GAME_NO_SOUND | GAME_SUPPORTS_SAVE )
diff -Nru src-old/mame/drivers/galaxia.c src/mame/drivers/galaxia.c
--- src-old/mame/drivers/galaxia.c	2012-01-12 23:19:49.000000000 +0100
+++ src/mame/drivers/galaxia.c	2012-03-25 15:56:49.000000000 +0200
@@ -1,25 +1,31 @@
-/* Galxaia
+/* Galaxia
 
 Galaxia by Zaccaria (1979)
 
 Taken from an untested board.
 
 1K byte files were 2708 or equivalent.
-512 byte file is the 82S130 colour PROM.
+512 byte file is a 82S130 PROM.
 
-This is not a direct pirate of Galaxians as you might think from the name.
-The game uses a Signetics 2650A CPU with three 40-pin 2636 chips. I have
-no idea what 2636's are but I am hoping they are something to do with the
-sound since the board has no apparent sound circuitry. The video hardware
-looks like it's similar to Galaxians (2 x 2114, 2 x 2101, 2 x EPROM) but
-there is no attack RAM and the graphics EPROMS are 2708. The graphics EPROMS
-do contain Galaxian-like graphics...
+This is not a direct pirate of Galaxian as you might think from the name.
+The game uses a Signetics 2650A CPU with three 40-pin 2636 chips, which are
+responsible for sound and some video functions.
+
+Other than that, the video hardware looks like it's similar to Galaxian
+(2 x 2114, 2 x 2101, 2 x EPROM) but there is no attack RAM and the graphics
+EPROMS are 2708. The graphics EPROMS do contain Galaxian-like graphics...
+
+Astro Wars (port of Astro Fighter) is on a stripped down board of Galaxia,
+using only one 2636 chip.
 
 ---
 
-TS 2008.08.12:
-- fixed rom loading
-- added preliminary video emulation
+HW has many similarities with quasar.c / cvs.c / zac2650.c
+
+TODO:
+- fix colors (and use MAME tilemaps)
+- accurate astrowar sprite/bg sync
+- starfield hardware?
 
 */
 
@@ -37,155 +43,289 @@
 
 	UINT8 *m_video;
 	UINT8 *m_color;
+	UINT8 *m_bullet;
+
+	UINT8 *m_fo_state;
+
+	bitmap_ind16 m_collision_bitmap;
+
+	UINT8 m_collision;
+	UINT8 m_scroll;
 };
 
 
+static INTERRUPT_GEN( galaxia_interrupt )
+{
+	device_set_input_line_and_vector(device, 0, HOLD_LINE, 0x03);
+}
+
+
+/***************************************************************************
+
+  Video
+
+***************************************************************************/
+
+VIDEO_START( galaxia )
+{
+	galaxia_state *state = machine.driver_data<galaxia_state>();
+	state->m_color = auto_alloc_array(machine, UINT8, 0x400);
+
+	machine.primary_screen->register_screen_bitmap(state->m_collision_bitmap);
+}
+
 
 static SCREEN_UPDATE_IND16( galaxia )
 {
 	galaxia_state *state = screen.machine().driver_data<galaxia_state>();
-	int x,y, count;
+	int x, y;
 
-	device_t *s2636_0 = screen.machine().device("s2636_0");
-	device_t *s2636_1 = screen.machine().device("s2636_1");
-	device_t *s2636_2 = screen.machine().device("s2636_2");
+	bitmap_ind16 &s2636_0_bitmap = s2636_update(screen.machine().device("s2636_0"), cliprect);
+	bitmap_ind16 &s2636_1_bitmap = s2636_update(screen.machine().device("s2636_1"), cliprect);
+	bitmap_ind16 &s2636_2_bitmap = s2636_update(screen.machine().device("s2636_2"), cliprect);
 
-	count = 0;
+	bitmap.fill(0, cliprect);
 
-	for (y=0;y<256/8;y++)
+	// draw background
+	for (x = 0; x < 32; x++)
 	{
-		for (x=0;x<256/8;x++)
+		// fixed scrolling area
+		int y_offs = 0;
+		if (x >= 4 && x < 24)
+			y_offs = state->m_scroll ^ 0xff;
+
+		for (y = 0; y < 32; y++)
 		{
-			int tile = state->m_video[count];
-			drawgfx_opaque(bitmap,cliprect,screen.machine().gfx[0],tile,0,0,0,x*8,y*8);
-			count++;
+			int tile = state->m_video[y << 5 | x];
+			int color = state->m_color[y << 5 | x];
+			drawgfx_transpen(bitmap,cliprect,screen.machine().gfx[0], tile, color, 0, 0, x*8, (y_offs + y*8) & 0xff, 0);
 		}
 	}
 
-	bitmap_ind16 &s2636_0_bitmap = s2636_update(s2636_0, cliprect);
-	bitmap_ind16 &s2636_1_bitmap = s2636_update(s2636_1, cliprect);
-	bitmap_ind16 &s2636_2_bitmap = s2636_update(s2636_2, cliprect);
-
-	/* copy the S2636 images into the main bitmap */
+	for (y = cliprect.min_y; y <= cliprect.max_y; y++)
 	{
-		int y;
-
-		for (y = cliprect.min_y; y <= cliprect.max_y; y++)
+		for (x = cliprect.min_x; x <= cliprect.max_x; x++)
 		{
-			int x;
-
-			for (x = cliprect.min_x; x <= cliprect.max_x; x++)
+			// draw bullets (guesswork)
+			bool bullet = state->m_bullet[y] && x == (state->m_bullet[y] ^ 0xff);
+			bool background = bitmap.pix16(y, x) != 0;
+			if (bullet)
 			{
-				int pixel0 = s2636_0_bitmap.pix16(y, x);
-				int pixel1 = s2636_1_bitmap.pix16(y, x);
-				int pixel2 = s2636_2_bitmap.pix16(y, x);
+				// background vs. bullet collision detection
+				if (background) state->m_collision |= 0x80;
 
-				if (S2636_IS_PIXEL_DRAWN(pixel0))
-					bitmap.pix16(y, x) = S2636_PIXEL_COLOR(pixel0);
+				// bullet size/color/priority is guessed
+				bitmap.pix16(y, x) = 7;
+				if (x) bitmap.pix16(y, x-1) = 7;
+			}
+
+			// copy the S2636 images into the main bitmap and check collision
+			int pixel0 = s2636_0_bitmap.pix16(y, x);
+			int pixel1 = s2636_1_bitmap.pix16(y, x);
+			int pixel2 = s2636_2_bitmap.pix16(y, x);
 
-				if (S2636_IS_PIXEL_DRAWN(pixel1))
-					bitmap.pix16(y, x) = S2636_PIXEL_COLOR(pixel1);
+			int pixel = pixel0 | pixel1 | pixel2;
+
+			if (S2636_IS_PIXEL_DRAWN(pixel))
+			{
+				// S2636 vs. S2636 collision detection
+				if (S2636_IS_PIXEL_DRAWN(pixel0) && S2636_IS_PIXEL_DRAWN(pixel1)) state->m_collision |= 0x01;
+				if (S2636_IS_PIXEL_DRAWN(pixel1) && S2636_IS_PIXEL_DRAWN(pixel2)) state->m_collision |= 0x02;
+				if (S2636_IS_PIXEL_DRAWN(pixel2) && S2636_IS_PIXEL_DRAWN(pixel0)) state->m_collision |= 0x04;
+
+				// S2636 vs. bullet collision detection
+				if (bullet) state->m_collision |= 0x08;
+
+				// S2636 vs. background collision detection
+				if (background)
+				{
+					/* bit4 causes problems on 2nd level
+                    if (S2636_IS_PIXEL_DRAWN(pixel0)) state->m_collision |= 0x10; */
+					if (S2636_IS_PIXEL_DRAWN(pixel1)) state->m_collision |= 0x20;
+					if (S2636_IS_PIXEL_DRAWN(pixel2)) state->m_collision |= 0x40;
+				}
 
-				if (S2636_IS_PIXEL_DRAWN(pixel2))
-					bitmap.pix16(y, x) = S2636_PIXEL_COLOR(pixel2);
+				bitmap.pix16(y, x) = S2636_PIXEL_COLOR(pixel);
 			}
 		}
 	}
+
 	return 0;
 }
 
-static WRITE8_HANDLER(galaxia_video_w)
+
+static SCREEN_UPDATE_IND16( astrowar )
 {
-	galaxia_state *state = space->machine().driver_data<galaxia_state>();
-	if (cpu_get_reg(&space->device(), S2650_FO))
+	galaxia_state *state = screen.machine().driver_data<galaxia_state>();
+	int x, y;
+
+	bitmap_ind16 &s2636_0_bitmap = s2636_update(screen.machine().device("s2636_0"), cliprect);
+
+	bitmap.fill(0, cliprect);
+
+	// draw background (no scroll?)
+	for (x = 0; x < 32; x++)
 	{
-		state->m_video[offset]=data;
+		for (y = 0; y < 32; y++)
+		{
+			int tile = state->m_video[y << 5 | x];
+			int color = state->m_color[y << 5 | x];
+			drawgfx_transpen(bitmap,cliprect,screen.machine().gfx[0], tile, color, 0, 0, x*8, y*8, 0);
+		}
 	}
-	else
+
+	copybitmap(state->m_collision_bitmap, bitmap, 0, 0, 0, 0, cliprect);
+
+	// copy the S2636 bitmap into the main bitmap and check collision
+	for (y = cliprect.min_y; y <= cliprect.max_y; y++)
 	{
-		state->m_color[offset]=data;
+		for (x = cliprect.min_x; x <= cliprect.max_x; x++)
+		{
+			// NOTE: similar to zac2650.c, the sprite chip runs at a different frequency than the background generator
+			// the exact timing is unknown, so we'll have to do with guesswork (s_offset and s_ratio)
+			int s_offset = 7;
+			float s_ratio = 256.0 / 196.0;
+
+			float sx = x * s_ratio;
+			if ((int)(sx + 0.5) > cliprect.max_x)
+				break;
+
+			int pixel = s2636_0_bitmap.pix16(y, x + s_offset);
+
+			if (S2636_IS_PIXEL_DRAWN(pixel))
+			{
+				// S2636 vs. background collision detection
+				if (state->m_collision_bitmap.pix16(y, (int)(sx)) || state->m_collision_bitmap.pix16(y, (int)(sx + 0.5)))
+					state->m_collision |= 0x01;
+
+				bitmap.pix16(y, (int)(sx)) = S2636_PIXEL_COLOR(pixel);
+				bitmap.pix16(y, (int)(sx + 0.5)) = S2636_PIXEL_COLOR(pixel);
+			}
+		}
 	}
+
+	return 0;
+}
+
+
+/***************************************************************************
+
+  I/O
+
+***************************************************************************/
+
+static WRITE8_HANDLER(galaxia_video_w)
+{
+	galaxia_state *state = space->machine().driver_data<galaxia_state>();
+//  space->machine().primary_screen->update_partial(space->machine().primary_screen->vpos());
+	if (*state->m_fo_state)
+		state->m_video[offset] = data;
+	else
+		state->m_color[offset] = data;
 }
 
 static READ8_HANDLER(galaxia_video_r)
 {
 	galaxia_state *state = space->machine().driver_data<galaxia_state>();
-	return state->m_video[offset];
+	if (*state->m_fo_state)
+		return state->m_video[offset];
+	else
+		return state->m_color[offset];
+}
+
+static WRITE8_HANDLER(galaxia_scroll_w)
+{
+	galaxia_state *state = space->machine().driver_data<galaxia_state>();
+	space->machine().primary_screen->update_partial(space->machine().primary_screen->vpos());
+	state->m_scroll = data;
+}
+
+static WRITE8_HANDLER(galaxia_ctrlport_w)
+{
+	// d0/d1: maybe coincounter
+	// other bits: unknown
+}
+
+static WRITE8_HANDLER(galaxia_dataport_w)
+{
+	// cvs-style video fx? or lamps?
+}
+
+static READ8_HANDLER(galaxia_collision_r)
+{
+	galaxia_state *state = space->machine().driver_data<galaxia_state>();
+	space->machine().primary_screen->update_partial(space->machine().primary_screen->vpos());
+	return state->m_collision;
+}
+
+static READ8_HANDLER(galaxia_collision_clear)
+{
+	galaxia_state *state = space->machine().driver_data<galaxia_state>();
+	space->machine().primary_screen->update_partial(space->machine().primary_screen->vpos());
+	state->m_collision = 0;
+	return 0xff;
 }
 
-static ADDRESS_MAP_START( mem_map, AS_PROGRAM, 8 )
+static ADDRESS_MAP_START( galaxia_mem_map, AS_PROGRAM, 8 )
 	AM_RANGE(0x0000, 0x13ff) AM_ROM
-	AM_RANGE(0x1400, 0x14ff) AM_MIRROR(0x6000) AM_RAM
+	AM_RANGE(0x1400, 0x14ff) AM_MIRROR(0x6000) AM_RAM AM_BASE_MEMBER(galaxia_state, m_bullet)
 	AM_RANGE(0x1500, 0x15ff) AM_MIRROR(0x6000) AM_DEVREADWRITE("s2636_0", s2636_work_ram_r, s2636_work_ram_w)
 	AM_RANGE(0x1600, 0x16ff) AM_MIRROR(0x6000) AM_DEVREADWRITE("s2636_1", s2636_work_ram_r, s2636_work_ram_w)
 	AM_RANGE(0x1700, 0x17ff) AM_MIRROR(0x6000) AM_DEVREADWRITE("s2636_2", s2636_work_ram_r, s2636_work_ram_w)
-	AM_RANGE(0x1800, 0x1bff) AM_MIRROR(0x6000) AM_READWRITE(galaxia_video_r, galaxia_video_w)  AM_BASE_MEMBER(galaxia_state, m_video)
+	AM_RANGE(0x1800, 0x1bff) AM_MIRROR(0x6000) AM_READWRITE(galaxia_video_r, galaxia_video_w) AM_BASE_MEMBER(galaxia_state, m_video)
 	AM_RANGE(0x1c00, 0x1fff) AM_MIRROR(0x6000) AM_RAM
 	AM_RANGE(0x2000, 0x33ff) AM_ROM
 	AM_RANGE(0x7214, 0x7214) AM_READ_PORT("IN0")
 ADDRESS_MAP_END
 
-static ADDRESS_MAP_START( io_map, AS_IO, 8 )
-	ADDRESS_MAP_GLOBAL_MASK(0xff)
-	AM_RANGE(0x00, 0x00) AM_READ_PORT("IN7")
-	AM_RANGE(0x01, 0x01) AM_READ_PORT("IN1")
-	AM_RANGE(0x02, 0x02) AM_READ_PORT("IN2")
-	AM_RANGE(0x05, 0x05) AM_READ_PORT("IN5")
-	AM_RANGE(0x06, 0x06) AM_READ_PORT("IN6")
-	AM_RANGE(0xac, 0xac) AM_READ_PORT("IN3")
-ADDRESS_MAP_END
-
-
-static ADDRESS_MAP_START( astrowar_mem, AS_PROGRAM, 8 )
+static ADDRESS_MAP_START( astrowar_mem_map, AS_PROGRAM, 8 )
 	AM_RANGE(0x0000, 0x13ff) AM_ROM
-	AM_RANGE(0x1400, 0x14ff) AM_MIRROR(0x6000) AM_RAM
+	AM_RANGE(0x1400, 0x14ff) AM_MIRROR(0x6000) AM_RAM AM_BASE_MEMBER(galaxia_state, m_bullet) // but no bullet hw?
 	AM_RANGE(0x1500, 0x15ff) AM_MIRROR(0x6000) AM_DEVREADWRITE("s2636_0", s2636_work_ram_r, s2636_work_ram_w)
-	AM_RANGE(0x1600, 0x16ff) AM_MIRROR(0x6000) AM_DEVREADWRITE("s2636_1", s2636_work_ram_r, s2636_work_ram_w)
-	AM_RANGE(0x1700, 0x17ff) AM_MIRROR(0x6000) AM_DEVREADWRITE("s2636_2", s2636_work_ram_r, s2636_work_ram_w)
 	AM_RANGE(0x1800, 0x1bff) AM_MIRROR(0x6000) AM_READWRITE(galaxia_video_r, galaxia_video_w)  AM_BASE_MEMBER(galaxia_state, m_video)
 	AM_RANGE(0x1c00, 0x1fff) AM_MIRROR(0x6000) AM_RAM
 	AM_RANGE(0x2000, 0x33ff) AM_ROM
 ADDRESS_MAP_END
 
-static ADDRESS_MAP_START( astrowar_io, AS_IO, 8 )
-	ADDRESS_MAP_GLOBAL_MASK(0xff)
-	AM_RANGE(0x00, 0x00) AM_READ_PORT("IN0")
-	AM_RANGE(0x01, 0x01) AM_READ_PORT("IN1")
-	AM_RANGE(0x02, 0x02) AM_READ_PORT("IN2")
-	AM_RANGE(0x06, 0x06) AM_READ_PORT("IN6")
-	AM_RANGE(0x07, 0x07) AM_READ_PORT("IN7")
+static ADDRESS_MAP_START( galaxia_io_map, AS_IO, 8 )
+	ADDRESS_MAP_UNMAP_HIGH
+	AM_RANGE(0x00, 0x00) AM_WRITE(galaxia_scroll_w) AM_READ_PORT("IN0")
+	AM_RANGE(0x02, 0x02) AM_READ_PORT("IN1")
+	AM_RANGE(0x05, 0x05) AM_READNOP
+	AM_RANGE(0x06, 0x06) AM_READ_PORT("DSW0")
+	AM_RANGE(0x07, 0x07) AM_READ_PORT("DSW1")
+	AM_RANGE(0xac, 0xac) AM_READNOP
+	AM_RANGE(S2650_CTRL_PORT, S2650_CTRL_PORT) AM_READWRITE(galaxia_collision_r, galaxia_ctrlport_w)
+	AM_RANGE(S2650_DATA_PORT, S2650_DATA_PORT) AM_READWRITE(galaxia_collision_clear, galaxia_dataport_w)
+	AM_RANGE(S2650_SENSE_PORT, S2650_SENSE_PORT) AM_READ_PORT("SENSE")
+	AM_RANGE(S2650_FO_PORT, S2650_FO_PORT) AM_RAM AM_BASE_MEMBER(galaxia_state, m_fo_state)
 ADDRESS_MAP_END
 
+
+/***************************************************************************
+
+  Inputs
+
+***************************************************************************/
+
 static INPUT_PORTS_START( galaxia )
 	PORT_START("IN0")
 	PORT_BIT( 0x01, IP_ACTIVE_HIGH, IPT_START1 )
 	PORT_BIT( 0x02, IP_ACTIVE_HIGH, IPT_START2 )
 	PORT_BIT( 0x04, IP_ACTIVE_HIGH, IPT_COIN2 ) PORT_IMPULSE(1)
 	PORT_BIT( 0x08, IP_ACTIVE_HIGH, IPT_COIN1 ) PORT_IMPULSE(1)
-	PORT_BIT( 0x10, IP_ACTIVE_HIGH, IPT_BUTTON1 ) PORT_COCKTAIL
+	PORT_BIT( 0x10, IP_ACTIVE_HIGH, IPT_BUTTON1 ) PORT_PLAYER(2)
 	PORT_BIT( 0x20, IP_ACTIVE_HIGH, IPT_BUTTON1 )
 	PORT_BIT( 0xc0, IP_ACTIVE_HIGH, IPT_UNKNOWN )
 
 	PORT_START("IN1")
-	PORT_BIT( 0xff, IP_ACTIVE_LOW, IPT_UNUSED )
-
-	PORT_START("IN2")
-	PORT_BIT( 0x04, IP_ACTIVE_HIGH, IPT_JOYSTICK_LEFT ) PORT_2WAY PORT_COCKTAIL
-	PORT_BIT( 0x08, IP_ACTIVE_HIGH, IPT_JOYSTICK_RIGHT ) PORT_2WAY PORT_COCKTAIL
+	PORT_BIT( 0x04, IP_ACTIVE_HIGH, IPT_JOYSTICK_LEFT ) PORT_2WAY PORT_PLAYER(2)
+	PORT_BIT( 0x08, IP_ACTIVE_HIGH, IPT_JOYSTICK_RIGHT ) PORT_2WAY PORT_PLAYER(2)
 	PORT_BIT( 0x10, IP_ACTIVE_HIGH, IPT_JOYSTICK_LEFT ) PORT_2WAY
 	PORT_BIT( 0x20, IP_ACTIVE_HIGH, IPT_JOYSTICK_RIGHT ) PORT_2WAY
-	PORT_DIPNAME( 0x80, 0x80, "Freeze" )
-	PORT_DIPSETTING(    0x80, DEF_STR( Off ) )
-	PORT_DIPSETTING(    0x00, DEF_STR( On ) )
-	PORT_BIT( 0x43, IP_ACTIVE_HIGH, IPT_UNKNOWN )
-
-	PORT_START("IN3")
-	PORT_BIT( 0xff, IP_ACTIVE_LOW, IPT_UNUSED )
+	PORT_BIT( 0xc3, IP_ACTIVE_HIGH, IPT_UNKNOWN )
 
-	PORT_START("IN5")
-	PORT_BIT( 0xff, IP_ACTIVE_HIGH, IPT_UNUSED )
-
-	PORT_START("IN6")
+	PORT_START("DSW0")
 	PORT_DIPNAME( 0x07, 0x00, DEF_STR( Coinage ) )
 	PORT_DIPSETTING(    0x00, "A 1C_1C B 2C_1C" )
 	PORT_DIPSETTING(    0x01, "A 1C_2C B 2C_1C" )
@@ -198,12 +338,58 @@
 	PORT_DIPNAME( 0x08, 0x00, DEF_STR( Lives ) )
 	PORT_DIPSETTING(    0x00, "3" )
 	PORT_DIPSETTING(    0x08, "5" )
-	PORT_BIT( 0xf0, IP_ACTIVE_HIGH, IPT_UNKNOWN )
 
-	PORT_START("IN7")
-	PORT_BIT( 0xff, IP_ACTIVE_LOW, IPT_UNUSED )
+	PORT_DIPNAME( 0x10, 0x00, "UNK04" )
+	PORT_DIPSETTING(    0x00, DEF_STR( Off ) )
+	PORT_DIPSETTING(    0x10, DEF_STR( On ) )
+	PORT_DIPNAME( 0x20, 0x00, "UNK05" )
+	PORT_DIPSETTING(    0x00, DEF_STR( Off ) )
+	PORT_DIPSETTING(    0x20, DEF_STR( On ) )
+	PORT_DIPNAME( 0x40, 0x00, "UNK06" )
+	PORT_DIPSETTING(    0x00, DEF_STR( Off ) )
+	PORT_DIPSETTING(    0x40, DEF_STR( On ) )
+	PORT_DIPNAME( 0x80, 0x00, "UNK07" )
+	PORT_DIPSETTING(    0x00, DEF_STR( Off ) )
+	PORT_DIPSETTING(    0x80, DEF_STR( On ) )
+
+	PORT_START("DSW1")
+	PORT_DIPNAME( 0x01, 0x00, "UNK10" )
+	PORT_DIPSETTING(    0x00, DEF_STR( Off ) )
+	PORT_DIPSETTING(    0x01, DEF_STR( On ) )
+	PORT_DIPNAME( 0x02, 0x00, "UNK11" )
+	PORT_DIPSETTING(    0x00, DEF_STR( Off ) )
+	PORT_DIPSETTING(    0x02, DEF_STR( On ) )
+	PORT_DIPNAME( 0x04, 0x00, "UNK12" )
+	PORT_DIPSETTING(    0x00, DEF_STR( Off ) )
+	PORT_DIPSETTING(    0x04, DEF_STR( On ) )
+	PORT_DIPNAME( 0x08, 0x00, "UNK13" )
+	PORT_DIPSETTING(    0x00, DEF_STR( Off ) )
+	PORT_DIPSETTING(    0x08, DEF_STR( On ) )
+
+	PORT_DIPNAME( 0x10, 0x00, "UNK14" )
+	PORT_DIPSETTING(    0x00, DEF_STR( Off ) )
+	PORT_DIPSETTING(    0x10, DEF_STR( On ) )
+	PORT_DIPNAME( 0x20, 0x00, "UNK15" )
+	PORT_DIPSETTING(    0x00, DEF_STR( Off ) )
+	PORT_DIPSETTING(    0x20, DEF_STR( On ) )
+	PORT_DIPNAME( 0x40, 0x00, "UNK16" )
+	PORT_DIPSETTING(    0x00, DEF_STR( Off ) )
+	PORT_DIPSETTING(    0x40, DEF_STR( On ) )
+	PORT_DIPNAME( 0x80, 0x00, "UNK17" )
+	PORT_DIPSETTING(    0x00, DEF_STR( Off ) )
+	PORT_DIPSETTING(    0x80, DEF_STR( On ) )
+
+	PORT_START("SENSE")
+	PORT_BIT( 0x80, IP_ACTIVE_HIGH, IPT_VBLANK )
 INPUT_PORTS_END
 
+
+/***************************************************************************
+
+  Machine Configs
+
+***************************************************************************/
+
 static const gfx_layout tiles8x8x1_layout =
 {
 	8,8,
@@ -235,58 +421,48 @@
 GFXDECODE_END
 
 
-static INTERRUPT_GEN( galaxia_interrupt )
-{
-	device_set_input_line_and_vector(device, 0, HOLD_LINE, 0x03);
-}
-
-
-static const s2636_interface s2636_0_config =
+static const s2636_interface galaxia_s2636_config[3] =
 {
-	"screen",
-	0x100,
-	3, -27,
-	"s2636snd_0"
+	{ "screen", 0x100, 3, -27, "s2636snd_0" },
+	{ "screen", 0x100, 3, -27, "s2636snd_1" },
+	{ "screen", 0x100, 3, -27, "s2636snd_2" }
 };
 
-static const s2636_interface s2636_1_config =
+static const s2636_interface astrowar_s2636_config =
 {
 	"screen",
 	0x100,
-	3, -27,
-	"s2636snd_1"
+	3, 0,
+	"s2636snd_0"
 };
 
-static const s2636_interface s2636_2_config =
-{
-	"screen",
-	0x100,
-	3, -27,
-	"s2636snd_2"
-};
 
 static MACHINE_CONFIG_START( galaxia, galaxia_state )
 	/* basic machine hardware */
-	MCFG_CPU_ADD("maincpu", S2650,2000000)		 /* ? MHz */
-	MCFG_CPU_PROGRAM_MAP(mem_map)
-	MCFG_CPU_IO_MAP(io_map)
+	MCFG_CPU_ADD("maincpu", S2650, 2000000)		 /* ? MHz */
+	MCFG_CPU_PROGRAM_MAP(galaxia_mem_map)
+	MCFG_CPU_IO_MAP(galaxia_io_map)
 	MCFG_CPU_VBLANK_INT("screen", galaxia_interrupt)
 
 	/* video hardware */
+	MCFG_VIDEO_ATTRIBUTES(VIDEO_ALWAYS_UPDATE)
 	MCFG_SCREEN_ADD("screen", RASTER)
 	MCFG_SCREEN_REFRESH_RATE(60)
-	MCFG_SCREEN_VBLANK_TIME(ATTOSECONDS_IN_USEC(0))
+	MCFG_SCREEN_VBLANK_TIME(ATTOSECONDS_IN_USEC(2500))
 	MCFG_SCREEN_SIZE(256, 256)
-	MCFG_SCREEN_VISIBLE_AREA(0, 256-1, 0, 256-1)
+	MCFG_SCREEN_VISIBLE_AREA(0*8, 30*8-1, 2*8, 32*8-1)
 	MCFG_SCREEN_UPDATE_STATIC(galaxia)
 
 	MCFG_GFXDECODE(galaxia)
 	MCFG_PALETTE_LENGTH(0x100)
 
-	MCFG_S2636_ADD("s2636_0", s2636_0_config)
-	MCFG_S2636_ADD("s2636_1", s2636_1_config)
-	MCFG_S2636_ADD("s2636_2", s2636_2_config)
+	MCFG_VIDEO_START(galaxia)
+
+	MCFG_S2636_ADD("s2636_0", galaxia_s2636_config[0])
+	MCFG_S2636_ADD("s2636_1", galaxia_s2636_config[1])
+	MCFG_S2636_ADD("s2636_2", galaxia_s2636_config[2])
 
+	/* sound hardware */
 	MCFG_SPEAKER_STANDARD_MONO("mono")
 
 	MCFG_SOUND_ADD("s2636snd_0", S2636_SOUND, 0)
@@ -299,62 +475,83 @@
 	MCFG_SOUND_ROUTE(ALL_OUTPUTS, "mono", 0.25)
 MACHINE_CONFIG_END
 
-static MACHINE_CONFIG_DERIVED( astrowar, galaxia )
-	MCFG_CPU_MODIFY("maincpu")
-	MCFG_CPU_PROGRAM_MAP(astrowar_mem)
-	MCFG_CPU_IO_MAP(astrowar_io)
+
+static MACHINE_CONFIG_START( astrowar, galaxia_state )
+	/* basic machine hardware */
+	MCFG_CPU_ADD("maincpu", S2650, 2000000)		 /* ? MHz */
+	MCFG_CPU_PROGRAM_MAP(astrowar_mem_map)
+	MCFG_CPU_IO_MAP(galaxia_io_map)
+	MCFG_CPU_VBLANK_INT("screen", galaxia_interrupt)
+
+	/* video hardware */
+	MCFG_VIDEO_ATTRIBUTES(VIDEO_ALWAYS_UPDATE)
+	MCFG_SCREEN_ADD("screen", RASTER)
+	MCFG_SCREEN_REFRESH_RATE(60)
+	MCFG_SCREEN_VBLANK_TIME(ATTOSECONDS_IN_USEC(2500))
+	MCFG_SCREEN_SIZE(256, 256)
+	MCFG_SCREEN_VISIBLE_AREA(0*8, 30*8-1, 2*8, 32*8-1)
+	MCFG_SCREEN_UPDATE_STATIC(astrowar)
+
 	MCFG_GFXDECODE(astrowar)
+	MCFG_PALETTE_LENGTH(0x100)
+
+	MCFG_VIDEO_START(galaxia)
+
+	MCFG_S2636_ADD("s2636_0", astrowar_s2636_config)
+
+	/* sound hardware */
+	MCFG_SPEAKER_STANDARD_MONO("mono")
+
+	MCFG_SOUND_ADD("s2636snd_0", S2636_SOUND, 0)
+	MCFG_SOUND_ROUTE(ALL_OUTPUTS, "mono", 0.25)
 MACHINE_CONFIG_END
 
+
+/***************************************************************************
+
+  Game drivers
+
+***************************************************************************/
+
 ROM_START( galaxia )
 	ROM_REGION( 0x10000, "maincpu", 0 )
-	ROM_LOAD( "08h.bin", 0x00000, 0x0400, CRC(f3b4ffde) SHA1(15b004e7821bfc145158b1e9435f061c524f6b86) )
-	ROM_LOAD( "10h.bin", 0x00400, 0x0400, CRC(6d07fdd4) SHA1(d7d4b345a055275d59951788569db370bccd5195) )
-	ROM_LOAD( "11h.bin", 0x00800, 0x0400, CRC(1520eb3d) SHA1(3683174da701e1124af0f9c2ee4a9a84f3fea33a) )
-	ROM_LOAD( "13h.bin", 0x00c00, 0x0400, CRC(c4482770) SHA1(aee983cc3d80989f49aea4138961bb623039484a) )
-	ROM_LOAD( "08i.bin", 0x01000, 0x0400, CRC(45b88599) SHA1(3b79c21db1aa9d80fac81ac5a554e438805febd1) )
-	ROM_LOAD( "10i.bin", 0x02000, 0x0400, CRC(c0baa654) SHA1(80e0880c32ad285fbce0f7f552268b964b97cab3) )
-	ROM_LOAD( "11i.bin", 0x02400, 0x0400, CRC(4456808a) SHA1(f9e8cfdde0e17f13f1be297b2b4503ccc959b33c) )
-	ROM_LOAD( "13i.bin", 0x02800, 0x0400, CRC(cf653b9a) SHA1(fef5943de60cb5ba2459fc6ae7419e29c96a76cd) )
-	ROM_LOAD( "11l.bin", 0x02c00, 0x0400, CRC(50c6a645) SHA1(46638907bc393df6be25fc7461d73047d1746ffc) )
-	ROM_LOAD( "13l.bin", 0x03000, 0x0400, CRC(3a9c38c7) SHA1(d1e934092b69c0f3f9636eba05a1d8a6d9588e6b) )
+	ROM_LOAD( "galaxia.8h",  0x00000, 0x0400, CRC(f3b4ffde) SHA1(15b004e7821bfc145158b1e9435f061c524f6b86) )
+	ROM_LOAD( "galaxia.10h", 0x00400, 0x0400, CRC(6d07fdd4) SHA1(d7d4b345a055275d59951788569db370bccd5195) )
+	ROM_LOAD( "galaxia.11h", 0x00800, 0x0400, CRC(1520eb3d) SHA1(3683174da701e1124af0f9c2ee4a9a84f3fea33a) )
+	ROM_LOAD( "galaxia.13h", 0x00c00, 0x0400, CRC(c4482770) SHA1(aee983cc3d80989f49aea4138961bb623039484a) )
+	ROM_LOAD( "galaxia.8i",  0x01000, 0x0400, CRC(45b88599) SHA1(3b79c21db1aa9d80fac81ac5a554e438805febd1) )
+	ROM_LOAD( "galaxia.10i", 0x02000, 0x0400, CRC(c0baa654) SHA1(80e0880c32ad285fbce0f7f552268b964b97cab3) )
+	ROM_LOAD( "galaxia.11i", 0x02400, 0x0400, CRC(4456808a) SHA1(f9e8cfdde0e17f13f1be297b2b4503ccc959b33c) )
+	ROM_LOAD( "galaxia.13i", 0x02800, 0x0400, CRC(cf653b9a) SHA1(fef5943de60cb5ba2459fc6ae7419e29c96a76cd) )
+	ROM_LOAD( "galaxia.11l", 0x02c00, 0x0400, CRC(50c6a645) SHA1(46638907bc393df6be25fc7461d73047d1746ffc) )
+	ROM_LOAD( "galaxia.13l", 0x03000, 0x0400, CRC(3a9c38c7) SHA1(d1e934092b69c0f3f9636eba05a1d8a6d9588e6b) )
 
 	ROM_REGION( 0x0800, "gfx1", 0 )
-	ROM_LOAD( "01d.bin", 0x00000, 0x0400, CRC(2dd50aab) SHA1(758d7a5383c9a1ee134d99e3f7025819cfbe0e0f) )
-	ROM_LOAD( "03d.bin", 0x00400, 0x0400, CRC(1dc30185) SHA1(e3c75eecb80b376ece98f602e1b9587487841824) )
+	ROM_LOAD( "galaxia.1d", 0x00000, 0x0400, CRC(2dd50aab) SHA1(758d7a5383c9a1ee134d99e3f7025819cfbe0e0f) )
+	ROM_LOAD( "galaxia.3d", 0x00400, 0x0400, CRC(1dc30185) SHA1(e3c75eecb80b376ece98f602e1b9587487841824) )
 
-	ROM_REGION( 0x80000, "proms", 0 )
-	ROM_LOAD( "11o", 0x00000, 0x0200, CRC(ae816417) SHA1(9497857d13c943a2735c3b85798199054e613b2c) )
+	ROM_REGION( 0x0200, "proms", 0 ) // unknown function
+	ROM_LOAD( "prom.11o", 0x0000, 0x0200, CRC(ae816417) SHA1(9497857d13c943a2735c3b85798199054e613b2c) )
 ROM_END
 
-
 ROM_START( astrowar )
 	ROM_REGION( 0x10000, "maincpu", 0 )
-	ROM_LOAD( "astro8h.rom",  0x00000, 0x0400, CRC(b0ec246c) SHA1(f9123b5e317938655f5e8b3f8a5810d0b2b7c7af) )
-	ROM_LOAD( "astro10h.rom", 0x00400, 0x0400, CRC(090d360f) SHA1(528ddcdc30a5a291bd8850ff6f134fcc19af562f) )
-	ROM_LOAD( "astro11h.rom", 0x00800, 0x0400, CRC(72ab1378) SHA1(50743c64c4775076aa6f1d8ab2e05c14884bf0ba) )
-	ROM_LOAD( "astro13h.rom", 0x00c00, 0x0400, CRC(2dc4c895) SHA1(831afbfd4ebfd6522ab0758222bc6f9826148a5d) )
-	ROM_LOAD( "astro8i.rom",  0x01000, 0x0400, CRC(ab87fbfc) SHA1(34b670f96c260f186c643e588995ae5d80377784) )
-	ROM_LOAD( "astro10i.rom", 0x02000, 0x0400, CRC(533675c1) SHA1(69cc066e1874a135a53a21b7b2461bda456504f1) )
-	ROM_LOAD( "astro11i.rom", 0x02400, 0x0400, CRC(59cf8901) SHA1(e849d4c99350b7e3453c156d91618b71b5be1163) )
-	ROM_LOAD( "astro13i.rom", 0x02800, 0x0400, CRC(5149c121) SHA1(232ba594e283fb25c31d8ae0b7d8315a81852a71) )
-	ROM_LOAD( "astro11l.rom", 0x02c00, 0x0400, CRC(29f52f57) SHA1(5cb50b82e09c537eeaeae167351fca686fde8228) )
-	ROM_LOAD( "astro13l.rom", 0x03000, 0x0400, CRC(882cdb87) SHA1(062ee8d296316cbce2eb62e72774aa4181e9847d) )
+	ROM_LOAD( "astro.8h",  0x00000, 0x0400, CRC(b0ec246c) SHA1(f9123b5e317938655f5e8b3f8a5810d0b2b7c7af) )
+	ROM_LOAD( "astro.10h", 0x00400, 0x0400, CRC(090d360f) SHA1(528ddcdc30a5a291bd8850ff6f134fcc19af562f) )
+	ROM_LOAD( "astro.11h", 0x00800, 0x0400, CRC(72ab1378) SHA1(50743c64c4775076aa6f1d8ab2e05c14884bf0ba) )
+	ROM_LOAD( "astro.13h", 0x00c00, 0x0400, CRC(2dc4c895) SHA1(831afbfd4ebfd6522ab0758222bc6f9826148a5d) )
+	ROM_LOAD( "astro.8i",  0x01000, 0x0400, CRC(ab87fbfc) SHA1(34b670f96c260f186c643e588995ae5d80377784) )
+	ROM_LOAD( "astro.10i", 0x02000, 0x0400, CRC(533675c1) SHA1(69cc066e1874a135a53a21b7b2461bda456504f1) )
+	ROM_LOAD( "astro.11i", 0x02400, 0x0400, CRC(59cf8901) SHA1(e849d4c99350b7e3453c156d91618b71b5be1163) )
+	ROM_LOAD( "astro.13i", 0x02800, 0x0400, CRC(5149c121) SHA1(232ba594e283fb25c31d8ae0b7d8315a81852a71) )
+	ROM_LOAD( "astro.11l", 0x02c00, 0x0400, CRC(29f52f57) SHA1(5cb50b82e09c537eeaeae167351fca686fde8228) )
+	ROM_LOAD( "astro.13l", 0x03000, 0x0400, CRC(882cdb87) SHA1(062ee8d296316cbce2eb62e72774aa4181e9847d) )
 
 	ROM_REGION( 0x0800, "gfx1", 0 )
-	ROM_LOAD( "astro1d.rom",  0x00000, 0x0400, CRC(6053f834) SHA1(e0b76800c241b3c8010c09869cecbc109b25310a) )
-	ROM_LOAD( "astro3d.rom",  0x00400, 0x0400, CRC(822505aa) SHA1(f9d3465e14bb850a286f8b4f42aa0a4044413b67) )
-
-	ROM_REGION( 0x80000, "proms", 0 )
-	ROM_LOAD( "11o.rom", 0x00000, 0x0200, NO_DUMP ) /* a rom is missing */
+	ROM_LOAD( "astro.1d",  0x00000, 0x0400, CRC(6053f834) SHA1(e0b76800c241b3c8010c09869cecbc109b25310a) )
+	ROM_LOAD( "astro.3d",  0x00400, 0x0400, CRC(822505aa) SHA1(f9d3465e14bb850a286f8b4f42aa0a4044413b67) )
 ROM_END
 
 
-static DRIVER_INIT(galaxia)
-{
-	galaxia_state *state = machine.driver_data<galaxia_state>();
-	state->m_color=auto_alloc_array(machine, UINT8, 0x400);
-}
-
-GAME( 1979, galaxia, 0, galaxia, galaxia, galaxia, ROT90, "Zaccaria", "Galaxia", GAME_NOT_WORKING )
-GAME( 1980, astrowar, 0, astrowar, galaxia, galaxia, ROT90, "Zaccaria", "Astro Wars", GAME_NOT_WORKING|GAME_WRONG_COLORS )
+GAME( 1979, galaxia,  0, galaxia,  galaxia, 0, ROT90, "Zaccaria / Zelco", "Galaxia",    GAME_WRONG_COLORS | GAME_IMPERFECT_GRAPHICS )
+GAME( 1980, astrowar, 0, astrowar, galaxia, 0, ROT90, "Zaccaria / Zelco", "Astro Wars", GAME_WRONG_COLORS | GAME_IMPERFECT_GRAPHICS )
diff -Nru src-old/mame/drivers/galaxian.c src/mame/drivers/galaxian.c
--- src-old/mame/drivers/galaxian.c	2012-03-11 06:21:49.000000000 +0100
+++ src/mame/drivers/galaxian.c	2012-03-17 19:21:28.000000000 +0100
@@ -2136,10 +2136,6 @@
 	MCFG_CPU_MODIFY("maincpu")
 	MCFG_CPU_PROGRAM_MAP(galaxian_map_base)  /* no discrete sound */
 
-	/* video hardware */
-	MCFG_SCREEN_MODIFY("screen")
-	MCFG_SCREEN_UPDATE_STATIC(zigzag)
-
 	/* sound hardware */
 	MCFG_SOUND_ADD("aysnd", AY8910, 1789750)
 
@@ -2651,6 +2647,8 @@
 	galaxian_state *state = machine.driver_data<galaxian_state>();
 	state->m_irq_enabled = 0;
 	state->m_irq_line = INPUT_LINE_NMI;
+	state->m_numspritegens = 1;
+	state->m_bullets_base = 0x60;
 	state->m_frogger_adjust = FALSE;
 	state->m_sfx_tilemap = FALSE;
 	state->m_draw_bullet_ptr = (draw_bullet != NULL) ? draw_bullet : galaxian_draw_bullet;
@@ -2926,6 +2924,9 @@
 	common_init(machine, NULL, galaxian_draw_background, NULL, NULL);
 	state->m_draw_bullet_ptr = NULL;
 
+	/* two sprite generators */
+	state->m_numspritegens = 2;
+
 	/* make ROMs 2 & 3 swappable */
 	space->install_read_bank(0x2000, 0x2fff, "bank1");
 	space->install_read_bank(0x3000, 0x3fff, "bank2");
@@ -3049,6 +3050,21 @@
 }
 
 
+static DRIVER_INIT( kong )
+{
+	address_space *space = machine.device("maincpu")->memory().space(AS_PROGRAM);
+
+	/* video extensions */
+	common_init(machine, galaxian_draw_bullet, galaxian_draw_background, NULL, upper_extend_sprite_info);
+
+	/* needs a full 2k of RAM */
+	space->install_ram(0x8000, 0x87ff);
+
+	/* extend ROM */
+	space->install_rom(0x0000, 0x7fff, machine.region("maincpu")->base());
+}
+
+
 static void mshuttle_decode(running_machine &machine, const UINT8 convtable[8][16])
 {
 	address_space *space = machine.device("maincpu")->memory().space(AS_PROGRAM);
@@ -3131,9 +3147,17 @@
 
 static DRIVER_INIT( fantastc )
 {
+	galaxian_state *state = machine.driver_data<galaxian_state>();
+
 	/* video extensions */
 	common_init(machine, galaxian_draw_bullet, galaxian_draw_background, NULL, upper_extend_sprite_info);
 
+	/* two sprite generators */
+	state->m_numspritegens = 2;
+
+	/* bullets moved from $60 to $c0 */
+	state->m_bullets_base = 0xc0;
+
 	/* decode code */
 	static const UINT16 lut_am_unscramble[32] = {
 		0, 2, 4, 6,	// ok!
diff -Nru src-old/mame/drivers/galdrvr.c src/mame/drivers/galdrvr.c
--- src-old/mame/drivers/galdrvr.c	2012-03-11 06:21:49.000000000 +0100
+++ src/mame/drivers/galdrvr.c	2012-03-24 23:07:08.000000000 +0100
@@ -1224,6 +1224,70 @@
 INPUT_PORTS_END
 
 
+static INPUT_PORTS_START( kong )
+	PORT_START("IN0")
+	PORT_DIPNAME( 0x01, 0x01, DEF_STR( Unknown ) )
+	PORT_DIPSETTING(    0x01, DEF_STR( Off ) )
+	PORT_DIPSETTING(    0x00, DEF_STR( On ) )
+	PORT_BIT( 0x02, IP_ACTIVE_HIGH, IPT_COIN1 )
+	PORT_BIT( 0x04, IP_ACTIVE_HIGH, IPT_JOYSTICK_LEFT )
+	PORT_BIT( 0x08, IP_ACTIVE_HIGH, IPT_JOYSTICK_RIGHT )
+	PORT_DIPNAME( 0x10, 0x10, DEF_STR( Unknown ) )
+	PORT_DIPSETTING(    0x10, DEF_STR( Off ) )
+	PORT_DIPSETTING(    0x00, DEF_STR( On ) )
+	PORT_SERVICE( 0x20, IP_ACTIVE_HIGH )
+	PORT_DIPNAME( 0x40, 0x00, "99 Men/Max Timer (Cheat)" )
+	PORT_DIPSETTING(    0x00, DEF_STR( Off ) )
+	PORT_DIPSETTING(    0x40, DEF_STR( On ) )
+	PORT_BIT( 0x80, IP_ACTIVE_HIGH, IPT_JOYSTICK_UP )
+
+	PORT_START("IN1")
+	PORT_BIT( 0x01, IP_ACTIVE_HIGH, IPT_BUTTON1 ) PORT_NAME ("One Player Start/Jump")
+	PORT_BIT( 0x02, IP_ACTIVE_HIGH, IPT_BUTTON2 ) PORT_NAME ("Two Player Start/Jump")
+	PORT_DIPNAME( 0x04, 0x04, DEF_STR( Unknown ) )
+	PORT_DIPSETTING(    0x04, DEF_STR( Off ) )
+	PORT_DIPSETTING(    0x00, DEF_STR( On ) )
+	PORT_DIPNAME( 0x08, 0x08, DEF_STR( Unknown ) )
+	PORT_DIPSETTING(    0x08, DEF_STR( Off ) )
+	PORT_DIPSETTING(    0x00, DEF_STR( On ) )
+	PORT_DIPNAME( 0x10, 0x10, DEF_STR( Unknown ) )
+	PORT_DIPSETTING(    0x10, DEF_STR( Off ) )
+	PORT_DIPSETTING(    0x00, DEF_STR( On ) )
+	PORT_BIT( 0x20, IP_ACTIVE_HIGH, IPT_JOYSTICK_DOWN )
+	PORT_DIPNAME( 0x40, 0x00, DEF_STR( Lives ) )
+	PORT_DIPSETTING(    0x00, "3" )
+	PORT_DIPSETTING(    0x40, "5" )
+	PORT_DIPNAME( 0x80, 0x00, DEF_STR( Coin_A ) )
+	PORT_DIPSETTING(    0x00, DEF_STR( 1C_1C ) )
+	PORT_DIPSETTING(    0x80, DEF_STR( 2C_1C ) )
+
+	PORT_START("IN2")
+	PORT_DIPNAME( 0x03, 0x00, DEF_STR( Bonus_Life ) )
+	PORT_DIPSETTING(    0x00, "10000" )
+	PORT_DIPSETTING(    0x01, "20000" )
+	PORT_DIPSETTING(    0x02, "30000" )
+	PORT_DIPSETTING(    0x03, DEF_STR( None ) )
+	PORT_DIPNAME( 0x04, 0x00, "Mode" )
+	PORT_DIPSETTING(    0x04, "Tournament (harder)" )
+	PORT_DIPSETTING(    0x00, "Normal" )
+	PORT_DIPNAME( 0x08, 0x08, DEF_STR( Unknown ) )
+	PORT_DIPSETTING(    0x08, DEF_STR( Off ) )
+	PORT_DIPSETTING(    0x00, DEF_STR( On ) )
+	PORT_DIPNAME( 0x10, 0x10, DEF_STR( Unknown ) )
+	PORT_DIPSETTING(    0x10, DEF_STR( Off ) )
+	PORT_DIPSETTING(    0x00, DEF_STR( On ) )
+	PORT_DIPNAME( 0x20, 0x20, DEF_STR( Unknown ) )
+	PORT_DIPSETTING(    0x20, DEF_STR( Off ) )
+	PORT_DIPSETTING(    0x00, DEF_STR( On ) )
+	PORT_DIPNAME( 0x40, 0x40, DEF_STR( Unknown ) )
+	PORT_DIPSETTING(    0x40, DEF_STR( Off ) )
+	PORT_DIPSETTING(    0x00, DEF_STR( On ) )
+	PORT_DIPNAME( 0x80, 0x80, DEF_STR( Unknown ) )
+	PORT_DIPSETTING(    0x80, DEF_STR( Off ) )
+	PORT_DIPSETTING(    0x00, DEF_STR( On ) )
+INPUT_PORTS_END
+
+
 static INPUT_PORTS_START( tdpgal )
 	PORT_START("IN0")
 	PORT_BIT( 0x01, IP_ACTIVE_HIGH, IPT_COIN1 )
@@ -3570,6 +3634,28 @@
 	ROM_LOAD( "l06_prom.bin", 0x0000, 0x0020, CRC(6a0c7d87) SHA1(140335d85c67c75b65689d4e76d29863c209cf32) )
 ROM_END
 
+ROM_START( galemp )
+	ROM_REGION( 0x4000, "maincpu", 0 )
+	ROM_LOAD( "1",  0x0000, 0x0800, CRC(d975af10) SHA1(a2e2a36a75db8fd09441308b08b6ae073c68b8cf) )
+	ROM_LOAD( "2",  0x0800, 0x0800, CRC(b2ed14c3) SHA1(7668df11f64b8e296eedfee53437777dc53a56d5) )
+	ROM_LOAD( "3",  0x1000, 0x0800, CRC(945f4160) SHA1(5fbe879f51e14c4c7ae551e5b3089f8e148770a4) )
+	ROM_LOAD( "4",  0x1800, 0x0800, CRC(df7a13ea) SHA1(9d07cdfde84c9243719092234cfa362bf2878a95) )
+	ROM_LOAD( "5",  0x2000, 0x0800, CRC(ff6128a2) SHA1(64cc17b6cab8d8fd8358840beb13baa76262c6aa) )
+	ROM_LOAD( "6",  0x2800, 0x0800, CRC(d915a389) SHA1(0e2ff6eec9453856a1276889946b463cfae58eba) )
+	ROM_LOAD( "7",  0x3000, 0x0800, CRC(c9245346) SHA1(239bad3fe64eaab2dfc3febd06d1124103a10504) )
+	ROM_LOAD( "8",  0x3800, 0x0800, CRC(797d45c7) SHA1(76fb8b45fcce3622c59c04af32cfa001ef7bf71d) )
+
+	ROM_REGION( 0x2000, "gfx1", 0 )
+	ROM_LOAD( "10",    0x0000, 0x0800, CRC(30177b93) SHA1(b91740b573eadb9a0df23f55594d22b10ea93555) )
+	ROM_LOAD( "12",    0x0800, 0x0800, CRC(c26132af) SHA1(7ae125a911dfd47aeca4f129f580762ce4d8d91a) )
+	ROM_LOAD( "9",     0x1000, 0x0800, CRC(7e8dcc13) SHA1(56450cb3a9c77a578a12f664d07dbfbbcb82bc07) )
+	ROM_LOAD( "11",    0x1800, 0x0800, CRC(dcc2b33b) SHA1(c3a5ac935c519400dfabb28909f7e460769d1837) )
+
+	ROM_REGION( 0x0020, "proms", 0 )
+	ROM_LOAD( "l06_prom.bin", 0x0000, 0x0020, CRC(6a0c7d87) SHA1(140335d85c67c75b65689d4e76d29863c209cf32) )
+ROM_END
+
+
 ROM_START( spacbatt )
 	ROM_REGION( 0x4000, "maincpu", 0 )
 	ROM_LOAD( "sb1",    0x0000, 0x0800, CRC(d975af10) SHA1(a2e2a36a75db8fd09441308b08b6ae073c68b8cf) ) /* Same as f07_1a.bin above */
@@ -4447,6 +4533,30 @@
 	ROM_LOAD( "prom-74g138", 0x0000, 0x0020, BAD_DUMP CRC(b7cbbc1f) SHA1(ba7c496091a3e5701a6d01423446ee89a42edcd3) ) // or different wiring?
 ROM_END
 
+ROM_START( kong )
+	ROM_REGION( 0x8000, "maincpu", 0 )
+	ROM_LOAD( "1",   0x0000, 0x1000, CRC(a206beb5) SHA1(5fea9584b4e3ae076178f6965f0743b9b90b15fc) )
+	ROM_LOAD( "2",   0x1000, 0x1000, CRC(d75597b6) SHA1(df9dc99e4f0e864a91ae170d993838db8677f70f) )
+	ROM_LOAD( "3",   0x2000, 0x1000, CRC(54e0b87b) SHA1(cfcc64fce36bf8250966576a34768ed7e8857783) )
+	ROM_LOAD( "4",   0x3000, 0x1000, CRC(356c4ca2) SHA1(e95d219b013a1b066653b566a84c03c035a03073) )
+	ROM_LOAD( "5",   0x4000, 0x1000, CRC(2d295976) SHA1(79e26c55e06b894bab403de77d76260c2bb3baf0) )
+	ROM_LOAD( "6",   0x5000, 0x1000, CRC(77131cca) SHA1(900948988f2f6de6b572e5e489a7954eca812278) )
+	ROM_LOAD( "7",   0x6000, 0x1000, CRC(3d5ec3f1) SHA1(b382e4a2d2915db190a1578b0ad51ca9b94d521b) )
+	ROM_LOAD( "8",   0x7000, 0x1000, CRC(015fe5e5) SHA1(d246d1c791eb4d85e59a826ed0accd9f1da483bb) )
+
+	ROM_REGION( 0x2000, "gfx1", 0 )
+	ROM_LOAD( "9",   0x0000, 0x0800, CRC(fe42a052) SHA1(3f5893728c1aa73f28ff4841a388124b15bbf1b7) )
+	ROM_LOAD( "10",   0x1000, 0x0800, CRC(91fa187e) SHA1(f32741a06a3d9ba4b7d3a5552f796a27d9fa1abf) )
+	ROM_LOAD( "11",   0x0800, 0x0800, CRC(ad2b2cdd) SHA1(01a5db01c4fa07707823436a28d40cfd2b80be23) )
+	ROM_LOAD( "12",   0x1800, 0x0800, CRC(b74724df) SHA1(d72d0831e3806f49a07ae3333d7a29fccaf6d65e) )
+
+	ROM_REGION( 0x2000, "unk", 0 ) // what is this?
+	ROM_LOAD( "13",   0x0000, 0x1000, CRC(7d33ca0a) SHA1(8a65a4b913559e3fd17f6abb381db1ab813fc8f2) )
+
+	ROM_REGION( 0x0020, "proms", 0 )
+	ROM_LOAD( "prom", 0x0000, 0x0020, NO_DUMP )
+ROM_END
+
 ROM_START( mooncmw )
 	ROM_REGION( 0x8000, "maincpu", 0 )
 	ROM_LOAD( "60.1x",      0x0000, 0x0800, CRC(322859e6) SHA1(292dccb66c38c8de837ec3ac10928d092494958e) )
@@ -6277,6 +6387,7 @@
 GAME( 1980, spacbat2, uniwars,  galaxian, spacbatt, pisces,   ROT90,  "bootleg", "Space Battle (bootleg set 2)", GAME_SUPPORTS_SAVE )
 GAME( 1980, spacempr, uniwars,  galaxian, spacbatt, pisces,   ROT90,  "bootleg", "Space Empire (bootleg)", GAME_SUPPORTS_SAVE )
 GAME( 1980, skyraidr, uniwars,  galaxian, superg,   pisces,   ROT90,  "bootleg", "Sky Raider (Uniwars bootleg)", GAME_SUPPORTS_SAVE )
+GAME( 1980, galemp,   uniwars,  galaxian, superg,   pisces,   ROT90,  "bootleg (Taito do Brasil)", "Galaxy Empire (bootleg?)", GAME_SUPPORTS_SAVE ) // clearly a hack, but was it licensed?
 
 
 /* Artic Multi-System games - separate tile/sprite ROMs */
@@ -6293,8 +6404,8 @@
 GAME( 1984, devilfsg, devilfsh, pacmanbl, devilfsg, devilfsg, ROT270, "Vision / Artic", "Devil Fish (Galaxian hardware, bootleg?)", GAME_SUPPORTS_SAVE )
 
 /* sound hardware replaced with AY8910 */
-GAME( 1982, zigzag,   0,        zigzag,   zigzag,   zigzag,   ROT90,  "bootleg (LAX)", "Zig Zag (Galaxian hardware, set 1)", GAME_SUPPORTS_SAVE )
-GAME( 1982, zigzag2,  zigzag,   zigzag,   zigzag,   zigzag,   ROT90,  "bootleg (LAX)", "Zig Zag (Galaxian hardware, set 2)", GAME_SUPPORTS_SAVE )
+GAME( 1982, zigzag,   0,        zigzag,   zigzag,   zigzag,   ROT90,  "bootleg (LAX)", "Zig Zag (Galaxian hardware, set 1)", GAME_SUPPORTS_SAVE ) // maybe by Taito do Brasil?
+GAME( 1982, zigzag2,  zigzag,   zigzag,   zigzag,   zigzag,   ROT90,  "bootleg (LAX)", "Zig Zag (Galaxian hardware, set 2)", GAME_SUPPORTS_SAVE ) // "
 
 /* multi-game select via external switch */
 GAME( 1981, gmgalax,  0,        gmgalax,  gmgalax,  gmgalax,  ROT90,  "bootleg", "Ghostmuncher Galaxian (bootleg)", GAME_SUPPORTS_SAVE )
@@ -6344,9 +6455,10 @@
 
 /* other games on basic mooncrst hardware */
 GAME( 1982, skybase,  0,        mooncrst, skybase,  skybase,  ROT90,  "Omori Electric Co., Ltd.", "Sky Base", GAME_SUPPORTS_SAVE )
+GAME( 198?, kong,     0,        mooncrst, kong,     kong,     ROT90,  "Taito do Brasil", "Kong (Brazil)", GAME_SUPPORTS_SAVE | GAME_WRONG_COLORS ) // rewrite of Donkey Kong (!) not a clone
 
 /* larger romspace, 2*AY8910, based on Super Star Crest board? */
-GAME( 198?, fantastc, 0,        fantastc, fantastc, fantastc, ROT90,  "Taito do Brasil", "Fantastic", GAME_SUPPORTS_SAVE | GAME_NOT_WORKING )
+GAME( 198?, fantastc, 0,        fantastc, fantastc, fantastc, ROT90,  "Taito do Brasil", "Fantastic", GAME_SUPPORTS_SAVE | GAME_WRONG_COLORS ) // rewrite of Galaga (!) not a clone
 
 /* extra ROMs, protection, and sound hardware replaced with AY8910 */
 GAME( 1981, jumpbug,  0,        jumpbug,  jumpbug,  jumpbug,  ROT90,  "Hoei (Rock-Ola license)", "Jump Bug", GAME_SUPPORTS_SAVE ) // or by Alpha Denshi Co. under contract from Hoei?
@@ -6360,9 +6472,9 @@
 GAME( 1983, dingoe,   dingo,    checkman, dingo,    dingoe,   ROT90,  "Ashby Computers and Graphics Ltd.", "Dingo (encrypted)", GAME_NOT_WORKING | GAME_SUPPORTS_SAVE )
 
 /* Crazy Climber sound plus AY8910 instead of galaxian sound, plus INT instead of NMI */
-GAME( 1981, mshuttle,  0,        mshuttle, mshuttle, mshuttle, ROT0,   "Nichibutsu", "Moon Shuttle (US?)", GAME_SUPPORTS_SAVE )
+GAME( 1981, mshuttle,  0,        mshuttle, mshuttle, mshuttle, ROT0,   "Nichibutsu", "Moon Shuttle (US? set 1)", GAME_SUPPORTS_SAVE )
 GAME( 1981, mshuttle2, mshuttle, mshuttle, mshuttle, mshuttle, ROT0,   "Nichibutsu", "Moon Shuttle (US? set 2)", GAME_SUPPORTS_SAVE )
-GAME( 1981, mshuttlej, mshuttle, mshuttle, mshuttle, mshuttlj, ROT0,   "Nichibutsu", "Moon Shuttle (Japan)", GAME_SUPPORTS_SAVE )
+GAME( 1981, mshuttlej, mshuttle, mshuttle, mshuttle, mshuttlj, ROT0,   "Nichibutsu", "Moon Shuttle (Japan set 1)", GAME_SUPPORTS_SAVE )
 GAME( 1981, mshuttlej2,mshuttle, mshuttle, mshuttle, mshuttlj, ROT0,   "Nichibutsu", "Moon Shuttle (Japan set 2)", GAME_SUPPORTS_SAVE )
 
 /* 2nd CPU driving DAC for sound */
@@ -6515,7 +6627,7 @@
 //GAME( 1983, newsin7,  0,        theend  /*newsin7*/,  newsin7,  mars,         ROT90, "ATW USA, Inc.", "New Sinbad 7", GAME_SUPPORTS_SAVE )
 //GAME( 1984, mrkougar, 0,        theend  /*mrkougar*/, mrkougar, mrkougar,     ROT90, "ATW", "Mr. Kougar", GAME_SUPPORTS_SAVE )
 //GAME( 1983, mrkougr2, mrkougar, theend  /*mrkougar*/, mrkougar, mrkougar,     ROT90, "ATW", "Mr. Kougar (earlier)", GAME_SUPPORTS_SAVE )
-//GAME( 1983, mrkougb,  mrkougar, theend  /*mrkougb*/,  mrkougar, mrkougb,      ROT90, "bootleg", "Mr. Kougar (bootleg)", GAME_SUPPORTS_SAVE )
+//GAME( 1983, mrkougb,  mrkougar, theend  /*mrkougb*/,  mrkougar, mrkougb,      ROT90, "bootleg", "Mr. Kougar (bootleg set 1)", GAME_SUPPORTS_SAVE )
 //GAME( 1983, mrkougb2, mrkougar, theend  /*mrkougb*/,  mrkougar, mrkougb,      ROT90, "bootleg", "Mr. Kougar (bootleg set 2)", GAME_SUPPORTS_SAVE )
 //GAME( 1982, hotshock, 0,        theend  /*hotshock*/, hotshock, hotshock,     ROT90, "E.G. Felaco", "Hot Shocker", GAME_SUPPORTS_SAVE )
 //GAME( 1982, conquer,  0,        theend  /*hotshock*/, hotshock, 0,            ROT90, "<unknown>", "Conquer", GAME_NOT_WORKING | GAME_SUPPORTS_SAVE)
diff -Nru src-old/mame/drivers/goldnpkr.c src/mame/drivers/goldnpkr.c
--- src-old/mame/drivers/goldnpkr.c	2012-02-26 16:31:24.000000000 +0100
+++ src/mame/drivers/goldnpkr.c	2012-03-25 15:56:49.000000000 +0200
@@ -8,75 +8,116 @@
 
   Games running on this hardware:
 
-  * Golden Poker Double Up (Big Boy).         1981, Bonanza Enterprises, Ltd.
-  * Golden Poker Double Up (Mini Boy).        1981, Bonanza Enterprises, Ltd.
-  * Jack Potten's Poker (set 1).              198?, Bootleg.
-  * Jack Potten's Poker (set 2).              198?, Bootleg in Coinmaster H/W.
-  * Jack Potten's Poker (set 3).              198?, Bootleg.
-  * Jack Potten's Poker (set 4).              198?, Bootleg.
-  * Jack Potten's Poker (set 5).              198?, Bootleg.
-  * Jack Potten's Poker (set 6).              198?, Bootleg.
-  * Good Luck.                                198?, Unknown.
-  * Super Double (french).                    198?, Karateco.
-  * Jack Potten's Poker (NGold, set 1).       198?, Unknown.
-  * Jack Potten's Poker (NGold, set 2).       198?, Unknown.
-  * Jack Potten's Poker (NGold, set 3).       198?, Unknown.
-  * Witch Card (Video Klein CPU box, set 1).  1991, Video Klein.
-  * Witch Card (Video Klein CPU box, set 2).  1991, Video Klein.
-  * Witch Card (Spanish, witch game, set 1).  1991, Unknown.
-  * Witch Card (Spanish, witch game, set 2).  1991, Unknown.
-  * Witch Card (English, no witch game).      1991, Unknown.
-  * Witch Card (German, WC3050, set 1 ).      1994, Proma.
-  * Witch Card (English, witch game, lamps).  1985, PM / Beck Elektronik.
-  * Witch Card (Falcon, enhanced sound).      199?, Falcon.
-  * Witch Card (German, WC3050, set 2 ).      1994, Proma.
-  * Witch Card (German, WC3050, 27-4-94),     1994, Proma.
-  * Witch Game (Video Klein, set 1).          1991, Video Klein.
-  * Witch Game (Video Klein, set 2).          1991, Video Klein.
-  * Jolli Witch (Export, 6T/12T ver 1.57D).   1994, Video Klein?.
-  * Wild Witch (Export, 6T/12T ver 1.74A).    1994, Video Klein.
-  * Buena Suerte (Spanish, set 1).            1990, Unknown.
-  * Buena Suerte (Spanish, set 2).            1991, Unknown.
-  * Buena Suerte (Spanish, set 3).            1991, Unknown.
-  * Buena Suerte (Spanish, set 4).            1991, Unknown.
-  * Buena Suerte (Spanish, set 5).            1991, Unknown.
-  * Buena Suerte (Spanish, set 6).            1991, Unknown.
-  * Buena Suerte (Spanish, set 7).            1991, Unknown.
-  * Buena Suerte (Spanish, set 8).            1991, Unknown.
-  * Buena Suerte (Spanish, set 9).            1991, Unknown.
-  * Buena Suerte (Spanish, set 10).           1991, Unknown.
-  * Buena Suerte (Spanish, set 11).           1991, Unknown.
-  * Buena Suerte (Spanish, set 12).           1991, Unknown.
-  * Buena Suerte (Spanish, set 13).           1991, Unknown.
-  * Buena Suerte (Spanish, set 14).           1991, Unknown.
-  * Buena Suerte (Spanish, set 15).           1991, Unknown.
-  * Buena Suerte (Spanish, set 16).           1991, Unknown.
-  * Buena Suerte (Spanish, set 17).           1991, Unknown.
-  * Buena Suerte (Spanish, set 18).           1991, Unknown.
-  * Buena Suerte (Spanish, set 19).           1991, Unknown.
-  * Buena Suerte (Spanish, set 20).           1991, Unknown.
-  * Buena Suerte (Spanish, set 21).           1991, Unknown.
-  * Buena Suerte (Spanish, set 22).           1991, Unknown.
-  * Falcons Wild - World Wide Poker.          1983, Falcon.
-  * Falcons Wild - World Wide Poker.          1990, Video Klein.
-  * Falcons Wild - Wild Card 1991.            1991, TVG.
-  * PlayMan Poker (german).                   1981, PM / Beck Elektronik.
-  * Super Loco 93 (Spanish, set 1).           1993, Unknown.
-  * Super Loco 93 (Spanish, set 2).           1993, Unknown.
-  * Royale (set 1).                           198?, Unknown.
-  * Royale (set 2).                           198?, Unknown.
-  * Maverik.                                  198?, Unknown.
-  * Brasil 86.                                1986, Unknown.
-  * Brasil 87.                                1987, Unknown.
-  * Brasil 89 (set 1).                        1989, Unknown.
-  * Brasil 89 (set 2).                        1989, Unknown.
-  * Brasil 93.                                1993, Unknown.
-  * Poker 91.                                 1991, Unknown.
-  * Genie.                                    198?, Video Fun Games Ltd.
-  * Silver Game.                              1983, Unknown.
-  * Casino Poker (Ver PM86LO-35-5, German).   1987, PM / Beck Elektronik.
-  * "Unknown french poker game".              198?, Unknown.
-  * "Unknown encrypted poker game".           198?, Unknown.
+  * Golden Poker Double Up (Big Boy),                 1981, Bonanza Enterprises, Ltd.
+  * Golden Poker Double Up (Mini Boy),                1981, Bonanza Enterprises, Ltd.
+  * Jack Potten's Poker (set 1),                      198?, Bootleg.
+  * Jack Potten's Poker (set 2),                      198?, Bootleg in Coinmaster H/W.
+  * Jack Potten's Poker (set 3),                      198?, Bootleg.
+  * Jack Potten's Poker (set 4),                      198?, Bootleg.
+  * Jack Potten's Poker (set 5),                      198?, Bootleg.
+  * Jack Potten's Poker (set 6),                      198?, Bootleg.
+  * Good Luck,                                        198?, Unknown.
+  * Super Double (french),                            198?, Karateco.
+  * Jack Potten's Poker (NGold, set 1),               198?, Unknown.
+  * Jack Potten's Poker (NGold, set 2),               198?, Unknown.
+  * Jack Potten's Poker (NGold, set 3),               198?, Unknown.
+  * Witch Card (Video Klein CPU box, set 1),          1991, Video Klein.
+  * Witch Card (Video Klein CPU box, set 2),          1991, Video Klein.
+  * Witch Card (Spanish, witch game, set 1),          1991, Unknown.
+  * Witch Card (Spanish, witch game, set 2),          1991, Unknown.
+  * Witch Card (English, no witch game),              1991, Unknown.
+  * Witch Card (German, WC3050, set 1 ),              1994, Proma.
+  * Witch Card (English, witch game, lamps),          1985, PM / Beck Elektronik.
+  * Witch Card (Falcon, enhanced sound),              199?, Falcon.
+  * Witch Card (German, WC3050, set 2 ),              1994, Proma.
+  * Witch Card (German, WC3050, 27-4-94),             1994, Proma.
+  * Witch Game (Video Klein, set 1),                  1991, Video Klein.
+  * Witch Game (Video Klein, set 2),                  1991, Video Klein.
+  * Jolli Witch (Export, 6T/12T ver 1.57D),           1994, Video Klein?.
+  * Wild Witch (Export, 6T/12T ver 1.57-SP),          1992-2001, Video Klein.
+  * Wild Witch (Export, 6T/12T ver 1.57-TE),          1992-2001, Video Klein.
+  * Wild Witch (Export, 6T/12T ver 1.62A),            1992-2001, Video Klein.
+  * Wild Witch (Export, 6T/12T ver 1.62B),            1992-2001, Video Klein.
+  * Wild Witch (Export, 6T/12T ver 1.62A-F),          1992-2001, Video Klein.
+  * Wild Witch (Export, 6T/12T ver 1.62A alt),        1992-2001, Video Klein.
+  * Wild Witch (Export, 6T/12T ver 1.62B alt),        1992-2001, Video Klein.
+  * Wild Witch (Export, 6T/12T ver 1.65A),            1992-2001, Video Klein.
+  * Wild Witch (Export, 6T/12T ver 1.65A-S),          1992-2001, Video Klein.
+  * Wild Witch (Export, 6T/12T ver 1.65A-S alt),      1992-2001, Video Klein.
+  * Wild Witch (Export, 6T/12T ver 1.65A-N),          1992-2001, Video Klein.
+  * Wild Witch (Export, 6T/12T ver 1.70A beta),       1992-2001, Video Klein.
+  * Wild Witch (Export, 6T/12T ver 1.70A),            1992-2001, Video Klein.
+  * Wild Witch (Export, 6T/12T ver 1.70A alt),        1992-2001, Video Klein.
+  * Wild Witch (Export, 6T/12T ver 1.74A-SP-BELG),    1992-2001, Video Klein.
+  * Wild Witch (Export, 6T/12T ver 1.74A),            1992-2001, Video Klein.
+  * Wild Witch (Export, 6T/12T ver 1.74A alt),        1992-2001, Video Klein.
+  * Wild Witch (Export, 6B/12B ver 1.75A-E English),  1992-2001, Video Klein.
+  * Wild Witch (Export, 6T/12T ver 1.76A),            1992-2001, Video Klein.
+  * Wild Witch (Export, 6T/12T ver 1.77A),            1992-2001, Video Klein.
+  * Wild Witch (Export, 6T/12T ver 1.79A),            1992-2001, Video Klein.
+  * Wild Witch (Export, 6T/12T ver 1.83A),            1992-2001, Video Klein.
+  * Wild Witch (Export, 6T/12T ver 1.84A),            1992-2001, Video Klein.
+  * Witch Up & Down (Export, 6T/12T ver 0.99, set 1), 1998, Video Klein.
+  * Witch Up & Down (Export, 6T/12T ver 0.99, set 2), 1998, Video Klein.
+  * Witch Up & Down (Export, 6T/12T ver 0.99, set 3), 1998, Video Klein.
+  * Witch Up & Down (Export, 6T/12T ver 0.99T),       1998, Video Klein.
+  * Witch Up & Down (Export, 6T/12T ver 1.02),        1998, Video Klein.
+  * Witch Strike (Export, 6T/12T ver 1.01A),          1992, Video Klein.
+  * Witch Strike (Export, 6T/12T ver 1.01B),          1992, Video Klein.
+  * Witch Jackpot (Export, 6T/12T ver 0.25),          1992-1996, Video Klein.
+  * Witch Jack (Export, 6T/12T ver 0.40),             1992-1996, Video Klein.
+  * Witch Jack (Export, 6T/12T ver 0.40T),            1992-1996, Video Klein.
+  * Witch Jack (Export, 6T/12T ver 0.62),             1992-1996, Video Klein.
+  * Witch Jack (Export, 6T/12T ver 0.64),             1992-1996, Video Klein.
+  * Witch Jack (Export, 6T/12T ver 0.65),             1992-1996, Video Klein.
+  * Witch Jack (Export, 6T/12T ver 0.70S),            1992-1996, Video Klein.
+  * Witch Jack (Export, 6T/12T ver 0.70P),            1992-1996, Video Klein.
+  * Witch Jack (Export, 6T/12T ver 0.87),             1992-1996, Video Klein.
+  * Witch Jack (Export, 6T/12T ver 0.87-88),          1992-1996, Video Klein.
+  * Witch Jack (Export, 6T/12T ver 0.87-89),          1992-1996, Video Klein.
+  * Buena Suerte (Spanish, set 1),                    1990, Unknown.
+  * Buena Suerte (Spanish, set 2),                    1991, Unknown.
+  * Buena Suerte (Spanish, set 3),                    1991, Unknown.
+  * Buena Suerte (Spanish, set 4),                    1991, Unknown.
+  * Buena Suerte (Spanish, set 5),                    1991, Unknown.
+  * Buena Suerte (Spanish, set 6),                    1991, Unknown.
+  * Buena Suerte (Spanish, set 7),                    1991, Unknown.
+  * Buena Suerte (Spanish, set 8),                    1991, Unknown.
+  * Buena Suerte (Spanish, set 9),                    1991, Unknown.
+  * Buena Suerte (Spanish, set 10),                   1991, Unknown.
+  * Buena Suerte (Spanish, set 11),                   1991, Unknown.
+  * Buena Suerte (Spanish, set 12),                   1991, Unknown.
+  * Buena Suerte (Spanish, set 13),                   1991, Unknown.
+  * Buena Suerte (Spanish, set 14),                   1991, Unknown.
+  * Buena Suerte (Spanish, set 15),                   1991, Unknown.
+  * Buena Suerte (Spanish, set 16),                   1991, Unknown.
+  * Buena Suerte (Spanish, set 17),                   1991, Unknown.
+  * Buena Suerte (Spanish, set 18),                   1991, Unknown.
+  * Buena Suerte (Spanish, set 19),                   1991, Unknown.
+  * Buena Suerte (Spanish, set 20),                   1991, Unknown.
+  * Buena Suerte (Spanish, set 21),                   1991, Unknown.
+  * Buena Suerte (Spanish, set 22),                   1991, Unknown.
+  * Falcons Wild - World Wide Poker,                  1983, Falcon.
+  * Falcons Wild - World Wide Poker (VK set 1),       1990, Video Klein.
+  * Falcons Wild - World Wide Poker (VK set 2),       1990, Video Klein.
+  * Falcons Wild - Wild Card 1991,                    1991, TVG.
+  * PlayMan Poker (german),                           1981, PM / Beck Elektronik.
+  * Super Loco 93 (Spanish, set 1),                   1993, Unknown.
+  * Super Loco 93 (Spanish, set 2),                   1993, Unknown.
+  * Royale (set 1),                                   198?, Unknown.
+  * Royale (set 2),                                   198?, Unknown.
+  * Maverik,                                          198?, Unknown.
+  * Brasil 86,                                        1986, Unknown.
+  * Brasil 87,                                        1987, Unknown.
+  * Brasil 89 (set 1),                                1989, Unknown.
+  * Brasil 89 (set 2),                                1989, Unknown.
+  * Brasil 93,                                        1993, Unknown.
+  * Poker 91,                                         1991, Unknown.
+  * Genie,                                            198?, Video Fun Games Ltd.
+  * Silver Game,                                      1983, Unknown.
+  * Casino Poker (Ver PM86LO-35-5, German),           1987, PM / Beck Elektronik.
+  * "Unknown french poker game",                      198?, Unknown.
+  * "Unknown encrypted poker game",                   198?, Unknown.
 
 
 ************************************************************************************
@@ -801,6 +842,89 @@
   - Added technical and game notes.
 
 
+  [2012-03-12]
+
+  - Emulated the Video Klein extended hardware, with Dallas Timekeeper,
+     and the insane 16 graphics banks scheme.
+  - Added Witch Up & Down (Export, 6T/12T ver 0.99).
+  - Added Witch Up & Down (Export, 6T/12T ver 1.02).
+  - Switched Wild Witch and Jolli Witch to the extended hardware.
+  - Accurate colors.
+  - Inputs and lamps from the scratch.
+  - Added technical notes.
+
+
+  [2012-03-14]
+
+  - Fixed and improved the Video Klein extended hardware banking.
+  - Added Witch Strike (Export, 6T/12T ver 1.01A).
+  - Added Witch Strike (Export, 6T/12T ver 1.01B).
+  - Added technical notes.
+
+
+  [2012-03-15]
+
+  - Found and patched the Witch Strike protection scheme.
+  - Proper inputs and lamps support for Witch Strike.
+  - Promoted both Witch Strike sets to working state.
+  - Added technical notes.
+
+
+  [2012-03-17]
+
+  - Added Wild Witch (Export, 6T/12T ver 1.57-SP).
+  - Added Wild Witch (Export, 6T/12T ver 1.57-TE).
+  - Added Wild Witch (Export, 6T/12T ver 1.62A).
+  - Added Wild Witch (Export, 6T/12T ver 1.62B).
+  - Added Wild Witch (Export, 6T/12T ver 1.62A-F).
+  - Added Wild Witch (Export, 6T/12T ver 1.62A alt).
+  - Added Wild Witch (Export, 6T/12T ver 1.62B alt).
+  - Added Wild Witch (Export, 6T/12T ver 1.65A).
+  - Added Wild Witch (Export, 6T/12T ver 1.65A-S).
+  - Added Wild Witch (Export, 6T/12T ver 1.65A-S alt).
+  - Added Wild Witch (Export, 6T/12T ver 1.65A-N).
+  - Added Wild Witch (Export, 6T/12T ver 1.70A beta).
+  - Added Wild Witch (Export, 6T/12T ver 1.70A).
+  - Added Wild Witch (Export, 6T/12T ver 1.70A alt).
+  - Added Wild Witch (Export, 6T/12T ver 1.74A-SP-BELG).
+  - Added Wild Witch (Export, 6T/12T ver 1.74A).
+  - Added Wild Witch (Export, 6T/12T ver 1.74A alt).
+  - Added Wild Witch (Export, 6B/12B ver 1.75A-E English).
+  - Added Wild Witch (Export, 6T/12T ver 1.76A).
+  - Added Wild Witch (Export, 6T/12T ver 1.77A).
+  - Added Wild Witch (Export, 6T/12T ver 1.79A).
+  - Added Wild Witch (Export, 6T/12T ver 1.83A).
+  - Added Wild Witch (Export, 6T/12T ver 1.84A).
+  - Worked each game to temporarily bypass the protection,
+     laying in the Dallas Timekeeper RAM.
+  - Reworked the parent/clones relationship.
+  - Added technical notes.
+
+
+  [2012-03-18]
+
+  - Added Witch Jackpot (Export, 6T/12T ver 0.25).
+  - Added Witch Jack (Export, 6T/12T ver 0.40).
+  - Added Witch Jack (Export, 6T/12T ver 0.40T).
+  - Added Witch Jack (Export, 6T/12T ver 0.62).
+  - Added Witch Jack (Export, 6T/12T ver 0.64).
+  - Added Witch Jack (Export, 6T/12T ver 0.65).
+  - Added Witch Jack (Export, 6T/12T ver 0.70S).
+  - Added Witch Jack (Export, 6T/12T ver 0.70P).
+  - Added Witch Jack (Export, 6T/12T ver 0.87).
+  - Added Witch Jack (Export, 6T/12T ver 0.87-88).
+  - Added Witch Jack (Export, 6T/12T ver 0.87-89).
+  - Proper inputs and lamps.
+
+
+  [2012-03-19]
+
+  - Added Witch Up & Down (Export, 6T/12T ver 0.99, set 2).
+  - Added Witch Up & Down (Export, 6T/12T ver 0.99, set 3).
+  - Added Witch Up & Down (Export, 6T/12T ver 0.99T).
+  - Added Falcons Wild - World Wide Poker (Video Klein, set 2).
+  - Fixed a bug in the coinage input.
+
 
   TODO:
 
@@ -828,6 +952,7 @@
 
 #include "pmpoker.lh"
 #include "goldnpkr.lh"
+#include "upndown.lh"
 
 
 class goldnpkr_state : public driver_device
@@ -882,21 +1007,20 @@
 	SET_TILE_INFO(bank, code, color, 0);
 }
 
-static TILE_GET_INFO( xtnd_get_bg_tile_info )
+static TILE_GET_INFO( wcrdxtnd_get_bg_tile_info )
 {
 	goldnpkr_state *state = machine.driver_data<goldnpkr_state>();
-/* 3 graphics banks system for VK extended cards
+/* 16 graphics banks system for VK extended (up & down) PCB's
 
     - bits -
     7654 3210
     --xx xx--   tiles color.
-    x--- --x-   tiles bank.
-    -x-- ---x   unused.
+    xx-- --xx   tiles bank.
 */
 
 	int attr = state->m_colorram[tile_index];
 	int code = ((attr & 1) << 8) | state->m_videoram[tile_index];
-	int bank = ((attr & 0x02) >> 1) + ((attr & 0x80) >> 7);	/* bit 1 & 7 switch the gfx banks */
+	int bank = (attr & 0x03) + ((attr & 0xc0) >> 4);	/* bits 0, 1, 6 & 7 switch the gfx banks */
 	int color = (attr & 0x3c) >> 2;	/* bits 2-3-4-5 for color */
 
 	SET_TILE_INFO(bank, code, color, 0);
@@ -911,7 +1035,7 @@
 static VIDEO_START( wcrdxtnd )
 {
 	goldnpkr_state *state = machine.driver_data<goldnpkr_state>();
-	state->m_bg_tilemap = tilemap_create(machine, xtnd_get_bg_tile_info, tilemap_scan_rows, 8, 8, 32, 32);
+	state->m_bg_tilemap = tilemap_create(machine, wcrdxtnd_get_bg_tile_info, tilemap_scan_rows, 8, 8, 32, 32);
 }
 
 static SCREEN_UPDATE_IND16( goldnpkr )
@@ -1160,6 +1284,16 @@
   ------------------
   NONE. Just they lack of lamps...
 
+  --------
+  wupndown
+  --------
+
+  7654 3210
+  ---- ---x  Bet Lamp.
+  ---- --x-  Deal Lamp.
+  ---- -x--  Holds+Cancel Lamps.
+  ---- x---  Take Lamp.
+
 */
 
 static WRITE8_DEVICE_HANDLER( lamps_a_w )
@@ -1174,6 +1308,8 @@
 	coin_counter_w(device->machine(), 1, data & 0x80);	/* counter2 */
 	coin_counter_w(device->machine(), 2, data & 0x20);	/* counter3 */
 
+//  popmessage("written : %02X", (0xff - data));
+
 /*  Counters:
 
     bit 5 = Coin out
@@ -2224,10 +2360,10 @@
 static INPUT_PORTS_START( wldwitch )
 	/* Multiplexed - 4x5bits */
 	PORT_START("IN0-0")
-	PORT_BIT( 0x01, IP_ACTIVE_LOW, IPT_GAMBLE_BET )
-	PORT_BIT( 0x02, IP_ACTIVE_LOW, IPT_GAMBLE_BOOK ) PORT_NAME("Meters")
-	PORT_BIT( 0x04, IP_ACTIVE_LOW, IPT_UNKNOWN )
-	PORT_BIT( 0x08, IP_ACTIVE_LOW, IPT_GAMBLE_DEAL ) PORT_NAME("Deal / Draw")
+	PORT_BIT( 0x01, IP_ACTIVE_LOW, IPT_GAMBLE_BET )  PORT_NAME("Bet (Setzen)")
+	PORT_BIT( 0x02, IP_ACTIVE_LOW, IPT_GAMBLE_BOOK ) PORT_NAME("Bookkeeping / Test")
+	PORT_BIT( 0x04, IP_ACTIVE_LOW, IPT_GAMBLE_D_UP ) PORT_NAME("Double Up")
+	PORT_BIT( 0x08, IP_ACTIVE_LOW, IPT_GAMBLE_DEAL ) PORT_NAME("Deal (Geben)")
 	PORT_BIT( 0x10, IP_ACTIVE_LOW, IPT_POKER_CANCEL )
 	PORT_BIT( 0x20, IP_ACTIVE_LOW, IPT_UNKNOWN )
 	PORT_BIT( 0x40, IP_ACTIVE_LOW, IPT_UNKNOWN )
@@ -2236,7 +2372,7 @@
 	PORT_START("IN0-1")
 	PORT_BIT( 0x01, IP_ACTIVE_LOW, IPT_BUTTON13 ) PORT_IMPULSE(3) PORT_NAME("Manual Collect") PORT_CODE(KEYCODE_Q)
 	PORT_BIT( 0x02, IP_ACTIVE_LOW, IPT_BUTTON14 ) PORT_NAME("Payout") PORT_CODE(KEYCODE_W)
-	PORT_BIT( 0x04, IP_ACTIVE_LOW, IPT_UNKNOWN )
+	PORT_BIT( 0x04, IP_ACTIVE_LOW, IPT_GAMBLE_TAKE ) PORT_NAME("Take")
 	PORT_BIT( 0x08, IP_ACTIVE_LOW, IPT_GAMBLE_HIGH ) PORT_NAME("Big")
 	PORT_BIT( 0x10, IP_ACTIVE_LOW, IPT_GAMBLE_LOW ) PORT_NAME("Small")
 	PORT_BIT( 0x20, IP_ACTIVE_LOW, IPT_UNKNOWN )
@@ -2254,8 +2390,8 @@
 	PORT_BIT( 0x80, IP_ACTIVE_LOW, IPT_UNKNOWN )
 
 	PORT_START("IN0-3")
-	PORT_BIT( 0x01, IP_ACTIVE_LOW, IPT_UNKNOWN )	// service F2?
-	PORT_BIT( 0x02, IP_ACTIVE_LOW, IPT_UNKNOWN )
+	PORT_BIT( 0x01, IP_ACTIVE_LOW, IPT_SERVICE ) PORT_NAME("Service") PORT_CODE(KEYCODE_F2)
+	PORT_BIT( 0x02, IP_ACTIVE_LOW, IPT_OTHER )   PORT_CODE(KEYCODE_1_PAD) PORT_NAME("IN3-2")
 	PORT_BIT( 0x04, IP_ACTIVE_LOW, IPT_COIN2 )   PORT_NAME("Note In")
 	PORT_BIT( 0x08, IP_ACTIVE_LOW, IPT_COIN1 )   PORT_IMPULSE(3) PORT_NAME("Coin In")
 	PORT_BIT( 0x10, IP_ACTIVE_LOW, IPT_COIN3 )   PORT_NAME("Weight (Coupon In)")
@@ -2343,7 +2479,7 @@
 	PORT_DIPNAME( 0x04, 0x04, "Game Type" )			PORT_DIPLOCATION("SW2:3")
 	PORT_DIPSETTING(    0x04, "Wild Witch" )
 	PORT_DIPSETTING(    0x00, "Witch Game" )
-	PORT_DIPNAME( 0x08, 0x08, "Taster?" )			PORT_DIPLOCATION("SW2:4")
+	PORT_DIPNAME( 0x08, 0x08, "Control Type" )		PORT_DIPLOCATION("SW2:4")
 	PORT_DIPSETTING(    0x00, "6 Taster" )
 	PORT_DIPSETTING(    0x08, "12 Taster" )
 	PORT_DIPNAME( 0x10, 0x00, "Minimal Hand" )		PORT_DIPLOCATION("SW2:5")
@@ -2360,6 +2496,293 @@
 	PORT_DIPSETTING(    0x00, DEF_STR( Yes ) )
 INPUT_PORTS_END
 
+static INPUT_PORTS_START( wupndown )
+	/* Multiplexed - 4x5bits */
+	PORT_START("IN0-0")
+	PORT_BIT( 0x01, IP_ACTIVE_LOW, IPT_GAMBLE_BET )  PORT_NAME("Bet (Setzen)")
+	PORT_BIT( 0x02, IP_ACTIVE_LOW, IPT_GAMBLE_BOOK ) PORT_NAME("Bookkeeping / Test")
+	PORT_BIT( 0x04, IP_ACTIVE_LOW, IPT_UNKNOWN )
+	PORT_BIT( 0x08, IP_ACTIVE_LOW, IPT_GAMBLE_DEAL ) PORT_NAME("Deal (Geben)")
+	PORT_BIT( 0x10, IP_ACTIVE_LOW, IPT_POKER_CANCEL )
+	PORT_BIT( 0x20, IP_ACTIVE_LOW, IPT_UNKNOWN )
+	PORT_BIT( 0x40, IP_ACTIVE_LOW, IPT_UNKNOWN )
+	PORT_BIT( 0x80, IP_ACTIVE_LOW, IPT_UNKNOWN )
+
+	PORT_START("IN0-1")
+	PORT_BIT( 0x01, IP_ACTIVE_LOW, IPT_UNKNOWN )
+	PORT_BIT( 0x02, IP_ACTIVE_LOW, IPT_GAMBLE_KEYOUT )  PORT_NAME("Payout") PORT_CODE(KEYCODE_W)
+	PORT_BIT( 0x04, IP_ACTIVE_LOW, IPT_GAMBLE_TAKE )    PORT_NAME("Take")
+	PORT_BIT( 0x08, IP_ACTIVE_LOW, IPT_UNKNOWN )
+	PORT_BIT( 0x10, IP_ACTIVE_LOW, IPT_UNKNOWN )
+	PORT_BIT( 0x20, IP_ACTIVE_LOW, IPT_UNKNOWN )
+	PORT_BIT( 0x40, IP_ACTIVE_LOW, IPT_UNKNOWN )
+	PORT_BIT( 0x80, IP_ACTIVE_LOW, IPT_UNKNOWN )
+
+	PORT_START("IN0-2")
+	PORT_BIT( 0x01, IP_ACTIVE_LOW, IPT_POKER_HOLD1 )	PORT_NAME("Hold 1 / Take")
+	PORT_BIT( 0x02, IP_ACTIVE_LOW, IPT_POKER_HOLD2 )
+	PORT_BIT( 0x04, IP_ACTIVE_LOW, IPT_POKER_HOLD3 )
+	PORT_BIT( 0x08, IP_ACTIVE_LOW, IPT_POKER_HOLD4 )
+	PORT_BIT( 0x10, IP_ACTIVE_LOW, IPT_POKER_HOLD5 )	PORT_NAME("Hold 5 / Double-Up")
+	PORT_BIT( 0x20, IP_ACTIVE_LOW, IPT_UNKNOWN )
+	PORT_BIT( 0x40, IP_ACTIVE_LOW, IPT_UNKNOWN )
+	PORT_BIT( 0x80, IP_ACTIVE_LOW, IPT_UNKNOWN )
+
+	PORT_START("IN0-3")
+	PORT_BIT( 0x01, IP_ACTIVE_LOW, IPT_SERVICE ) PORT_NAME("Service") PORT_CODE(KEYCODE_F2)
+	PORT_BIT( 0x02, IP_ACTIVE_LOW, IPT_UNKNOWN )
+	PORT_BIT( 0x04, IP_ACTIVE_LOW, IPT_COIN3 )   PORT_NAME("Note In")
+	PORT_BIT( 0x08, IP_ACTIVE_LOW, IPT_COIN1 )   PORT_IMPULSE(3) PORT_NAME("Coin 1 In")
+	PORT_BIT( 0x10, IP_ACTIVE_LOW, IPT_COIN2 )   PORT_IMPULSE(3) PORT_NAME("Coin 2 In")
+	PORT_BIT( 0x20, IP_ACTIVE_LOW, IPT_UNKNOWN )
+	PORT_BIT( 0x40, IP_ACTIVE_LOW, IPT_UNKNOWN )
+	PORT_BIT( 0x80, IP_ACTIVE_LOW, IPT_UNKNOWN )
+
+	PORT_START("SW1")
+	PORT_DIPNAME( 0x01, 0x01, DEF_STR( Unknown ) )	PORT_DIPLOCATION("SW1:1")
+	PORT_DIPSETTING(    0x01, DEF_STR( Off ) )
+	PORT_DIPSETTING(    0x00, DEF_STR( On ) )
+	PORT_DIPNAME( 0x02, 0x02, DEF_STR( Unknown ) )	PORT_DIPLOCATION("SW1:2")
+	PORT_DIPSETTING(    0x02, DEF_STR( Off ) )
+	PORT_DIPSETTING(    0x00, DEF_STR( On ) )
+	PORT_DIPNAME( 0x04, 0x04, DEF_STR( Unknown ) )	PORT_DIPLOCATION("SW1:3")
+	PORT_DIPSETTING(    0x04, DEF_STR( Off ) )
+	PORT_DIPSETTING(    0x00, DEF_STR( On ) )
+	PORT_DIPNAME( 0x08, 0x08, DEF_STR( Unknown ) )	PORT_DIPLOCATION("SW1:4")
+	PORT_DIPSETTING(    0x08, DEF_STR( Off ) )
+	PORT_DIPSETTING(    0x00, DEF_STR( On ) )
+	PORT_DIPNAME( 0x10, 0x10, DEF_STR( Unknown ) )	PORT_DIPLOCATION("SW1:5")
+	PORT_DIPSETTING(    0x10, DEF_STR( Off ) )
+	PORT_DIPSETTING(    0x00, DEF_STR( On ) )
+	PORT_DIPNAME( 0x20, 0x20, DEF_STR( Unknown ) )	PORT_DIPLOCATION("SW1:6")
+	PORT_DIPSETTING(    0x20, DEF_STR( Off ) )
+	PORT_DIPSETTING(    0x00, DEF_STR( On ) )
+	PORT_DIPNAME( 0x40, 0x40, DEF_STR( Unknown ) )	PORT_DIPLOCATION("SW1:7")
+	PORT_DIPSETTING(    0x40, DEF_STR( Off ) )
+	PORT_DIPSETTING(    0x00, DEF_STR( On ) )
+	PORT_DIPNAME( 0x80, 0x80, DEF_STR( Unknown ) )	PORT_DIPLOCATION("SW1:8")
+	PORT_DIPSETTING(    0x80, DEF_STR( Off ) )
+	PORT_DIPSETTING(    0x00, DEF_STR( On ) )
+
+	PORT_START("SW2")
+	PORT_DIPNAME( 0x01, 0x01, DEF_STR( Unknown ) )	PORT_DIPLOCATION("SW2:1")
+	PORT_DIPSETTING(    0x01, DEF_STR( Off ) )
+	PORT_DIPSETTING(    0x00, DEF_STR( On ) )
+	PORT_DIPNAME( 0x02, 0x02, DEF_STR( Unknown ) )	PORT_DIPLOCATION("SW2:2")
+	PORT_DIPSETTING(    0x02, DEF_STR( Off ) )
+	PORT_DIPSETTING(    0x00, DEF_STR( On ) )
+	PORT_DIPNAME( 0x04, 0x04, DEF_STR( Unknown ) )	PORT_DIPLOCATION("SW2:3")
+	PORT_DIPSETTING(    0x04, DEF_STR( Off ) )
+	PORT_DIPSETTING(    0x00, DEF_STR( On ) )
+	PORT_DIPNAME( 0x08, 0x08, DEF_STR( Unknown ) )	PORT_DIPLOCATION("SW2:4")
+	PORT_DIPSETTING(    0x08, DEF_STR( Off ) )
+	PORT_DIPSETTING(    0x00, DEF_STR( On ) )
+	PORT_DIPNAME( 0x10, 0x00, "Minimal Hand" )		PORT_DIPLOCATION("SW2:5")
+	PORT_DIPSETTING(    0x10, "2 Paar" )
+	PORT_DIPSETTING(    0x00, "Hohes Paar" )
+	PORT_DIPNAME( 0x20, 0x20, DEF_STR( Unknown ) )	PORT_DIPLOCATION("SW2:6")
+	PORT_DIPSETTING(    0x20, DEF_STR( Off ) )
+	PORT_DIPSETTING(    0x00, DEF_STR( On ) )
+	PORT_DIPNAME( 0x40, 0x40, DEF_STR( Unknown ) )	PORT_DIPLOCATION("SW2:7")
+	PORT_DIPSETTING(    0x40, DEF_STR( Off ) )
+	PORT_DIPSETTING(    0x00, DEF_STR( On ) )
+	PORT_DIPNAME( 0x80, 0x80, DEF_STR( Unknown ) )	PORT_DIPLOCATION("SW2:8")
+	PORT_DIPSETTING(    0x80, DEF_STR( Off ) )
+	PORT_DIPSETTING(    0x00, DEF_STR( On ) )
+INPUT_PORTS_END
+
+static INPUT_PORTS_START( wstrike )
+	/* Multiplexed - 4x5bits */
+	PORT_START("IN0-0")
+	PORT_BIT( 0x01, IP_ACTIVE_LOW, IPT_GAMBLE_BET )  PORT_NAME("Bet (Setzen)")
+	PORT_BIT( 0x02, IP_ACTIVE_LOW, IPT_GAMBLE_BOOK ) PORT_NAME("Bookkeeping / Test")
+	PORT_BIT( 0x04, IP_ACTIVE_LOW, IPT_GAMBLE_D_UP ) PORT_NAME("Double Up")
+	PORT_BIT( 0x08, IP_ACTIVE_LOW, IPT_GAMBLE_DEAL ) PORT_NAME("Deal (Geben)")
+	PORT_BIT( 0x10, IP_ACTIVE_LOW, IPT_POKER_CANCEL )
+	PORT_BIT( 0x20, IP_ACTIVE_LOW, IPT_UNKNOWN )
+	PORT_BIT( 0x40, IP_ACTIVE_LOW, IPT_UNKNOWN )
+	PORT_BIT( 0x80, IP_ACTIVE_LOW, IPT_UNKNOWN )
+
+	PORT_START("IN0-1")
+//  PORT_BIT( 0x01, IP_ACTIVE_LOW, IPT_UNKNOWN )
+	PORT_BIT( 0x01, IP_ACTIVE_LOW, IPT_OTHER ) PORT_CODE(KEYCODE_1_PAD) PORT_NAME("IN1-1")
+	PORT_BIT( 0x02, IP_ACTIVE_LOW, IPT_GAMBLE_KEYOUT ) PORT_NAME("Payout") PORT_CODE(KEYCODE_W)
+	PORT_BIT( 0x04, IP_ACTIVE_LOW, IPT_GAMBLE_TAKE )   PORT_NAME("Take")
+	PORT_BIT( 0x08, IP_ACTIVE_LOW, IPT_GAMBLE_HIGH )   PORT_NAME("Big")
+	PORT_BIT( 0x10, IP_ACTIVE_LOW, IPT_GAMBLE_LOW )    PORT_NAME("Small")
+	PORT_BIT( 0x20, IP_ACTIVE_LOW, IPT_UNKNOWN )
+	PORT_BIT( 0x40, IP_ACTIVE_LOW, IPT_UNKNOWN )
+	PORT_BIT( 0x80, IP_ACTIVE_LOW, IPT_UNKNOWN )
+
+	PORT_START("IN0-2")
+	PORT_BIT( 0x01, IP_ACTIVE_LOW, IPT_POKER_HOLD1 )
+	PORT_BIT( 0x02, IP_ACTIVE_LOW, IPT_POKER_HOLD2 )
+	PORT_BIT( 0x04, IP_ACTIVE_LOW, IPT_POKER_HOLD3 )
+	PORT_BIT( 0x08, IP_ACTIVE_LOW, IPT_POKER_HOLD4 )
+	PORT_BIT( 0x10, IP_ACTIVE_LOW, IPT_POKER_HOLD5 )
+	PORT_BIT( 0x20, IP_ACTIVE_LOW, IPT_UNKNOWN )
+	PORT_BIT( 0x40, IP_ACTIVE_LOW, IPT_UNKNOWN )
+	PORT_BIT( 0x80, IP_ACTIVE_LOW, IPT_UNKNOWN )
+
+	PORT_START("IN0-3")
+	PORT_BIT( 0x01, IP_ACTIVE_LOW, IPT_SERVICE ) PORT_NAME("Service") PORT_CODE(KEYCODE_F2)
+//  PORT_BIT( 0x02, IP_ACTIVE_LOW, IPT_UNKNOWN )
+	PORT_BIT( 0x02, IP_ACTIVE_LOW, IPT_OTHER ) PORT_CODE(KEYCODE_2_PAD) PORT_NAME("IN3-2")
+	PORT_BIT( 0x04, IP_ACTIVE_LOW, IPT_COIN2 )   PORT_NAME("Note In")
+	PORT_BIT( 0x08, IP_ACTIVE_LOW, IPT_COIN1 )   PORT_IMPULSE(3) PORT_NAME("Coin In")
+	PORT_BIT( 0x10, IP_ACTIVE_LOW, IPT_COIN3 )   PORT_NAME("Weight (Coupon In)")
+	PORT_BIT( 0x20, IP_ACTIVE_LOW, IPT_UNKNOWN )
+	PORT_BIT( 0x40, IP_ACTIVE_LOW, IPT_UNKNOWN )
+	PORT_BIT( 0x80, IP_ACTIVE_LOW, IPT_UNKNOWN )
+
+	PORT_START("SW1")
+	PORT_DIPNAME( 0x01, 0x01, DEF_STR( Unknown ) )	PORT_DIPLOCATION("SW1:1")
+	PORT_DIPSETTING(    0x01, DEF_STR( Off ) )
+	PORT_DIPSETTING(    0x00, DEF_STR( On ) )
+	PORT_DIPNAME( 0x02, 0x02, DEF_STR( Unknown ) )	PORT_DIPLOCATION("SW1:2")
+	PORT_DIPSETTING(    0x02, DEF_STR( Off ) )
+	PORT_DIPSETTING(    0x00, DEF_STR( On ) )
+	PORT_DIPNAME( 0x04, 0x04, DEF_STR( Unknown ) )	PORT_DIPLOCATION("SW1:3")
+	PORT_DIPSETTING(    0x04, DEF_STR( Off ) )
+	PORT_DIPSETTING(    0x00, DEF_STR( On ) )
+	PORT_DIPNAME( 0x08, 0x08, DEF_STR( Unknown ) )	PORT_DIPLOCATION("SW1:4")
+	PORT_DIPSETTING(    0x08, DEF_STR( Off ) )
+	PORT_DIPSETTING(    0x00, DEF_STR( On ) )
+	PORT_DIPNAME( 0x10, 0x10, DEF_STR( Unknown ) )	PORT_DIPLOCATION("SW1:5")
+	PORT_DIPSETTING(    0x10, DEF_STR( Off ) )
+	PORT_DIPSETTING(    0x00, DEF_STR( On ) )
+	PORT_DIPNAME( 0x20, 0x20, DEF_STR( Unknown ) )	PORT_DIPLOCATION("SW1:6")
+	PORT_DIPSETTING(    0x20, DEF_STR( Off ) )
+	PORT_DIPSETTING(    0x00, DEF_STR( On ) )
+	PORT_DIPNAME( 0x40, 0x40, DEF_STR( Unknown ) )	PORT_DIPLOCATION("SW1:7")
+	PORT_DIPSETTING(    0x40, DEF_STR( Off ) )
+	PORT_DIPSETTING(    0x00, DEF_STR( On ) )
+	PORT_DIPNAME( 0x80, 0x80, DEF_STR( Unknown ) )	PORT_DIPLOCATION("SW1:8")
+	PORT_DIPSETTING(    0x80, DEF_STR( Off ) )
+	PORT_DIPSETTING(    0x00, DEF_STR( On ) )
+
+	PORT_START("SW2")
+	PORT_DIPNAME( 0x01, 0x01, DEF_STR( Unknown ) )	PORT_DIPLOCATION("SW2:1")
+	PORT_DIPSETTING(    0x01, DEF_STR( Off ) )
+	PORT_DIPSETTING(    0x00, DEF_STR( On ) )
+	PORT_DIPNAME( 0x02, 0x02, DEF_STR( Unknown ) )	PORT_DIPLOCATION("SW2:2")
+	PORT_DIPSETTING(    0x02, DEF_STR( Off ) )
+	PORT_DIPSETTING(    0x00, DEF_STR( On ) )
+	PORT_DIPNAME( 0x04, 0x04, DEF_STR( Unknown ) )	PORT_DIPLOCATION("SW2:3")
+	PORT_DIPSETTING(    0x04, DEF_STR( Off ) )
+	PORT_DIPSETTING(    0x00, DEF_STR( On ) )
+	PORT_DIPNAME( 0x08, 0x08, DEF_STR( Unknown ) )	PORT_DIPLOCATION("SW2:4")
+	PORT_DIPSETTING(    0x08, DEF_STR( Off ) )
+	PORT_DIPSETTING(    0x00, DEF_STR( On ) )
+	PORT_DIPNAME( 0x10, 0x10, DEF_STR( Unknown ) )	PORT_DIPLOCATION("SW2:5")
+	PORT_DIPSETTING(    0x10, DEF_STR( Off ) )
+	PORT_DIPSETTING(    0x00, DEF_STR( On ) )
+	PORT_DIPNAME( 0x20, 0x00, "Title" )				PORT_DIPLOCATION("SW2:6")
+	PORT_DIPSETTING(    0x20, "Witch Game" )
+	PORT_DIPSETTING(    0x00, "Witch Strike" )
+	PORT_DIPNAME( 0x40, 0x40, DEF_STR( Unknown ) )	PORT_DIPLOCATION("SW2:7")
+	PORT_DIPSETTING(    0x40, DEF_STR( Off ) )
+	PORT_DIPSETTING(    0x00, DEF_STR( On ) )
+	PORT_DIPNAME( 0x80, 0x80, DEF_STR( Unknown ) )	PORT_DIPLOCATION("SW2:8")
+	PORT_DIPSETTING(    0x80, DEF_STR( Off ) )
+	PORT_DIPSETTING(    0x00, DEF_STR( On ) )
+INPUT_PORTS_END
+
+static INPUT_PORTS_START( wtchjack )
+	/* Multiplexed - 4x5bits */
+	PORT_START("IN0-0")
+	PORT_BIT( 0x01, IP_ACTIVE_LOW, IPT_GAMBLE_BET )  PORT_NAME("Bet (Setzen)")
+	PORT_BIT( 0x02, IP_ACTIVE_LOW, IPT_GAMBLE_BOOK ) PORT_NAME("Bookkeeping / Test")
+	PORT_BIT( 0x04, IP_ACTIVE_LOW, IPT_GAMBLE_D_UP ) PORT_NAME("Double Up")
+	PORT_BIT( 0x08, IP_ACTIVE_LOW, IPT_GAMBLE_DEAL ) PORT_NAME("Deal (Geben)")
+	PORT_BIT( 0x10, IP_ACTIVE_LOW, IPT_POKER_CANCEL )
+	PORT_BIT( 0x20, IP_ACTIVE_LOW, IPT_UNKNOWN )
+	PORT_BIT( 0x40, IP_ACTIVE_LOW, IPT_UNKNOWN )
+	PORT_BIT( 0x80, IP_ACTIVE_LOW, IPT_UNKNOWN )
+
+	PORT_START("IN0-1")
+	PORT_BIT( 0x01, IP_ACTIVE_LOW, IPT_OTHER ) PORT_CODE(KEYCODE_1_PAD) PORT_NAME("IN1-1")
+	PORT_BIT( 0x02, IP_ACTIVE_LOW, IPT_GAMBLE_KEYOUT ) PORT_NAME("Payout") PORT_CODE(KEYCODE_W)
+	PORT_BIT( 0x04, IP_ACTIVE_LOW, IPT_GAMBLE_TAKE )   PORT_NAME("Take")
+	PORT_BIT( 0x08, IP_ACTIVE_LOW, IPT_GAMBLE_HIGH )   PORT_NAME("Big")
+	PORT_BIT( 0x10, IP_ACTIVE_LOW, IPT_GAMBLE_LOW )    PORT_NAME("Small")
+	PORT_BIT( 0x20, IP_ACTIVE_LOW, IPT_UNKNOWN )
+	PORT_BIT( 0x40, IP_ACTIVE_LOW, IPT_UNKNOWN )
+	PORT_BIT( 0x80, IP_ACTIVE_LOW, IPT_UNKNOWN )
+
+	PORT_START("IN0-2")
+	PORT_BIT( 0x01, IP_ACTIVE_LOW, IPT_POKER_HOLD1 )
+	PORT_BIT( 0x02, IP_ACTIVE_LOW, IPT_POKER_HOLD2 )
+	PORT_BIT( 0x04, IP_ACTIVE_LOW, IPT_POKER_HOLD3 )
+	PORT_BIT( 0x08, IP_ACTIVE_LOW, IPT_POKER_HOLD4 )
+	PORT_BIT( 0x10, IP_ACTIVE_LOW, IPT_POKER_HOLD5 )
+	PORT_BIT( 0x20, IP_ACTIVE_LOW, IPT_UNKNOWN )
+	PORT_BIT( 0x40, IP_ACTIVE_LOW, IPT_UNKNOWN )
+	PORT_BIT( 0x80, IP_ACTIVE_LOW, IPT_UNKNOWN )
+
+	PORT_START("IN0-3")
+	PORT_BIT( 0x01, IP_ACTIVE_LOW, IPT_SERVICE ) PORT_NAME("Service") PORT_CODE(KEYCODE_F2)
+	PORT_BIT( 0x02, IP_ACTIVE_LOW, IPT_OTHER ) PORT_CODE(KEYCODE_2_PAD) PORT_NAME("IN3-2")
+	PORT_BIT( 0x04, IP_ACTIVE_LOW, IPT_COIN2 )   PORT_NAME("Note In")
+	PORT_BIT( 0x08, IP_ACTIVE_LOW, IPT_COIN1 )   PORT_IMPULSE(3) PORT_NAME("Coin In")
+	PORT_BIT( 0x10, IP_ACTIVE_LOW, IPT_COIN3 )   PORT_NAME("Weight (Coupon In)")
+	PORT_BIT( 0x20, IP_ACTIVE_LOW, IPT_UNKNOWN )
+	PORT_BIT( 0x40, IP_ACTIVE_LOW, IPT_UNKNOWN )
+	PORT_BIT( 0x80, IP_ACTIVE_LOW, IPT_UNKNOWN )
+
+	PORT_START("SW1")
+	PORT_DIPNAME( 0x01, 0x01, DEF_STR( Unknown ) )	PORT_DIPLOCATION("SW1:1")
+	PORT_DIPSETTING(    0x01, DEF_STR( Off ) )
+	PORT_DIPSETTING(    0x00, DEF_STR( On ) )
+	PORT_DIPNAME( 0x02, 0x02, DEF_STR( Unknown ) )	PORT_DIPLOCATION("SW1:2")
+	PORT_DIPSETTING(    0x02, DEF_STR( Off ) )
+	PORT_DIPSETTING(    0x00, DEF_STR( On ) )
+	PORT_DIPNAME( 0x04, 0x04, DEF_STR( Unknown ) )	PORT_DIPLOCATION("SW1:3")
+	PORT_DIPSETTING(    0x04, DEF_STR( Off ) )
+	PORT_DIPSETTING(    0x00, DEF_STR( On ) )
+	PORT_DIPNAME( 0x08, 0x08, DEF_STR( Unknown ) )	PORT_DIPLOCATION("SW1:4")
+	PORT_DIPSETTING(    0x08, DEF_STR( Off ) )
+	PORT_DIPSETTING(    0x00, DEF_STR( On ) )
+	PORT_DIPNAME( 0x10, 0x10, DEF_STR( Unknown ) )	PORT_DIPLOCATION("SW1:5")
+	PORT_DIPSETTING(    0x10, DEF_STR( Off ) )
+	PORT_DIPSETTING(    0x00, DEF_STR( On ) )
+	PORT_DIPNAME( 0x20, 0x20, DEF_STR( Unknown ) )	PORT_DIPLOCATION("SW1:6")
+	PORT_DIPSETTING(    0x20, DEF_STR( Off ) )
+	PORT_DIPSETTING(    0x00, DEF_STR( On ) )
+	PORT_DIPNAME( 0x40, 0x40, DEF_STR( Unknown ) )	PORT_DIPLOCATION("SW1:7")
+	PORT_DIPSETTING(    0x40, DEF_STR( Off ) )
+	PORT_DIPSETTING(    0x00, DEF_STR( On ) )
+	PORT_DIPNAME( 0x80, 0x80, DEF_STR( Unknown ) )	PORT_DIPLOCATION("SW1:8")
+	PORT_DIPSETTING(    0x80, DEF_STR( Off ) )
+	PORT_DIPSETTING(    0x00, DEF_STR( On ) )
+
+	PORT_START("SW2")
+	PORT_DIPNAME( 0x01, 0x01, DEF_STR( Unknown ) )	PORT_DIPLOCATION("SW2:1")
+	PORT_DIPSETTING(    0x01, DEF_STR( Off ) )
+	PORT_DIPSETTING(    0x00, DEF_STR( On ) )
+	PORT_DIPNAME( 0x02, 0x02, DEF_STR( Unknown ) )	PORT_DIPLOCATION("SW2:2")
+	PORT_DIPSETTING(    0x02, DEF_STR( Off ) )
+	PORT_DIPSETTING(    0x00, DEF_STR( On ) )
+	PORT_DIPNAME( 0x04, 0x04, DEF_STR( Unknown ) )	PORT_DIPLOCATION("SW2:3")
+	PORT_DIPSETTING(    0x04, DEF_STR( Off ) )
+	PORT_DIPSETTING(    0x00, DEF_STR( On ) )
+	PORT_DIPNAME( 0x08, 0x08, DEF_STR( Unknown ) )	PORT_DIPLOCATION("SW2:4")
+	PORT_DIPSETTING(    0x08, DEF_STR( Off ) )
+	PORT_DIPSETTING(    0x00, DEF_STR( On ) )
+	PORT_DIPNAME( 0x10, 0x00, "Minimal Hand" )		PORT_DIPLOCATION("SW2:5")
+	PORT_DIPSETTING(    0x10, "2 Paar" )
+	PORT_DIPSETTING(    0x00, "Hohes Paar" )
+	PORT_DIPNAME( 0x20, 0x20, DEF_STR( Unknown ) )	PORT_DIPLOCATION("SW2:6")
+	PORT_DIPSETTING(    0x20, DEF_STR( Off ) )
+	PORT_DIPSETTING(    0x00, DEF_STR( On ) )
+	PORT_DIPNAME( 0x40, 0x40, DEF_STR( Unknown ) )	PORT_DIPLOCATION("SW2:7")
+	PORT_DIPSETTING(    0x40, DEF_STR( Off ) )
+	PORT_DIPSETTING(    0x00, DEF_STR( On ) )
+	PORT_DIPNAME( 0x80, 0x80, DEF_STR( Unknown ) )	PORT_DIPLOCATION("SW2:8")
+	PORT_DIPSETTING(    0x80, DEF_STR( Off ) )
+	PORT_DIPSETTING(    0x00, DEF_STR( On ) )
+INPUT_PORTS_END
+
 static INPUT_PORTS_START( sloco93 )
 	/* Multiplexed - 4x5bits */
 	PORT_INCLUDE( witchcda )
@@ -2831,12 +3254,24 @@
 GFXDECODE_END
 
 static GFXDECODE_START( wcrdxtnd )
+	GFXDECODE_ENTRY( "gfx0", 0, tilelayout, 0, 16 )
 	GFXDECODE_ENTRY( "gfx1", 0, tilelayout, 0, 16 )
 	GFXDECODE_ENTRY( "gfx2", 0, tilelayout, 0, 16 )
 	GFXDECODE_ENTRY( "gfx3", 0, tilelayout, 0, 16 )
+	GFXDECODE_ENTRY( "gfx4", 0, tilelayout, 0, 16 )
+	GFXDECODE_ENTRY( "gfx5", 0, tilelayout, 0, 16 )
+	GFXDECODE_ENTRY( "gfx6", 0, tilelayout, 0, 16 )
+	GFXDECODE_ENTRY( "gfx7", 0, tilelayout, 0, 16 )
+	GFXDECODE_ENTRY( "gfx8", 0, tilelayout, 0, 16 )
+	GFXDECODE_ENTRY( "gfx9", 0, tilelayout, 0, 16 )
+	GFXDECODE_ENTRY( "gfx10", 0, tilelayout, 0, 16 )
+	GFXDECODE_ENTRY( "gfx11", 0, tilelayout, 0, 16 )
+	GFXDECODE_ENTRY( "gfx12", 0, tilelayout, 0, 16 )
+	GFXDECODE_ENTRY( "gfx13", 0, tilelayout, 0, 16 )
+	GFXDECODE_ENTRY( "gfx14", 0, tilelayout, 0, 16 )
+	GFXDECODE_ENTRY( "gfx15", 0, tilelayout, 0, 16 )
 GFXDECODE_END
 
-
 /*******************************************
 *              PIA Interfaces              *
 *******************************************/
@@ -4364,7 +4799,26 @@
 
 	ROM_REGION( 0x1800, "gfx1", 0 )
 	ROM_FILL(			0x0000, 0x1000, 0 ) /* filling bitplanes */
-	ROM_LOAD( "fw4.7a",	0x1000, 0x0800, CRC(f0517b0d) SHA1(474bcf429f2539ff1f3d7d32d259c5973ccb0234) )  /* text layer */
+	ROM_LOAD( "fw4.7a",	0x1000, 0x0800, CRC(f0517b0d) SHA1(474bcf429f2539ff1f3d7d32d259c5973ccb0234) )  /* chars gfx */
+
+	ROM_REGION( 0x1800, "gfx2", 0 )
+	ROM_LOAD( "fw1.2a(__baddump)",	0x0000, 0x0800, BAD_DUMP CRC(229cedde) SHA1(5b6d0b900714924c7a2390151ee65f36bdb02e8b) )  /* cards deck gfx, bitplane1 */
+	ROM_IGNORE(                 0x0800)
+	ROM_LOAD( "fw2.4a(__baddump)",	0x0800, 0x0800, BAD_DUMP CRC(9ad3c578) SHA1(a69385a807e3270d90040c44721bfff21e95706a) )  /* cards deck gfx, bitplane2 */
+	ROM_LOAD( "fw3.5a(__baddump)",	0x1000, 0x0800, BAD_DUMP CRC(87abebe5) SHA1(5950082b563718476576dbc9f45439019209493e) )  /* cards deck gfx, bitplane3 */
+
+	ROM_REGION( 0x0100, "proms", 0 )
+	ROM_LOAD( "n82s137f.box",	0x0000, 0x0100, BAD_DUMP CRC(7f31066b) SHA1(15420780ec6b2870fc4539ec3afe4f0c58eedf12) )
+ROM_END
+
+ROM_START( falcnwldb )
+	ROM_REGION( 0x10000, "maincpu", 0 )	/* World Wide Poker / 1992-11-04 */
+	ROM_LOAD( "fw12t1_19921104.bin",	0x0000, 0x8000, CRC(8b4f8cac) SHA1(e3bcbadaa157db48a41369a3fcdba536f8ca679e) )
+	ROM_RELOAD(							0x8000, 0x8000 )
+
+	ROM_REGION( 0x1800, "gfx1", 0 )
+	ROM_FILL(			0x0000, 0x1000, 0 ) /* filling bitplanes */
+	ROM_LOAD( "fw4.7a",	0x1000, 0x0800, CRC(f0517b0d) SHA1(474bcf429f2539ff1f3d7d32d259c5973ccb0234) )  /* chars gfx */
 
 	ROM_REGION( 0x1800, "gfx2", 0 )
 	ROM_LOAD( "fw1.2a(__baddump)",	0x0000, 0x0800, BAD_DUMP CRC(229cedde) SHA1(5b6d0b900714924c7a2390151ee65f36bdb02e8b) )  /* cards deck gfx, bitplane1 */
@@ -4392,7 +4846,7 @@
 
 ***********************************************/
 
-ROM_START( falcnwldb )
+ROM_START( falcnwldc )
 	ROM_REGION( 0x10000, "maincpu", 0 )	/* Falcons Wild, Falcon original */
 //  ROM_LOAD( "nosticker.12a",  0x0000, 0x10000, CRC(54ae4a8a) SHA1(0507098b53d807059b78ec098203d095d19028f8) )
 	ROM_LOAD( "4.b6",			0x3000, 0x1000, CRC(88684a8f) SHA1(5ffa0808b502e93ddcb8f13929008aec2836a773) )
@@ -4726,200 +5180,4144 @@
 	ROM_LOAD( "s287",		0x0000, 0x0100, CRC(7f31066b) SHA1(15420780ec6b2870fc4539ec3afe4f0c58eedf12) )
 ROM_END
 
-/****************************************************
+/***************************************************************
 
-  Unknown poker game, set 1.
-  198?.
+  Casino Poker
+  1987, PM / Beck Elektronik
 
-  There are french strings related to the game into
-  the program ROM.
+  1x Xtal 10.000 MHz.
+  1x UM6502A
+  2x UM6521A
+  1x UM6845
 
-  The dump lacks of 1 program ROM located at 17a.
-  (empty socket in the PCB picture)
+  GFX ROMS 051, 052, 053 and 054 have duplicated halves.
 
-*****************************************************/
+  Bipolar PROM 24sa10 is filled with 0x09, so has at least
+  fixed bits 0 and 3 along the whole data. Needs a redump
+  using a supported EEPROM programmer.
 
-ROM_START( pokerdub )
-	ROM_REGION( 0x10000, "maincpu", 0 )
-	ROM_LOAD( "15a_f_83.15a",	0x2000, 0x1000, CRC(06571884) SHA1(6823f5d4a2fc5adf51f1588273f808a2a25a15bc) )
-	ROM_LOAD( "unknown.17a",	0x3000, 0x1000, NO_DUMP )
+  Discrete sound circuitry was traced, being identical to the Golden Poker one.
+  Only difference is the PC617 replaced by one PC817.
+
+  The sound is ugly and seems that was programmed that way.
+
+***************************************************************/
+
+ROM_START( caspoker )
+	ROM_REGION( 0x10000, "maincpu", 0 )
+	ROM_LOAD( "234.bin",	0x4000, 0x1000, CRC(174bc526) SHA1(faef01484f0e0ea769d7bd2c5ad03369a6fdf037) )
+	ROM_LOAD( "235.bin",	0x5000, 0x1000, CRC(2e43552f) SHA1(5fbe0e62dec960850ef5f937254858fcd4da9e64) )
+	ROM_LOAD( "236.bin",	0x6000, 0x1000, CRC(3f4cfa39) SHA1(e2750a9c5d12c668e599181ee3972c5d78bd0006) )
+	ROM_LOAD( "237.bin",	0x7000, 0x1000, CRC(b411d0c4) SHA1(0617cd312026da78a171fc23f4788393d70371cf) )
+
+	ROM_REGION( 0x1800, "gfx1", 0 )
+	ROM_FILL(				0x0000, 0x1000, 0 ) /* filling the R-G bitplanes */
+	ROM_LOAD( "054.bin",	0x1000, 0x0800, CRC(7b401a09) SHA1(affb90a52761c36be7c67f7606f3f982f6dc724e) )    /* text chars */
+	ROM_IGNORE(                     0x0800)	/* identical halves, discarding the 2nd half */
+
+	ROM_REGION( 0x1800, "gfx2", 0 )
+	ROM_LOAD( "051.bin",	0x0000, 0x0800, CRC(82d823e5) SHA1(75bdf427a6204ef87444be0d8b06a07c5a2fc38f) )    /* cards deck gfx, bitplane1 */
+	ROM_IGNORE(                     0x0800)	/* identical halves, discarding the 2nd half */
+	ROM_LOAD( "052.bin",	0x0800, 0x0800, CRC(eda12738) SHA1(ec7806c2bf1a238f489459c3c3653f43febaa464) )    /* cards deck gfx, bitplane2 */
+	ROM_IGNORE(                     0x0800)	/* identical halves, discarding the 2nd half */
+	ROM_LOAD( "053.bin",	0x1000, 0x0800, CRC(d147ae0a) SHA1(dfdf0a42eb0a6f2afc9f301b0cf01411085247bd) )    /* cards deck gfx, bitplane3 */
+	ROM_IGNORE(                     0x0800)	/* identical halves, discarding the 2nd half */
+
+	ROM_REGION( 0x0800,	"nvram", 0 )	/* default NVRAM, otherwise settings parameters are incorrect */
+	ROM_LOAD( "caspoker_nvram.bin", 0x0000, 0x0800, CRC(be6e2671) SHA1(aef1b09d09e07eb39480a7901ed8535f74e461fa) )
+
+	ROM_REGION( 0x0100, "proms", 0 )	/* from other games */
+	ROM_LOAD( "24sa10.bin",	0x0000, 0x0100, BAD_DUMP CRC(7f31066b) SHA1(15420780ec6b2870fc4539ec3afe4f0c58eedf12) ) /* PROM dump needed */
+ROM_END
+
+/****************************************************
+
+  Unknown poker game, set 1.
+  198?.
+
+  There are french strings related to the game into
+  the program ROM.
+
+  The dump lacks of 1 program ROM located at 17a.
+  (empty socket in the PCB picture)
+
+*****************************************************/
+
+ROM_START( pokerdub )
+	ROM_REGION( 0x10000, "maincpu", 0 )
+	ROM_LOAD( "15a_f_83.15a",	0x2000, 0x1000, CRC(06571884) SHA1(6823f5d4a2fc5adf51f1588273f808a2a25a15bc) )
+	ROM_LOAD( "unknown.17a",	0x3000, 0x1000, NO_DUMP )
 
 	ROM_REGION( 0x1800, "gfx1", 0 )
 	ROM_FILL(			0x0000, 0x1000, 0 ) /* filling the R-G bitplanes */
 	ROM_LOAD( "4.8a",	0x1000, 0x0800, CRC(1e1d4e33) SHA1(22831984489fdf712ca616c1af3c874a5b12b522) )    /* char ROM (cracked title) */
 
 	ROM_REGION( 0x1800, "gfx2", 0 )
-	ROM_LOAD( "1.4a",	0x0000, 0x0800, CRC(f2f94661) SHA1(f37f7c0dff680fd02897dae64e13e297d0fdb3e7) )    /* cards deck gfx, bitplane1 */
-	ROM_LOAD( "2.6a",	0x0800, 0x0800, CRC(6bbb1e2d) SHA1(51ee282219bf84218886ad11a24bc6a8e7337527) )    /* cards deck gfx, bitplane2 */
-	ROM_LOAD( "3.7a",	0x1000, 0x0800, CRC(6e3e9b1d) SHA1(14eb8d14ce16719a6ad7d13db01e47c8f05955f0) )    /* cards deck gfx, bitplane3 */
+	ROM_LOAD( "1.4a",	0x0000, 0x0800, CRC(f2f94661) SHA1(f37f7c0dff680fd02897dae64e13e297d0fdb3e7) )    /* cards deck gfx, bitplane1 */
+	ROM_LOAD( "2.6a",	0x0800, 0x0800, CRC(6bbb1e2d) SHA1(51ee282219bf84218886ad11a24bc6a8e7337527) )    /* cards deck gfx, bitplane2 */
+	ROM_LOAD( "3.7a",	0x1000, 0x0800, CRC(6e3e9b1d) SHA1(14eb8d14ce16719a6ad7d13db01e47c8f05955f0) )    /* cards deck gfx, bitplane3 */
+
+	ROM_REGION( 0x0100, "proms", 0 )
+	ROM_LOAD( "s287.8c",	0x0000, 0x0100, CRC(7f31066b) SHA1(15420780ec6b2870fc4539ec3afe4f0c58eedf12) )
+ROM_END
+
+/****************************************************
+
+  Unknown poker game, set 2.
+  198?.
+
+  This one is totally encrypted.
+  The PCB has a daughterboard coated with some plastic
+  or epoxy resin.
+
+  Char ROM is identical to the Witch Card one.
+
+*****************************************************/
+
+ROM_START( pokerduc )
+	ROM_REGION( 0x10000, "maincpu", 0 )
+	ROM_LOAD( "b",	0x5000, 0x1000, CRC(8627fba5) SHA1(b94665f0bf425ff71f78c1258f910323c2a948f0) )
+	ROM_LOAD( "c",	0x6000, 0x1000, CRC(b35b4108) SHA1(6504ba55511637334c65e88ee5c60b1503b854b3) )
+	ROM_LOAD( "d",	0x7000, 0x1000, CRC(c48096ed) SHA1(279ba433369c7dc9cd902a19200e889eea45d115) )
+
+	ROM_REGION( 0x1800, "gfx1", 0 )
+	ROM_FILL(			0x0000, 0x1000, 0 ) /* filling the R-G bitplanes */
+	ROM_LOAD( "a.8a",	0x1000, 0x0800, CRC(c70a3e49) SHA1(eb2f15b344f4dec5f05701415848c854bb27aaa3) )    /* char ROM (cracked title) */
+
+	ROM_REGION( 0x1800, "gfx2", 0 )
+	ROM_LOAD( "1.4a",	0x0000, 0x0800, CRC(f2f94661) SHA1(f37f7c0dff680fd02897dae64e13e297d0fdb3e7) )    /* cards deck gfx, bitplane1 */
+	ROM_LOAD( "2.6a",	0x0800, 0x0800, CRC(6bbb1e2d) SHA1(51ee282219bf84218886ad11a24bc6a8e7337527) )    /* cards deck gfx, bitplane2 */
+	ROM_LOAD( "3.7a",	0x1000, 0x0800, CRC(232374f3) SHA1(b75907edbf769b8c46fb1ebdb301c325c556e6c2) )    /* cards deck gfx, bitplane3 */
+	ROM_IGNORE(                 0x0800)	/* identical halves */
+
+	ROM_REGION( 0x0100, "proms", 0 )
+	ROM_LOAD( "tbp24s10.9c",	0x0000, 0x0100, CRC(7f31066b) SHA1(15420780ec6b2870fc4539ec3afe4f0c58eedf12) )
+ROM_END
+
+
+/************************************
+
+  Jolli Witch (german)
+  Epoxy CPU box.
+
+  Using the whole addressing
+
+************************************/
+
+ROM_START( witchjol )
+	ROM_REGION( 0x10000, "maincpu", 0 )	/* inside epoxy block with the CPU */
+	ROM_LOAD( "27c256.bin",	0x8000, 0x8000, CRC(14f05e3b) SHA1(83578f6a82b0974dd0325903926b2fd0d8e5c236) )
+
+	ROM_REGION( 0x18000, "temp", 0 )
+	ROM_LOAD( "iii.5a",	0x00000, 0x2000, CRC(5ea338da) SHA1(5e55e17689541ffb9c23e45f689dda98a79bf789) )
+	ROM_LOAD( "ii.4a",	0x10000, 0x2000, CRC(044dfac0) SHA1(721f8f57e05ddcbdb838d12fd3e81a45346ee6db) )
+	ROM_LOAD( "i.2a",	0x08000, 0x2000, CRC(d467f6e2) SHA1(6aaf4cdfb76f5efeeee45635fea120711483648e) )
+
+	ROM_REGION( 0x1800, "gfx0", 0 )
+	ROM_FILL(			0x0000, 0x1000, 0 )			/* filling bitplanes */
+	ROM_COPY( "temp",	0x0000, 0x1000, 0x0800 )	/* 0000-07ff of iii.5a - char rom, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx1", 0 )
+	ROM_COPY( "temp",	0x08800, 0x0000, 0x0800 )	/* 0800-0fff of i.2a - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x10800, 0x0800, 0x0800 )	/* 0800-0fff of ii.4a - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x01000, 0x1000, 0x0800 )	/* 1000-17ff of iii.5a - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx2", 0 )
+	ROM_COPY( "temp",	0x08000, 0x0000, 0x0800 )	/* 0000-07ff of i.2a - regular cards gfx, bitplane 1 */
+	ROM_COPY( "temp",	0x10000, 0x0800, 0x0800 )	/* 0000-07ff of ii.4a - regular cards gfx, bitplane 2 */
+	ROM_COPY( "temp",	0x00800, 0x1000, 0x0800 )	/* 0800-0fff of iii.5a - regular cards gfx, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx3", 0 )
+	ROM_COPY( "temp",	0x0c000, 0x0000, 0x0800 )	/* 4000-47ff of i.2a - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x14000, 0x0800, 0x0800 )	/* 4000-47ff of ii.4a - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x04800, 0x1000, 0x0800 )	/* 4800-4fff of iii.5a - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx4", 0 )
+	ROM_COPY( "temp",	0x09800, 0x0000, 0x0800 )	/* 1800-1fff of i.2a - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x11800, 0x0800, 0x0800 )	/* 1800-1fff of ii.4a - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x02000, 0x1000, 0x0800 )	/* 1800-1fff of iii.5a - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx5", 0 )
+	ROM_COPY( "temp",	0x0a800, 0x0000, 0x0800 )	/* 2800-2fff of i.2a - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x12800, 0x0800, 0x0800 )	/* 2800-2fff of ii.4a - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x03000, 0x1000, 0x0800 )	/* 3000-37ff of iii.5a - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx6", 0 )
+	ROM_COPY( "temp",	0x0a000, 0x0000, 0x0800 )	/* 2000-27ff of i.2a - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x12000, 0x0800, 0x0800 )	/* 2000-27ff of ii.4a - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x02800, 0x1000, 0x0800 )	/* 2800-2fff of iii.5a - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx7", 0 )
+	ROM_COPY( "temp",	0x0e800, 0x0000, 0x0800 )	/* 6800-6fff of i.2a - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x16800, 0x0800, 0x0800 )	/* 6800-6fff of ii.4a - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x07000, 0x1000, 0x0800 )	/* 7000-77ff of iii.5a - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx8", 0 )
+	ROM_COPY( "temp",	0x0b800, 0x0000, 0x0800 )	/* 3800-3fff of i.2a - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x13800, 0x0800, 0x0800 )	/* 3800-3fff of ii.4a - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x04000, 0x1000, 0x0800 )	/* 3800-3fff of iii.5a - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx9", 0 )
+	ROM_COPY( "temp",	0x0c800, 0x0000, 0x0800 )	/* 4800-4fff of i.2a - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x14800, 0x0800, 0x0800 )	/* 4800-4fff of ii.4a - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x05000, 0x1000, 0x0800 )	/* 4000-47ff of iii.5a - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx10", 0 )
+	ROM_COPY( "temp",	0x09000, 0x0000, 0x0800 )	/* 1000-17ff of i.2a - extended cards gfx, bitplane 1 */
+	ROM_COPY( "temp",	0x11000, 0x0800, 0x0800 )	/* 1000-17ff of ii.4a - extended cards gfx, bitplane 2 */
+	ROM_COPY( "temp",	0x01800, 0x1000, 0x0800 )	/* 1800-1fff of iii.5a - extended cards gfx, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx11", 0 )
+	ROM_COPY( "temp",	0x0d000, 0x0000, 0x0800 )	/* 5000-57ff of i.2a - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x15000, 0x0800, 0x0800 )	/* 5000-57ff of ii.4a - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x05800, 0x1000, 0x0800 )	/* 5800-5fff of iii.5a - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx12", 0 )
+	ROM_COPY( "temp",	0x0d800, 0x0000, 0x0800 )	/* 5800-5fff of i.2a - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x15800, 0x0800, 0x0800 )	/* 5800-5fff of ii.4a - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x06000, 0x1000, 0x0800 )	/* 6000-67ff of iii.5a - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx13", 0 )
+	ROM_COPY( "temp",	0x0e000, 0x0000, 0x0800 )	/* 6000-67ff of i.2a - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x16000, 0x0800, 0x0800 )	/* 6000-67ff of ii.4a - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x06800, 0x1000, 0x0800 )	/* 6800-6fff of iii.5a - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx14", 0 )
+	ROM_COPY( "temp",	0x0b000, 0x0000, 0x0800 )	/* 3000-37ff of i.2a - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x13000, 0x0800, 0x0800 )	/* 3000-37ff of ii.4a - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x03800, 0x1000, 0x0800 )	/* 3800-3fff of iii.5a - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx15", 0 )
+	ROM_COPY( "temp",	0x0f000, 0x0000, 0x0800 )	/* 7000-77ff of i.2a - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x17000, 0x0800, 0x0800 )	/* 7000-77ff of ii.4a - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x07800, 0x1000, 0x0800 )	/* 7800-7fff of iii.5a - empty, bitplane 3 */
+
+	ROM_REGION( 0x0100, "proms", 0 )
+	ROM_LOAD( "witchjol_tbp.bin",	0x0000, 0x0100, BAD_DUMP CRC(ed15125b) SHA1(56fc00f2ce4ebe9cee73a45b142c33c00432b66b) )
+ROM_END
+
+/****************************************************
+
+  Wild Witch (Video Klein)
+
+  Another evil hardware from Video Klein
+  with CPU box.
+
+  The program ask you to install a new block
+  or retain the former buggy one.
+
+
+****************************************************/
+
+ROM_START( wldwitch )
+	ROM_REGION( 0x10000, "maincpu", 0 )	/* Ver 184A, 2001-09-12 */
+	ROM_LOAD( "ww184a.bin",	0x8000, 0x8000, CRC(f45edc9b) SHA1(9a7400a84b685b84081d424d6da096632b845de8) )
+
+	ROM_REGION( 0x18000, "temp", 0 )
+	ROM_LOAD( "03.a3",	0x00000, 0x8000, CRC(ae474414) SHA1(6dee760cee18e125791c17b562ca8aabe1f4593e) )
+	ROM_LOAD( "02.a2",	0x10000, 0x8000, CRC(f6450111) SHA1(8b44c90c62d5026ccfba88b31e1113e01c6bcf85) )
+	ROM_LOAD( "01.a1",	0x08000, 0x8000, CRC(6d644987) SHA1(26243abe051f3266e2d1743ec599d4e8bbb692e4) )
+
+	ROM_REGION( 0x1800, "gfx0", 0 )
+	ROM_FILL(			0x0000, 0x1000, 0 )			/* filling bitplanes */
+	ROM_COPY( "temp",	0x0000, 0x1000, 0x0800 )	/* 0000-07ff of 03.a3 - char rom, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx1", 0 )
+	ROM_COPY( "temp",	0x08800, 0x0000, 0x0800 )	/* 0800-0fff of 01.a1 - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x10800, 0x0800, 0x0800 )	/* 0800-0fff of 02.a2 - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x01000, 0x1000, 0x0800 )	/* 1000-17ff of 03.a3 - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx2", 0 )
+	ROM_COPY( "temp",	0x08000, 0x0000, 0x0800 )	/* 0000-07ff of 01.a1 - regular cards gfx, bitplane 1 */
+	ROM_COPY( "temp",	0x10000, 0x0800, 0x0800 )	/* 0000-07ff of 02.a2 - regular cards gfx, bitplane 2 */
+	ROM_COPY( "temp",	0x00800, 0x1000, 0x0800 )	/* 0800-0fff of 03.a3 - regular cards gfx, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx3", 0 )
+	ROM_COPY( "temp",	0x0c000, 0x0000, 0x0800 )	/* 4000-47ff of 01.a1 - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x14000, 0x0800, 0x0800 )	/* 4000-47ff of 02.a2 - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x04800, 0x1000, 0x0800 )	/* 4800-4fff of 03.a3 - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx4", 0 )
+	ROM_COPY( "temp",	0x09800, 0x0000, 0x0800 )	/* 1800-1fff of 01.a1 - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x11800, 0x0800, 0x0800 )	/* 1800-1fff of 02.a2 - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x02000, 0x1000, 0x0800 )	/* 1800-1fff of 03.a3 - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx5", 0 )
+	ROM_COPY( "temp",	0x0a800, 0x0000, 0x0800 )	/* 2800-2fff of 01.a1 - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x12800, 0x0800, 0x0800 )	/* 2800-2fff of 02.a2 - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x03000, 0x1000, 0x0800 )	/* 3000-37ff of 03.a3 - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx6", 0 )
+	ROM_COPY( "temp",	0x0a000, 0x0000, 0x0800 )	/* 2000-27ff of 01.a1 - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x12000, 0x0800, 0x0800 )	/* 2000-27ff of 02.a2 - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x02800, 0x1000, 0x0800 )	/* 2800-2fff of 03.a3 - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx7", 0 )
+	ROM_COPY( "temp",	0x0e800, 0x0000, 0x0800 )	/* 6800-6fff of 01.a1 - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x16800, 0x0800, 0x0800 )	/* 6800-6fff of 02.a2 - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x07000, 0x1000, 0x0800 )	/* 7000-77ff of 03.a3 - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx8", 0 )
+	ROM_COPY( "temp",	0x0b800, 0x0000, 0x0800 )	/* 3800-3fff of 01.a1 - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x13800, 0x0800, 0x0800 )	/* 3800-3fff of 02.a2 - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x04000, 0x1000, 0x0800 )	/* 3800-3fff of 03.a3 - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx9", 0 )
+	ROM_COPY( "temp",	0x0c800, 0x0000, 0x0800 )	/* 4800-4fff of 01.a1 - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x14800, 0x0800, 0x0800 )	/* 4800-4fff of 02.a2 - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x05000, 0x1000, 0x0800 )	/* 4000-47ff of 03.a3 - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx10", 0 )
+	ROM_COPY( "temp",	0x09000, 0x0000, 0x0800 )	/* 1000-17ff of 01.a1 - extended cards gfx, bitplane 1 */
+	ROM_COPY( "temp",	0x11000, 0x0800, 0x0800 )	/* 1000-17ff of 02.a2 - extended cards gfx, bitplane 2 */
+	ROM_COPY( "temp",	0x01800, 0x1000, 0x0800 )	/* 1800-1fff of 03.a3 - extended cards gfx, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx11", 0 )
+	ROM_COPY( "temp",	0x0d000, 0x0000, 0x0800 )	/* 5000-57ff of 01.a1 - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x15000, 0x0800, 0x0800 )	/* 5000-57ff of 02.a2 - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x05800, 0x1000, 0x0800 )	/* 5800-5fff of 03.a3 - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx12", 0 )
+	ROM_COPY( "temp",	0x0d800, 0x0000, 0x0800 )	/* 5800-5fff of 01.a1 - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x15800, 0x0800, 0x0800 )	/* 5800-5fff of 02.a2 - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x06000, 0x1000, 0x0800 )	/* 6000-67ff of 03.a3 - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx13", 0 )
+	ROM_COPY( "temp",	0x0e000, 0x0000, 0x0800 )	/* 6000-67ff of 01.a1 - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x16000, 0x0800, 0x0800 )	/* 6000-67ff of 02.a2 - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x06800, 0x1000, 0x0800 )	/* 6800-6fff of 03.a3 - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx14", 0 )
+	ROM_COPY( "temp",	0x0b000, 0x0000, 0x0800 )	/* 3000-37ff of 01.a1 - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x13000, 0x0800, 0x0800 )	/* 3000-37ff of 02.a2 - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x03800, 0x1000, 0x0800 )	/* 3800-3fff of 03.a3 - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx15", 0 )
+	ROM_COPY( "temp",	0x0f000, 0x0000, 0x0800 )	/* 7000-77ff of 01.a1 - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x17000, 0x0800, 0x0800 )	/* 7000-77ff of 02.a2 - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x07800, 0x1000, 0x0800 )	/* 7800-7fff of 03.a3 - empty, bitplane 3 */
+
+	ROM_REGION( 0x0100, "proms", 0 )
+	ROM_LOAD( "wldwitch_tbp.bin",	0x0000, 0x0100, BAD_DUMP CRC(ed15125b) SHA1(56fc00f2ce4ebe9cee73a45b142c33c00432b66b) )
+
+	ROM_REGION( 0x0400, "proms2", 0 )
+	ROM_LOAD( "82s137.box",	0x0000, 0x0400, CRC(4ae3ecf5) SHA1(e1e540ae13e7ce5ac6391f325160ec997ea6cc2f) )
+ROM_END
+
+
+ROM_START( wldwitcha )
+	ROM_REGION( 0x10000, "maincpu", 0 )	/* Ver 157-SP, 1992-12-25 */
+	ROM_LOAD( "ww157-sp.bin",	0x8000, 0x8000, CRC(34396a51) SHA1(823e817a01fab49deacf8af474e31732b96a15d1) )
+
+	ROM_REGION( 0x18000, "temp", 0 )
+	ROM_LOAD( "03.a3",	0x00000, 0x8000, CRC(ae474414) SHA1(6dee760cee18e125791c17b562ca8aabe1f4593e) )
+	ROM_LOAD( "02.a2",	0x10000, 0x8000, CRC(f6450111) SHA1(8b44c90c62d5026ccfba88b31e1113e01c6bcf85) )
+	ROM_LOAD( "01.a1",	0x08000, 0x8000, CRC(6d644987) SHA1(26243abe051f3266e2d1743ec599d4e8bbb692e4) )
+
+	ROM_REGION( 0x1800, "gfx0", 0 )
+	ROM_FILL(			0x0000, 0x1000, 0 )			/* filling bitplanes */
+	ROM_COPY( "temp",	0x0000, 0x1000, 0x0800 )	/* 0000-07ff of 03.a3 - char rom, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx1", 0 )
+	ROM_COPY( "temp",	0x08800, 0x0000, 0x0800 )	/* 0800-0fff of 01.a1 - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x10800, 0x0800, 0x0800 )	/* 0800-0fff of 02.a2 - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x01000, 0x1000, 0x0800 )	/* 1000-17ff of 03.a3 - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx2", 0 )
+	ROM_COPY( "temp",	0x08000, 0x0000, 0x0800 )	/* 0000-07ff of 01.a1 - regular cards gfx, bitplane 1 */
+	ROM_COPY( "temp",	0x10000, 0x0800, 0x0800 )	/* 0000-07ff of 02.a2 - regular cards gfx, bitplane 2 */
+	ROM_COPY( "temp",	0x00800, 0x1000, 0x0800 )	/* 0800-0fff of 03.a3 - regular cards gfx, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx3", 0 )
+	ROM_COPY( "temp",	0x0c000, 0x0000, 0x0800 )	/* 4000-47ff of 01.a1 - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x14000, 0x0800, 0x0800 )	/* 4000-47ff of 02.a2 - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x04800, 0x1000, 0x0800 )	/* 4800-4fff of 03.a3 - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx4", 0 )
+	ROM_COPY( "temp",	0x09800, 0x0000, 0x0800 )	/* 1800-1fff of 01.a1 - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x11800, 0x0800, 0x0800 )	/* 1800-1fff of 02.a2 - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x02000, 0x1000, 0x0800 )	/* 1800-1fff of 03.a3 - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx5", 0 )
+	ROM_COPY( "temp",	0x0a800, 0x0000, 0x0800 )	/* 2800-2fff of 01.a1 - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x12800, 0x0800, 0x0800 )	/* 2800-2fff of 02.a2 - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x03000, 0x1000, 0x0800 )	/* 3000-37ff of 03.a3 - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx6", 0 )
+	ROM_COPY( "temp",	0x0a000, 0x0000, 0x0800 )	/* 2000-27ff of 01.a1 - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x12000, 0x0800, 0x0800 )	/* 2000-27ff of 02.a2 - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x02800, 0x1000, 0x0800 )	/* 2800-2fff of 03.a3 - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx7", 0 )
+	ROM_COPY( "temp",	0x0e800, 0x0000, 0x0800 )	/* 6800-6fff of 01.a1 - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x16800, 0x0800, 0x0800 )	/* 6800-6fff of 02.a2 - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x07000, 0x1000, 0x0800 )	/* 7000-77ff of 03.a3 - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx8", 0 )
+	ROM_COPY( "temp",	0x0b800, 0x0000, 0x0800 )	/* 3800-3fff of 01.a1 - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x13800, 0x0800, 0x0800 )	/* 3800-3fff of 02.a2 - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x04000, 0x1000, 0x0800 )	/* 3800-3fff of 03.a3 - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx9", 0 )
+	ROM_COPY( "temp",	0x0c800, 0x0000, 0x0800 )	/* 4800-4fff of 01.a1 - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x14800, 0x0800, 0x0800 )	/* 4800-4fff of 02.a2 - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x05000, 0x1000, 0x0800 )	/* 4000-47ff of 03.a3 - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx10", 0 )
+	ROM_COPY( "temp",	0x09000, 0x0000, 0x0800 )	/* 1000-17ff of 01.a1 - extended cards gfx, bitplane 1 */
+	ROM_COPY( "temp",	0x11000, 0x0800, 0x0800 )	/* 1000-17ff of 02.a2 - extended cards gfx, bitplane 2 */
+	ROM_COPY( "temp",	0x01800, 0x1000, 0x0800 )	/* 1800-1fff of 03.a3 - extended cards gfx, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx11", 0 )
+	ROM_COPY( "temp",	0x0d000, 0x0000, 0x0800 )	/* 5000-57ff of 01.a1 - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x15000, 0x0800, 0x0800 )	/* 5000-57ff of 02.a2 - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x05800, 0x1000, 0x0800 )	/* 5800-5fff of 03.a3 - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx12", 0 )
+	ROM_COPY( "temp",	0x0d800, 0x0000, 0x0800 )	/* 5800-5fff of 01.a1 - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x15800, 0x0800, 0x0800 )	/* 5800-5fff of 02.a2 - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x06000, 0x1000, 0x0800 )	/* 6000-67ff of 03.a3 - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx13", 0 )
+	ROM_COPY( "temp",	0x0e000, 0x0000, 0x0800 )	/* 6000-67ff of 01.a1 - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x16000, 0x0800, 0x0800 )	/* 6000-67ff of 02.a2 - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x06800, 0x1000, 0x0800 )	/* 6800-6fff of 03.a3 - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx14", 0 )
+	ROM_COPY( "temp",	0x0b000, 0x0000, 0x0800 )	/* 3000-37ff of 01.a1 - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x13000, 0x0800, 0x0800 )	/* 3000-37ff of 02.a2 - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x03800, 0x1000, 0x0800 )	/* 3800-3fff of 03.a3 - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx15", 0 )
+	ROM_COPY( "temp",	0x0f000, 0x0000, 0x0800 )	/* 7000-77ff of 01.a1 - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x17000, 0x0800, 0x0800 )	/* 7000-77ff of 02.a2 - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x07800, 0x1000, 0x0800 )	/* 7800-7fff of 03.a3 - empty, bitplane 3 */
+
+	ROM_REGION( 0x0100, "proms", 0 )
+	ROM_LOAD( "wldwitch_tbp.bin",	0x0000, 0x0100, BAD_DUMP CRC(ed15125b) SHA1(56fc00f2ce4ebe9cee73a45b142c33c00432b66b) )
+
+	ROM_REGION( 0x0400, "proms2", 0 )
+	ROM_LOAD( "82s137.box",	0x0000, 0x0400, CRC(4ae3ecf5) SHA1(e1e540ae13e7ce5ac6391f325160ec997ea6cc2f) )
+ROM_END
+
+
+ROM_START( wldwitchb )
+	ROM_REGION( 0x10000, "maincpu", 0 )	/* Ver 157-TE, 1992-12-25 */
+	ROM_LOAD( "ww157-te.bin",	0x8000, 0x8000, CRC(9bf25a7c) SHA1(a78f946403254a30d9afa3c43ca42dfc02edd8fb) )
+
+	ROM_REGION( 0x18000, "temp", 0 )
+	ROM_LOAD( "03.a3",	0x00000, 0x8000, CRC(ae474414) SHA1(6dee760cee18e125791c17b562ca8aabe1f4593e) )
+	ROM_LOAD( "02.a2",	0x10000, 0x8000, CRC(f6450111) SHA1(8b44c90c62d5026ccfba88b31e1113e01c6bcf85) )
+	ROM_LOAD( "01.a1",	0x08000, 0x8000, CRC(6d644987) SHA1(26243abe051f3266e2d1743ec599d4e8bbb692e4) )
+
+	ROM_REGION( 0x1800, "gfx0", 0 )
+	ROM_FILL(			0x0000, 0x1000, 0 )			/* filling bitplanes */
+	ROM_COPY( "temp",	0x0000, 0x1000, 0x0800 )	/* 0000-07ff of 03.a3 - char rom, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx1", 0 )
+	ROM_COPY( "temp",	0x08800, 0x0000, 0x0800 )	/* 0800-0fff of 01.a1 - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x10800, 0x0800, 0x0800 )	/* 0800-0fff of 02.a2 - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x01000, 0x1000, 0x0800 )	/* 1000-17ff of 03.a3 - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx2", 0 )
+	ROM_COPY( "temp",	0x08000, 0x0000, 0x0800 )	/* 0000-07ff of 01.a1 - regular cards gfx, bitplane 1 */
+	ROM_COPY( "temp",	0x10000, 0x0800, 0x0800 )	/* 0000-07ff of 02.a2 - regular cards gfx, bitplane 2 */
+	ROM_COPY( "temp",	0x00800, 0x1000, 0x0800 )	/* 0800-0fff of 03.a3 - regular cards gfx, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx3", 0 )
+	ROM_COPY( "temp",	0x0c000, 0x0000, 0x0800 )	/* 4000-47ff of 01.a1 - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x14000, 0x0800, 0x0800 )	/* 4000-47ff of 02.a2 - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x04800, 0x1000, 0x0800 )	/* 4800-4fff of 03.a3 - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx4", 0 )
+	ROM_COPY( "temp",	0x09800, 0x0000, 0x0800 )	/* 1800-1fff of 01.a1 - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x11800, 0x0800, 0x0800 )	/* 1800-1fff of 02.a2 - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x02000, 0x1000, 0x0800 )	/* 1800-1fff of 03.a3 - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx5", 0 )
+	ROM_COPY( "temp",	0x0a800, 0x0000, 0x0800 )	/* 2800-2fff of 01.a1 - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x12800, 0x0800, 0x0800 )	/* 2800-2fff of 02.a2 - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x03000, 0x1000, 0x0800 )	/* 3000-37ff of 03.a3 - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx6", 0 )
+	ROM_COPY( "temp",	0x0a000, 0x0000, 0x0800 )	/* 2000-27ff of 01.a1 - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x12000, 0x0800, 0x0800 )	/* 2000-27ff of 02.a2 - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x02800, 0x1000, 0x0800 )	/* 2800-2fff of 03.a3 - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx7", 0 )
+	ROM_COPY( "temp",	0x0e800, 0x0000, 0x0800 )	/* 6800-6fff of 01.a1 - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x16800, 0x0800, 0x0800 )	/* 6800-6fff of 02.a2 - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x07000, 0x1000, 0x0800 )	/* 7000-77ff of 03.a3 - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx8", 0 )
+	ROM_COPY( "temp",	0x0b800, 0x0000, 0x0800 )	/* 3800-3fff of 01.a1 - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x13800, 0x0800, 0x0800 )	/* 3800-3fff of 02.a2 - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x04000, 0x1000, 0x0800 )	/* 3800-3fff of 03.a3 - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx9", 0 )
+	ROM_COPY( "temp",	0x0c800, 0x0000, 0x0800 )	/* 4800-4fff of 01.a1 - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x14800, 0x0800, 0x0800 )	/* 4800-4fff of 02.a2 - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x05000, 0x1000, 0x0800 )	/* 4000-47ff of 03.a3 - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx10", 0 )
+	ROM_COPY( "temp",	0x09000, 0x0000, 0x0800 )	/* 1000-17ff of 01.a1 - extended cards gfx, bitplane 1 */
+	ROM_COPY( "temp",	0x11000, 0x0800, 0x0800 )	/* 1000-17ff of 02.a2 - extended cards gfx, bitplane 2 */
+	ROM_COPY( "temp",	0x01800, 0x1000, 0x0800 )	/* 1800-1fff of 03.a3 - extended cards gfx, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx11", 0 )
+	ROM_COPY( "temp",	0x0d000, 0x0000, 0x0800 )	/* 5000-57ff of 01.a1 - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x15000, 0x0800, 0x0800 )	/* 5000-57ff of 02.a2 - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x05800, 0x1000, 0x0800 )	/* 5800-5fff of 03.a3 - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx12", 0 )
+	ROM_COPY( "temp",	0x0d800, 0x0000, 0x0800 )	/* 5800-5fff of 01.a1 - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x15800, 0x0800, 0x0800 )	/* 5800-5fff of 02.a2 - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x06000, 0x1000, 0x0800 )	/* 6000-67ff of 03.a3 - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx13", 0 )
+	ROM_COPY( "temp",	0x0e000, 0x0000, 0x0800 )	/* 6000-67ff of 01.a1 - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x16000, 0x0800, 0x0800 )	/* 6000-67ff of 02.a2 - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x06800, 0x1000, 0x0800 )	/* 6800-6fff of 03.a3 - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx14", 0 )
+	ROM_COPY( "temp",	0x0b000, 0x0000, 0x0800 )	/* 3000-37ff of 01.a1 - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x13000, 0x0800, 0x0800 )	/* 3000-37ff of 02.a2 - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x03800, 0x1000, 0x0800 )	/* 3800-3fff of 03.a3 - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx15", 0 )
+	ROM_COPY( "temp",	0x0f000, 0x0000, 0x0800 )	/* 7000-77ff of 01.a1 - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x17000, 0x0800, 0x0800 )	/* 7000-77ff of 02.a2 - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x07800, 0x1000, 0x0800 )	/* 7800-7fff of 03.a3 - empty, bitplane 3 */
+
+	ROM_REGION( 0x0100, "proms", 0 )
+	ROM_LOAD( "wldwitch_tbp.bin",	0x0000, 0x0100, BAD_DUMP CRC(ed15125b) SHA1(56fc00f2ce4ebe9cee73a45b142c33c00432b66b) )
+
+	ROM_REGION( 0x0400, "proms2", 0 )
+	ROM_LOAD( "82s137.box",	0x0000, 0x0400, CRC(4ae3ecf5) SHA1(e1e540ae13e7ce5ac6391f325160ec997ea6cc2f) )
+ROM_END
+
+
+ROM_START( wldwitchc )
+	ROM_REGION( 0x10000, "maincpu", 0 )	/* Ver 162A, 1994-04-26 */
+	ROM_LOAD( "ww162a.bin",	0x8000, 0x8000, CRC(59765e59) SHA1(474119fe179e0950b082fff8b014ceae8c82b44b) )
+
+	ROM_REGION( 0x18000, "temp", 0 )
+	ROM_LOAD( "03.a3",	0x00000, 0x8000, CRC(ae474414) SHA1(6dee760cee18e125791c17b562ca8aabe1f4593e) )
+	ROM_LOAD( "02.a2",	0x10000, 0x8000, CRC(f6450111) SHA1(8b44c90c62d5026ccfba88b31e1113e01c6bcf85) )
+	ROM_LOAD( "01.a1",	0x08000, 0x8000, CRC(6d644987) SHA1(26243abe051f3266e2d1743ec599d4e8bbb692e4) )
+
+	ROM_REGION( 0x1800, "gfx0", 0 )
+	ROM_FILL(			0x0000, 0x1000, 0 )			/* filling bitplanes */
+	ROM_COPY( "temp",	0x0000, 0x1000, 0x0800 )	/* 0000-07ff of 03.a3 - char rom, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx1", 0 )
+	ROM_COPY( "temp",	0x08800, 0x0000, 0x0800 )	/* 0800-0fff of 01.a1 - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x10800, 0x0800, 0x0800 )	/* 0800-0fff of 02.a2 - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x01000, 0x1000, 0x0800 )	/* 1000-17ff of 03.a3 - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx2", 0 )
+	ROM_COPY( "temp",	0x08000, 0x0000, 0x0800 )	/* 0000-07ff of 01.a1 - regular cards gfx, bitplane 1 */
+	ROM_COPY( "temp",	0x10000, 0x0800, 0x0800 )	/* 0000-07ff of 02.a2 - regular cards gfx, bitplane 2 */
+	ROM_COPY( "temp",	0x00800, 0x1000, 0x0800 )	/* 0800-0fff of 03.a3 - regular cards gfx, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx3", 0 )
+	ROM_COPY( "temp",	0x0c000, 0x0000, 0x0800 )	/* 4000-47ff of 01.a1 - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x14000, 0x0800, 0x0800 )	/* 4000-47ff of 02.a2 - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x04800, 0x1000, 0x0800 )	/* 4800-4fff of 03.a3 - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx4", 0 )
+	ROM_COPY( "temp",	0x09800, 0x0000, 0x0800 )	/* 1800-1fff of 01.a1 - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x11800, 0x0800, 0x0800 )	/* 1800-1fff of 02.a2 - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x02000, 0x1000, 0x0800 )	/* 1800-1fff of 03.a3 - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx5", 0 )
+	ROM_COPY( "temp",	0x0a800, 0x0000, 0x0800 )	/* 2800-2fff of 01.a1 - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x12800, 0x0800, 0x0800 )	/* 2800-2fff of 02.a2 - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x03000, 0x1000, 0x0800 )	/* 3000-37ff of 03.a3 - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx6", 0 )
+	ROM_COPY( "temp",	0x0a000, 0x0000, 0x0800 )	/* 2000-27ff of 01.a1 - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x12000, 0x0800, 0x0800 )	/* 2000-27ff of 02.a2 - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x02800, 0x1000, 0x0800 )	/* 2800-2fff of 03.a3 - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx7", 0 )
+	ROM_COPY( "temp",	0x0e800, 0x0000, 0x0800 )	/* 6800-6fff of 01.a1 - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x16800, 0x0800, 0x0800 )	/* 6800-6fff of 02.a2 - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x07000, 0x1000, 0x0800 )	/* 7000-77ff of 03.a3 - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx8", 0 )
+	ROM_COPY( "temp",	0x0b800, 0x0000, 0x0800 )	/* 3800-3fff of 01.a1 - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x13800, 0x0800, 0x0800 )	/* 3800-3fff of 02.a2 - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x04000, 0x1000, 0x0800 )	/* 3800-3fff of 03.a3 - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx9", 0 )
+	ROM_COPY( "temp",	0x0c800, 0x0000, 0x0800 )	/* 4800-4fff of 01.a1 - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x14800, 0x0800, 0x0800 )	/* 4800-4fff of 02.a2 - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x05000, 0x1000, 0x0800 )	/* 4000-47ff of 03.a3 - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx10", 0 )
+	ROM_COPY( "temp",	0x09000, 0x0000, 0x0800 )	/* 1000-17ff of 01.a1 - extended cards gfx, bitplane 1 */
+	ROM_COPY( "temp",	0x11000, 0x0800, 0x0800 )	/* 1000-17ff of 02.a2 - extended cards gfx, bitplane 2 */
+	ROM_COPY( "temp",	0x01800, 0x1000, 0x0800 )	/* 1800-1fff of 03.a3 - extended cards gfx, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx11", 0 )
+	ROM_COPY( "temp",	0x0d000, 0x0000, 0x0800 )	/* 5000-57ff of 01.a1 - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x15000, 0x0800, 0x0800 )	/* 5000-57ff of 02.a2 - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x05800, 0x1000, 0x0800 )	/* 5800-5fff of 03.a3 - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx12", 0 )
+	ROM_COPY( "temp",	0x0d800, 0x0000, 0x0800 )	/* 5800-5fff of 01.a1 - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x15800, 0x0800, 0x0800 )	/* 5800-5fff of 02.a2 - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x06000, 0x1000, 0x0800 )	/* 6000-67ff of 03.a3 - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx13", 0 )
+	ROM_COPY( "temp",	0x0e000, 0x0000, 0x0800 )	/* 6000-67ff of 01.a1 - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x16000, 0x0800, 0x0800 )	/* 6000-67ff of 02.a2 - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x06800, 0x1000, 0x0800 )	/* 6800-6fff of 03.a3 - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx14", 0 )
+	ROM_COPY( "temp",	0x0b000, 0x0000, 0x0800 )	/* 3000-37ff of 01.a1 - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x13000, 0x0800, 0x0800 )	/* 3000-37ff of 02.a2 - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x03800, 0x1000, 0x0800 )	/* 3800-3fff of 03.a3 - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx15", 0 )
+	ROM_COPY( "temp",	0x0f000, 0x0000, 0x0800 )	/* 7000-77ff of 01.a1 - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x17000, 0x0800, 0x0800 )	/* 7000-77ff of 02.a2 - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x07800, 0x1000, 0x0800 )	/* 7800-7fff of 03.a3 - empty, bitplane 3 */
+
+	ROM_REGION( 0x0100, "proms", 0 )
+	ROM_LOAD( "wldwitch_tbp.bin",	0x0000, 0x0100, BAD_DUMP CRC(ed15125b) SHA1(56fc00f2ce4ebe9cee73a45b142c33c00432b66b) )
+
+	ROM_REGION( 0x0400, "proms2", 0 )
+	ROM_LOAD( "82s137.box",	0x0000, 0x0400, CRC(4ae3ecf5) SHA1(e1e540ae13e7ce5ac6391f325160ec997ea6cc2f) )
+ROM_END
+
+
+ROM_START( wldwitchd )
+	ROM_REGION( 0x10000, "maincpu", 0 )	/* Ver 162B, 1994-04-26 */
+	ROM_LOAD( "ww162b.bin",	0x8000, 0x8000, CRC(a60e0f28) SHA1(88e41b9cfe76e2c70d0ebfb73801478412cd4ba4) )
+
+	ROM_REGION( 0x18000, "temp", 0 )
+	ROM_LOAD( "03.a3",	0x00000, 0x8000, CRC(ae474414) SHA1(6dee760cee18e125791c17b562ca8aabe1f4593e) )
+	ROM_LOAD( "02.a2",	0x10000, 0x8000, CRC(f6450111) SHA1(8b44c90c62d5026ccfba88b31e1113e01c6bcf85) )
+	ROM_LOAD( "01.a1",	0x08000, 0x8000, CRC(6d644987) SHA1(26243abe051f3266e2d1743ec599d4e8bbb692e4) )
+
+	ROM_REGION( 0x1800, "gfx0", 0 )
+	ROM_FILL(			0x0000, 0x1000, 0 )			/* filling bitplanes */
+	ROM_COPY( "temp",	0x0000, 0x1000, 0x0800 )	/* 0000-07ff of 03.a3 - char rom, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx1", 0 )
+	ROM_COPY( "temp",	0x08800, 0x0000, 0x0800 )	/* 0800-0fff of 01.a1 - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x10800, 0x0800, 0x0800 )	/* 0800-0fff of 02.a2 - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x01000, 0x1000, 0x0800 )	/* 1000-17ff of 03.a3 - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx2", 0 )
+	ROM_COPY( "temp",	0x08000, 0x0000, 0x0800 )	/* 0000-07ff of 01.a1 - regular cards gfx, bitplane 1 */
+	ROM_COPY( "temp",	0x10000, 0x0800, 0x0800 )	/* 0000-07ff of 02.a2 - regular cards gfx, bitplane 2 */
+	ROM_COPY( "temp",	0x00800, 0x1000, 0x0800 )	/* 0800-0fff of 03.a3 - regular cards gfx, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx3", 0 )
+	ROM_COPY( "temp",	0x0c000, 0x0000, 0x0800 )	/* 4000-47ff of 01.a1 - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x14000, 0x0800, 0x0800 )	/* 4000-47ff of 02.a2 - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x04800, 0x1000, 0x0800 )	/* 4800-4fff of 03.a3 - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx4", 0 )
+	ROM_COPY( "temp",	0x09800, 0x0000, 0x0800 )	/* 1800-1fff of 01.a1 - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x11800, 0x0800, 0x0800 )	/* 1800-1fff of 02.a2 - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x02000, 0x1000, 0x0800 )	/* 1800-1fff of 03.a3 - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx5", 0 )
+	ROM_COPY( "temp",	0x0a800, 0x0000, 0x0800 )	/* 2800-2fff of 01.a1 - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x12800, 0x0800, 0x0800 )	/* 2800-2fff of 02.a2 - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x03000, 0x1000, 0x0800 )	/* 3000-37ff of 03.a3 - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx6", 0 )
+	ROM_COPY( "temp",	0x0a000, 0x0000, 0x0800 )	/* 2000-27ff of 01.a1 - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x12000, 0x0800, 0x0800 )	/* 2000-27ff of 02.a2 - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x02800, 0x1000, 0x0800 )	/* 2800-2fff of 03.a3 - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx7", 0 )
+	ROM_COPY( "temp",	0x0e800, 0x0000, 0x0800 )	/* 6800-6fff of 01.a1 - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x16800, 0x0800, 0x0800 )	/* 6800-6fff of 02.a2 - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x07000, 0x1000, 0x0800 )	/* 7000-77ff of 03.a3 - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx8", 0 )
+	ROM_COPY( "temp",	0x0b800, 0x0000, 0x0800 )	/* 3800-3fff of 01.a1 - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x13800, 0x0800, 0x0800 )	/* 3800-3fff of 02.a2 - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x04000, 0x1000, 0x0800 )	/* 3800-3fff of 03.a3 - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx9", 0 )
+	ROM_COPY( "temp",	0x0c800, 0x0000, 0x0800 )	/* 4800-4fff of 01.a1 - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x14800, 0x0800, 0x0800 )	/* 4800-4fff of 02.a2 - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x05000, 0x1000, 0x0800 )	/* 4000-47ff of 03.a3 - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx10", 0 )
+	ROM_COPY( "temp",	0x09000, 0x0000, 0x0800 )	/* 1000-17ff of 01.a1 - extended cards gfx, bitplane 1 */
+	ROM_COPY( "temp",	0x11000, 0x0800, 0x0800 )	/* 1000-17ff of 02.a2 - extended cards gfx, bitplane 2 */
+	ROM_COPY( "temp",	0x01800, 0x1000, 0x0800 )	/* 1800-1fff of 03.a3 - extended cards gfx, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx11", 0 )
+	ROM_COPY( "temp",	0x0d000, 0x0000, 0x0800 )	/* 5000-57ff of 01.a1 - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x15000, 0x0800, 0x0800 )	/* 5000-57ff of 02.a2 - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x05800, 0x1000, 0x0800 )	/* 5800-5fff of 03.a3 - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx12", 0 )
+	ROM_COPY( "temp",	0x0d800, 0x0000, 0x0800 )	/* 5800-5fff of 01.a1 - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x15800, 0x0800, 0x0800 )	/* 5800-5fff of 02.a2 - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x06000, 0x1000, 0x0800 )	/* 6000-67ff of 03.a3 - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx13", 0 )
+	ROM_COPY( "temp",	0x0e000, 0x0000, 0x0800 )	/* 6000-67ff of 01.a1 - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x16000, 0x0800, 0x0800 )	/* 6000-67ff of 02.a2 - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x06800, 0x1000, 0x0800 )	/* 6800-6fff of 03.a3 - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx14", 0 )
+	ROM_COPY( "temp",	0x0b000, 0x0000, 0x0800 )	/* 3000-37ff of 01.a1 - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x13000, 0x0800, 0x0800 )	/* 3000-37ff of 02.a2 - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x03800, 0x1000, 0x0800 )	/* 3800-3fff of 03.a3 - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx15", 0 )
+	ROM_COPY( "temp",	0x0f000, 0x0000, 0x0800 )	/* 7000-77ff of 01.a1 - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x17000, 0x0800, 0x0800 )	/* 7000-77ff of 02.a2 - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x07800, 0x1000, 0x0800 )	/* 7800-7fff of 03.a3 - empty, bitplane 3 */
+
+	ROM_REGION( 0x0100, "proms", 0 )
+	ROM_LOAD( "wldwitch_tbp.bin",	0x0000, 0x0100, BAD_DUMP CRC(ed15125b) SHA1(56fc00f2ce4ebe9cee73a45b142c33c00432b66b) )
+
+	ROM_REGION( 0x0400, "proms2", 0 )
+	ROM_LOAD( "82s137.box",	0x0000, 0x0400, CRC(4ae3ecf5) SHA1(e1e540ae13e7ce5ac6391f325160ec997ea6cc2f) )
+ROM_END
+
+
+ROM_START( wldwitche )
+	ROM_REGION( 0x10000, "maincpu", 0 )	/* Ver 162A-F, 1994-04-26 */
+	ROM_LOAD( "ww162a-f.bin",	0x8000, 0x8000, CRC(1aba84c1) SHA1(a825bd6312385c5a1768e8156fd7dad770926564) )
+
+	ROM_REGION( 0x18000, "temp", 0 )
+	ROM_LOAD( "03.a3",	0x00000, 0x8000, CRC(ae474414) SHA1(6dee760cee18e125791c17b562ca8aabe1f4593e) )
+	ROM_LOAD( "02.a2",	0x10000, 0x8000, CRC(f6450111) SHA1(8b44c90c62d5026ccfba88b31e1113e01c6bcf85) )
+	ROM_LOAD( "01.a1",	0x08000, 0x8000, CRC(6d644987) SHA1(26243abe051f3266e2d1743ec599d4e8bbb692e4) )
+
+	ROM_REGION( 0x1800, "gfx0", 0 )
+	ROM_FILL(			0x0000, 0x1000, 0 )			/* filling bitplanes */
+	ROM_COPY( "temp",	0x0000, 0x1000, 0x0800 )	/* 0000-07ff of 03.a3 - char rom, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx1", 0 )
+	ROM_COPY( "temp",	0x08800, 0x0000, 0x0800 )	/* 0800-0fff of 01.a1 - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x10800, 0x0800, 0x0800 )	/* 0800-0fff of 02.a2 - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x01000, 0x1000, 0x0800 )	/* 1000-17ff of 03.a3 - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx2", 0 )
+	ROM_COPY( "temp",	0x08000, 0x0000, 0x0800 )	/* 0000-07ff of 01.a1 - regular cards gfx, bitplane 1 */
+	ROM_COPY( "temp",	0x10000, 0x0800, 0x0800 )	/* 0000-07ff of 02.a2 - regular cards gfx, bitplane 2 */
+	ROM_COPY( "temp",	0x00800, 0x1000, 0x0800 )	/* 0800-0fff of 03.a3 - regular cards gfx, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx3", 0 )
+	ROM_COPY( "temp",	0x0c000, 0x0000, 0x0800 )	/* 4000-47ff of 01.a1 - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x14000, 0x0800, 0x0800 )	/* 4000-47ff of 02.a2 - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x04800, 0x1000, 0x0800 )	/* 4800-4fff of 03.a3 - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx4", 0 )
+	ROM_COPY( "temp",	0x09800, 0x0000, 0x0800 )	/* 1800-1fff of 01.a1 - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x11800, 0x0800, 0x0800 )	/* 1800-1fff of 02.a2 - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x02000, 0x1000, 0x0800 )	/* 1800-1fff of 03.a3 - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx5", 0 )
+	ROM_COPY( "temp",	0x0a800, 0x0000, 0x0800 )	/* 2800-2fff of 01.a1 - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x12800, 0x0800, 0x0800 )	/* 2800-2fff of 02.a2 - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x03000, 0x1000, 0x0800 )	/* 3000-37ff of 03.a3 - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx6", 0 )
+	ROM_COPY( "temp",	0x0a000, 0x0000, 0x0800 )	/* 2000-27ff of 01.a1 - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x12000, 0x0800, 0x0800 )	/* 2000-27ff of 02.a2 - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x02800, 0x1000, 0x0800 )	/* 2800-2fff of 03.a3 - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx7", 0 )
+	ROM_COPY( "temp",	0x0e800, 0x0000, 0x0800 )	/* 6800-6fff of 01.a1 - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x16800, 0x0800, 0x0800 )	/* 6800-6fff of 02.a2 - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x07000, 0x1000, 0x0800 )	/* 7000-77ff of 03.a3 - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx8", 0 )
+	ROM_COPY( "temp",	0x0b800, 0x0000, 0x0800 )	/* 3800-3fff of 01.a1 - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x13800, 0x0800, 0x0800 )	/* 3800-3fff of 02.a2 - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x04000, 0x1000, 0x0800 )	/* 3800-3fff of 03.a3 - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx9", 0 )
+	ROM_COPY( "temp",	0x0c800, 0x0000, 0x0800 )	/* 4800-4fff of 01.a1 - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x14800, 0x0800, 0x0800 )	/* 4800-4fff of 02.a2 - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x05000, 0x1000, 0x0800 )	/* 4000-47ff of 03.a3 - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx10", 0 )
+	ROM_COPY( "temp",	0x09000, 0x0000, 0x0800 )	/* 1000-17ff of 01.a1 - extended cards gfx, bitplane 1 */
+	ROM_COPY( "temp",	0x11000, 0x0800, 0x0800 )	/* 1000-17ff of 02.a2 - extended cards gfx, bitplane 2 */
+	ROM_COPY( "temp",	0x01800, 0x1000, 0x0800 )	/* 1800-1fff of 03.a3 - extended cards gfx, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx11", 0 )
+	ROM_COPY( "temp",	0x0d000, 0x0000, 0x0800 )	/* 5000-57ff of 01.a1 - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x15000, 0x0800, 0x0800 )	/* 5000-57ff of 02.a2 - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x05800, 0x1000, 0x0800 )	/* 5800-5fff of 03.a3 - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx12", 0 )
+	ROM_COPY( "temp",	0x0d800, 0x0000, 0x0800 )	/* 5800-5fff of 01.a1 - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x15800, 0x0800, 0x0800 )	/* 5800-5fff of 02.a2 - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x06000, 0x1000, 0x0800 )	/* 6000-67ff of 03.a3 - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx13", 0 )
+	ROM_COPY( "temp",	0x0e000, 0x0000, 0x0800 )	/* 6000-67ff of 01.a1 - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x16000, 0x0800, 0x0800 )	/* 6000-67ff of 02.a2 - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x06800, 0x1000, 0x0800 )	/* 6800-6fff of 03.a3 - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx14", 0 )
+	ROM_COPY( "temp",	0x0b000, 0x0000, 0x0800 )	/* 3000-37ff of 01.a1 - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x13000, 0x0800, 0x0800 )	/* 3000-37ff of 02.a2 - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x03800, 0x1000, 0x0800 )	/* 3800-3fff of 03.a3 - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx15", 0 )
+	ROM_COPY( "temp",	0x0f000, 0x0000, 0x0800 )	/* 7000-77ff of 01.a1 - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x17000, 0x0800, 0x0800 )	/* 7000-77ff of 02.a2 - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x07800, 0x1000, 0x0800 )	/* 7800-7fff of 03.a3 - empty, bitplane 3 */
+
+	ROM_REGION( 0x0100, "proms", 0 )
+	ROM_LOAD( "wldwitch_tbp.bin",	0x0000, 0x0100, BAD_DUMP CRC(ed15125b) SHA1(56fc00f2ce4ebe9cee73a45b142c33c00432b66b) )
+
+	ROM_REGION( 0x0400, "proms2", 0 )
+	ROM_LOAD( "82s137.box",	0x0000, 0x0400, CRC(4ae3ecf5) SHA1(e1e540ae13e7ce5ac6391f325160ec997ea6cc2f) )
+ROM_END
+
+
+ROM_START( wldwitchf )
+	ROM_REGION( 0x10000, "maincpu", 0 )	/* Ver 162A alt, 1994-11-03 */
+	ROM_LOAD( "ww162a-alt.bin",	0x8000, 0x8000, CRC(0a8175b9) SHA1(23b300397491140a03de43140d0a05f154e90eab) )
+
+	ROM_REGION( 0x18000, "temp", 0 )
+	ROM_LOAD( "03.a3",	0x00000, 0x8000, CRC(ae474414) SHA1(6dee760cee18e125791c17b562ca8aabe1f4593e) )
+	ROM_LOAD( "02.a2",	0x10000, 0x8000, CRC(f6450111) SHA1(8b44c90c62d5026ccfba88b31e1113e01c6bcf85) )
+	ROM_LOAD( "01.a1",	0x08000, 0x8000, CRC(6d644987) SHA1(26243abe051f3266e2d1743ec599d4e8bbb692e4) )
+
+	ROM_REGION( 0x1800, "gfx0", 0 )
+	ROM_FILL(			0x0000, 0x1000, 0 )			/* filling bitplanes */
+	ROM_COPY( "temp",	0x0000, 0x1000, 0x0800 )	/* 0000-07ff of 03.a3 - char rom, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx1", 0 )
+	ROM_COPY( "temp",	0x08800, 0x0000, 0x0800 )	/* 0800-0fff of 01.a1 - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x10800, 0x0800, 0x0800 )	/* 0800-0fff of 02.a2 - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x01000, 0x1000, 0x0800 )	/* 1000-17ff of 03.a3 - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx2", 0 )
+	ROM_COPY( "temp",	0x08000, 0x0000, 0x0800 )	/* 0000-07ff of 01.a1 - regular cards gfx, bitplane 1 */
+	ROM_COPY( "temp",	0x10000, 0x0800, 0x0800 )	/* 0000-07ff of 02.a2 - regular cards gfx, bitplane 2 */
+	ROM_COPY( "temp",	0x00800, 0x1000, 0x0800 )	/* 0800-0fff of 03.a3 - regular cards gfx, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx3", 0 )
+	ROM_COPY( "temp",	0x0c000, 0x0000, 0x0800 )	/* 4000-47ff of 01.a1 - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x14000, 0x0800, 0x0800 )	/* 4000-47ff of 02.a2 - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x04800, 0x1000, 0x0800 )	/* 4800-4fff of 03.a3 - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx4", 0 )
+	ROM_COPY( "temp",	0x09800, 0x0000, 0x0800 )	/* 1800-1fff of 01.a1 - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x11800, 0x0800, 0x0800 )	/* 1800-1fff of 02.a2 - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x02000, 0x1000, 0x0800 )	/* 1800-1fff of 03.a3 - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx5", 0 )
+	ROM_COPY( "temp",	0x0a800, 0x0000, 0x0800 )	/* 2800-2fff of 01.a1 - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x12800, 0x0800, 0x0800 )	/* 2800-2fff of 02.a2 - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x03000, 0x1000, 0x0800 )	/* 3000-37ff of 03.a3 - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx6", 0 )
+	ROM_COPY( "temp",	0x0a000, 0x0000, 0x0800 )	/* 2000-27ff of 01.a1 - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x12000, 0x0800, 0x0800 )	/* 2000-27ff of 02.a2 - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x02800, 0x1000, 0x0800 )	/* 2800-2fff of 03.a3 - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx7", 0 )
+	ROM_COPY( "temp",	0x0e800, 0x0000, 0x0800 )	/* 6800-6fff of 01.a1 - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x16800, 0x0800, 0x0800 )	/* 6800-6fff of 02.a2 - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x07000, 0x1000, 0x0800 )	/* 7000-77ff of 03.a3 - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx8", 0 )
+	ROM_COPY( "temp",	0x0b800, 0x0000, 0x0800 )	/* 3800-3fff of 01.a1 - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x13800, 0x0800, 0x0800 )	/* 3800-3fff of 02.a2 - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x04000, 0x1000, 0x0800 )	/* 3800-3fff of 03.a3 - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx9", 0 )
+	ROM_COPY( "temp",	0x0c800, 0x0000, 0x0800 )	/* 4800-4fff of 01.a1 - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x14800, 0x0800, 0x0800 )	/* 4800-4fff of 02.a2 - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x05000, 0x1000, 0x0800 )	/* 4000-47ff of 03.a3 - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx10", 0 )
+	ROM_COPY( "temp",	0x09000, 0x0000, 0x0800 )	/* 1000-17ff of 01.a1 - extended cards gfx, bitplane 1 */
+	ROM_COPY( "temp",	0x11000, 0x0800, 0x0800 )	/* 1000-17ff of 02.a2 - extended cards gfx, bitplane 2 */
+	ROM_COPY( "temp",	0x01800, 0x1000, 0x0800 )	/* 1800-1fff of 03.a3 - extended cards gfx, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx11", 0 )
+	ROM_COPY( "temp",	0x0d000, 0x0000, 0x0800 )	/* 5000-57ff of 01.a1 - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x15000, 0x0800, 0x0800 )	/* 5000-57ff of 02.a2 - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x05800, 0x1000, 0x0800 )	/* 5800-5fff of 03.a3 - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx12", 0 )
+	ROM_COPY( "temp",	0x0d800, 0x0000, 0x0800 )	/* 5800-5fff of 01.a1 - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x15800, 0x0800, 0x0800 )	/* 5800-5fff of 02.a2 - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x06000, 0x1000, 0x0800 )	/* 6000-67ff of 03.a3 - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx13", 0 )
+	ROM_COPY( "temp",	0x0e000, 0x0000, 0x0800 )	/* 6000-67ff of 01.a1 - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x16000, 0x0800, 0x0800 )	/* 6000-67ff of 02.a2 - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x06800, 0x1000, 0x0800 )	/* 6800-6fff of 03.a3 - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx14", 0 )
+	ROM_COPY( "temp",	0x0b000, 0x0000, 0x0800 )	/* 3000-37ff of 01.a1 - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x13000, 0x0800, 0x0800 )	/* 3000-37ff of 02.a2 - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x03800, 0x1000, 0x0800 )	/* 3800-3fff of 03.a3 - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx15", 0 )
+	ROM_COPY( "temp",	0x0f000, 0x0000, 0x0800 )	/* 7000-77ff of 01.a1 - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x17000, 0x0800, 0x0800 )	/* 7000-77ff of 02.a2 - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x07800, 0x1000, 0x0800 )	/* 7800-7fff of 03.a3 - empty, bitplane 3 */
+
+	ROM_REGION( 0x0100, "proms", 0 )
+	ROM_LOAD( "wldwitch_tbp.bin",	0x0000, 0x0100, BAD_DUMP CRC(ed15125b) SHA1(56fc00f2ce4ebe9cee73a45b142c33c00432b66b) )
+
+	ROM_REGION( 0x0400, "proms2", 0 )
+	ROM_LOAD( "82s137.box",	0x0000, 0x0400, CRC(4ae3ecf5) SHA1(e1e540ae13e7ce5ac6391f325160ec997ea6cc2f) )
+ROM_END
+
+
+ROM_START( wldwitchg )
+	ROM_REGION( 0x10000, "maincpu", 0 )	/* Ver 162B alt, 1994-11-03 */
+	ROM_LOAD( "ww162b-alt.bin",	0x8000, 0x8000, CRC(f5f924c8) SHA1(a49ae2c8c3f3ec9fd1727564220aa1e8da633774) )
+
+	ROM_REGION( 0x18000, "temp", 0 )
+	ROM_LOAD( "03.a3",	0x00000, 0x8000, CRC(ae474414) SHA1(6dee760cee18e125791c17b562ca8aabe1f4593e) )
+	ROM_LOAD( "02.a2",	0x10000, 0x8000, CRC(f6450111) SHA1(8b44c90c62d5026ccfba88b31e1113e01c6bcf85) )
+	ROM_LOAD( "01.a1",	0x08000, 0x8000, CRC(6d644987) SHA1(26243abe051f3266e2d1743ec599d4e8bbb692e4) )
+
+	ROM_REGION( 0x1800, "gfx0", 0 )
+	ROM_FILL(			0x0000, 0x1000, 0 )			/* filling bitplanes */
+	ROM_COPY( "temp",	0x0000, 0x1000, 0x0800 )	/* 0000-07ff of 03.a3 - char rom, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx1", 0 )
+	ROM_COPY( "temp",	0x08800, 0x0000, 0x0800 )	/* 0800-0fff of 01.a1 - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x10800, 0x0800, 0x0800 )	/* 0800-0fff of 02.a2 - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x01000, 0x1000, 0x0800 )	/* 1000-17ff of 03.a3 - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx2", 0 )
+	ROM_COPY( "temp",	0x08000, 0x0000, 0x0800 )	/* 0000-07ff of 01.a1 - regular cards gfx, bitplane 1 */
+	ROM_COPY( "temp",	0x10000, 0x0800, 0x0800 )	/* 0000-07ff of 02.a2 - regular cards gfx, bitplane 2 */
+	ROM_COPY( "temp",	0x00800, 0x1000, 0x0800 )	/* 0800-0fff of 03.a3 - regular cards gfx, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx3", 0 )
+	ROM_COPY( "temp",	0x0c000, 0x0000, 0x0800 )	/* 4000-47ff of 01.a1 - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x14000, 0x0800, 0x0800 )	/* 4000-47ff of 02.a2 - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x04800, 0x1000, 0x0800 )	/* 4800-4fff of 03.a3 - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx4", 0 )
+	ROM_COPY( "temp",	0x09800, 0x0000, 0x0800 )	/* 1800-1fff of 01.a1 - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x11800, 0x0800, 0x0800 )	/* 1800-1fff of 02.a2 - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x02000, 0x1000, 0x0800 )	/* 1800-1fff of 03.a3 - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx5", 0 )
+	ROM_COPY( "temp",	0x0a800, 0x0000, 0x0800 )	/* 2800-2fff of 01.a1 - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x12800, 0x0800, 0x0800 )	/* 2800-2fff of 02.a2 - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x03000, 0x1000, 0x0800 )	/* 3000-37ff of 03.a3 - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx6", 0 )
+	ROM_COPY( "temp",	0x0a000, 0x0000, 0x0800 )	/* 2000-27ff of 01.a1 - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x12000, 0x0800, 0x0800 )	/* 2000-27ff of 02.a2 - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x02800, 0x1000, 0x0800 )	/* 2800-2fff of 03.a3 - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx7", 0 )
+	ROM_COPY( "temp",	0x0e800, 0x0000, 0x0800 )	/* 6800-6fff of 01.a1 - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x16800, 0x0800, 0x0800 )	/* 6800-6fff of 02.a2 - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x07000, 0x1000, 0x0800 )	/* 7000-77ff of 03.a3 - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx8", 0 )
+	ROM_COPY( "temp",	0x0b800, 0x0000, 0x0800 )	/* 3800-3fff of 01.a1 - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x13800, 0x0800, 0x0800 )	/* 3800-3fff of 02.a2 - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x04000, 0x1000, 0x0800 )	/* 3800-3fff of 03.a3 - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx9", 0 )
+	ROM_COPY( "temp",	0x0c800, 0x0000, 0x0800 )	/* 4800-4fff of 01.a1 - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x14800, 0x0800, 0x0800 )	/* 4800-4fff of 02.a2 - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x05000, 0x1000, 0x0800 )	/* 4000-47ff of 03.a3 - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx10", 0 )
+	ROM_COPY( "temp",	0x09000, 0x0000, 0x0800 )	/* 1000-17ff of 01.a1 - extended cards gfx, bitplane 1 */
+	ROM_COPY( "temp",	0x11000, 0x0800, 0x0800 )	/* 1000-17ff of 02.a2 - extended cards gfx, bitplane 2 */
+	ROM_COPY( "temp",	0x01800, 0x1000, 0x0800 )	/* 1800-1fff of 03.a3 - extended cards gfx, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx11", 0 )
+	ROM_COPY( "temp",	0x0d000, 0x0000, 0x0800 )	/* 5000-57ff of 01.a1 - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x15000, 0x0800, 0x0800 )	/* 5000-57ff of 02.a2 - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x05800, 0x1000, 0x0800 )	/* 5800-5fff of 03.a3 - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx12", 0 )
+	ROM_COPY( "temp",	0x0d800, 0x0000, 0x0800 )	/* 5800-5fff of 01.a1 - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x15800, 0x0800, 0x0800 )	/* 5800-5fff of 02.a2 - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x06000, 0x1000, 0x0800 )	/* 6000-67ff of 03.a3 - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx13", 0 )
+	ROM_COPY( "temp",	0x0e000, 0x0000, 0x0800 )	/* 6000-67ff of 01.a1 - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x16000, 0x0800, 0x0800 )	/* 6000-67ff of 02.a2 - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x06800, 0x1000, 0x0800 )	/* 6800-6fff of 03.a3 - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx14", 0 )
+	ROM_COPY( "temp",	0x0b000, 0x0000, 0x0800 )	/* 3000-37ff of 01.a1 - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x13000, 0x0800, 0x0800 )	/* 3000-37ff of 02.a2 - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x03800, 0x1000, 0x0800 )	/* 3800-3fff of 03.a3 - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx15", 0 )
+	ROM_COPY( "temp",	0x0f000, 0x0000, 0x0800 )	/* 7000-77ff of 01.a1 - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x17000, 0x0800, 0x0800 )	/* 7000-77ff of 02.a2 - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x07800, 0x1000, 0x0800 )	/* 7800-7fff of 03.a3 - empty, bitplane 3 */
+
+	ROM_REGION( 0x0100, "proms", 0 )
+	ROM_LOAD( "wldwitch_tbp.bin",	0x0000, 0x0100, BAD_DUMP CRC(ed15125b) SHA1(56fc00f2ce4ebe9cee73a45b142c33c00432b66b) )
+
+	ROM_REGION( 0x0400, "proms2", 0 )
+	ROM_LOAD( "82s137.box",	0x0000, 0x0400, CRC(4ae3ecf5) SHA1(e1e540ae13e7ce5ac6391f325160ec997ea6cc2f) )
+ROM_END
+
+
+ROM_START( wldwitchh )
+	ROM_REGION( 0x10000, "maincpu", 0 )	/* Ver 165A, 1995-11-16 */
+	ROM_LOAD( "ww165a.bin",	0x8000, 0x8000, CRC(9119add6) SHA1(fcf13831d968498d09daec993924a08ffefb80c8) )
+
+	ROM_REGION( 0x18000, "temp", 0 )
+	ROM_LOAD( "03.a3",	0x00000, 0x8000, CRC(ae474414) SHA1(6dee760cee18e125791c17b562ca8aabe1f4593e) )
+	ROM_LOAD( "02.a2",	0x10000, 0x8000, CRC(f6450111) SHA1(8b44c90c62d5026ccfba88b31e1113e01c6bcf85) )
+	ROM_LOAD( "01.a1",	0x08000, 0x8000, CRC(6d644987) SHA1(26243abe051f3266e2d1743ec599d4e8bbb692e4) )
+
+	ROM_REGION( 0x1800, "gfx0", 0 )
+	ROM_FILL(			0x0000, 0x1000, 0 )			/* filling bitplanes */
+	ROM_COPY( "temp",	0x0000, 0x1000, 0x0800 )	/* 0000-07ff of 03.a3 - char rom, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx1", 0 )
+	ROM_COPY( "temp",	0x08800, 0x0000, 0x0800 )	/* 0800-0fff of 01.a1 - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x10800, 0x0800, 0x0800 )	/* 0800-0fff of 02.a2 - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x01000, 0x1000, 0x0800 )	/* 1000-17ff of 03.a3 - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx2", 0 )
+	ROM_COPY( "temp",	0x08000, 0x0000, 0x0800 )	/* 0000-07ff of 01.a1 - regular cards gfx, bitplane 1 */
+	ROM_COPY( "temp",	0x10000, 0x0800, 0x0800 )	/* 0000-07ff of 02.a2 - regular cards gfx, bitplane 2 */
+	ROM_COPY( "temp",	0x00800, 0x1000, 0x0800 )	/* 0800-0fff of 03.a3 - regular cards gfx, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx3", 0 )
+	ROM_COPY( "temp",	0x0c000, 0x0000, 0x0800 )	/* 4000-47ff of 01.a1 - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x14000, 0x0800, 0x0800 )	/* 4000-47ff of 02.a2 - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x04800, 0x1000, 0x0800 )	/* 4800-4fff of 03.a3 - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx4", 0 )
+	ROM_COPY( "temp",	0x09800, 0x0000, 0x0800 )	/* 1800-1fff of 01.a1 - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x11800, 0x0800, 0x0800 )	/* 1800-1fff of 02.a2 - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x02000, 0x1000, 0x0800 )	/* 1800-1fff of 03.a3 - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx5", 0 )
+	ROM_COPY( "temp",	0x0a800, 0x0000, 0x0800 )	/* 2800-2fff of 01.a1 - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x12800, 0x0800, 0x0800 )	/* 2800-2fff of 02.a2 - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x03000, 0x1000, 0x0800 )	/* 3000-37ff of 03.a3 - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx6", 0 )
+	ROM_COPY( "temp",	0x0a000, 0x0000, 0x0800 )	/* 2000-27ff of 01.a1 - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x12000, 0x0800, 0x0800 )	/* 2000-27ff of 02.a2 - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x02800, 0x1000, 0x0800 )	/* 2800-2fff of 03.a3 - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx7", 0 )
+	ROM_COPY( "temp",	0x0e800, 0x0000, 0x0800 )	/* 6800-6fff of 01.a1 - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x16800, 0x0800, 0x0800 )	/* 6800-6fff of 02.a2 - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x07000, 0x1000, 0x0800 )	/* 7000-77ff of 03.a3 - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx8", 0 )
+	ROM_COPY( "temp",	0x0b800, 0x0000, 0x0800 )	/* 3800-3fff of 01.a1 - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x13800, 0x0800, 0x0800 )	/* 3800-3fff of 02.a2 - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x04000, 0x1000, 0x0800 )	/* 3800-3fff of 03.a3 - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx9", 0 )
+	ROM_COPY( "temp",	0x0c800, 0x0000, 0x0800 )	/* 4800-4fff of 01.a1 - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x14800, 0x0800, 0x0800 )	/* 4800-4fff of 02.a2 - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x05000, 0x1000, 0x0800 )	/* 4000-47ff of 03.a3 - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx10", 0 )
+	ROM_COPY( "temp",	0x09000, 0x0000, 0x0800 )	/* 1000-17ff of 01.a1 - extended cards gfx, bitplane 1 */
+	ROM_COPY( "temp",	0x11000, 0x0800, 0x0800 )	/* 1000-17ff of 02.a2 - extended cards gfx, bitplane 2 */
+	ROM_COPY( "temp",	0x01800, 0x1000, 0x0800 )	/* 1800-1fff of 03.a3 - extended cards gfx, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx11", 0 )
+	ROM_COPY( "temp",	0x0d000, 0x0000, 0x0800 )	/* 5000-57ff of 01.a1 - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x15000, 0x0800, 0x0800 )	/* 5000-57ff of 02.a2 - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x05800, 0x1000, 0x0800 )	/* 5800-5fff of 03.a3 - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx12", 0 )
+	ROM_COPY( "temp",	0x0d800, 0x0000, 0x0800 )	/* 5800-5fff of 01.a1 - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x15800, 0x0800, 0x0800 )	/* 5800-5fff of 02.a2 - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x06000, 0x1000, 0x0800 )	/* 6000-67ff of 03.a3 - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx13", 0 )
+	ROM_COPY( "temp",	0x0e000, 0x0000, 0x0800 )	/* 6000-67ff of 01.a1 - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x16000, 0x0800, 0x0800 )	/* 6000-67ff of 02.a2 - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x06800, 0x1000, 0x0800 )	/* 6800-6fff of 03.a3 - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx14", 0 )
+	ROM_COPY( "temp",	0x0b000, 0x0000, 0x0800 )	/* 3000-37ff of 01.a1 - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x13000, 0x0800, 0x0800 )	/* 3000-37ff of 02.a2 - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x03800, 0x1000, 0x0800 )	/* 3800-3fff of 03.a3 - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx15", 0 )
+	ROM_COPY( "temp",	0x0f000, 0x0000, 0x0800 )	/* 7000-77ff of 01.a1 - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x17000, 0x0800, 0x0800 )	/* 7000-77ff of 02.a2 - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x07800, 0x1000, 0x0800 )	/* 7800-7fff of 03.a3 - empty, bitplane 3 */
+
+	ROM_REGION( 0x0100, "proms", 0 )
+	ROM_LOAD( "wldwitch_tbp.bin",	0x0000, 0x0100, BAD_DUMP CRC(ed15125b) SHA1(56fc00f2ce4ebe9cee73a45b142c33c00432b66b) )
+
+	ROM_REGION( 0x0400, "proms2", 0 )
+	ROM_LOAD( "82s137.box",	0x0000, 0x0400, CRC(4ae3ecf5) SHA1(e1e540ae13e7ce5ac6391f325160ec997ea6cc2f) )
+ROM_END
+
+
+ROM_START( wldwitchi )
+	ROM_REGION( 0x10000, "maincpu", 0 )	/* Ver 165A-S, 1996-03-26 */
+	ROM_LOAD( "ww165a-s.bin",	0x8000, 0x8000, CRC(c5827a07) SHA1(474d6a715c230d3a1e19f9d4850eb52443cd975f) )
+
+	ROM_REGION( 0x18000, "temp", 0 )
+	ROM_LOAD( "03.a3",	0x00000, 0x8000, CRC(ae474414) SHA1(6dee760cee18e125791c17b562ca8aabe1f4593e) )
+	ROM_LOAD( "02.a2",	0x10000, 0x8000, CRC(f6450111) SHA1(8b44c90c62d5026ccfba88b31e1113e01c6bcf85) )
+	ROM_LOAD( "01.a1",	0x08000, 0x8000, CRC(6d644987) SHA1(26243abe051f3266e2d1743ec599d4e8bbb692e4) )
+
+	ROM_REGION( 0x1800, "gfx0", 0 )
+	ROM_FILL(			0x0000, 0x1000, 0 )			/* filling bitplanes */
+	ROM_COPY( "temp",	0x0000, 0x1000, 0x0800 )	/* 0000-07ff of 03.a3 - char rom, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx1", 0 )
+	ROM_COPY( "temp",	0x08800, 0x0000, 0x0800 )	/* 0800-0fff of 01.a1 - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x10800, 0x0800, 0x0800 )	/* 0800-0fff of 02.a2 - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x01000, 0x1000, 0x0800 )	/* 1000-17ff of 03.a3 - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx2", 0 )
+	ROM_COPY( "temp",	0x08000, 0x0000, 0x0800 )	/* 0000-07ff of 01.a1 - regular cards gfx, bitplane 1 */
+	ROM_COPY( "temp",	0x10000, 0x0800, 0x0800 )	/* 0000-07ff of 02.a2 - regular cards gfx, bitplane 2 */
+	ROM_COPY( "temp",	0x00800, 0x1000, 0x0800 )	/* 0800-0fff of 03.a3 - regular cards gfx, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx3", 0 )
+	ROM_COPY( "temp",	0x0c000, 0x0000, 0x0800 )	/* 4000-47ff of 01.a1 - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x14000, 0x0800, 0x0800 )	/* 4000-47ff of 02.a2 - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x04800, 0x1000, 0x0800 )	/* 4800-4fff of 03.a3 - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx4", 0 )
+	ROM_COPY( "temp",	0x09800, 0x0000, 0x0800 )	/* 1800-1fff of 01.a1 - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x11800, 0x0800, 0x0800 )	/* 1800-1fff of 02.a2 - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x02000, 0x1000, 0x0800 )	/* 1800-1fff of 03.a3 - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx5", 0 )
+	ROM_COPY( "temp",	0x0a800, 0x0000, 0x0800 )	/* 2800-2fff of 01.a1 - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x12800, 0x0800, 0x0800 )	/* 2800-2fff of 02.a2 - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x03000, 0x1000, 0x0800 )	/* 3000-37ff of 03.a3 - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx6", 0 )
+	ROM_COPY( "temp",	0x0a000, 0x0000, 0x0800 )	/* 2000-27ff of 01.a1 - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x12000, 0x0800, 0x0800 )	/* 2000-27ff of 02.a2 - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x02800, 0x1000, 0x0800 )	/* 2800-2fff of 03.a3 - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx7", 0 )
+	ROM_COPY( "temp",	0x0e800, 0x0000, 0x0800 )	/* 6800-6fff of 01.a1 - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x16800, 0x0800, 0x0800 )	/* 6800-6fff of 02.a2 - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x07000, 0x1000, 0x0800 )	/* 7000-77ff of 03.a3 - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx8", 0 )
+	ROM_COPY( "temp",	0x0b800, 0x0000, 0x0800 )	/* 3800-3fff of 01.a1 - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x13800, 0x0800, 0x0800 )	/* 3800-3fff of 02.a2 - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x04000, 0x1000, 0x0800 )	/* 3800-3fff of 03.a3 - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx9", 0 )
+	ROM_COPY( "temp",	0x0c800, 0x0000, 0x0800 )	/* 4800-4fff of 01.a1 - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x14800, 0x0800, 0x0800 )	/* 4800-4fff of 02.a2 - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x05000, 0x1000, 0x0800 )	/* 4000-47ff of 03.a3 - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx10", 0 )
+	ROM_COPY( "temp",	0x09000, 0x0000, 0x0800 )	/* 1000-17ff of 01.a1 - extended cards gfx, bitplane 1 */
+	ROM_COPY( "temp",	0x11000, 0x0800, 0x0800 )	/* 1000-17ff of 02.a2 - extended cards gfx, bitplane 2 */
+	ROM_COPY( "temp",	0x01800, 0x1000, 0x0800 )	/* 1800-1fff of 03.a3 - extended cards gfx, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx11", 0 )
+	ROM_COPY( "temp",	0x0d000, 0x0000, 0x0800 )	/* 5000-57ff of 01.a1 - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x15000, 0x0800, 0x0800 )	/* 5000-57ff of 02.a2 - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x05800, 0x1000, 0x0800 )	/* 5800-5fff of 03.a3 - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx12", 0 )
+	ROM_COPY( "temp",	0x0d800, 0x0000, 0x0800 )	/* 5800-5fff of 01.a1 - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x15800, 0x0800, 0x0800 )	/* 5800-5fff of 02.a2 - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x06000, 0x1000, 0x0800 )	/* 6000-67ff of 03.a3 - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx13", 0 )
+	ROM_COPY( "temp",	0x0e000, 0x0000, 0x0800 )	/* 6000-67ff of 01.a1 - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x16000, 0x0800, 0x0800 )	/* 6000-67ff of 02.a2 - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x06800, 0x1000, 0x0800 )	/* 6800-6fff of 03.a3 - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx14", 0 )
+	ROM_COPY( "temp",	0x0b000, 0x0000, 0x0800 )	/* 3000-37ff of 01.a1 - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x13000, 0x0800, 0x0800 )	/* 3000-37ff of 02.a2 - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x03800, 0x1000, 0x0800 )	/* 3800-3fff of 03.a3 - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx15", 0 )
+	ROM_COPY( "temp",	0x0f000, 0x0000, 0x0800 )	/* 7000-77ff of 01.a1 - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x17000, 0x0800, 0x0800 )	/* 7000-77ff of 02.a2 - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x07800, 0x1000, 0x0800 )	/* 7800-7fff of 03.a3 - empty, bitplane 3 */
+
+	ROM_REGION( 0x0100, "proms", 0 )
+	ROM_LOAD( "wldwitch_tbp.bin",	0x0000, 0x0100, BAD_DUMP CRC(ed15125b) SHA1(56fc00f2ce4ebe9cee73a45b142c33c00432b66b) )
+
+	ROM_REGION( 0x0400, "proms2", 0 )
+	ROM_LOAD( "82s137.box",	0x0000, 0x0400, CRC(4ae3ecf5) SHA1(e1e540ae13e7ce5ac6391f325160ec997ea6cc2f) )
+ROM_END
+
+
+ROM_START( wldwitchj )
+	ROM_REGION( 0x10000, "maincpu", 0 )	/* Ver 165A-S alt, 1996-05-26 */
+	ROM_LOAD( "wn165a-s-alt.bin",	0x8000, 0x8000, CRC(8b01bb4b) SHA1(bd42ce4ce46561ce2e094130710a55a122c5cc3e) )
+
+	ROM_REGION( 0x18000, "temp", 0 )
+	ROM_LOAD( "03.a3",	0x00000, 0x8000, CRC(ae474414) SHA1(6dee760cee18e125791c17b562ca8aabe1f4593e) )
+	ROM_LOAD( "02.a2",	0x10000, 0x8000, CRC(f6450111) SHA1(8b44c90c62d5026ccfba88b31e1113e01c6bcf85) )
+	ROM_LOAD( "01.a1",	0x08000, 0x8000, CRC(6d644987) SHA1(26243abe051f3266e2d1743ec599d4e8bbb692e4) )
+
+	ROM_REGION( 0x1800, "gfx0", 0 )
+	ROM_FILL(			0x0000, 0x1000, 0 )			/* filling bitplanes */
+	ROM_COPY( "temp",	0x0000, 0x1000, 0x0800 )	/* 0000-07ff of 03.a3 - char rom, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx1", 0 )
+	ROM_COPY( "temp",	0x08800, 0x0000, 0x0800 )	/* 0800-0fff of 01.a1 - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x10800, 0x0800, 0x0800 )	/* 0800-0fff of 02.a2 - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x01000, 0x1000, 0x0800 )	/* 1000-17ff of 03.a3 - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx2", 0 )
+	ROM_COPY( "temp",	0x08000, 0x0000, 0x0800 )	/* 0000-07ff of 01.a1 - regular cards gfx, bitplane 1 */
+	ROM_COPY( "temp",	0x10000, 0x0800, 0x0800 )	/* 0000-07ff of 02.a2 - regular cards gfx, bitplane 2 */
+	ROM_COPY( "temp",	0x00800, 0x1000, 0x0800 )	/* 0800-0fff of 03.a3 - regular cards gfx, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx3", 0 )
+	ROM_COPY( "temp",	0x0c000, 0x0000, 0x0800 )	/* 4000-47ff of 01.a1 - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x14000, 0x0800, 0x0800 )	/* 4000-47ff of 02.a2 - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x04800, 0x1000, 0x0800 )	/* 4800-4fff of 03.a3 - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx4", 0 )
+	ROM_COPY( "temp",	0x09800, 0x0000, 0x0800 )	/* 1800-1fff of 01.a1 - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x11800, 0x0800, 0x0800 )	/* 1800-1fff of 02.a2 - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x02000, 0x1000, 0x0800 )	/* 1800-1fff of 03.a3 - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx5", 0 )
+	ROM_COPY( "temp",	0x0a800, 0x0000, 0x0800 )	/* 2800-2fff of 01.a1 - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x12800, 0x0800, 0x0800 )	/* 2800-2fff of 02.a2 - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x03000, 0x1000, 0x0800 )	/* 3000-37ff of 03.a3 - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx6", 0 )
+	ROM_COPY( "temp",	0x0a000, 0x0000, 0x0800 )	/* 2000-27ff of 01.a1 - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x12000, 0x0800, 0x0800 )	/* 2000-27ff of 02.a2 - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x02800, 0x1000, 0x0800 )	/* 2800-2fff of 03.a3 - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx7", 0 )
+	ROM_COPY( "temp",	0x0e800, 0x0000, 0x0800 )	/* 6800-6fff of 01.a1 - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x16800, 0x0800, 0x0800 )	/* 6800-6fff of 02.a2 - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x07000, 0x1000, 0x0800 )	/* 7000-77ff of 03.a3 - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx8", 0 )
+	ROM_COPY( "temp",	0x0b800, 0x0000, 0x0800 )	/* 3800-3fff of 01.a1 - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x13800, 0x0800, 0x0800 )	/* 3800-3fff of 02.a2 - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x04000, 0x1000, 0x0800 )	/* 3800-3fff of 03.a3 - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx9", 0 )
+	ROM_COPY( "temp",	0x0c800, 0x0000, 0x0800 )	/* 4800-4fff of 01.a1 - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x14800, 0x0800, 0x0800 )	/* 4800-4fff of 02.a2 - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x05000, 0x1000, 0x0800 )	/* 4000-47ff of 03.a3 - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx10", 0 )
+	ROM_COPY( "temp",	0x09000, 0x0000, 0x0800 )	/* 1000-17ff of 01.a1 - extended cards gfx, bitplane 1 */
+	ROM_COPY( "temp",	0x11000, 0x0800, 0x0800 )	/* 1000-17ff of 02.a2 - extended cards gfx, bitplane 2 */
+	ROM_COPY( "temp",	0x01800, 0x1000, 0x0800 )	/* 1800-1fff of 03.a3 - extended cards gfx, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx11", 0 )
+	ROM_COPY( "temp",	0x0d000, 0x0000, 0x0800 )	/* 5000-57ff of 01.a1 - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x15000, 0x0800, 0x0800 )	/* 5000-57ff of 02.a2 - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x05800, 0x1000, 0x0800 )	/* 5800-5fff of 03.a3 - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx12", 0 )
+	ROM_COPY( "temp",	0x0d800, 0x0000, 0x0800 )	/* 5800-5fff of 01.a1 - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x15800, 0x0800, 0x0800 )	/* 5800-5fff of 02.a2 - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x06000, 0x1000, 0x0800 )	/* 6000-67ff of 03.a3 - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx13", 0 )
+	ROM_COPY( "temp",	0x0e000, 0x0000, 0x0800 )	/* 6000-67ff of 01.a1 - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x16000, 0x0800, 0x0800 )	/* 6000-67ff of 02.a2 - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x06800, 0x1000, 0x0800 )	/* 6800-6fff of 03.a3 - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx14", 0 )
+	ROM_COPY( "temp",	0x0b000, 0x0000, 0x0800 )	/* 3000-37ff of 01.a1 - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x13000, 0x0800, 0x0800 )	/* 3000-37ff of 02.a2 - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x03800, 0x1000, 0x0800 )	/* 3800-3fff of 03.a3 - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx15", 0 )
+	ROM_COPY( "temp",	0x0f000, 0x0000, 0x0800 )	/* 7000-77ff of 01.a1 - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x17000, 0x0800, 0x0800 )	/* 7000-77ff of 02.a2 - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x07800, 0x1000, 0x0800 )	/* 7800-7fff of 03.a3 - empty, bitplane 3 */
+
+	ROM_REGION( 0x0100, "proms", 0 )
+	ROM_LOAD( "wldwitch_tbp.bin",	0x0000, 0x0100, BAD_DUMP CRC(ed15125b) SHA1(56fc00f2ce4ebe9cee73a45b142c33c00432b66b) )
+
+	ROM_REGION( 0x0400, "proms2", 0 )
+	ROM_LOAD( "82s137.box",	0x0000, 0x0400, CRC(4ae3ecf5) SHA1(e1e540ae13e7ce5ac6391f325160ec997ea6cc2f) )
+ROM_END
+
+
+ROM_START( wldwitchk )
+	ROM_REGION( 0x10000, "maincpu", 0 )	/* Ver 165A-N, 1996-05-29 */
+	ROM_LOAD( "wn165a-n.bin",	0x8000, 0x8000, CRC(df9a6c9a) SHA1(07a09ad77b1e5b88b065e4c1ddaa201e7f904888) )
+
+	ROM_REGION( 0x18000, "temp", 0 )
+	ROM_LOAD( "03.a3",	0x00000, 0x8000, CRC(ae474414) SHA1(6dee760cee18e125791c17b562ca8aabe1f4593e) )
+	ROM_LOAD( "02.a2",	0x10000, 0x8000, CRC(f6450111) SHA1(8b44c90c62d5026ccfba88b31e1113e01c6bcf85) )
+	ROM_LOAD( "01.a1",	0x08000, 0x8000, CRC(6d644987) SHA1(26243abe051f3266e2d1743ec599d4e8bbb692e4) )
+
+	ROM_REGION( 0x1800, "gfx0", 0 )
+	ROM_FILL(			0x0000, 0x1000, 0 )			/* filling bitplanes */
+	ROM_COPY( "temp",	0x0000, 0x1000, 0x0800 )	/* 0000-07ff of 03.a3 - char rom, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx1", 0 )
+	ROM_COPY( "temp",	0x08800, 0x0000, 0x0800 )	/* 0800-0fff of 01.a1 - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x10800, 0x0800, 0x0800 )	/* 0800-0fff of 02.a2 - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x01000, 0x1000, 0x0800 )	/* 1000-17ff of 03.a3 - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx2", 0 )
+	ROM_COPY( "temp",	0x08000, 0x0000, 0x0800 )	/* 0000-07ff of 01.a1 - regular cards gfx, bitplane 1 */
+	ROM_COPY( "temp",	0x10000, 0x0800, 0x0800 )	/* 0000-07ff of 02.a2 - regular cards gfx, bitplane 2 */
+	ROM_COPY( "temp",	0x00800, 0x1000, 0x0800 )	/* 0800-0fff of 03.a3 - regular cards gfx, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx3", 0 )
+	ROM_COPY( "temp",	0x0c000, 0x0000, 0x0800 )	/* 4000-47ff of 01.a1 - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x14000, 0x0800, 0x0800 )	/* 4000-47ff of 02.a2 - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x04800, 0x1000, 0x0800 )	/* 4800-4fff of 03.a3 - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx4", 0 )
+	ROM_COPY( "temp",	0x09800, 0x0000, 0x0800 )	/* 1800-1fff of 01.a1 - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x11800, 0x0800, 0x0800 )	/* 1800-1fff of 02.a2 - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x02000, 0x1000, 0x0800 )	/* 1800-1fff of 03.a3 - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx5", 0 )
+	ROM_COPY( "temp",	0x0a800, 0x0000, 0x0800 )	/* 2800-2fff of 01.a1 - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x12800, 0x0800, 0x0800 )	/* 2800-2fff of 02.a2 - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x03000, 0x1000, 0x0800 )	/* 3000-37ff of 03.a3 - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx6", 0 )
+	ROM_COPY( "temp",	0x0a000, 0x0000, 0x0800 )	/* 2000-27ff of 01.a1 - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x12000, 0x0800, 0x0800 )	/* 2000-27ff of 02.a2 - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x02800, 0x1000, 0x0800 )	/* 2800-2fff of 03.a3 - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx7", 0 )
+	ROM_COPY( "temp",	0x0e800, 0x0000, 0x0800 )	/* 6800-6fff of 01.a1 - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x16800, 0x0800, 0x0800 )	/* 6800-6fff of 02.a2 - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x07000, 0x1000, 0x0800 )	/* 7000-77ff of 03.a3 - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx8", 0 )
+	ROM_COPY( "temp",	0x0b800, 0x0000, 0x0800 )	/* 3800-3fff of 01.a1 - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x13800, 0x0800, 0x0800 )	/* 3800-3fff of 02.a2 - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x04000, 0x1000, 0x0800 )	/* 3800-3fff of 03.a3 - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx9", 0 )
+	ROM_COPY( "temp",	0x0c800, 0x0000, 0x0800 )	/* 4800-4fff of 01.a1 - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x14800, 0x0800, 0x0800 )	/* 4800-4fff of 02.a2 - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x05000, 0x1000, 0x0800 )	/* 4000-47ff of 03.a3 - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx10", 0 )
+	ROM_COPY( "temp",	0x09000, 0x0000, 0x0800 )	/* 1000-17ff of 01.a1 - extended cards gfx, bitplane 1 */
+	ROM_COPY( "temp",	0x11000, 0x0800, 0x0800 )	/* 1000-17ff of 02.a2 - extended cards gfx, bitplane 2 */
+	ROM_COPY( "temp",	0x01800, 0x1000, 0x0800 )	/* 1800-1fff of 03.a3 - extended cards gfx, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx11", 0 )
+	ROM_COPY( "temp",	0x0d000, 0x0000, 0x0800 )	/* 5000-57ff of 01.a1 - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x15000, 0x0800, 0x0800 )	/* 5000-57ff of 02.a2 - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x05800, 0x1000, 0x0800 )	/* 5800-5fff of 03.a3 - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx12", 0 )
+	ROM_COPY( "temp",	0x0d800, 0x0000, 0x0800 )	/* 5800-5fff of 01.a1 - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x15800, 0x0800, 0x0800 )	/* 5800-5fff of 02.a2 - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x06000, 0x1000, 0x0800 )	/* 6000-67ff of 03.a3 - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx13", 0 )
+	ROM_COPY( "temp",	0x0e000, 0x0000, 0x0800 )	/* 6000-67ff of 01.a1 - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x16000, 0x0800, 0x0800 )	/* 6000-67ff of 02.a2 - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x06800, 0x1000, 0x0800 )	/* 6800-6fff of 03.a3 - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx14", 0 )
+	ROM_COPY( "temp",	0x0b000, 0x0000, 0x0800 )	/* 3000-37ff of 01.a1 - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x13000, 0x0800, 0x0800 )	/* 3000-37ff of 02.a2 - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x03800, 0x1000, 0x0800 )	/* 3800-3fff of 03.a3 - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx15", 0 )
+	ROM_COPY( "temp",	0x0f000, 0x0000, 0x0800 )	/* 7000-77ff of 01.a1 - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x17000, 0x0800, 0x0800 )	/* 7000-77ff of 02.a2 - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x07800, 0x1000, 0x0800 )	/* 7800-7fff of 03.a3 - empty, bitplane 3 */
+
+	ROM_REGION( 0x0100, "proms", 0 )
+	ROM_LOAD( "wldwitch_tbp.bin",	0x0000, 0x0100, BAD_DUMP CRC(ed15125b) SHA1(56fc00f2ce4ebe9cee73a45b142c33c00432b66b) )
+
+	ROM_REGION( 0x0400, "proms2", 0 )
+	ROM_LOAD( "82s137.box",	0x0000, 0x0400, CRC(4ae3ecf5) SHA1(e1e540ae13e7ce5ac6391f325160ec997ea6cc2f) )
+ROM_END
+
+
+ROM_START( wldwitchl )
+	ROM_REGION( 0x10000, "maincpu", 0 )	/* Ver 170A-beta, 1996-06-25 */
+	ROM_LOAD( "ww170a-beta.bin",	0x8000, 0x8000, CRC(32dbaa23) SHA1(5f5b0b7ad56abe20a2b9b3670b98a4741ea8aaab) )
+
+	ROM_REGION( 0x18000, "temp", 0 )
+	ROM_LOAD( "03.a3",	0x00000, 0x8000, CRC(ae474414) SHA1(6dee760cee18e125791c17b562ca8aabe1f4593e) )
+	ROM_LOAD( "02.a2",	0x10000, 0x8000, CRC(f6450111) SHA1(8b44c90c62d5026ccfba88b31e1113e01c6bcf85) )
+	ROM_LOAD( "01.a1",	0x08000, 0x8000, CRC(6d644987) SHA1(26243abe051f3266e2d1743ec599d4e8bbb692e4) )
+
+	ROM_REGION( 0x1800, "gfx0", 0 )
+	ROM_FILL(			0x0000, 0x1000, 0 )			/* filling bitplanes */
+	ROM_COPY( "temp",	0x0000, 0x1000, 0x0800 )	/* 0000-07ff of 03.a3 - char rom, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx1", 0 )
+	ROM_COPY( "temp",	0x08800, 0x0000, 0x0800 )	/* 0800-0fff of 01.a1 - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x10800, 0x0800, 0x0800 )	/* 0800-0fff of 02.a2 - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x01000, 0x1000, 0x0800 )	/* 1000-17ff of 03.a3 - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx2", 0 )
+	ROM_COPY( "temp",	0x08000, 0x0000, 0x0800 )	/* 0000-07ff of 01.a1 - regular cards gfx, bitplane 1 */
+	ROM_COPY( "temp",	0x10000, 0x0800, 0x0800 )	/* 0000-07ff of 02.a2 - regular cards gfx, bitplane 2 */
+	ROM_COPY( "temp",	0x00800, 0x1000, 0x0800 )	/* 0800-0fff of 03.a3 - regular cards gfx, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx3", 0 )
+	ROM_COPY( "temp",	0x0c000, 0x0000, 0x0800 )	/* 4000-47ff of 01.a1 - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x14000, 0x0800, 0x0800 )	/* 4000-47ff of 02.a2 - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x04800, 0x1000, 0x0800 )	/* 4800-4fff of 03.a3 - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx4", 0 )
+	ROM_COPY( "temp",	0x09800, 0x0000, 0x0800 )	/* 1800-1fff of 01.a1 - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x11800, 0x0800, 0x0800 )	/* 1800-1fff of 02.a2 - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x02000, 0x1000, 0x0800 )	/* 1800-1fff of 03.a3 - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx5", 0 )
+	ROM_COPY( "temp",	0x0a800, 0x0000, 0x0800 )	/* 2800-2fff of 01.a1 - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x12800, 0x0800, 0x0800 )	/* 2800-2fff of 02.a2 - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x03000, 0x1000, 0x0800 )	/* 3000-37ff of 03.a3 - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx6", 0 )
+	ROM_COPY( "temp",	0x0a000, 0x0000, 0x0800 )	/* 2000-27ff of 01.a1 - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x12000, 0x0800, 0x0800 )	/* 2000-27ff of 02.a2 - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x02800, 0x1000, 0x0800 )	/* 2800-2fff of 03.a3 - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx7", 0 )
+	ROM_COPY( "temp",	0x0e800, 0x0000, 0x0800 )	/* 6800-6fff of 01.a1 - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x16800, 0x0800, 0x0800 )	/* 6800-6fff of 02.a2 - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x07000, 0x1000, 0x0800 )	/* 7000-77ff of 03.a3 - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx8", 0 )
+	ROM_COPY( "temp",	0x0b800, 0x0000, 0x0800 )	/* 3800-3fff of 01.a1 - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x13800, 0x0800, 0x0800 )	/* 3800-3fff of 02.a2 - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x04000, 0x1000, 0x0800 )	/* 3800-3fff of 03.a3 - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx9", 0 )
+	ROM_COPY( "temp",	0x0c800, 0x0000, 0x0800 )	/* 4800-4fff of 01.a1 - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x14800, 0x0800, 0x0800 )	/* 4800-4fff of 02.a2 - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x05000, 0x1000, 0x0800 )	/* 4000-47ff of 03.a3 - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx10", 0 )
+	ROM_COPY( "temp",	0x09000, 0x0000, 0x0800 )	/* 1000-17ff of 01.a1 - extended cards gfx, bitplane 1 */
+	ROM_COPY( "temp",	0x11000, 0x0800, 0x0800 )	/* 1000-17ff of 02.a2 - extended cards gfx, bitplane 2 */
+	ROM_COPY( "temp",	0x01800, 0x1000, 0x0800 )	/* 1800-1fff of 03.a3 - extended cards gfx, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx11", 0 )
+	ROM_COPY( "temp",	0x0d000, 0x0000, 0x0800 )	/* 5000-57ff of 01.a1 - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x15000, 0x0800, 0x0800 )	/* 5000-57ff of 02.a2 - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x05800, 0x1000, 0x0800 )	/* 5800-5fff of 03.a3 - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx12", 0 )
+	ROM_COPY( "temp",	0x0d800, 0x0000, 0x0800 )	/* 5800-5fff of 01.a1 - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x15800, 0x0800, 0x0800 )	/* 5800-5fff of 02.a2 - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x06000, 0x1000, 0x0800 )	/* 6000-67ff of 03.a3 - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx13", 0 )
+	ROM_COPY( "temp",	0x0e000, 0x0000, 0x0800 )	/* 6000-67ff of 01.a1 - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x16000, 0x0800, 0x0800 )	/* 6000-67ff of 02.a2 - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x06800, 0x1000, 0x0800 )	/* 6800-6fff of 03.a3 - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx14", 0 )
+	ROM_COPY( "temp",	0x0b000, 0x0000, 0x0800 )	/* 3000-37ff of 01.a1 - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x13000, 0x0800, 0x0800 )	/* 3000-37ff of 02.a2 - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x03800, 0x1000, 0x0800 )	/* 3800-3fff of 03.a3 - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx15", 0 )
+	ROM_COPY( "temp",	0x0f000, 0x0000, 0x0800 )	/* 7000-77ff of 01.a1 - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x17000, 0x0800, 0x0800 )	/* 7000-77ff of 02.a2 - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x07800, 0x1000, 0x0800 )	/* 7800-7fff of 03.a3 - empty, bitplane 3 */
+
+	ROM_REGION( 0x0100, "proms", 0 )
+	ROM_LOAD( "wldwitch_tbp.bin",	0x0000, 0x0100, BAD_DUMP CRC(ed15125b) SHA1(56fc00f2ce4ebe9cee73a45b142c33c00432b66b) )
+
+	ROM_REGION( 0x0400, "proms2", 0 )
+	ROM_LOAD( "82s137.box",	0x0000, 0x0400, CRC(4ae3ecf5) SHA1(e1e540ae13e7ce5ac6391f325160ec997ea6cc2f) )
+ROM_END
+
+
+ROM_START( wldwitchm )
+	ROM_REGION( 0x10000, "maincpu", 0 )	/* Ver 170A, 1996-09-30 */
+	ROM_LOAD( "ww170a.bin",	0x8000, 0x8000, CRC(1d976e56) SHA1(c03014f3b0e682cd0f025363108b5aa410c2b54b) )
+
+	ROM_REGION( 0x18000, "temp", 0 )
+	ROM_LOAD( "03.a3",	0x00000, 0x8000, CRC(ae474414) SHA1(6dee760cee18e125791c17b562ca8aabe1f4593e) )
+	ROM_LOAD( "02.a2",	0x10000, 0x8000, CRC(f6450111) SHA1(8b44c90c62d5026ccfba88b31e1113e01c6bcf85) )
+	ROM_LOAD( "01.a1",	0x08000, 0x8000, CRC(6d644987) SHA1(26243abe051f3266e2d1743ec599d4e8bbb692e4) )
+
+	ROM_REGION( 0x1800, "gfx0", 0 )
+	ROM_FILL(			0x0000, 0x1000, 0 )			/* filling bitplanes */
+	ROM_COPY( "temp",	0x0000, 0x1000, 0x0800 )	/* 0000-07ff of 03.a3 - char rom, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx1", 0 )
+	ROM_COPY( "temp",	0x08800, 0x0000, 0x0800 )	/* 0800-0fff of 01.a1 - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x10800, 0x0800, 0x0800 )	/* 0800-0fff of 02.a2 - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x01000, 0x1000, 0x0800 )	/* 1000-17ff of 03.a3 - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx2", 0 )
+	ROM_COPY( "temp",	0x08000, 0x0000, 0x0800 )	/* 0000-07ff of 01.a1 - regular cards gfx, bitplane 1 */
+	ROM_COPY( "temp",	0x10000, 0x0800, 0x0800 )	/* 0000-07ff of 02.a2 - regular cards gfx, bitplane 2 */
+	ROM_COPY( "temp",	0x00800, 0x1000, 0x0800 )	/* 0800-0fff of 03.a3 - regular cards gfx, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx3", 0 )
+	ROM_COPY( "temp",	0x0c000, 0x0000, 0x0800 )	/* 4000-47ff of 01.a1 - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x14000, 0x0800, 0x0800 )	/* 4000-47ff of 02.a2 - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x04800, 0x1000, 0x0800 )	/* 4800-4fff of 03.a3 - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx4", 0 )
+	ROM_COPY( "temp",	0x09800, 0x0000, 0x0800 )	/* 1800-1fff of 01.a1 - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x11800, 0x0800, 0x0800 )	/* 1800-1fff of 02.a2 - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x02000, 0x1000, 0x0800 )	/* 1800-1fff of 03.a3 - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx5", 0 )
+	ROM_COPY( "temp",	0x0a800, 0x0000, 0x0800 )	/* 2800-2fff of 01.a1 - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x12800, 0x0800, 0x0800 )	/* 2800-2fff of 02.a2 - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x03000, 0x1000, 0x0800 )	/* 3000-37ff of 03.a3 - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx6", 0 )
+	ROM_COPY( "temp",	0x0a000, 0x0000, 0x0800 )	/* 2000-27ff of 01.a1 - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x12000, 0x0800, 0x0800 )	/* 2000-27ff of 02.a2 - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x02800, 0x1000, 0x0800 )	/* 2800-2fff of 03.a3 - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx7", 0 )
+	ROM_COPY( "temp",	0x0e800, 0x0000, 0x0800 )	/* 6800-6fff of 01.a1 - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x16800, 0x0800, 0x0800 )	/* 6800-6fff of 02.a2 - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x07000, 0x1000, 0x0800 )	/* 7000-77ff of 03.a3 - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx8", 0 )
+	ROM_COPY( "temp",	0x0b800, 0x0000, 0x0800 )	/* 3800-3fff of 01.a1 - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x13800, 0x0800, 0x0800 )	/* 3800-3fff of 02.a2 - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x04000, 0x1000, 0x0800 )	/* 3800-3fff of 03.a3 - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx9", 0 )
+	ROM_COPY( "temp",	0x0c800, 0x0000, 0x0800 )	/* 4800-4fff of 01.a1 - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x14800, 0x0800, 0x0800 )	/* 4800-4fff of 02.a2 - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x05000, 0x1000, 0x0800 )	/* 4000-47ff of 03.a3 - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx10", 0 )
+	ROM_COPY( "temp",	0x09000, 0x0000, 0x0800 )	/* 1000-17ff of 01.a1 - extended cards gfx, bitplane 1 */
+	ROM_COPY( "temp",	0x11000, 0x0800, 0x0800 )	/* 1000-17ff of 02.a2 - extended cards gfx, bitplane 2 */
+	ROM_COPY( "temp",	0x01800, 0x1000, 0x0800 )	/* 1800-1fff of 03.a3 - extended cards gfx, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx11", 0 )
+	ROM_COPY( "temp",	0x0d000, 0x0000, 0x0800 )	/* 5000-57ff of 01.a1 - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x15000, 0x0800, 0x0800 )	/* 5000-57ff of 02.a2 - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x05800, 0x1000, 0x0800 )	/* 5800-5fff of 03.a3 - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx12", 0 )
+	ROM_COPY( "temp",	0x0d800, 0x0000, 0x0800 )	/* 5800-5fff of 01.a1 - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x15800, 0x0800, 0x0800 )	/* 5800-5fff of 02.a2 - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x06000, 0x1000, 0x0800 )	/* 6000-67ff of 03.a3 - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx13", 0 )
+	ROM_COPY( "temp",	0x0e000, 0x0000, 0x0800 )	/* 6000-67ff of 01.a1 - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x16000, 0x0800, 0x0800 )	/* 6000-67ff of 02.a2 - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x06800, 0x1000, 0x0800 )	/* 6800-6fff of 03.a3 - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx14", 0 )
+	ROM_COPY( "temp",	0x0b000, 0x0000, 0x0800 )	/* 3000-37ff of 01.a1 - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x13000, 0x0800, 0x0800 )	/* 3000-37ff of 02.a2 - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x03800, 0x1000, 0x0800 )	/* 3800-3fff of 03.a3 - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx15", 0 )
+	ROM_COPY( "temp",	0x0f000, 0x0000, 0x0800 )	/* 7000-77ff of 01.a1 - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x17000, 0x0800, 0x0800 )	/* 7000-77ff of 02.a2 - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x07800, 0x1000, 0x0800 )	/* 7800-7fff of 03.a3 - empty, bitplane 3 */
+
+	ROM_REGION( 0x0100, "proms", 0 )
+	ROM_LOAD( "wldwitch_tbp.bin",	0x0000, 0x0100, BAD_DUMP CRC(ed15125b) SHA1(56fc00f2ce4ebe9cee73a45b142c33c00432b66b) )
+
+	ROM_REGION( 0x0400, "proms2", 0 )
+	ROM_LOAD( "82s137.box",	0x0000, 0x0400, CRC(4ae3ecf5) SHA1(e1e540ae13e7ce5ac6391f325160ec997ea6cc2f) )
+ROM_END
+
+
+ROM_START( wldwitchn )
+	ROM_REGION( 0x10000, "maincpu", 0 )	/* Ver 170A alt, 1997-06-11 */
+	ROM_LOAD( "ww170a-alt.bin",	0x8000, 0x8000, CRC(4266b71c) SHA1(c0fd545ae629f3456c447b3b695caeec42521a71) )
+
+	ROM_REGION( 0x18000, "temp", 0 )
+	ROM_LOAD( "03.a3",	0x00000, 0x8000, CRC(ae474414) SHA1(6dee760cee18e125791c17b562ca8aabe1f4593e) )
+	ROM_LOAD( "02.a2",	0x10000, 0x8000, CRC(f6450111) SHA1(8b44c90c62d5026ccfba88b31e1113e01c6bcf85) )
+	ROM_LOAD( "01.a1",	0x08000, 0x8000, CRC(6d644987) SHA1(26243abe051f3266e2d1743ec599d4e8bbb692e4) )
+
+	ROM_REGION( 0x1800, "gfx0", 0 )
+	ROM_FILL(			0x0000, 0x1000, 0 )			/* filling bitplanes */
+	ROM_COPY( "temp",	0x0000, 0x1000, 0x0800 )	/* 0000-07ff of 03.a3 - char rom, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx1", 0 )
+	ROM_COPY( "temp",	0x08800, 0x0000, 0x0800 )	/* 0800-0fff of 01.a1 - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x10800, 0x0800, 0x0800 )	/* 0800-0fff of 02.a2 - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x01000, 0x1000, 0x0800 )	/* 1000-17ff of 03.a3 - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx2", 0 )
+	ROM_COPY( "temp",	0x08000, 0x0000, 0x0800 )	/* 0000-07ff of 01.a1 - regular cards gfx, bitplane 1 */
+	ROM_COPY( "temp",	0x10000, 0x0800, 0x0800 )	/* 0000-07ff of 02.a2 - regular cards gfx, bitplane 2 */
+	ROM_COPY( "temp",	0x00800, 0x1000, 0x0800 )	/* 0800-0fff of 03.a3 - regular cards gfx, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx3", 0 )
+	ROM_COPY( "temp",	0x0c000, 0x0000, 0x0800 )	/* 4000-47ff of 01.a1 - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x14000, 0x0800, 0x0800 )	/* 4000-47ff of 02.a2 - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x04800, 0x1000, 0x0800 )	/* 4800-4fff of 03.a3 - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx4", 0 )
+	ROM_COPY( "temp",	0x09800, 0x0000, 0x0800 )	/* 1800-1fff of 01.a1 - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x11800, 0x0800, 0x0800 )	/* 1800-1fff of 02.a2 - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x02000, 0x1000, 0x0800 )	/* 1800-1fff of 03.a3 - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx5", 0 )
+	ROM_COPY( "temp",	0x0a800, 0x0000, 0x0800 )	/* 2800-2fff of 01.a1 - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x12800, 0x0800, 0x0800 )	/* 2800-2fff of 02.a2 - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x03000, 0x1000, 0x0800 )	/* 3000-37ff of 03.a3 - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx6", 0 )
+	ROM_COPY( "temp",	0x0a000, 0x0000, 0x0800 )	/* 2000-27ff of 01.a1 - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x12000, 0x0800, 0x0800 )	/* 2000-27ff of 02.a2 - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x02800, 0x1000, 0x0800 )	/* 2800-2fff of 03.a3 - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx7", 0 )
+	ROM_COPY( "temp",	0x0e800, 0x0000, 0x0800 )	/* 6800-6fff of 01.a1 - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x16800, 0x0800, 0x0800 )	/* 6800-6fff of 02.a2 - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x07000, 0x1000, 0x0800 )	/* 7000-77ff of 03.a3 - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx8", 0 )
+	ROM_COPY( "temp",	0x0b800, 0x0000, 0x0800 )	/* 3800-3fff of 01.a1 - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x13800, 0x0800, 0x0800 )	/* 3800-3fff of 02.a2 - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x04000, 0x1000, 0x0800 )	/* 3800-3fff of 03.a3 - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx9", 0 )
+	ROM_COPY( "temp",	0x0c800, 0x0000, 0x0800 )	/* 4800-4fff of 01.a1 - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x14800, 0x0800, 0x0800 )	/* 4800-4fff of 02.a2 - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x05000, 0x1000, 0x0800 )	/* 4000-47ff of 03.a3 - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx10", 0 )
+	ROM_COPY( "temp",	0x09000, 0x0000, 0x0800 )	/* 1000-17ff of 01.a1 - extended cards gfx, bitplane 1 */
+	ROM_COPY( "temp",	0x11000, 0x0800, 0x0800 )	/* 1000-17ff of 02.a2 - extended cards gfx, bitplane 2 */
+	ROM_COPY( "temp",	0x01800, 0x1000, 0x0800 )	/* 1800-1fff of 03.a3 - extended cards gfx, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx11", 0 )
+	ROM_COPY( "temp",	0x0d000, 0x0000, 0x0800 )	/* 5000-57ff of 01.a1 - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x15000, 0x0800, 0x0800 )	/* 5000-57ff of 02.a2 - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x05800, 0x1000, 0x0800 )	/* 5800-5fff of 03.a3 - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx12", 0 )
+	ROM_COPY( "temp",	0x0d800, 0x0000, 0x0800 )	/* 5800-5fff of 01.a1 - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x15800, 0x0800, 0x0800 )	/* 5800-5fff of 02.a2 - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x06000, 0x1000, 0x0800 )	/* 6000-67ff of 03.a3 - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx13", 0 )
+	ROM_COPY( "temp",	0x0e000, 0x0000, 0x0800 )	/* 6000-67ff of 01.a1 - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x16000, 0x0800, 0x0800 )	/* 6000-67ff of 02.a2 - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x06800, 0x1000, 0x0800 )	/* 6800-6fff of 03.a3 - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx14", 0 )
+	ROM_COPY( "temp",	0x0b000, 0x0000, 0x0800 )	/* 3000-37ff of 01.a1 - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x13000, 0x0800, 0x0800 )	/* 3000-37ff of 02.a2 - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x03800, 0x1000, 0x0800 )	/* 3800-3fff of 03.a3 - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx15", 0 )
+	ROM_COPY( "temp",	0x0f000, 0x0000, 0x0800 )	/* 7000-77ff of 01.a1 - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x17000, 0x0800, 0x0800 )	/* 7000-77ff of 02.a2 - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x07800, 0x1000, 0x0800 )	/* 7800-7fff of 03.a3 - empty, bitplane 3 */
+
+	ROM_REGION( 0x0100, "proms", 0 )
+	ROM_LOAD( "wldwitch_tbp.bin",	0x0000, 0x0100, BAD_DUMP CRC(ed15125b) SHA1(56fc00f2ce4ebe9cee73a45b142c33c00432b66b) )
+
+	ROM_REGION( 0x0400, "proms2", 0 )
+	ROM_LOAD( "82s137.box",	0x0000, 0x0400, CRC(4ae3ecf5) SHA1(e1e540ae13e7ce5ac6391f325160ec997ea6cc2f) )
+ROM_END
+
+
+ROM_START( wldwitcho )
+	ROM_REGION( 0x10000, "maincpu", 0 )	/* Ver 174A-SP-BELG, 1998-05-11 */
+	ROM_LOAD( "ww174a-sp-belg.bin",	0x8000, 0x8000, CRC(d490c676) SHA1(9403bcc003c9b48b25857bd142a73c8d23c5f5b5) )
+
+	ROM_REGION( 0x18000, "temp", 0 )
+	ROM_LOAD( "03.a3",	0x00000, 0x8000, CRC(ae474414) SHA1(6dee760cee18e125791c17b562ca8aabe1f4593e) )
+	ROM_LOAD( "02.a2",	0x10000, 0x8000, CRC(f6450111) SHA1(8b44c90c62d5026ccfba88b31e1113e01c6bcf85) )
+	ROM_LOAD( "01.a1",	0x08000, 0x8000, CRC(6d644987) SHA1(26243abe051f3266e2d1743ec599d4e8bbb692e4) )
+
+	ROM_REGION( 0x1800, "gfx0", 0 )
+	ROM_FILL(			0x0000, 0x1000, 0 )			/* filling bitplanes */
+	ROM_COPY( "temp",	0x0000, 0x1000, 0x0800 )	/* 0000-07ff of 03.a3 - char rom, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx1", 0 )
+	ROM_COPY( "temp",	0x08800, 0x0000, 0x0800 )	/* 0800-0fff of 01.a1 - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x10800, 0x0800, 0x0800 )	/* 0800-0fff of 02.a2 - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x01000, 0x1000, 0x0800 )	/* 1000-17ff of 03.a3 - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx2", 0 )
+	ROM_COPY( "temp",	0x08000, 0x0000, 0x0800 )	/* 0000-07ff of 01.a1 - regular cards gfx, bitplane 1 */
+	ROM_COPY( "temp",	0x10000, 0x0800, 0x0800 )	/* 0000-07ff of 02.a2 - regular cards gfx, bitplane 2 */
+	ROM_COPY( "temp",	0x00800, 0x1000, 0x0800 )	/* 0800-0fff of 03.a3 - regular cards gfx, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx3", 0 )
+	ROM_COPY( "temp",	0x0c000, 0x0000, 0x0800 )	/* 4000-47ff of 01.a1 - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x14000, 0x0800, 0x0800 )	/* 4000-47ff of 02.a2 - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x04800, 0x1000, 0x0800 )	/* 4800-4fff of 03.a3 - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx4", 0 )
+	ROM_COPY( "temp",	0x09800, 0x0000, 0x0800 )	/* 1800-1fff of 01.a1 - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x11800, 0x0800, 0x0800 )	/* 1800-1fff of 02.a2 - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x02000, 0x1000, 0x0800 )	/* 1800-1fff of 03.a3 - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx5", 0 )
+	ROM_COPY( "temp",	0x0a800, 0x0000, 0x0800 )	/* 2800-2fff of 01.a1 - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x12800, 0x0800, 0x0800 )	/* 2800-2fff of 02.a2 - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x03000, 0x1000, 0x0800 )	/* 3000-37ff of 03.a3 - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx6", 0 )
+	ROM_COPY( "temp",	0x0a000, 0x0000, 0x0800 )	/* 2000-27ff of 01.a1 - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x12000, 0x0800, 0x0800 )	/* 2000-27ff of 02.a2 - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x02800, 0x1000, 0x0800 )	/* 2800-2fff of 03.a3 - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx7", 0 )
+	ROM_COPY( "temp",	0x0e800, 0x0000, 0x0800 )	/* 6800-6fff of 01.a1 - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x16800, 0x0800, 0x0800 )	/* 6800-6fff of 02.a2 - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x07000, 0x1000, 0x0800 )	/* 7000-77ff of 03.a3 - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx8", 0 )
+	ROM_COPY( "temp",	0x0b800, 0x0000, 0x0800 )	/* 3800-3fff of 01.a1 - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x13800, 0x0800, 0x0800 )	/* 3800-3fff of 02.a2 - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x04000, 0x1000, 0x0800 )	/* 3800-3fff of 03.a3 - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx9", 0 )
+	ROM_COPY( "temp",	0x0c800, 0x0000, 0x0800 )	/* 4800-4fff of 01.a1 - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x14800, 0x0800, 0x0800 )	/* 4800-4fff of 02.a2 - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x05000, 0x1000, 0x0800 )	/* 4000-47ff of 03.a3 - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx10", 0 )
+	ROM_COPY( "temp",	0x09000, 0x0000, 0x0800 )	/* 1000-17ff of 01.a1 - extended cards gfx, bitplane 1 */
+	ROM_COPY( "temp",	0x11000, 0x0800, 0x0800 )	/* 1000-17ff of 02.a2 - extended cards gfx, bitplane 2 */
+	ROM_COPY( "temp",	0x01800, 0x1000, 0x0800 )	/* 1800-1fff of 03.a3 - extended cards gfx, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx11", 0 )
+	ROM_COPY( "temp",	0x0d000, 0x0000, 0x0800 )	/* 5000-57ff of 01.a1 - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x15000, 0x0800, 0x0800 )	/* 5000-57ff of 02.a2 - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x05800, 0x1000, 0x0800 )	/* 5800-5fff of 03.a3 - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx12", 0 )
+	ROM_COPY( "temp",	0x0d800, 0x0000, 0x0800 )	/* 5800-5fff of 01.a1 - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x15800, 0x0800, 0x0800 )	/* 5800-5fff of 02.a2 - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x06000, 0x1000, 0x0800 )	/* 6000-67ff of 03.a3 - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx13", 0 )
+	ROM_COPY( "temp",	0x0e000, 0x0000, 0x0800 )	/* 6000-67ff of 01.a1 - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x16000, 0x0800, 0x0800 )	/* 6000-67ff of 02.a2 - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x06800, 0x1000, 0x0800 )	/* 6800-6fff of 03.a3 - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx14", 0 )
+	ROM_COPY( "temp",	0x0b000, 0x0000, 0x0800 )	/* 3000-37ff of 01.a1 - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x13000, 0x0800, 0x0800 )	/* 3000-37ff of 02.a2 - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x03800, 0x1000, 0x0800 )	/* 3800-3fff of 03.a3 - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx15", 0 )
+	ROM_COPY( "temp",	0x0f000, 0x0000, 0x0800 )	/* 7000-77ff of 01.a1 - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x17000, 0x0800, 0x0800 )	/* 7000-77ff of 02.a2 - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x07800, 0x1000, 0x0800 )	/* 7800-7fff of 03.a3 - empty, bitplane 3 */
+
+	ROM_REGION( 0x0100, "proms", 0 )
+	ROM_LOAD( "wldwitch_tbp.bin",	0x0000, 0x0100, BAD_DUMP CRC(ed15125b) SHA1(56fc00f2ce4ebe9cee73a45b142c33c00432b66b) )
+
+	ROM_REGION( 0x0400, "proms2", 0 )
+	ROM_LOAD( "82s137.box",	0x0000, 0x0400, CRC(4ae3ecf5) SHA1(e1e540ae13e7ce5ac6391f325160ec997ea6cc2f) )
+ROM_END
+
+
+ROM_START( wldwitchp )
+	ROM_REGION( 0x10000, "maincpu", 0 )	/* Ver 174A, 1998-09-20 */
+	ROM_LOAD( "ww174a.bin",	0x8000, 0x8000, CRC(d4129f5a) SHA1(139c4b6f5972b5d7c549b27b114a81fd2de178c3) )
+
+	ROM_REGION( 0x18000, "temp", 0 )
+	ROM_LOAD( "03.a3",	0x00000, 0x8000, CRC(ae474414) SHA1(6dee760cee18e125791c17b562ca8aabe1f4593e) )
+	ROM_LOAD( "02.a2",	0x10000, 0x8000, CRC(f6450111) SHA1(8b44c90c62d5026ccfba88b31e1113e01c6bcf85) )
+	ROM_LOAD( "01.a1",	0x08000, 0x8000, CRC(6d644987) SHA1(26243abe051f3266e2d1743ec599d4e8bbb692e4) )
+
+	ROM_REGION( 0x1800, "gfx0", 0 )
+	ROM_FILL(			0x0000, 0x1000, 0 )			/* filling bitplanes */
+	ROM_COPY( "temp",	0x0000, 0x1000, 0x0800 )	/* 0000-07ff of 03.a3 - char rom, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx1", 0 )
+	ROM_COPY( "temp",	0x08800, 0x0000, 0x0800 )	/* 0800-0fff of 01.a1 - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x10800, 0x0800, 0x0800 )	/* 0800-0fff of 02.a2 - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x01000, 0x1000, 0x0800 )	/* 1000-17ff of 03.a3 - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx2", 0 )
+	ROM_COPY( "temp",	0x08000, 0x0000, 0x0800 )	/* 0000-07ff of 01.a1 - regular cards gfx, bitplane 1 */
+	ROM_COPY( "temp",	0x10000, 0x0800, 0x0800 )	/* 0000-07ff of 02.a2 - regular cards gfx, bitplane 2 */
+	ROM_COPY( "temp",	0x00800, 0x1000, 0x0800 )	/* 0800-0fff of 03.a3 - regular cards gfx, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx3", 0 )
+	ROM_COPY( "temp",	0x0c000, 0x0000, 0x0800 )	/* 4000-47ff of 01.a1 - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x14000, 0x0800, 0x0800 )	/* 4000-47ff of 02.a2 - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x04800, 0x1000, 0x0800 )	/* 4800-4fff of 03.a3 - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx4", 0 )
+	ROM_COPY( "temp",	0x09800, 0x0000, 0x0800 )	/* 1800-1fff of 01.a1 - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x11800, 0x0800, 0x0800 )	/* 1800-1fff of 02.a2 - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x02000, 0x1000, 0x0800 )	/* 1800-1fff of 03.a3 - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx5", 0 )
+	ROM_COPY( "temp",	0x0a800, 0x0000, 0x0800 )	/* 2800-2fff of 01.a1 - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x12800, 0x0800, 0x0800 )	/* 2800-2fff of 02.a2 - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x03000, 0x1000, 0x0800 )	/* 3000-37ff of 03.a3 - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx6", 0 )
+	ROM_COPY( "temp",	0x0a000, 0x0000, 0x0800 )	/* 2000-27ff of 01.a1 - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x12000, 0x0800, 0x0800 )	/* 2000-27ff of 02.a2 - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x02800, 0x1000, 0x0800 )	/* 2800-2fff of 03.a3 - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx7", 0 )
+	ROM_COPY( "temp",	0x0e800, 0x0000, 0x0800 )	/* 6800-6fff of 01.a1 - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x16800, 0x0800, 0x0800 )	/* 6800-6fff of 02.a2 - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x07000, 0x1000, 0x0800 )	/* 7000-77ff of 03.a3 - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx8", 0 )
+	ROM_COPY( "temp",	0x0b800, 0x0000, 0x0800 )	/* 3800-3fff of 01.a1 - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x13800, 0x0800, 0x0800 )	/* 3800-3fff of 02.a2 - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x04000, 0x1000, 0x0800 )	/* 3800-3fff of 03.a3 - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx9", 0 )
+	ROM_COPY( "temp",	0x0c800, 0x0000, 0x0800 )	/* 4800-4fff of 01.a1 - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x14800, 0x0800, 0x0800 )	/* 4800-4fff of 02.a2 - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x05000, 0x1000, 0x0800 )	/* 4000-47ff of 03.a3 - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx10", 0 )
+	ROM_COPY( "temp",	0x09000, 0x0000, 0x0800 )	/* 1000-17ff of 01.a1 - extended cards gfx, bitplane 1 */
+	ROM_COPY( "temp",	0x11000, 0x0800, 0x0800 )	/* 1000-17ff of 02.a2 - extended cards gfx, bitplane 2 */
+	ROM_COPY( "temp",	0x01800, 0x1000, 0x0800 )	/* 1800-1fff of 03.a3 - extended cards gfx, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx11", 0 )
+	ROM_COPY( "temp",	0x0d000, 0x0000, 0x0800 )	/* 5000-57ff of 01.a1 - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x15000, 0x0800, 0x0800 )	/* 5000-57ff of 02.a2 - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x05800, 0x1000, 0x0800 )	/* 5800-5fff of 03.a3 - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx12", 0 )
+	ROM_COPY( "temp",	0x0d800, 0x0000, 0x0800 )	/* 5800-5fff of 01.a1 - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x15800, 0x0800, 0x0800 )	/* 5800-5fff of 02.a2 - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x06000, 0x1000, 0x0800 )	/* 6000-67ff of 03.a3 - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx13", 0 )
+	ROM_COPY( "temp",	0x0e000, 0x0000, 0x0800 )	/* 6000-67ff of 01.a1 - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x16000, 0x0800, 0x0800 )	/* 6000-67ff of 02.a2 - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x06800, 0x1000, 0x0800 )	/* 6800-6fff of 03.a3 - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx14", 0 )
+	ROM_COPY( "temp",	0x0b000, 0x0000, 0x0800 )	/* 3000-37ff of 01.a1 - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x13000, 0x0800, 0x0800 )	/* 3000-37ff of 02.a2 - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x03800, 0x1000, 0x0800 )	/* 3800-3fff of 03.a3 - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx15", 0 )
+	ROM_COPY( "temp",	0x0f000, 0x0000, 0x0800 )	/* 7000-77ff of 01.a1 - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x17000, 0x0800, 0x0800 )	/* 7000-77ff of 02.a2 - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x07800, 0x1000, 0x0800 )	/* 7800-7fff of 03.a3 - empty, bitplane 3 */
+
+	ROM_REGION( 0x0100, "proms", 0 )
+	ROM_LOAD( "wldwitch_tbp.bin",	0x0000, 0x0100, BAD_DUMP CRC(ed15125b) SHA1(56fc00f2ce4ebe9cee73a45b142c33c00432b66b) )
+
+	ROM_REGION( 0x0400, "proms2", 0 )
+	ROM_LOAD( "82s137.box",	0x0000, 0x0400, CRC(4ae3ecf5) SHA1(e1e540ae13e7ce5ac6391f325160ec997ea6cc2f) )
+ROM_END
+
+
+ROM_START( wldwitchq )
+	ROM_REGION( 0x10000, "maincpu", 0 )	/* Ver 174A alt, box, 1998-09-25 */
+	ROM_LOAD( "wn174a_hn58c256p_box.bin",	0x8000, 0x8000, CRC(1de736a7) SHA1(e714a97999555fe0107390c8c9c2c3c1e822809a) )
+
+	ROM_REGION( 0x18000, "temp", 0 )
+	ROM_LOAD( "03.a3",	0x00000, 0x8000, CRC(ae474414) SHA1(6dee760cee18e125791c17b562ca8aabe1f4593e) )
+	ROM_LOAD( "02.a2",	0x10000, 0x8000, CRC(f6450111) SHA1(8b44c90c62d5026ccfba88b31e1113e01c6bcf85) )
+	ROM_LOAD( "01.a1",	0x08000, 0x8000, CRC(6d644987) SHA1(26243abe051f3266e2d1743ec599d4e8bbb692e4) )
+
+	ROM_REGION( 0x1800, "gfx0", 0 )
+	ROM_FILL(			0x0000, 0x1000, 0 )			/* filling bitplanes */
+	ROM_COPY( "temp",	0x0000, 0x1000, 0x0800 )	/* 0000-07ff of 03.a3 - char rom, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx1", 0 )
+	ROM_COPY( "temp",	0x08800, 0x0000, 0x0800 )	/* 0800-0fff of 01.a1 - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x10800, 0x0800, 0x0800 )	/* 0800-0fff of 02.a2 - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x01000, 0x1000, 0x0800 )	/* 1000-17ff of 03.a3 - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx2", 0 )
+	ROM_COPY( "temp",	0x08000, 0x0000, 0x0800 )	/* 0000-07ff of 01.a1 - regular cards gfx, bitplane 1 */
+	ROM_COPY( "temp",	0x10000, 0x0800, 0x0800 )	/* 0000-07ff of 02.a2 - regular cards gfx, bitplane 2 */
+	ROM_COPY( "temp",	0x00800, 0x1000, 0x0800 )	/* 0800-0fff of 03.a3 - regular cards gfx, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx3", 0 )
+	ROM_COPY( "temp",	0x0c000, 0x0000, 0x0800 )	/* 4000-47ff of 01.a1 - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x14000, 0x0800, 0x0800 )	/* 4000-47ff of 02.a2 - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x04800, 0x1000, 0x0800 )	/* 4800-4fff of 03.a3 - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx4", 0 )
+	ROM_COPY( "temp",	0x09800, 0x0000, 0x0800 )	/* 1800-1fff of 01.a1 - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x11800, 0x0800, 0x0800 )	/* 1800-1fff of 02.a2 - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x02000, 0x1000, 0x0800 )	/* 1800-1fff of 03.a3 - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx5", 0 )
+	ROM_COPY( "temp",	0x0a800, 0x0000, 0x0800 )	/* 2800-2fff of 01.a1 - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x12800, 0x0800, 0x0800 )	/* 2800-2fff of 02.a2 - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x03000, 0x1000, 0x0800 )	/* 3000-37ff of 03.a3 - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx6", 0 )
+	ROM_COPY( "temp",	0x0a000, 0x0000, 0x0800 )	/* 2000-27ff of 01.a1 - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x12000, 0x0800, 0x0800 )	/* 2000-27ff of 02.a2 - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x02800, 0x1000, 0x0800 )	/* 2800-2fff of 03.a3 - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx7", 0 )
+	ROM_COPY( "temp",	0x0e800, 0x0000, 0x0800 )	/* 6800-6fff of 01.a1 - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x16800, 0x0800, 0x0800 )	/* 6800-6fff of 02.a2 - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x07000, 0x1000, 0x0800 )	/* 7000-77ff of 03.a3 - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx8", 0 )
+	ROM_COPY( "temp",	0x0b800, 0x0000, 0x0800 )	/* 3800-3fff of 01.a1 - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x13800, 0x0800, 0x0800 )	/* 3800-3fff of 02.a2 - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x04000, 0x1000, 0x0800 )	/* 3800-3fff of 03.a3 - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx9", 0 )
+	ROM_COPY( "temp",	0x0c800, 0x0000, 0x0800 )	/* 4800-4fff of 01.a1 - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x14800, 0x0800, 0x0800 )	/* 4800-4fff of 02.a2 - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x05000, 0x1000, 0x0800 )	/* 4000-47ff of 03.a3 - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx10", 0 )
+	ROM_COPY( "temp",	0x09000, 0x0000, 0x0800 )	/* 1000-17ff of 01.a1 - extended cards gfx, bitplane 1 */
+	ROM_COPY( "temp",	0x11000, 0x0800, 0x0800 )	/* 1000-17ff of 02.a2 - extended cards gfx, bitplane 2 */
+	ROM_COPY( "temp",	0x01800, 0x1000, 0x0800 )	/* 1800-1fff of 03.a3 - extended cards gfx, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx11", 0 )
+	ROM_COPY( "temp",	0x0d000, 0x0000, 0x0800 )	/* 5000-57ff of 01.a1 - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x15000, 0x0800, 0x0800 )	/* 5000-57ff of 02.a2 - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x05800, 0x1000, 0x0800 )	/* 5800-5fff of 03.a3 - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx12", 0 )
+	ROM_COPY( "temp",	0x0d800, 0x0000, 0x0800 )	/* 5800-5fff of 01.a1 - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x15800, 0x0800, 0x0800 )	/* 5800-5fff of 02.a2 - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x06000, 0x1000, 0x0800 )	/* 6000-67ff of 03.a3 - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx13", 0 )
+	ROM_COPY( "temp",	0x0e000, 0x0000, 0x0800 )	/* 6000-67ff of 01.a1 - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x16000, 0x0800, 0x0800 )	/* 6000-67ff of 02.a2 - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x06800, 0x1000, 0x0800 )	/* 6800-6fff of 03.a3 - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx14", 0 )
+	ROM_COPY( "temp",	0x0b000, 0x0000, 0x0800 )	/* 3000-37ff of 01.a1 - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x13000, 0x0800, 0x0800 )	/* 3000-37ff of 02.a2 - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x03800, 0x1000, 0x0800 )	/* 3800-3fff of 03.a3 - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx15", 0 )
+	ROM_COPY( "temp",	0x0f000, 0x0000, 0x0800 )	/* 7000-77ff of 01.a1 - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x17000, 0x0800, 0x0800 )	/* 7000-77ff of 02.a2 - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x07800, 0x1000, 0x0800 )	/* 7800-7fff of 03.a3 - empty, bitplane 3 */
+
+	ROM_REGION( 0x0100, "proms", 0 )
+	ROM_LOAD( "wldwitch_tbp.bin",	0x0000, 0x0100, BAD_DUMP CRC(ed15125b) SHA1(56fc00f2ce4ebe9cee73a45b142c33c00432b66b) )
+
+	ROM_REGION( 0x0400, "proms2", 0 )
+	ROM_LOAD( "82s137.box",	0x0000, 0x0400, CRC(4ae3ecf5) SHA1(e1e540ae13e7ce5ac6391f325160ec997ea6cc2f) )
+ROM_END
+
+
+ROM_START( wldwitchr )
+	ROM_REGION( 0x10000, "maincpu", 0 )	/* Ver 175A-E, 1999-01-11 */
+	ROM_LOAD( "ww175a-e.bin",	0x8000, 0x8000, CRC(6fcb5732) SHA1(a5a62f35b775230c62ca55ed4497e8cb9e17c17d) )
+
+	ROM_REGION( 0x18000, "temp", 0 )
+	ROM_LOAD( "03.a3",	0x00000, 0x8000, CRC(ae474414) SHA1(6dee760cee18e125791c17b562ca8aabe1f4593e) )
+	ROM_LOAD( "02.a2",	0x10000, 0x8000, CRC(f6450111) SHA1(8b44c90c62d5026ccfba88b31e1113e01c6bcf85) )
+	ROM_LOAD( "01.a1",	0x08000, 0x8000, CRC(6d644987) SHA1(26243abe051f3266e2d1743ec599d4e8bbb692e4) )
+
+	ROM_REGION( 0x1800, "gfx0", 0 )
+	ROM_FILL(			0x0000, 0x1000, 0 )			/* filling bitplanes */
+	ROM_COPY( "temp",	0x0000, 0x1000, 0x0800 )	/* 0000-07ff of 03.a3 - char rom, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx1", 0 )
+	ROM_COPY( "temp",	0x08800, 0x0000, 0x0800 )	/* 0800-0fff of 01.a1 - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x10800, 0x0800, 0x0800 )	/* 0800-0fff of 02.a2 - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x01000, 0x1000, 0x0800 )	/* 1000-17ff of 03.a3 - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx2", 0 )
+	ROM_COPY( "temp",	0x08000, 0x0000, 0x0800 )	/* 0000-07ff of 01.a1 - regular cards gfx, bitplane 1 */
+	ROM_COPY( "temp",	0x10000, 0x0800, 0x0800 )	/* 0000-07ff of 02.a2 - regular cards gfx, bitplane 2 */
+	ROM_COPY( "temp",	0x00800, 0x1000, 0x0800 )	/* 0800-0fff of 03.a3 - regular cards gfx, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx3", 0 )
+	ROM_COPY( "temp",	0x0c000, 0x0000, 0x0800 )	/* 4000-47ff of 01.a1 - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x14000, 0x0800, 0x0800 )	/* 4000-47ff of 02.a2 - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x04800, 0x1000, 0x0800 )	/* 4800-4fff of 03.a3 - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx4", 0 )
+	ROM_COPY( "temp",	0x09800, 0x0000, 0x0800 )	/* 1800-1fff of 01.a1 - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x11800, 0x0800, 0x0800 )	/* 1800-1fff of 02.a2 - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x02000, 0x1000, 0x0800 )	/* 1800-1fff of 03.a3 - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx5", 0 )
+	ROM_COPY( "temp",	0x0a800, 0x0000, 0x0800 )	/* 2800-2fff of 01.a1 - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x12800, 0x0800, 0x0800 )	/* 2800-2fff of 02.a2 - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x03000, 0x1000, 0x0800 )	/* 3000-37ff of 03.a3 - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx6", 0 )
+	ROM_COPY( "temp",	0x0a000, 0x0000, 0x0800 )	/* 2000-27ff of 01.a1 - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x12000, 0x0800, 0x0800 )	/* 2000-27ff of 02.a2 - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x02800, 0x1000, 0x0800 )	/* 2800-2fff of 03.a3 - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx7", 0 )
+	ROM_COPY( "temp",	0x0e800, 0x0000, 0x0800 )	/* 6800-6fff of 01.a1 - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x16800, 0x0800, 0x0800 )	/* 6800-6fff of 02.a2 - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x07000, 0x1000, 0x0800 )	/* 7000-77ff of 03.a3 - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx8", 0 )
+	ROM_COPY( "temp",	0x0b800, 0x0000, 0x0800 )	/* 3800-3fff of 01.a1 - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x13800, 0x0800, 0x0800 )	/* 3800-3fff of 02.a2 - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x04000, 0x1000, 0x0800 )	/* 3800-3fff of 03.a3 - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx9", 0 )
+	ROM_COPY( "temp",	0x0c800, 0x0000, 0x0800 )	/* 4800-4fff of 01.a1 - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x14800, 0x0800, 0x0800 )	/* 4800-4fff of 02.a2 - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x05000, 0x1000, 0x0800 )	/* 4000-47ff of 03.a3 - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx10", 0 )
+	ROM_COPY( "temp",	0x09000, 0x0000, 0x0800 )	/* 1000-17ff of 01.a1 - extended cards gfx, bitplane 1 */
+	ROM_COPY( "temp",	0x11000, 0x0800, 0x0800 )	/* 1000-17ff of 02.a2 - extended cards gfx, bitplane 2 */
+	ROM_COPY( "temp",	0x01800, 0x1000, 0x0800 )	/* 1800-1fff of 03.a3 - extended cards gfx, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx11", 0 )
+	ROM_COPY( "temp",	0x0d000, 0x0000, 0x0800 )	/* 5000-57ff of 01.a1 - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x15000, 0x0800, 0x0800 )	/* 5000-57ff of 02.a2 - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x05800, 0x1000, 0x0800 )	/* 5800-5fff of 03.a3 - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx12", 0 )
+	ROM_COPY( "temp",	0x0d800, 0x0000, 0x0800 )	/* 5800-5fff of 01.a1 - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x15800, 0x0800, 0x0800 )	/* 5800-5fff of 02.a2 - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x06000, 0x1000, 0x0800 )	/* 6000-67ff of 03.a3 - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx13", 0 )
+	ROM_COPY( "temp",	0x0e000, 0x0000, 0x0800 )	/* 6000-67ff of 01.a1 - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x16000, 0x0800, 0x0800 )	/* 6000-67ff of 02.a2 - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x06800, 0x1000, 0x0800 )	/* 6800-6fff of 03.a3 - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx14", 0 )
+	ROM_COPY( "temp",	0x0b000, 0x0000, 0x0800 )	/* 3000-37ff of 01.a1 - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x13000, 0x0800, 0x0800 )	/* 3000-37ff of 02.a2 - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x03800, 0x1000, 0x0800 )	/* 3800-3fff of 03.a3 - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx15", 0 )
+	ROM_COPY( "temp",	0x0f000, 0x0000, 0x0800 )	/* 7000-77ff of 01.a1 - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x17000, 0x0800, 0x0800 )	/* 7000-77ff of 02.a2 - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x07800, 0x1000, 0x0800 )	/* 7800-7fff of 03.a3 - empty, bitplane 3 */
+
+	ROM_REGION( 0x0100, "proms", 0 )
+	ROM_LOAD( "wldwitch_tbp.bin",	0x0000, 0x0100, BAD_DUMP CRC(ed15125b) SHA1(56fc00f2ce4ebe9cee73a45b142c33c00432b66b) )
+
+	ROM_REGION( 0x0400, "proms2", 0 )
+	ROM_LOAD( "82s137.box",	0x0000, 0x0400, CRC(4ae3ecf5) SHA1(e1e540ae13e7ce5ac6391f325160ec997ea6cc2f) )
+ROM_END
+
+
+ROM_START( wldwitchs )
+	ROM_REGION( 0x10000, "maincpu", 0 )	/* Ver 176A, 1999-??-?? */
+	ROM_LOAD( "ww176a.bin",	0x8000, 0x8000, CRC(509d0355) SHA1(62922423f868563acaa3eb637f8edb2755a5fcf6) )
+
+	ROM_REGION( 0x18000, "temp", 0 )
+	ROM_LOAD( "03.a3",	0x00000, 0x8000, CRC(ae474414) SHA1(6dee760cee18e125791c17b562ca8aabe1f4593e) )
+	ROM_LOAD( "02.a2",	0x10000, 0x8000, CRC(f6450111) SHA1(8b44c90c62d5026ccfba88b31e1113e01c6bcf85) )
+	ROM_LOAD( "01.a1",	0x08000, 0x8000, CRC(6d644987) SHA1(26243abe051f3266e2d1743ec599d4e8bbb692e4) )
+
+	ROM_REGION( 0x1800, "gfx0", 0 )
+	ROM_FILL(			0x0000, 0x1000, 0 )			/* filling bitplanes */
+	ROM_COPY( "temp",	0x0000, 0x1000, 0x0800 )	/* 0000-07ff of 03.a3 - char rom, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx1", 0 )
+	ROM_COPY( "temp",	0x08800, 0x0000, 0x0800 )	/* 0800-0fff of 01.a1 - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x10800, 0x0800, 0x0800 )	/* 0800-0fff of 02.a2 - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x01000, 0x1000, 0x0800 )	/* 1000-17ff of 03.a3 - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx2", 0 )
+	ROM_COPY( "temp",	0x08000, 0x0000, 0x0800 )	/* 0000-07ff of 01.a1 - regular cards gfx, bitplane 1 */
+	ROM_COPY( "temp",	0x10000, 0x0800, 0x0800 )	/* 0000-07ff of 02.a2 - regular cards gfx, bitplane 2 */
+	ROM_COPY( "temp",	0x00800, 0x1000, 0x0800 )	/* 0800-0fff of 03.a3 - regular cards gfx, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx3", 0 )
+	ROM_COPY( "temp",	0x0c000, 0x0000, 0x0800 )	/* 4000-47ff of 01.a1 - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x14000, 0x0800, 0x0800 )	/* 4000-47ff of 02.a2 - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x04800, 0x1000, 0x0800 )	/* 4800-4fff of 03.a3 - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx4", 0 )
+	ROM_COPY( "temp",	0x09800, 0x0000, 0x0800 )	/* 1800-1fff of 01.a1 - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x11800, 0x0800, 0x0800 )	/* 1800-1fff of 02.a2 - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x02000, 0x1000, 0x0800 )	/* 1800-1fff of 03.a3 - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx5", 0 )
+	ROM_COPY( "temp",	0x0a800, 0x0000, 0x0800 )	/* 2800-2fff of 01.a1 - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x12800, 0x0800, 0x0800 )	/* 2800-2fff of 02.a2 - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x03000, 0x1000, 0x0800 )	/* 3000-37ff of 03.a3 - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx6", 0 )
+	ROM_COPY( "temp",	0x0a000, 0x0000, 0x0800 )	/* 2000-27ff of 01.a1 - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x12000, 0x0800, 0x0800 )	/* 2000-27ff of 02.a2 - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x02800, 0x1000, 0x0800 )	/* 2800-2fff of 03.a3 - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx7", 0 )
+	ROM_COPY( "temp",	0x0e800, 0x0000, 0x0800 )	/* 6800-6fff of 01.a1 - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x16800, 0x0800, 0x0800 )	/* 6800-6fff of 02.a2 - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x07000, 0x1000, 0x0800 )	/* 7000-77ff of 03.a3 - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx8", 0 )
+	ROM_COPY( "temp",	0x0b800, 0x0000, 0x0800 )	/* 3800-3fff of 01.a1 - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x13800, 0x0800, 0x0800 )	/* 3800-3fff of 02.a2 - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x04000, 0x1000, 0x0800 )	/* 3800-3fff of 03.a3 - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx9", 0 )
+	ROM_COPY( "temp",	0x0c800, 0x0000, 0x0800 )	/* 4800-4fff of 01.a1 - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x14800, 0x0800, 0x0800 )	/* 4800-4fff of 02.a2 - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x05000, 0x1000, 0x0800 )	/* 4000-47ff of 03.a3 - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx10", 0 )
+	ROM_COPY( "temp",	0x09000, 0x0000, 0x0800 )	/* 1000-17ff of 01.a1 - extended cards gfx, bitplane 1 */
+	ROM_COPY( "temp",	0x11000, 0x0800, 0x0800 )	/* 1000-17ff of 02.a2 - extended cards gfx, bitplane 2 */
+	ROM_COPY( "temp",	0x01800, 0x1000, 0x0800 )	/* 1800-1fff of 03.a3 - extended cards gfx, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx11", 0 )
+	ROM_COPY( "temp",	0x0d000, 0x0000, 0x0800 )	/* 5000-57ff of 01.a1 - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x15000, 0x0800, 0x0800 )	/* 5000-57ff of 02.a2 - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x05800, 0x1000, 0x0800 )	/* 5800-5fff of 03.a3 - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx12", 0 )
+	ROM_COPY( "temp",	0x0d800, 0x0000, 0x0800 )	/* 5800-5fff of 01.a1 - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x15800, 0x0800, 0x0800 )	/* 5800-5fff of 02.a2 - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x06000, 0x1000, 0x0800 )	/* 6000-67ff of 03.a3 - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx13", 0 )
+	ROM_COPY( "temp",	0x0e000, 0x0000, 0x0800 )	/* 6000-67ff of 01.a1 - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x16000, 0x0800, 0x0800 )	/* 6000-67ff of 02.a2 - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x06800, 0x1000, 0x0800 )	/* 6800-6fff of 03.a3 - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx14", 0 )
+	ROM_COPY( "temp",	0x0b000, 0x0000, 0x0800 )	/* 3000-37ff of 01.a1 - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x13000, 0x0800, 0x0800 )	/* 3000-37ff of 02.a2 - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x03800, 0x1000, 0x0800 )	/* 3800-3fff of 03.a3 - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx15", 0 )
+	ROM_COPY( "temp",	0x0f000, 0x0000, 0x0800 )	/* 7000-77ff of 01.a1 - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x17000, 0x0800, 0x0800 )	/* 7000-77ff of 02.a2 - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x07800, 0x1000, 0x0800 )	/* 7800-7fff of 03.a3 - empty, bitplane 3 */
+
+	ROM_REGION( 0x0100, "proms", 0 )
+	ROM_LOAD( "wldwitch_tbp.bin",	0x0000, 0x0100, BAD_DUMP CRC(ed15125b) SHA1(56fc00f2ce4ebe9cee73a45b142c33c00432b66b) )
+
+	ROM_REGION( 0x0400, "proms2", 0 )
+	ROM_LOAD( "82s137.box",	0x0000, 0x0400, CRC(4ae3ecf5) SHA1(e1e540ae13e7ce5ac6391f325160ec997ea6cc2f) )
+ROM_END
+
+
+ROM_START( wldwitcht )
+	ROM_REGION( 0x10000, "maincpu", 0 )	/* Ver 177A, 1999-??-?? */
+	ROM_LOAD( "ww177a.bin",	0x8000, 0x8000, CRC(c6761e20) SHA1(2bda4218c46c9fbc5719f7d3ade225faeec43d33) )
+
+	ROM_REGION( 0x18000, "temp", 0 )
+	ROM_LOAD( "03.a3",	0x00000, 0x8000, CRC(ae474414) SHA1(6dee760cee18e125791c17b562ca8aabe1f4593e) )
+	ROM_LOAD( "02.a2",	0x10000, 0x8000, CRC(f6450111) SHA1(8b44c90c62d5026ccfba88b31e1113e01c6bcf85) )
+	ROM_LOAD( "01.a1",	0x08000, 0x8000, CRC(6d644987) SHA1(26243abe051f3266e2d1743ec599d4e8bbb692e4) )
+
+	ROM_REGION( 0x1800, "gfx0", 0 )
+	ROM_FILL(			0x0000, 0x1000, 0 )			/* filling bitplanes */
+	ROM_COPY( "temp",	0x0000, 0x1000, 0x0800 )	/* 0000-07ff of 03.a3 - char rom, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx1", 0 )
+	ROM_COPY( "temp",	0x08800, 0x0000, 0x0800 )	/* 0800-0fff of 01.a1 - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x10800, 0x0800, 0x0800 )	/* 0800-0fff of 02.a2 - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x01000, 0x1000, 0x0800 )	/* 1000-17ff of 03.a3 - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx2", 0 )
+	ROM_COPY( "temp",	0x08000, 0x0000, 0x0800 )	/* 0000-07ff of 01.a1 - regular cards gfx, bitplane 1 */
+	ROM_COPY( "temp",	0x10000, 0x0800, 0x0800 )	/* 0000-07ff of 02.a2 - regular cards gfx, bitplane 2 */
+	ROM_COPY( "temp",	0x00800, 0x1000, 0x0800 )	/* 0800-0fff of 03.a3 - regular cards gfx, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx3", 0 )
+	ROM_COPY( "temp",	0x0c000, 0x0000, 0x0800 )	/* 4000-47ff of 01.a1 - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x14000, 0x0800, 0x0800 )	/* 4000-47ff of 02.a2 - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x04800, 0x1000, 0x0800 )	/* 4800-4fff of 03.a3 - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx4", 0 )
+	ROM_COPY( "temp",	0x09800, 0x0000, 0x0800 )	/* 1800-1fff of 01.a1 - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x11800, 0x0800, 0x0800 )	/* 1800-1fff of 02.a2 - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x02000, 0x1000, 0x0800 )	/* 1800-1fff of 03.a3 - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx5", 0 )
+	ROM_COPY( "temp",	0x0a800, 0x0000, 0x0800 )	/* 2800-2fff of 01.a1 - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x12800, 0x0800, 0x0800 )	/* 2800-2fff of 02.a2 - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x03000, 0x1000, 0x0800 )	/* 3000-37ff of 03.a3 - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx6", 0 )
+	ROM_COPY( "temp",	0x0a000, 0x0000, 0x0800 )	/* 2000-27ff of 01.a1 - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x12000, 0x0800, 0x0800 )	/* 2000-27ff of 02.a2 - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x02800, 0x1000, 0x0800 )	/* 2800-2fff of 03.a3 - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx7", 0 )
+	ROM_COPY( "temp",	0x0e800, 0x0000, 0x0800 )	/* 6800-6fff of 01.a1 - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x16800, 0x0800, 0x0800 )	/* 6800-6fff of 02.a2 - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x07000, 0x1000, 0x0800 )	/* 7000-77ff of 03.a3 - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx8", 0 )
+	ROM_COPY( "temp",	0x0b800, 0x0000, 0x0800 )	/* 3800-3fff of 01.a1 - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x13800, 0x0800, 0x0800 )	/* 3800-3fff of 02.a2 - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x04000, 0x1000, 0x0800 )	/* 3800-3fff of 03.a3 - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx9", 0 )
+	ROM_COPY( "temp",	0x0c800, 0x0000, 0x0800 )	/* 4800-4fff of 01.a1 - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x14800, 0x0800, 0x0800 )	/* 4800-4fff of 02.a2 - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x05000, 0x1000, 0x0800 )	/* 4000-47ff of 03.a3 - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx10", 0 )
+	ROM_COPY( "temp",	0x09000, 0x0000, 0x0800 )	/* 1000-17ff of 01.a1 - extended cards gfx, bitplane 1 */
+	ROM_COPY( "temp",	0x11000, 0x0800, 0x0800 )	/* 1000-17ff of 02.a2 - extended cards gfx, bitplane 2 */
+	ROM_COPY( "temp",	0x01800, 0x1000, 0x0800 )	/* 1800-1fff of 03.a3 - extended cards gfx, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx11", 0 )
+	ROM_COPY( "temp",	0x0d000, 0x0000, 0x0800 )	/* 5000-57ff of 01.a1 - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x15000, 0x0800, 0x0800 )	/* 5000-57ff of 02.a2 - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x05800, 0x1000, 0x0800 )	/* 5800-5fff of 03.a3 - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx12", 0 )
+	ROM_COPY( "temp",	0x0d800, 0x0000, 0x0800 )	/* 5800-5fff of 01.a1 - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x15800, 0x0800, 0x0800 )	/* 5800-5fff of 02.a2 - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x06000, 0x1000, 0x0800 )	/* 6000-67ff of 03.a3 - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx13", 0 )
+	ROM_COPY( "temp",	0x0e000, 0x0000, 0x0800 )	/* 6000-67ff of 01.a1 - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x16000, 0x0800, 0x0800 )	/* 6000-67ff of 02.a2 - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x06800, 0x1000, 0x0800 )	/* 6800-6fff of 03.a3 - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx14", 0 )
+	ROM_COPY( "temp",	0x0b000, 0x0000, 0x0800 )	/* 3000-37ff of 01.a1 - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x13000, 0x0800, 0x0800 )	/* 3000-37ff of 02.a2 - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x03800, 0x1000, 0x0800 )	/* 3800-3fff of 03.a3 - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx15", 0 )
+	ROM_COPY( "temp",	0x0f000, 0x0000, 0x0800 )	/* 7000-77ff of 01.a1 - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x17000, 0x0800, 0x0800 )	/* 7000-77ff of 02.a2 - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x07800, 0x1000, 0x0800 )	/* 7800-7fff of 03.a3 - empty, bitplane 3 */
+
+	ROM_REGION( 0x0100, "proms", 0 )
+	ROM_LOAD( "wldwitch_tbp.bin",	0x0000, 0x0100, BAD_DUMP CRC(ed15125b) SHA1(56fc00f2ce4ebe9cee73a45b142c33c00432b66b) )
+
+	ROM_REGION( 0x0400, "proms2", 0 )
+	ROM_LOAD( "82s137.box",	0x0000, 0x0400, CRC(4ae3ecf5) SHA1(e1e540ae13e7ce5ac6391f325160ec997ea6cc2f) )
+ROM_END
+
+
+ROM_START( wldwitchu )
+	ROM_REGION( 0x10000, "maincpu", 0 )	/* Ver 179A, 2000-05-10 */
+	ROM_LOAD( "ww179a.bin",	0x8000, 0x8000, CRC(ffcb48c0) SHA1(829c81b8c057a2fa95b8656d77c93899bae5c892) )
+
+	ROM_REGION( 0x18000, "temp", 0 )
+	ROM_LOAD( "03.a3",	0x00000, 0x8000, CRC(ae474414) SHA1(6dee760cee18e125791c17b562ca8aabe1f4593e) )
+	ROM_LOAD( "02.a2",	0x10000, 0x8000, CRC(f6450111) SHA1(8b44c90c62d5026ccfba88b31e1113e01c6bcf85) )
+	ROM_LOAD( "01.a1",	0x08000, 0x8000, CRC(6d644987) SHA1(26243abe051f3266e2d1743ec599d4e8bbb692e4) )
+
+	ROM_REGION( 0x1800, "gfx0", 0 )
+	ROM_FILL(			0x0000, 0x1000, 0 )			/* filling bitplanes */
+	ROM_COPY( "temp",	0x0000, 0x1000, 0x0800 )	/* 0000-07ff of 03.a3 - char rom, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx1", 0 )
+	ROM_COPY( "temp",	0x08800, 0x0000, 0x0800 )	/* 0800-0fff of 01.a1 - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x10800, 0x0800, 0x0800 )	/* 0800-0fff of 02.a2 - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x01000, 0x1000, 0x0800 )	/* 1000-17ff of 03.a3 - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx2", 0 )
+	ROM_COPY( "temp",	0x08000, 0x0000, 0x0800 )	/* 0000-07ff of 01.a1 - regular cards gfx, bitplane 1 */
+	ROM_COPY( "temp",	0x10000, 0x0800, 0x0800 )	/* 0000-07ff of 02.a2 - regular cards gfx, bitplane 2 */
+	ROM_COPY( "temp",	0x00800, 0x1000, 0x0800 )	/* 0800-0fff of 03.a3 - regular cards gfx, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx3", 0 )
+	ROM_COPY( "temp",	0x0c000, 0x0000, 0x0800 )	/* 4000-47ff of 01.a1 - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x14000, 0x0800, 0x0800 )	/* 4000-47ff of 02.a2 - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x04800, 0x1000, 0x0800 )	/* 4800-4fff of 03.a3 - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx4", 0 )
+	ROM_COPY( "temp",	0x09800, 0x0000, 0x0800 )	/* 1800-1fff of 01.a1 - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x11800, 0x0800, 0x0800 )	/* 1800-1fff of 02.a2 - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x02000, 0x1000, 0x0800 )	/* 1800-1fff of 03.a3 - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx5", 0 )
+	ROM_COPY( "temp",	0x0a800, 0x0000, 0x0800 )	/* 2800-2fff of 01.a1 - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x12800, 0x0800, 0x0800 )	/* 2800-2fff of 02.a2 - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x03000, 0x1000, 0x0800 )	/* 3000-37ff of 03.a3 - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx6", 0 )
+	ROM_COPY( "temp",	0x0a000, 0x0000, 0x0800 )	/* 2000-27ff of 01.a1 - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x12000, 0x0800, 0x0800 )	/* 2000-27ff of 02.a2 - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x02800, 0x1000, 0x0800 )	/* 2800-2fff of 03.a3 - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx7", 0 )
+	ROM_COPY( "temp",	0x0e800, 0x0000, 0x0800 )	/* 6800-6fff of 01.a1 - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x16800, 0x0800, 0x0800 )	/* 6800-6fff of 02.a2 - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x07000, 0x1000, 0x0800 )	/* 7000-77ff of 03.a3 - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx8", 0 )
+	ROM_COPY( "temp",	0x0b800, 0x0000, 0x0800 )	/* 3800-3fff of 01.a1 - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x13800, 0x0800, 0x0800 )	/* 3800-3fff of 02.a2 - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x04000, 0x1000, 0x0800 )	/* 3800-3fff of 03.a3 - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx9", 0 )
+	ROM_COPY( "temp",	0x0c800, 0x0000, 0x0800 )	/* 4800-4fff of 01.a1 - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x14800, 0x0800, 0x0800 )	/* 4800-4fff of 02.a2 - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x05000, 0x1000, 0x0800 )	/* 4000-47ff of 03.a3 - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx10", 0 )
+	ROM_COPY( "temp",	0x09000, 0x0000, 0x0800 )	/* 1000-17ff of 01.a1 - extended cards gfx, bitplane 1 */
+	ROM_COPY( "temp",	0x11000, 0x0800, 0x0800 )	/* 1000-17ff of 02.a2 - extended cards gfx, bitplane 2 */
+	ROM_COPY( "temp",	0x01800, 0x1000, 0x0800 )	/* 1800-1fff of 03.a3 - extended cards gfx, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx11", 0 )
+	ROM_COPY( "temp",	0x0d000, 0x0000, 0x0800 )	/* 5000-57ff of 01.a1 - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x15000, 0x0800, 0x0800 )	/* 5000-57ff of 02.a2 - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x05800, 0x1000, 0x0800 )	/* 5800-5fff of 03.a3 - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx12", 0 )
+	ROM_COPY( "temp",	0x0d800, 0x0000, 0x0800 )	/* 5800-5fff of 01.a1 - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x15800, 0x0800, 0x0800 )	/* 5800-5fff of 02.a2 - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x06000, 0x1000, 0x0800 )	/* 6000-67ff of 03.a3 - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx13", 0 )
+	ROM_COPY( "temp",	0x0e000, 0x0000, 0x0800 )	/* 6000-67ff of 01.a1 - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x16000, 0x0800, 0x0800 )	/* 6000-67ff of 02.a2 - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x06800, 0x1000, 0x0800 )	/* 6800-6fff of 03.a3 - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx14", 0 )
+	ROM_COPY( "temp",	0x0b000, 0x0000, 0x0800 )	/* 3000-37ff of 01.a1 - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x13000, 0x0800, 0x0800 )	/* 3000-37ff of 02.a2 - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x03800, 0x1000, 0x0800 )	/* 3800-3fff of 03.a3 - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx15", 0 )
+	ROM_COPY( "temp",	0x0f000, 0x0000, 0x0800 )	/* 7000-77ff of 01.a1 - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x17000, 0x0800, 0x0800 )	/* 7000-77ff of 02.a2 - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x07800, 0x1000, 0x0800 )	/* 7800-7fff of 03.a3 - empty, bitplane 3 */
+
+	ROM_REGION( 0x0100, "proms", 0 )
+	ROM_LOAD( "wldwitch_tbp.bin",	0x0000, 0x0100, BAD_DUMP CRC(ed15125b) SHA1(56fc00f2ce4ebe9cee73a45b142c33c00432b66b) )
+
+	ROM_REGION( 0x0400, "proms2", 0 )
+	ROM_LOAD( "82s137.box",	0x0000, 0x0400, CRC(4ae3ecf5) SHA1(e1e540ae13e7ce5ac6391f325160ec997ea6cc2f) )
+ROM_END
+
+
+ROM_START( wldwitchv )
+	ROM_REGION( 0x10000, "maincpu", 0 )	/* Ver 183A, 2001-06-13 */
+	ROM_LOAD( "ww183a.bin",	0x8000, 0x8000, CRC(2929b9b2) SHA1(3afe58b5619e818911ee142edce6a5a1468a1f97) )
+
+	ROM_REGION( 0x18000, "temp", 0 )
+	ROM_LOAD( "03.a3",	0x00000, 0x8000, CRC(ae474414) SHA1(6dee760cee18e125791c17b562ca8aabe1f4593e) )
+	ROM_LOAD( "02.a2",	0x10000, 0x8000, CRC(f6450111) SHA1(8b44c90c62d5026ccfba88b31e1113e01c6bcf85) )
+	ROM_LOAD( "01.a1",	0x08000, 0x8000, CRC(6d644987) SHA1(26243abe051f3266e2d1743ec599d4e8bbb692e4) )
+
+	ROM_REGION( 0x1800, "gfx0", 0 )
+	ROM_FILL(			0x0000, 0x1000, 0 )			/* filling bitplanes */
+	ROM_COPY( "temp",	0x0000, 0x1000, 0x0800 )	/* 0000-07ff of 03.a3 - char rom, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx1", 0 )
+	ROM_COPY( "temp",	0x08800, 0x0000, 0x0800 )	/* 0800-0fff of 01.a1 - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x10800, 0x0800, 0x0800 )	/* 0800-0fff of 02.a2 - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x01000, 0x1000, 0x0800 )	/* 1000-17ff of 03.a3 - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx2", 0 )
+	ROM_COPY( "temp",	0x08000, 0x0000, 0x0800 )	/* 0000-07ff of 01.a1 - regular cards gfx, bitplane 1 */
+	ROM_COPY( "temp",	0x10000, 0x0800, 0x0800 )	/* 0000-07ff of 02.a2 - regular cards gfx, bitplane 2 */
+	ROM_COPY( "temp",	0x00800, 0x1000, 0x0800 )	/* 0800-0fff of 03.a3 - regular cards gfx, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx3", 0 )
+	ROM_COPY( "temp",	0x0c000, 0x0000, 0x0800 )	/* 4000-47ff of 01.a1 - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x14000, 0x0800, 0x0800 )	/* 4000-47ff of 02.a2 - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x04800, 0x1000, 0x0800 )	/* 4800-4fff of 03.a3 - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx4", 0 )
+	ROM_COPY( "temp",	0x09800, 0x0000, 0x0800 )	/* 1800-1fff of 01.a1 - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x11800, 0x0800, 0x0800 )	/* 1800-1fff of 02.a2 - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x02000, 0x1000, 0x0800 )	/* 1800-1fff of 03.a3 - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx5", 0 )
+	ROM_COPY( "temp",	0x0a800, 0x0000, 0x0800 )	/* 2800-2fff of 01.a1 - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x12800, 0x0800, 0x0800 )	/* 2800-2fff of 02.a2 - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x03000, 0x1000, 0x0800 )	/* 3000-37ff of 03.a3 - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx6", 0 )
+	ROM_COPY( "temp",	0x0a000, 0x0000, 0x0800 )	/* 2000-27ff of 01.a1 - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x12000, 0x0800, 0x0800 )	/* 2000-27ff of 02.a2 - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x02800, 0x1000, 0x0800 )	/* 2800-2fff of 03.a3 - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx7", 0 )
+	ROM_COPY( "temp",	0x0e800, 0x0000, 0x0800 )	/* 6800-6fff of 01.a1 - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x16800, 0x0800, 0x0800 )	/* 6800-6fff of 02.a2 - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x07000, 0x1000, 0x0800 )	/* 7000-77ff of 03.a3 - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx8", 0 )
+	ROM_COPY( "temp",	0x0b800, 0x0000, 0x0800 )	/* 3800-3fff of 01.a1 - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x13800, 0x0800, 0x0800 )	/* 3800-3fff of 02.a2 - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x04000, 0x1000, 0x0800 )	/* 3800-3fff of 03.a3 - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx9", 0 )
+	ROM_COPY( "temp",	0x0c800, 0x0000, 0x0800 )	/* 4800-4fff of 01.a1 - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x14800, 0x0800, 0x0800 )	/* 4800-4fff of 02.a2 - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x05000, 0x1000, 0x0800 )	/* 4000-47ff of 03.a3 - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx10", 0 )
+	ROM_COPY( "temp",	0x09000, 0x0000, 0x0800 )	/* 1000-17ff of 01.a1 - extended cards gfx, bitplane 1 */
+	ROM_COPY( "temp",	0x11000, 0x0800, 0x0800 )	/* 1000-17ff of 02.a2 - extended cards gfx, bitplane 2 */
+	ROM_COPY( "temp",	0x01800, 0x1000, 0x0800 )	/* 1800-1fff of 03.a3 - extended cards gfx, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx11", 0 )
+	ROM_COPY( "temp",	0x0d000, 0x0000, 0x0800 )	/* 5000-57ff of 01.a1 - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x15000, 0x0800, 0x0800 )	/* 5000-57ff of 02.a2 - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x05800, 0x1000, 0x0800 )	/* 5800-5fff of 03.a3 - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx12", 0 )
+	ROM_COPY( "temp",	0x0d800, 0x0000, 0x0800 )	/* 5800-5fff of 01.a1 - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x15800, 0x0800, 0x0800 )	/* 5800-5fff of 02.a2 - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x06000, 0x1000, 0x0800 )	/* 6000-67ff of 03.a3 - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx13", 0 )
+	ROM_COPY( "temp",	0x0e000, 0x0000, 0x0800 )	/* 6000-67ff of 01.a1 - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x16000, 0x0800, 0x0800 )	/* 6000-67ff of 02.a2 - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x06800, 0x1000, 0x0800 )	/* 6800-6fff of 03.a3 - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx14", 0 )
+	ROM_COPY( "temp",	0x0b000, 0x0000, 0x0800 )	/* 3000-37ff of 01.a1 - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x13000, 0x0800, 0x0800 )	/* 3000-37ff of 02.a2 - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x03800, 0x1000, 0x0800 )	/* 3800-3fff of 03.a3 - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx15", 0 )
+	ROM_COPY( "temp",	0x0f000, 0x0000, 0x0800 )	/* 7000-77ff of 01.a1 - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x17000, 0x0800, 0x0800 )	/* 7000-77ff of 02.a2 - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x07800, 0x1000, 0x0800 )	/* 7800-7fff of 03.a3 - empty, bitplane 3 */
+
+	ROM_REGION( 0x0100, "proms", 0 )
+	ROM_LOAD( "wldwitch_tbp.bin",	0x0000, 0x0100, BAD_DUMP CRC(ed15125b) SHA1(56fc00f2ce4ebe9cee73a45b142c33c00432b66b) )
+
+	ROM_REGION( 0x0400, "proms2", 0 )
+	ROM_LOAD( "82s137.box",	0x0000, 0x0400, CRC(4ae3ecf5) SHA1(e1e540ae13e7ce5ac6391f325160ec997ea6cc2f) )
+ROM_END
+
+
+/************************************************
+
+  Witch Up & Down
+  (1988, Video Klein)
+
+  16 gfx banks!!!.
+  an insane work :)
+
+************************************************/
+
+ROM_START( wupndown )	/* Witch Up & Down (Export, 6T/12T ver 1.02) */
+	ROM_REGION( 0x10000, "maincpu", 0 )
+	ROM_LOAD( "updown_19981024.bin",	0x8000, 0x8000, CRC(cea0dcbd) SHA1(732ec0c60529f4a4a6c3d7a9bfcab741f3cb4787) )
+
+	ROM_REGION( 0x18000, "temp", 0 )
+	ROM_LOAD( "updown1.bin",	0x00000, 0x8000, CRC(c37aad3e) SHA1(1c957838a0d50bb8a5808a58c87d22dfc13c645d) )
+	ROM_LOAD( "updown2.bin",	0x08000, 0x8000, CRC(47cdd068) SHA1(fe641c66915153ae6e8e5492c225157cbd02bd4c) )
+	ROM_LOAD( "updown3.bin",	0x10000, 0x8000, CRC(905c3224) SHA1(6356f2bd8a1f8952b186dc6f9ed1705d1e918a64) )
+
+	ROM_REGION( 0x1800, "gfx0", 0 )
+	ROM_FILL(			0x0000, 0x1000, 0 )			/* filling bitplanes */
+	ROM_COPY( "temp",	0x0000, 0x1000, 0x0800 )	/* 0000-07ff of updown1.bin - char rom, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx1", 0 )
+	ROM_COPY( "temp",	0x08800, 0x0000, 0x0800 )	/* 0800-0fff of updown2.bin - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x10800, 0x0800, 0x0800 )	/* 0800-0fff of updown3.bin - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x01000, 0x1000, 0x0800 )	/* 1000-17ff of updown1.bin - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx2", 0 )
+	ROM_COPY( "temp",	0x08000, 0x0000, 0x0800 )	/* 0000-07ff of updown2.bin - regular cards gfx, bitplane 1 */
+	ROM_COPY( "temp",	0x10000, 0x0800, 0x0800 )	/* 0000-07ff of updown3.bin - regular cards gfx, bitplane 2 */
+	ROM_COPY( "temp",	0x00800, 0x1000, 0x0800 )	/* 0800-0fff of updown1.bin - regular cards gfx, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx3", 0 )
+	ROM_COPY( "temp",	0x0c000, 0x0000, 0x0800 )	/* 4000-47ff of updown2.bin - upper-left box tiles, bitplane 1 */
+	ROM_COPY( "temp",	0x14000, 0x0800, 0x0800 )	/* 4000-47ff of updown3.bin - upper-left box tiles, bitplane 2 */
+	ROM_COPY( "temp",	0x04800, 0x1000, 0x0800 )	/* 4800-4fff of updown1.bin - upper-left box tiles, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx4", 0 )
+	ROM_COPY( "temp",	0x09800, 0x0000, 0x0800 )	/* 1800-1fff of updown2.bin - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x11800, 0x0800, 0x0800 )	/* 1800-1fff of updown3.bin - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x02000, 0x1000, 0x0800 )	/* 1800-1fff of updown1.bin - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx5", 0 )
+	ROM_COPY( "temp",	0x0a800, 0x0000, 0x0800 )	/* 2800-2fff of updown2.bin - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x12800, 0x0800, 0x0800 )	/* 2800-2fff of updown3.bin - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x03000, 0x1000, 0x0800 )	/* 3000-37ff of updown1.bin - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx6", 0 )
+	ROM_COPY( "temp",	0x0a000, 0x0000, 0x0800 )	/* 2000-27ff of updown2.bin - giant 'Video Klein' logo tiles, bitplane 1 */
+	ROM_COPY( "temp",	0x12000, 0x0800, 0x0800 )	/* 2000-27ff of updown3.bin - giant 'Video Klein' logo tiles, bitplane 2 */
+	ROM_COPY( "temp",	0x02800, 0x1000, 0x0800 )	/* 2800-2fff of updown1.bin - giant 'Video Klein' logo tiles, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx7", 0 )
+	ROM_COPY( "temp",	0x0e800, 0x0000, 0x0800 )	/* 6800-6fff of updown2.bin - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x16800, 0x0800, 0x0800 )	/* 6800-6fff of updown3.bin - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x07000, 0x1000, 0x0800 )	/* 7000-77ff of updown1.bin - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx8", 0 )
+	ROM_COPY( "temp",	0x0b800, 0x0000, 0x0800 )	/* 3800-3fff of updown2.bin - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x13800, 0x0800, 0x0800 )	/* 3800-3fff of updown3.bin - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x04000, 0x1000, 0x0800 )	/* 3800-3fff of updown1.bin - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx9", 0 )
+	ROM_COPY( "temp",	0x0c800, 0x0000, 0x0800 )	/* 4800-4fff of updown2.bin - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x14800, 0x0800, 0x0800 )	/* 4800-4fff of updown3.bin - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x05000, 0x1000, 0x0800 )	/* 4000-47ff of updown1.bin - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx10", 0 )
+	ROM_COPY( "temp",	0x09000, 0x0000, 0x0800 )	/* 1000-17ff of updown2.bin - extended cards gfx, bitplane 1 */
+	ROM_COPY( "temp",	0x11000, 0x0800, 0x0800 )	/* 1000-17ff of updown3.bin - extended cards gfx, bitplane 2 */
+	ROM_COPY( "temp",	0x01800, 0x1000, 0x0800 )	/* 1800-1fff of updown1.bin - extended cards gfx, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx11", 0 )
+	ROM_COPY( "temp",	0x0d000, 0x0000, 0x0800 )	/* 5000-57ff of updown2.bin - 'Up & Down' logo tiles, bitplane 1 */
+	ROM_COPY( "temp",	0x15000, 0x0800, 0x0800 )	/* 5000-57ff of updown3.bin - 'Up & Down' logo tiles, bitplane 2 */
+	ROM_COPY( "temp",	0x05800, 0x1000, 0x0800 )	/* 5800-5fff of updown1.bin - 'Up & Down' logo tiles, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx12", 0 )
+	ROM_COPY( "temp",	0x0d800, 0x0000, 0x0800 )	/* 5800-5fff of updown2.bin - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x15800, 0x0800, 0x0800 )	/* 5800-5fff of updown3.bin - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x06000, 0x1000, 0x0800 )	/* 6000-67ff of updown1.bin - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx13", 0 )
+	ROM_COPY( "temp",	0x0e000, 0x0000, 0x0800 )	/* 6000-67ff of updown2.bin - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x16000, 0x0800, 0x0800 )	/* 6000-67ff of updown3.bin - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x06800, 0x1000, 0x0800 )	/* 6800-6fff of updown1.bin - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx14", 0 )
+	ROM_COPY( "temp",	0x0b000, 0x0000, 0x0800 )	/* 3000-37ff of updown2.bin - D-UP ladder tiles, bitplane 1 */
+	ROM_COPY( "temp",	0x13000, 0x0800, 0x0800 )	/* 3000-37ff of updown3.bin - D-UP ladder tiles, bitplane 2 */
+	ROM_COPY( "temp",	0x03800, 0x1000, 0x0800 )	/* 3800-3fff of updown1.bin - D-UP ladder tiles, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx15", 0 )
+	ROM_COPY( "temp",	0x0f000, 0x0000, 0x0800 )	/* 7000-77ff of updown2.bin - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x17000, 0x0800, 0x0800 )	/* 7000-77ff of updown3.bin - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x07800, 0x1000, 0x0800 )	/* 7800-7fff of updown1.bin - empty, bitplane 3 */
+
+	ROM_REGION( 0x0100, "proms", 0 )
+	ROM_LOAD( "updown_tbp.bin",	0x0000, 0x0100, BAD_DUMP CRC(ed15125b) SHA1(56fc00f2ce4ebe9cee73a45b142c33c00432b66b) )
+ROM_END
+
+
+ROM_START( wupndowna )	/* Witch Up & Down (Export, 6T/12T ver 0.99, set 1) */
+	ROM_REGION( 0x10000, "maincpu", 0 )
+	ROM_LOAD( "updown_19980409.bin",	0x8000, 0x8000, CRC(f0f0da16) SHA1(06d89881347d9bf2a09734ec4d405ff1c9fea0a8) )
+
+	ROM_REGION( 0x18000, "temp", 0 )
+	ROM_LOAD( "updown1.bin",	0x00000, 0x8000, CRC(c37aad3e) SHA1(1c957838a0d50bb8a5808a58c87d22dfc13c645d) )
+	ROM_LOAD( "updown2.bin",	0x08000, 0x8000, CRC(47cdd068) SHA1(fe641c66915153ae6e8e5492c225157cbd02bd4c) )
+	ROM_LOAD( "updown3.bin",	0x10000, 0x8000, CRC(905c3224) SHA1(6356f2bd8a1f8952b186dc6f9ed1705d1e918a64) )
+
+	ROM_REGION( 0x1800, "gfx0", 0 )
+	ROM_FILL(			0x0000, 0x1000, 0 )			/* filling bitplanes */
+	ROM_COPY( "temp",	0x0000, 0x1000, 0x0800 )	/* 0000-07ff of updown1.bin - char rom, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx1", 0 )
+	ROM_COPY( "temp",	0x08800, 0x0000, 0x0800 )	/* 0800-0fff of updown2.bin - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x10800, 0x0800, 0x0800 )	/* 0800-0fff of updown3.bin - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x01000, 0x1000, 0x0800 )	/* 1000-17ff of updown1.bin - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx2", 0 )
+	ROM_COPY( "temp",	0x08000, 0x0000, 0x0800 )	/* 0000-07ff of updown2.bin - regular cards gfx, bitplane 1 */
+	ROM_COPY( "temp",	0x10000, 0x0800, 0x0800 )	/* 0000-07ff of updown3.bin - regular cards gfx, bitplane 2 */
+	ROM_COPY( "temp",	0x00800, 0x1000, 0x0800 )	/* 0800-0fff of updown1.bin - regular cards gfx, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx3", 0 )
+	ROM_COPY( "temp",	0x0c000, 0x0000, 0x0800 )	/* 4000-47ff of updown2.bin - upper-left box tiles, bitplane 1 */
+	ROM_COPY( "temp",	0x14000, 0x0800, 0x0800 )	/* 4000-47ff of updown3.bin - upper-left box tiles, bitplane 2 */
+	ROM_COPY( "temp",	0x04800, 0x1000, 0x0800 )	/* 4800-4fff of updown1.bin - upper-left box tiles, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx4", 0 )
+	ROM_COPY( "temp",	0x09800, 0x0000, 0x0800 )	/* 1800-1fff of updown2.bin - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x11800, 0x0800, 0x0800 )	/* 1800-1fff of updown3.bin - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x02000, 0x1000, 0x0800 )	/* 1800-1fff of updown1.bin - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx5", 0 )
+	ROM_COPY( "temp",	0x0a800, 0x0000, 0x0800 )	/* 2800-2fff of updown2.bin - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x12800, 0x0800, 0x0800 )	/* 2800-2fff of updown3.bin - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x03000, 0x1000, 0x0800 )	/* 3000-37ff of updown1.bin - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx6", 0 )
+	ROM_COPY( "temp",	0x0a000, 0x0000, 0x0800 )	/* 2000-27ff of updown2.bin - giant 'Video Klein' logo tiles, bitplane 1 */
+	ROM_COPY( "temp",	0x12000, 0x0800, 0x0800 )	/* 2000-27ff of updown3.bin - giant 'Video Klein' logo tiles, bitplane 2 */
+	ROM_COPY( "temp",	0x02800, 0x1000, 0x0800 )	/* 2800-2fff of updown1.bin - giant 'Video Klein' logo tiles, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx7", 0 )
+	ROM_COPY( "temp",	0x0e800, 0x0000, 0x0800 )	/* 6800-6fff of updown2.bin - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x16800, 0x0800, 0x0800 )	/* 6800-6fff of updown3.bin - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x07000, 0x1000, 0x0800 )	/* 7000-77ff of updown1.bin - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx8", 0 )
+	ROM_COPY( "temp",	0x0b800, 0x0000, 0x0800 )	/* 3800-3fff of updown2.bin - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x13800, 0x0800, 0x0800 )	/* 3800-3fff of updown3.bin - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x04000, 0x1000, 0x0800 )	/* 3800-3fff of updown1.bin - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx9", 0 )
+	ROM_COPY( "temp",	0x0c800, 0x0000, 0x0800 )	/* 4800-4fff of updown2.bin - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x14800, 0x0800, 0x0800 )	/* 4800-4fff of updown3.bin - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x05000, 0x1000, 0x0800 )	/* 4000-47ff of updown1.bin - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx10", 0 )
+	ROM_COPY( "temp",	0x09000, 0x0000, 0x0800 )	/* 1000-17ff of updown2.bin - extended cards gfx, bitplane 1 */
+	ROM_COPY( "temp",	0x11000, 0x0800, 0x0800 )	/* 1000-17ff of updown3.bin - extended cards gfx, bitplane 2 */
+	ROM_COPY( "temp",	0x01800, 0x1000, 0x0800 )	/* 1800-1fff of updown1.bin - extended cards gfx, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx11", 0 )
+	ROM_COPY( "temp",	0x0d000, 0x0000, 0x0800 )	/* 5000-57ff of updown2.bin - 'Up & Down' logo tiles, bitplane 1 */
+	ROM_COPY( "temp",	0x15000, 0x0800, 0x0800 )	/* 5000-57ff of updown3.bin - 'Up & Down' logo tiles, bitplane 2 */
+	ROM_COPY( "temp",	0x05800, 0x1000, 0x0800 )	/* 5800-5fff of updown1.bin - 'Up & Down' logo tiles, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx12", 0 )
+	ROM_COPY( "temp",	0x0d800, 0x0000, 0x0800 )	/* 5800-5fff of updown2.bin - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x15800, 0x0800, 0x0800 )	/* 5800-5fff of updown3.bin - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x06000, 0x1000, 0x0800 )	/* 6000-67ff of updown1.bin - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx13", 0 )
+	ROM_COPY( "temp",	0x0e000, 0x0000, 0x0800 )	/* 6000-67ff of updown2.bin - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x16000, 0x0800, 0x0800 )	/* 6000-67ff of updown3.bin - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x06800, 0x1000, 0x0800 )	/* 6800-6fff of updown1.bin - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx14", 0 )
+	ROM_COPY( "temp",	0x0b000, 0x0000, 0x0800 )	/* 3000-37ff of updown2.bin - D-UP ladder tiles, bitplane 1 */
+	ROM_COPY( "temp",	0x13000, 0x0800, 0x0800 )	/* 3000-37ff of updown3.bin - D-UP ladder tiles, bitplane 2 */
+	ROM_COPY( "temp",	0x03800, 0x1000, 0x0800 )	/* 3800-3fff of updown1.bin - D-UP ladder tiles, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx15", 0 )
+	ROM_COPY( "temp",	0x0f000, 0x0000, 0x0800 )	/* 7000-77ff of updown2.bin - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x17000, 0x0800, 0x0800 )	/* 7000-77ff of updown3.bin - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x07800, 0x1000, 0x0800 )	/* 7800-7fff of updown1.bin - empty, bitplane 3 */
+
+	ROM_REGION( 0x0100, "proms", 0 )
+	ROM_LOAD( "updown_tbp.bin",	0x0000, 0x0100, BAD_DUMP CRC(ed15125b) SHA1(56fc00f2ce4ebe9cee73a45b142c33c00432b66b) )
+ROM_END
+
+
+ROM_START( wupndownb )	/* Witch Up & Down (Export, 6T/12T ver 0.99, set 2) */
+	ROM_REGION( 0x10000, "maincpu", 0 )
+	ROM_LOAD( "wj5x5099.bin",	0x8000, 0x8000, CRC(b0e9ac64) SHA1(31496ddea75cf9512661f049ddab50ebdb518a44) )
+
+	ROM_REGION( 0x18000, "temp", 0 )
+	ROM_LOAD( "updown1.bin",	0x00000, 0x8000, CRC(c37aad3e) SHA1(1c957838a0d50bb8a5808a58c87d22dfc13c645d) )
+	ROM_LOAD( "updown2.bin",	0x08000, 0x8000, CRC(47cdd068) SHA1(fe641c66915153ae6e8e5492c225157cbd02bd4c) )
+	ROM_LOAD( "updown3.bin",	0x10000, 0x8000, CRC(905c3224) SHA1(6356f2bd8a1f8952b186dc6f9ed1705d1e918a64) )
+
+	ROM_REGION( 0x1800, "gfx0", 0 )
+	ROM_FILL(			0x0000, 0x1000, 0 )			/* filling bitplanes */
+	ROM_COPY( "temp",	0x0000, 0x1000, 0x0800 )	/* 0000-07ff of updown1.bin - char rom, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx1", 0 )
+	ROM_COPY( "temp",	0x08800, 0x0000, 0x0800 )	/* 0800-0fff of updown2.bin - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x10800, 0x0800, 0x0800 )	/* 0800-0fff of updown3.bin - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x01000, 0x1000, 0x0800 )	/* 1000-17ff of updown1.bin - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx2", 0 )
+	ROM_COPY( "temp",	0x08000, 0x0000, 0x0800 )	/* 0000-07ff of updown2.bin - regular cards gfx, bitplane 1 */
+	ROM_COPY( "temp",	0x10000, 0x0800, 0x0800 )	/* 0000-07ff of updown3.bin - regular cards gfx, bitplane 2 */
+	ROM_COPY( "temp",	0x00800, 0x1000, 0x0800 )	/* 0800-0fff of updown1.bin - regular cards gfx, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx3", 0 )
+	ROM_COPY( "temp",	0x0c000, 0x0000, 0x0800 )	/* 4000-47ff of updown2.bin - upper-left box tiles, bitplane 1 */
+	ROM_COPY( "temp",	0x14000, 0x0800, 0x0800 )	/* 4000-47ff of updown3.bin - upper-left box tiles, bitplane 2 */
+	ROM_COPY( "temp",	0x04800, 0x1000, 0x0800 )	/* 4800-4fff of updown1.bin - upper-left box tiles, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx4", 0 )
+	ROM_COPY( "temp",	0x09800, 0x0000, 0x0800 )	/* 1800-1fff of updown2.bin - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x11800, 0x0800, 0x0800 )	/* 1800-1fff of updown3.bin - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x02000, 0x1000, 0x0800 )	/* 1800-1fff of updown1.bin - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx5", 0 )
+	ROM_COPY( "temp",	0x0a800, 0x0000, 0x0800 )	/* 2800-2fff of updown2.bin - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x12800, 0x0800, 0x0800 )	/* 2800-2fff of updown3.bin - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x03000, 0x1000, 0x0800 )	/* 3000-37ff of updown1.bin - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx6", 0 )
+	ROM_COPY( "temp",	0x0a000, 0x0000, 0x0800 )	/* 2000-27ff of updown2.bin - giant 'Video Klein' logo tiles, bitplane 1 */
+	ROM_COPY( "temp",	0x12000, 0x0800, 0x0800 )	/* 2000-27ff of updown3.bin - giant 'Video Klein' logo tiles, bitplane 2 */
+	ROM_COPY( "temp",	0x02800, 0x1000, 0x0800 )	/* 2800-2fff of updown1.bin - giant 'Video Klein' logo tiles, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx7", 0 )
+	ROM_COPY( "temp",	0x0e800, 0x0000, 0x0800 )	/* 6800-6fff of updown2.bin - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x16800, 0x0800, 0x0800 )	/* 6800-6fff of updown3.bin - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x07000, 0x1000, 0x0800 )	/* 7000-77ff of updown1.bin - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx8", 0 )
+	ROM_COPY( "temp",	0x0b800, 0x0000, 0x0800 )	/* 3800-3fff of updown2.bin - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x13800, 0x0800, 0x0800 )	/* 3800-3fff of updown3.bin - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x04000, 0x1000, 0x0800 )	/* 3800-3fff of updown1.bin - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx9", 0 )
+	ROM_COPY( "temp",	0x0c800, 0x0000, 0x0800 )	/* 4800-4fff of updown2.bin - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x14800, 0x0800, 0x0800 )	/* 4800-4fff of updown3.bin - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x05000, 0x1000, 0x0800 )	/* 4000-47ff of updown1.bin - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx10", 0 )
+	ROM_COPY( "temp",	0x09000, 0x0000, 0x0800 )	/* 1000-17ff of updown2.bin - extended cards gfx, bitplane 1 */
+	ROM_COPY( "temp",	0x11000, 0x0800, 0x0800 )	/* 1000-17ff of updown3.bin - extended cards gfx, bitplane 2 */
+	ROM_COPY( "temp",	0x01800, 0x1000, 0x0800 )	/* 1800-1fff of updown1.bin - extended cards gfx, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx11", 0 )
+	ROM_COPY( "temp",	0x0d000, 0x0000, 0x0800 )	/* 5000-57ff of updown2.bin - 'Up & Down' logo tiles, bitplane 1 */
+	ROM_COPY( "temp",	0x15000, 0x0800, 0x0800 )	/* 5000-57ff of updown3.bin - 'Up & Down' logo tiles, bitplane 2 */
+	ROM_COPY( "temp",	0x05800, 0x1000, 0x0800 )	/* 5800-5fff of updown1.bin - 'Up & Down' logo tiles, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx12", 0 )
+	ROM_COPY( "temp",	0x0d800, 0x0000, 0x0800 )	/* 5800-5fff of updown2.bin - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x15800, 0x0800, 0x0800 )	/* 5800-5fff of updown3.bin - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x06000, 0x1000, 0x0800 )	/* 6000-67ff of updown1.bin - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx13", 0 )
+	ROM_COPY( "temp",	0x0e000, 0x0000, 0x0800 )	/* 6000-67ff of updown2.bin - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x16000, 0x0800, 0x0800 )	/* 6000-67ff of updown3.bin - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x06800, 0x1000, 0x0800 )	/* 6800-6fff of updown1.bin - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx14", 0 )
+	ROM_COPY( "temp",	0x0b000, 0x0000, 0x0800 )	/* 3000-37ff of updown2.bin - D-UP ladder tiles, bitplane 1 */
+	ROM_COPY( "temp",	0x13000, 0x0800, 0x0800 )	/* 3000-37ff of updown3.bin - D-UP ladder tiles, bitplane 2 */
+	ROM_COPY( "temp",	0x03800, 0x1000, 0x0800 )	/* 3800-3fff of updown1.bin - D-UP ladder tiles, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx15", 0 )
+	ROM_COPY( "temp",	0x0f000, 0x0000, 0x0800 )	/* 7000-77ff of updown2.bin - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x17000, 0x0800, 0x0800 )	/* 7000-77ff of updown3.bin - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x07800, 0x1000, 0x0800 )	/* 7800-7fff of updown1.bin - empty, bitplane 3 */
+
+	ROM_REGION( 0x0100, "proms", 0 )
+	ROM_LOAD( "updown_tbp.bin",	0x0000, 0x0100, BAD_DUMP CRC(ed15125b) SHA1(56fc00f2ce4ebe9cee73a45b142c33c00432b66b) )
+ROM_END
+
+
+ROM_START( wupndownc )	/* Witch Up & Down (Export, 6T/12T ver 0.99, set 3) */
+	ROM_REGION( 0x10000, "maincpu", 0 )
+	ROM_LOAD( "wj5x5099alt.bin",	0x8000, 0x8000, CRC(2355afbd) SHA1(f511375ca12dc71497601ca5b0a74deb0977d85e) )
+
+	ROM_REGION( 0x18000, "temp", 0 )
+	ROM_LOAD( "updown1.bin",	0x00000, 0x8000, CRC(c37aad3e) SHA1(1c957838a0d50bb8a5808a58c87d22dfc13c645d) )
+	ROM_LOAD( "updown2.bin",	0x08000, 0x8000, CRC(47cdd068) SHA1(fe641c66915153ae6e8e5492c225157cbd02bd4c) )
+	ROM_LOAD( "updown3.bin",	0x10000, 0x8000, CRC(905c3224) SHA1(6356f2bd8a1f8952b186dc6f9ed1705d1e918a64) )
+
+	ROM_REGION( 0x1800, "gfx0", 0 )
+	ROM_FILL(			0x0000, 0x1000, 0 )			/* filling bitplanes */
+	ROM_COPY( "temp",	0x0000, 0x1000, 0x0800 )	/* 0000-07ff of updown1.bin - char rom, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx1", 0 )
+	ROM_COPY( "temp",	0x08800, 0x0000, 0x0800 )	/* 0800-0fff of updown2.bin - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x10800, 0x0800, 0x0800 )	/* 0800-0fff of updown3.bin - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x01000, 0x1000, 0x0800 )	/* 1000-17ff of updown1.bin - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx2", 0 )
+	ROM_COPY( "temp",	0x08000, 0x0000, 0x0800 )	/* 0000-07ff of updown2.bin - regular cards gfx, bitplane 1 */
+	ROM_COPY( "temp",	0x10000, 0x0800, 0x0800 )	/* 0000-07ff of updown3.bin - regular cards gfx, bitplane 2 */
+	ROM_COPY( "temp",	0x00800, 0x1000, 0x0800 )	/* 0800-0fff of updown1.bin - regular cards gfx, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx3", 0 )
+	ROM_COPY( "temp",	0x0c000, 0x0000, 0x0800 )	/* 4000-47ff of updown2.bin - upper-left box tiles, bitplane 1 */
+	ROM_COPY( "temp",	0x14000, 0x0800, 0x0800 )	/* 4000-47ff of updown3.bin - upper-left box tiles, bitplane 2 */
+	ROM_COPY( "temp",	0x04800, 0x1000, 0x0800 )	/* 4800-4fff of updown1.bin - upper-left box tiles, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx4", 0 )
+	ROM_COPY( "temp",	0x09800, 0x0000, 0x0800 )	/* 1800-1fff of updown2.bin - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x11800, 0x0800, 0x0800 )	/* 1800-1fff of updown3.bin - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x02000, 0x1000, 0x0800 )	/* 1800-1fff of updown1.bin - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx5", 0 )
+	ROM_COPY( "temp",	0x0a800, 0x0000, 0x0800 )	/* 2800-2fff of updown2.bin - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x12800, 0x0800, 0x0800 )	/* 2800-2fff of updown3.bin - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x03000, 0x1000, 0x0800 )	/* 3000-37ff of updown1.bin - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx6", 0 )
+	ROM_COPY( "temp",	0x0a000, 0x0000, 0x0800 )	/* 2000-27ff of updown2.bin - giant 'Video Klein' logo tiles, bitplane 1 */
+	ROM_COPY( "temp",	0x12000, 0x0800, 0x0800 )	/* 2000-27ff of updown3.bin - giant 'Video Klein' logo tiles, bitplane 2 */
+	ROM_COPY( "temp",	0x02800, 0x1000, 0x0800 )	/* 2800-2fff of updown1.bin - giant 'Video Klein' logo tiles, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx7", 0 )
+	ROM_COPY( "temp",	0x0e800, 0x0000, 0x0800 )	/* 6800-6fff of updown2.bin - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x16800, 0x0800, 0x0800 )	/* 6800-6fff of updown3.bin - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x07000, 0x1000, 0x0800 )	/* 7000-77ff of updown1.bin - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx8", 0 )
+	ROM_COPY( "temp",	0x0b800, 0x0000, 0x0800 )	/* 3800-3fff of updown2.bin - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x13800, 0x0800, 0x0800 )	/* 3800-3fff of updown3.bin - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x04000, 0x1000, 0x0800 )	/* 3800-3fff of updown1.bin - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx9", 0 )
+	ROM_COPY( "temp",	0x0c800, 0x0000, 0x0800 )	/* 4800-4fff of updown2.bin - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x14800, 0x0800, 0x0800 )	/* 4800-4fff of updown3.bin - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x05000, 0x1000, 0x0800 )	/* 4000-47ff of updown1.bin - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx10", 0 )
+	ROM_COPY( "temp",	0x09000, 0x0000, 0x0800 )	/* 1000-17ff of updown2.bin - extended cards gfx, bitplane 1 */
+	ROM_COPY( "temp",	0x11000, 0x0800, 0x0800 )	/* 1000-17ff of updown3.bin - extended cards gfx, bitplane 2 */
+	ROM_COPY( "temp",	0x01800, 0x1000, 0x0800 )	/* 1800-1fff of updown1.bin - extended cards gfx, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx11", 0 )
+	ROM_COPY( "temp",	0x0d000, 0x0000, 0x0800 )	/* 5000-57ff of updown2.bin - 'Up & Down' logo tiles, bitplane 1 */
+	ROM_COPY( "temp",	0x15000, 0x0800, 0x0800 )	/* 5000-57ff of updown3.bin - 'Up & Down' logo tiles, bitplane 2 */
+	ROM_COPY( "temp",	0x05800, 0x1000, 0x0800 )	/* 5800-5fff of updown1.bin - 'Up & Down' logo tiles, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx12", 0 )
+	ROM_COPY( "temp",	0x0d800, 0x0000, 0x0800 )	/* 5800-5fff of updown2.bin - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x15800, 0x0800, 0x0800 )	/* 5800-5fff of updown3.bin - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x06000, 0x1000, 0x0800 )	/* 6000-67ff of updown1.bin - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx13", 0 )
+	ROM_COPY( "temp",	0x0e000, 0x0000, 0x0800 )	/* 6000-67ff of updown2.bin - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x16000, 0x0800, 0x0800 )	/* 6000-67ff of updown3.bin - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x06800, 0x1000, 0x0800 )	/* 6800-6fff of updown1.bin - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx14", 0 )
+	ROM_COPY( "temp",	0x0b000, 0x0000, 0x0800 )	/* 3000-37ff of updown2.bin - D-UP ladder tiles, bitplane 1 */
+	ROM_COPY( "temp",	0x13000, 0x0800, 0x0800 )	/* 3000-37ff of updown3.bin - D-UP ladder tiles, bitplane 2 */
+	ROM_COPY( "temp",	0x03800, 0x1000, 0x0800 )	/* 3800-3fff of updown1.bin - D-UP ladder tiles, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx15", 0 )
+	ROM_COPY( "temp",	0x0f000, 0x0000, 0x0800 )	/* 7000-77ff of updown2.bin - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x17000, 0x0800, 0x0800 )	/* 7000-77ff of updown3.bin - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x07800, 0x1000, 0x0800 )	/* 7800-7fff of updown1.bin - empty, bitplane 3 */
+
+	ROM_REGION( 0x0100, "proms", 0 )
+	ROM_LOAD( "updown_tbp.bin",	0x0000, 0x0100, BAD_DUMP CRC(ed15125b) SHA1(56fc00f2ce4ebe9cee73a45b142c33c00432b66b) )
+ROM_END
+
+
+ROM_START( wupndownd )	/* Witch Up & Down (Export, 6T/12T ver 0.99T) */
+	ROM_REGION( 0x10000, "maincpu", 0 )
+	ROM_LOAD( "wj5x5099t.bin",	0x8000, 0x8000, CRC(a722c659) SHA1(41f43133992b012754577d788745ff8223d88077) )
+
+	ROM_REGION( 0x18000, "temp", 0 )
+	ROM_LOAD( "updown1.bin",	0x00000, 0x8000, CRC(c37aad3e) SHA1(1c957838a0d50bb8a5808a58c87d22dfc13c645d) )
+	ROM_LOAD( "updown2.bin",	0x08000, 0x8000, CRC(47cdd068) SHA1(fe641c66915153ae6e8e5492c225157cbd02bd4c) )
+	ROM_LOAD( "updown3.bin",	0x10000, 0x8000, CRC(905c3224) SHA1(6356f2bd8a1f8952b186dc6f9ed1705d1e918a64) )
+
+	ROM_REGION( 0x1800, "gfx0", 0 )
+	ROM_FILL(			0x0000, 0x1000, 0 )			/* filling bitplanes */
+	ROM_COPY( "temp",	0x0000, 0x1000, 0x0800 )	/* 0000-07ff of updown1.bin - char rom, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx1", 0 )
+	ROM_COPY( "temp",	0x08800, 0x0000, 0x0800 )	/* 0800-0fff of updown2.bin - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x10800, 0x0800, 0x0800 )	/* 0800-0fff of updown3.bin - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x01000, 0x1000, 0x0800 )	/* 1000-17ff of updown1.bin - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx2", 0 )
+	ROM_COPY( "temp",	0x08000, 0x0000, 0x0800 )	/* 0000-07ff of updown2.bin - regular cards gfx, bitplane 1 */
+	ROM_COPY( "temp",	0x10000, 0x0800, 0x0800 )	/* 0000-07ff of updown3.bin - regular cards gfx, bitplane 2 */
+	ROM_COPY( "temp",	0x00800, 0x1000, 0x0800 )	/* 0800-0fff of updown1.bin - regular cards gfx, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx3", 0 )
+	ROM_COPY( "temp",	0x0c000, 0x0000, 0x0800 )	/* 4000-47ff of updown2.bin - upper-left box tiles, bitplane 1 */
+	ROM_COPY( "temp",	0x14000, 0x0800, 0x0800 )	/* 4000-47ff of updown3.bin - upper-left box tiles, bitplane 2 */
+	ROM_COPY( "temp",	0x04800, 0x1000, 0x0800 )	/* 4800-4fff of updown1.bin - upper-left box tiles, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx4", 0 )
+	ROM_COPY( "temp",	0x09800, 0x0000, 0x0800 )	/* 1800-1fff of updown2.bin - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x11800, 0x0800, 0x0800 )	/* 1800-1fff of updown3.bin - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x02000, 0x1000, 0x0800 )	/* 1800-1fff of updown1.bin - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx5", 0 )
+	ROM_COPY( "temp",	0x0a800, 0x0000, 0x0800 )	/* 2800-2fff of updown2.bin - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x12800, 0x0800, 0x0800 )	/* 2800-2fff of updown3.bin - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x03000, 0x1000, 0x0800 )	/* 3000-37ff of updown1.bin - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx6", 0 )
+	ROM_COPY( "temp",	0x0a000, 0x0000, 0x0800 )	/* 2000-27ff of updown2.bin - giant 'Video Klein' logo tiles, bitplane 1 */
+	ROM_COPY( "temp",	0x12000, 0x0800, 0x0800 )	/* 2000-27ff of updown3.bin - giant 'Video Klein' logo tiles, bitplane 2 */
+	ROM_COPY( "temp",	0x02800, 0x1000, 0x0800 )	/* 2800-2fff of updown1.bin - giant 'Video Klein' logo tiles, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx7", 0 )
+	ROM_COPY( "temp",	0x0e800, 0x0000, 0x0800 )	/* 6800-6fff of updown2.bin - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x16800, 0x0800, 0x0800 )	/* 6800-6fff of updown3.bin - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x07000, 0x1000, 0x0800 )	/* 7000-77ff of updown1.bin - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx8", 0 )
+	ROM_COPY( "temp",	0x0b800, 0x0000, 0x0800 )	/* 3800-3fff of updown2.bin - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x13800, 0x0800, 0x0800 )	/* 3800-3fff of updown3.bin - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x04000, 0x1000, 0x0800 )	/* 3800-3fff of updown1.bin - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx9", 0 )
+	ROM_COPY( "temp",	0x0c800, 0x0000, 0x0800 )	/* 4800-4fff of updown2.bin - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x14800, 0x0800, 0x0800 )	/* 4800-4fff of updown3.bin - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x05000, 0x1000, 0x0800 )	/* 4000-47ff of updown1.bin - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx10", 0 )
+	ROM_COPY( "temp",	0x09000, 0x0000, 0x0800 )	/* 1000-17ff of updown2.bin - extended cards gfx, bitplane 1 */
+	ROM_COPY( "temp",	0x11000, 0x0800, 0x0800 )	/* 1000-17ff of updown3.bin - extended cards gfx, bitplane 2 */
+	ROM_COPY( "temp",	0x01800, 0x1000, 0x0800 )	/* 1800-1fff of updown1.bin - extended cards gfx, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx11", 0 )
+	ROM_COPY( "temp",	0x0d000, 0x0000, 0x0800 )	/* 5000-57ff of updown2.bin - 'Up & Down' logo tiles, bitplane 1 */
+	ROM_COPY( "temp",	0x15000, 0x0800, 0x0800 )	/* 5000-57ff of updown3.bin - 'Up & Down' logo tiles, bitplane 2 */
+	ROM_COPY( "temp",	0x05800, 0x1000, 0x0800 )	/* 5800-5fff of updown1.bin - 'Up & Down' logo tiles, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx12", 0 )
+	ROM_COPY( "temp",	0x0d800, 0x0000, 0x0800 )	/* 5800-5fff of updown2.bin - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x15800, 0x0800, 0x0800 )	/* 5800-5fff of updown3.bin - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x06000, 0x1000, 0x0800 )	/* 6000-67ff of updown1.bin - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx13", 0 )
+	ROM_COPY( "temp",	0x0e000, 0x0000, 0x0800 )	/* 6000-67ff of updown2.bin - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x16000, 0x0800, 0x0800 )	/* 6000-67ff of updown3.bin - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x06800, 0x1000, 0x0800 )	/* 6800-6fff of updown1.bin - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx14", 0 )
+	ROM_COPY( "temp",	0x0b000, 0x0000, 0x0800 )	/* 3000-37ff of updown2.bin - D-UP ladder tiles, bitplane 1 */
+	ROM_COPY( "temp",	0x13000, 0x0800, 0x0800 )	/* 3000-37ff of updown3.bin - D-UP ladder tiles, bitplane 2 */
+	ROM_COPY( "temp",	0x03800, 0x1000, 0x0800 )	/* 3800-3fff of updown1.bin - D-UP ladder tiles, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx15", 0 )
+	ROM_COPY( "temp",	0x0f000, 0x0000, 0x0800 )	/* 7000-77ff of updown2.bin - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x17000, 0x0800, 0x0800 )	/* 7000-77ff of updown3.bin - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x07800, 0x1000, 0x0800 )	/* 7800-7fff of updown1.bin - empty, bitplane 3 */
+
+	ROM_REGION( 0x0100, "proms", 0 )
+	ROM_LOAD( "updown_tbp.bin",	0x0000, 0x0100, BAD_DUMP CRC(ed15125b) SHA1(56fc00f2ce4ebe9cee73a45b142c33c00432b66b) )
+ROM_END
+
+
+/*********************************************
+
+  Witch Strike (Export, 6T/12T ver 1.01A)
+  Witch Strike (Export, 6T/12T ver 1.01B)
+
+  1992, Video Klein.   Prototypes??
+
+*********************************************/
+
+ROM_START( wstrike )	/* Witch Strike (Export, 6T/12T ver 1.01A) */
+	ROM_REGION( 0x10000, "maincpu", 0 )
+	ROM_LOAD( "wstrike_101a.bin",	0x8000, 0x8000, CRC(1e5a1c5c) SHA1(f6dcfae0f860196983378327864a9271e7d0b21f) )
+
+	ROM_REGION( 0x18000, "temp", 0 )
+	ROM_LOAD( "wsrom1.bin",	0x00000, 0x8000, CRC(006ad9cf) SHA1(2c4f2faeb9b9c268b79f3890aad5d421ecf9f58a) )
+	ROM_LOAD( "wsrom2.bin",	0x08000, 0x8000, CRC(5030609b) SHA1(f51ad4bc450e94f40cf714842a5e992900220030) )
+	ROM_LOAD( "wsrom3.bin",	0x10000, 0x8000, CRC(62692e92) SHA1(534a64abba4dabefa2fa1d2dfed0dc8a00d95156) )
+
+	ROM_REGION( 0x1800, "gfx0", 0 )
+	ROM_FILL(			0x0000, 0x1000, 0 )			/* filling bitplanes */
+	ROM_COPY( "temp",	0x0000, 0x1000, 0x0800 )	/* 0000-07ff of wsrom1.bin - char rom (placed ok), bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx1", 0 )
+	ROM_COPY( "temp",	0x08800, 0x0000, 0x0800 )	/* 0800-0fff of wsrom2.bin - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x10800, 0x0800, 0x0800 )	/* 0800-0fff of wsrom3.bin - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x01000, 0x1000, 0x0800 )	/* 1000-17ff of wsrom1.bin - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx2", 0 )
+	ROM_COPY( "temp",	0x08000, 0x0000, 0x0800 )	/* 0000-07ff of wsrom2.bin - regular pin gfx (placed ok), bitplane 1 */
+	ROM_COPY( "temp",	0x10000, 0x0800, 0x0800 )	/* 0000-07ff of wsrom3.bin - regular pin gfx (placed ok), bitplane 2 */
+	ROM_COPY( "temp",	0x00800, 0x1000, 0x0800 )	/* 0800-0fff of wsrom1.bin - regular pin gfx (placed ok), bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx3", 0 )
+	ROM_COPY( "temp",	0x0c000, 0x0000, 0x0800 )	/* 4000-47ff of wsrom2.bin - empty (placed ok), bitplane 1 */
+	ROM_COPY( "temp",	0x14000, 0x0800, 0x0800 )	/* 4000-47ff of wsrom3.bin - empty (placed ok), bitplane 2 */
+	ROM_COPY( "temp",	0x04800, 0x1000, 0x0800 )	/* 4800-4fff of wsrom1.bin - empty (placed ok), bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx4", 0 )
+	ROM_COPY( "temp",	0x09800, 0x0000, 0x0800 )	/* 1800-1fff of wsrom2.bin - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x11800, 0x0800, 0x0800 )	/* 1800-1fff of wsrom3.bin - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x02000, 0x1000, 0x0800 )	/* 1800-1fff of wsrom1.bin - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx5", 0 )
+	ROM_COPY( "temp",	0x0a800, 0x0000, 0x0800 )	/* 2800-2fff of wsrom2.bin - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x12800, 0x0800, 0x0800 )	/* 2800-2fff of wsrom3.bin - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x03000, 0x1000, 0x0800 )	/* 3000-37ff of wsrom1.bin - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx6", 0 )
+	ROM_COPY( "temp",	0x0a000, 0x0000, 0x0800 )	/* 2000-27ff of wsrom2.bin - 'Video Klein' logo lower tiles (placed ok), bitplane 1 */
+	ROM_COPY( "temp",	0x12000, 0x0800, 0x0800 )	/* 2000-27ff of wsrom3.bin - 'Video Klein' logo lower tiles (placed ok), bitplane 2 */
+	ROM_COPY( "temp",	0x02800, 0x1000, 0x0800 )	/* 2800-2fff of wsrom1.bin - 'Video Klein' logo lower tiles (placed ok), bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx7", 0 )
+	ROM_COPY( "temp",	0x0e800, 0x0000, 0x0800 )	/* 6800-6fff of wsrom2.bin - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x16800, 0x0800, 0x0800 )	/* 6800-6fff of wsrom3.bin - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x07000, 0x1000, 0x0800 )	/* 7000-77ff of wsrom1.bin - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx8", 0 )
+	ROM_COPY( "temp",	0x0b800, 0x0000, 0x0800 )	/* 3800-3fff of wsrom2.bin - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x13800, 0x0800, 0x0800 )	/* 3800-3fff of wsrom3.bin - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x04000, 0x1000, 0x0800 )	/* 3800-3fff of wsrom1.bin - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx9", 0 )
+	ROM_COPY( "temp",	0x0c800, 0x0000, 0x0800 )	/* 4800-4fff of wsrom2.bin - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x14800, 0x0800, 0x0800 )	/* 4800-4fff of wsrom3.bin - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x05000, 0x1000, 0x0800 )	/* 4000-47ff of wsrom1.bin - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx10", 0 )
+	ROM_COPY( "temp",	0x09000, 0x0000, 0x0800 )	/* 1000-17ff of wsrom2.bin - extended pin gfx and logo upper tiles (placed ok), bitplane 1 */
+	ROM_COPY( "temp",	0x11000, 0x0800, 0x0800 )	/* 1000-17ff of wsrom3.bin - extended pin gfx and logo upper tiles (placed ok), bitplane 2 */
+	ROM_COPY( "temp",	0x01800, 0x1000, 0x0800 )	/* 1800-1fff of wsrom1.bin - extended pin gfx and logo upper tiles (placed ok), bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx11", 0 )
+	ROM_COPY( "temp",	0x0d000, 0x0000, 0x0800 )	/* 5000-57ff of wsrom2.bin - empty (placed ok), bitplane 1 */
+	ROM_COPY( "temp",	0x15000, 0x0800, 0x0800 )	/* 5000-57ff of wsrom3.bin - empty (placed ok), bitplane 2 */
+	ROM_COPY( "temp",	0x05800, 0x1000, 0x0800 )	/* 5800-5fff of wsrom1.bin - empty (placed ok), bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx12", 0 )
+	ROM_COPY( "temp",	0x0d800, 0x0000, 0x0800 )	/* 5800-5fff of wsrom2.bin - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x15800, 0x0800, 0x0800 )	/* 5800-5fff of wsrom3.bin - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x06000, 0x1000, 0x0800 )	/* 6000-67ff of wsrom1.bin - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx13", 0 )
+	ROM_COPY( "temp",	0x0e000, 0x0000, 0x0800 )	/* 6000-67ff of wsrom2.bin - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x16000, 0x0800, 0x0800 )	/* 6000-67ff of wsrom3.bin - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x06800, 0x1000, 0x0800 )	/* 6800-6fff of wsrom1.bin - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx14", 0 )
+	ROM_COPY( "temp",	0x0b000, 0x0000, 0x0800 )	/* 3000-37ff of wsrom2.bin - garbage (placed ok), bitplane 1 */
+	ROM_COPY( "temp",	0x13000, 0x0800, 0x0800 )	/* 3000-37ff of wsrom3.bin - garbage (placed ok), bitplane 2 */
+	ROM_COPY( "temp",	0x03800, 0x1000, 0x0800 )	/* 3800-3fff of wsrom1.bin - garbage (placed ok), bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx15", 0 )
+	ROM_COPY( "temp",	0x0f000, 0x0000, 0x0800 )	/* 7000-77ff of wsrom2.bin - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x17000, 0x0800, 0x0800 )	/* 7000-77ff of wsrom3.bin - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x07800, 0x1000, 0x0800 )	/* 7800-7fff of wsrom1.bin - empty, bitplane 3 */
+
+	ROM_REGION( 0x0100, "proms", 0 )
+	ROM_LOAD( "wstrike_tbp.bin",	0x0000, 0x0100, BAD_DUMP CRC(ed15125b) SHA1(56fc00f2ce4ebe9cee73a45b142c33c00432b66b) )
+ROM_END
+
+
+ROM_START( wstrikea )	/* Witch Strike (Export, 6T/12T ver 1.01B) */
+	ROM_REGION( 0x10000, "maincpu", 0 )
+	ROM_LOAD( "wstrike_101b.bin",	0x8000, 0x8000, CRC(52be1662) SHA1(42c9377b3af54d5e9373b17884ae8f841edc34de) )
+
+	ROM_REGION( 0x18000, "temp", 0 )
+	ROM_LOAD( "wsrom1.bin",	0x00000, 0x8000, CRC(006ad9cf) SHA1(2c4f2faeb9b9c268b79f3890aad5d421ecf9f58a) )
+	ROM_LOAD( "wsrom2.bin",	0x08000, 0x8000, CRC(5030609b) SHA1(f51ad4bc450e94f40cf714842a5e992900220030) )
+	ROM_LOAD( "wsrom3.bin",	0x10000, 0x8000, CRC(62692e92) SHA1(534a64abba4dabefa2fa1d2dfed0dc8a00d95156) )
+
+	ROM_REGION( 0x1800, "gfx0", 0 )
+	ROM_FILL(			0x0000, 0x1000, 0 )			/* filling bitplanes */
+	ROM_COPY( "temp",	0x0000, 0x1000, 0x0800 )	/* 0000-07ff of wsrom1.bin - char rom (placed ok), bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx1", 0 )
+	ROM_COPY( "temp",	0x08800, 0x0000, 0x0800 )	/* 0800-0fff of wsrom2.bin - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x10800, 0x0800, 0x0800 )	/* 0800-0fff of wsrom3.bin - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x01000, 0x1000, 0x0800 )	/* 1000-17ff of wsrom1.bin - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx2", 0 )
+	ROM_COPY( "temp",	0x08000, 0x0000, 0x0800 )	/* 0000-07ff of wsrom2.bin - regular pin gfx (placed ok), bitplane 1 */
+	ROM_COPY( "temp",	0x10000, 0x0800, 0x0800 )	/* 0000-07ff of wsrom3.bin - regular pin gfx (placed ok), bitplane 2 */
+	ROM_COPY( "temp",	0x00800, 0x1000, 0x0800 )	/* 0800-0fff of wsrom1.bin - regular pin gfx (placed ok), bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx3", 0 )
+	ROM_COPY( "temp",	0x0c000, 0x0000, 0x0800 )	/* 4000-47ff of wsrom2.bin - empty (placed ok), bitplane 1 */
+	ROM_COPY( "temp",	0x14000, 0x0800, 0x0800 )	/* 4000-47ff of wsrom3.bin - empty (placed ok), bitplane 2 */
+	ROM_COPY( "temp",	0x04800, 0x1000, 0x0800 )	/* 4800-4fff of wsrom1.bin - empty (placed ok), bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx4", 0 )
+	ROM_COPY( "temp",	0x09800, 0x0000, 0x0800 )	/* 1800-1fff of wsrom2.bin - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x11800, 0x0800, 0x0800 )	/* 1800-1fff of wsrom3.bin - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x02000, 0x1000, 0x0800 )	/* 1800-1fff of wsrom1.bin - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx5", 0 )
+	ROM_COPY( "temp",	0x0a800, 0x0000, 0x0800 )	/* 2800-2fff of wsrom2.bin - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x12800, 0x0800, 0x0800 )	/* 2800-2fff of wsrom3.bin - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x03000, 0x1000, 0x0800 )	/* 3000-37ff of wsrom1.bin - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx6", 0 )
+	ROM_COPY( "temp",	0x0a000, 0x0000, 0x0800 )	/* 2000-27ff of wsrom2.bin - 'Video Klein' logo lower tiles (placed ok), bitplane 1 */
+	ROM_COPY( "temp",	0x12000, 0x0800, 0x0800 )	/* 2000-27ff of wsrom3.bin - 'Video Klein' logo lower tiles (placed ok), bitplane 2 */
+	ROM_COPY( "temp",	0x02800, 0x1000, 0x0800 )	/* 2800-2fff of wsrom1.bin - 'Video Klein' logo lower tiles (placed ok), bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx7", 0 )
+	ROM_COPY( "temp",	0x0e800, 0x0000, 0x0800 )	/* 6800-6fff of wsrom2.bin - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x16800, 0x0800, 0x0800 )	/* 6800-6fff of wsrom3.bin - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x07000, 0x1000, 0x0800 )	/* 7000-77ff of wsrom1.bin - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx8", 0 )
+	ROM_COPY( "temp",	0x0b800, 0x0000, 0x0800 )	/* 3800-3fff of wsrom2.bin - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x13800, 0x0800, 0x0800 )	/* 3800-3fff of wsrom3.bin - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x04000, 0x1000, 0x0800 )	/* 3800-3fff of wsrom1.bin - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx9", 0 )
+	ROM_COPY( "temp",	0x0c800, 0x0000, 0x0800 )	/* 4800-4fff of wsrom2.bin - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x14800, 0x0800, 0x0800 )	/* 4800-4fff of wsrom3.bin - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x05000, 0x1000, 0x0800 )	/* 4000-47ff of wsrom1.bin - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx10", 0 )
+	ROM_COPY( "temp",	0x09000, 0x0000, 0x0800 )	/* 1000-17ff of wsrom2.bin - extended pin gfx and logo upper tiles (placed ok), bitplane 1 */
+	ROM_COPY( "temp",	0x11000, 0x0800, 0x0800 )	/* 1000-17ff of wsrom3.bin - extended pin gfx and logo upper tiles (placed ok), bitplane 2 */
+	ROM_COPY( "temp",	0x01800, 0x1000, 0x0800 )	/* 1800-1fff of wsrom1.bin - extended pin gfx and logo upper tiles (placed ok), bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx11", 0 )
+	ROM_COPY( "temp",	0x0d000, 0x0000, 0x0800 )	/* 5000-57ff of wsrom2.bin - empty (placed ok), bitplane 1 */
+	ROM_COPY( "temp",	0x15000, 0x0800, 0x0800 )	/* 5000-57ff of wsrom3.bin - empty (placed ok), bitplane 2 */
+	ROM_COPY( "temp",	0x05800, 0x1000, 0x0800 )	/* 5800-5fff of wsrom1.bin - empty (placed ok), bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx12", 0 )
+	ROM_COPY( "temp",	0x0d800, 0x0000, 0x0800 )	/* 5800-5fff of wsrom2.bin - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x15800, 0x0800, 0x0800 )	/* 5800-5fff of wsrom3.bin - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x06000, 0x1000, 0x0800 )	/* 6000-67ff of wsrom1.bin - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx13", 0 )
+	ROM_COPY( "temp",	0x0e000, 0x0000, 0x0800 )	/* 6000-67ff of wsrom2.bin - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x16000, 0x0800, 0x0800 )	/* 6000-67ff of wsrom3.bin - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x06800, 0x1000, 0x0800 )	/* 6800-6fff of wsrom1.bin - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx14", 0 )
+	ROM_COPY( "temp",	0x0b000, 0x0000, 0x0800 )	/* 3000-37ff of wsrom2.bin - garbage (placed ok), bitplane 1 */
+	ROM_COPY( "temp",	0x13000, 0x0800, 0x0800 )	/* 3000-37ff of wsrom3.bin - garbage (placed ok), bitplane 2 */
+	ROM_COPY( "temp",	0x03800, 0x1000, 0x0800 )	/* 3800-3fff of wsrom1.bin - garbage (placed ok), bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx15", 0 )
+	ROM_COPY( "temp",	0x0f000, 0x0000, 0x0800 )	/* 7000-77ff of wsrom2.bin - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x17000, 0x0800, 0x0800 )	/* 7000-77ff of wsrom3.bin - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x07800, 0x1000, 0x0800 )	/* 7800-7fff of wsrom1.bin - empty, bitplane 3 */
+
+	ROM_REGION( 0x0100, "proms", 0 )
+	ROM_LOAD( "wstrike_tbp.bin",	0x0000, 0x0100, BAD_DUMP CRC(ed15125b) SHA1(56fc00f2ce4ebe9cee73a45b142c33c00432b66b) )
+ROM_END
+
+
+/*********************************************
+
+   Witch Jack
+   1992-1996 Video Klein
+
+*********************************************/
+
+ROM_START( wtchjack )	/* Witch Jack 0.87-89 / 1996-10-08, GFX OK */
+	ROM_REGION( 0x10000, "maincpu", 0 )
+	ROM_LOAD( "wj5x5089.bin",	0x8000, 0x8000, CRC(91e37ca4) SHA1(abce8447550165547cd3c89dffb41c5394a2c901) )
+
+	ROM_REGION( 0x18000, "temp", 0 )
+	ROM_LOAD( "wj5x5_1zs.bin",	0x00000, 0x8000, CRC(a780ba7f) SHA1(dde75187df298392333cfe1a19beed5b9d172aad) )
+	ROM_LOAD( "wj5x5_2zs.bin",	0x08000, 0x8000, CRC(0f4e9f82) SHA1(a22bbbf0130dd6ece61189ce81a3376213617509) )
+	ROM_LOAD( "wj5x5_3zs.bin",	0x10000, 0x8000, CRC(708e1d7f) SHA1(518312fd0bc24d7895eae0cfa9dbad99e1adf67c) )
+
+	ROM_REGION( 0x1800, "gfx0", 0 )
+	ROM_FILL(			0x0000, 0x1000, 0 )			/* filling bitplanes */
+	ROM_COPY( "temp",	0x0000, 0x1000, 0x0800 )	/* 0000-07ff of rom1.bin - char rom (placed ok), bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx1", 0 )
+	ROM_COPY( "temp",	0x08800, 0x0000, 0x0800 )	/* 0800-0fff of rom2.bin - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x10800, 0x0800, 0x0800 )	/* 0800-0fff of rom3.bin - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x01000, 0x1000, 0x0800 )	/* 1000-17ff of rom1.bin - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx2", 0 )
+	ROM_COPY( "temp",	0x08000, 0x0000, 0x0800 )	/* 0000-07ff of rom2.bin - regular pin gfx (placed ok), bitplane 1 */
+	ROM_COPY( "temp",	0x10000, 0x0800, 0x0800 )	/* 0000-07ff of rom3.bin - regular pin gfx (placed ok), bitplane 2 */
+	ROM_COPY( "temp",	0x00800, 0x1000, 0x0800 )	/* 0800-0fff of rom1.bin - regular pin gfx (placed ok), bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx3", 0 )
+	ROM_COPY( "temp",	0x0c000, 0x0000, 0x0800 )	/* 4000-47ff of rom2.bin - empty (placed ok), bitplane 1 */
+	ROM_COPY( "temp",	0x14000, 0x0800, 0x0800 )	/* 4000-47ff of rom3.bin - empty (placed ok), bitplane 2 */
+	ROM_COPY( "temp",	0x04800, 0x1000, 0x0800 )	/* 4800-4fff of rom1.bin - empty (placed ok), bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx4", 0 )
+	ROM_COPY( "temp",	0x09800, 0x0000, 0x0800 )	/* 1800-1fff of rom2.bin - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x11800, 0x0800, 0x0800 )	/* 1800-1fff of rom3.bin - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x02000, 0x1000, 0x0800 )	/* 1800-1fff of rom1.bin - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx5", 0 )
+	ROM_COPY( "temp",	0x0a800, 0x0000, 0x0800 )	/* 2800-2fff of rom2.bin - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x12800, 0x0800, 0x0800 )	/* 2800-2fff of rom3.bin - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x03000, 0x1000, 0x0800 )	/* 3000-37ff of rom1.bin - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx6", 0 )
+	ROM_COPY( "temp",	0x0a000, 0x0000, 0x0800 )	/* 2000-27ff of rom2.bin - 'Video Klein' logo lower tiles (placed ok), bitplane 1 */
+	ROM_COPY( "temp",	0x12000, 0x0800, 0x0800 )	/* 2000-27ff of rom3.bin - 'Video Klein' logo lower tiles (placed ok), bitplane 2 */
+	ROM_COPY( "temp",	0x02800, 0x1000, 0x0800 )	/* 2800-2fff of rom1.bin - 'Video Klein' logo lower tiles (placed ok), bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx7", 0 )
+	ROM_COPY( "temp",	0x0e800, 0x0000, 0x0800 )	/* 6800-6fff of rom2.bin - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x16800, 0x0800, 0x0800 )	/* 6800-6fff of rom3.bin - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x07000, 0x1000, 0x0800 )	/* 7000-77ff of rom1.bin - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx8", 0 )
+	ROM_COPY( "temp",	0x0b800, 0x0000, 0x0800 )	/* 3800-3fff of rom2.bin - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x13800, 0x0800, 0x0800 )	/* 3800-3fff of rom3.bin - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x04000, 0x1000, 0x0800 )	/* 3800-3fff of rom1.bin - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx9", 0 )
+	ROM_COPY( "temp",	0x0c800, 0x0000, 0x0800 )	/* 4800-4fff of rom2.bin - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x14800, 0x0800, 0x0800 )	/* 4800-4fff of rom3.bin - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x05000, 0x1000, 0x0800 )	/* 4000-47ff of rom1.bin - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx10", 0 )
+	ROM_COPY( "temp",	0x09000, 0x0000, 0x0800 )	/* 1000-17ff of rom2.bin - extended pin gfx and logo upper tiles (placed ok), bitplane 1 */
+	ROM_COPY( "temp",	0x11000, 0x0800, 0x0800 )	/* 1000-17ff of rom3.bin - extended pin gfx and logo upper tiles (placed ok), bitplane 2 */
+	ROM_COPY( "temp",	0x01800, 0x1000, 0x0800 )	/* 1800-1fff of rom1.bin - extended pin gfx and logo upper tiles (placed ok), bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx11", 0 )
+	ROM_COPY( "temp",	0x0d000, 0x0000, 0x0800 )	/* 5000-57ff of rom2.bin - empty (placed ok), bitplane 1 */
+	ROM_COPY( "temp",	0x15000, 0x0800, 0x0800 )	/* 5000-57ff of rom3.bin - empty (placed ok), bitplane 2 */
+	ROM_COPY( "temp",	0x05800, 0x1000, 0x0800 )	/* 5800-5fff of rom1.bin - empty (placed ok), bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx12", 0 )
+	ROM_COPY( "temp",	0x0d800, 0x0000, 0x0800 )	/* 5800-5fff of rom2.bin - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x15800, 0x0800, 0x0800 )	/* 5800-5fff of rom3.bin - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x06000, 0x1000, 0x0800 )	/* 6000-67ff of rom1.bin - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx13", 0 )
+	ROM_COPY( "temp",	0x0e000, 0x0000, 0x0800 )	/* 6000-67ff of rom2.bin - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x16000, 0x0800, 0x0800 )	/* 6000-67ff of rom3.bin - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x06800, 0x1000, 0x0800 )	/* 6800-6fff of rom1.bin - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx14", 0 )
+	ROM_COPY( "temp",	0x0b000, 0x0000, 0x0800 )	/* 3000-37ff of rom2.bin - garbage (placed ok), bitplane 1 */
+	ROM_COPY( "temp",	0x13000, 0x0800, 0x0800 )	/* 3000-37ff of rom3.bin - garbage (placed ok), bitplane 2 */
+	ROM_COPY( "temp",	0x03800, 0x1000, 0x0800 )	/* 3800-3fff of rom1.bin - garbage (placed ok), bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx15", 0 )
+	ROM_COPY( "temp",	0x0f000, 0x0000, 0x0800 )	/* 7000-77ff of rom2.bin - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x17000, 0x0800, 0x0800 )	/* 7000-77ff of rom3.bin - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x07800, 0x1000, 0x0800 )	/* 7800-7fff of rom1.bin - empty, bitplane 3 */
+
+	ROM_REGION( 0x0100, "proms", 0 )
+	ROM_LOAD( "wjack_tbp.bin",	0x0000, 0x0100, BAD_DUMP CRC(ed15125b) SHA1(56fc00f2ce4ebe9cee73a45b142c33c00432b66b) )
+ROM_END
+
+
+ROM_START( wtchjacka )	/* Witch Jackpot 0.25 / 1994-11-24 */
+	ROM_REGION( 0x10000, "maincpu", 0 )
+	ROM_LOAD( "wj5x5015.bin",	0x8000, 0x8000, CRC(bc0e6b78) SHA1(29482035f6122385447009abd695ed52fc669158) )
+
+	ROM_REGION( 0x18000, "temp", 0 )
+	ROM_LOAD( "wj5x5_1zs.bin",	0x00000, 0x8000, BAD_DUMP CRC(a780ba7f) SHA1(dde75187df298392333cfe1a19beed5b9d172aad) )
+	ROM_LOAD( "wj5x5_2zs.bin",	0x08000, 0x8000, BAD_DUMP CRC(0f4e9f82) SHA1(a22bbbf0130dd6ece61189ce81a3376213617509) )
+	ROM_LOAD( "wj5x5_3zs.bin",	0x10000, 0x8000, BAD_DUMP CRC(708e1d7f) SHA1(518312fd0bc24d7895eae0cfa9dbad99e1adf67c) )
+
+	ROM_REGION( 0x1800, "gfx0", 0 )
+	ROM_FILL(			0x0000, 0x1000, 0 )			/* filling bitplanes */
+	ROM_COPY( "temp",	0x0000, 0x1000, 0x0800 )	/* 0000-07ff of rom1.bin - char rom (placed ok), bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx1", 0 )
+	ROM_COPY( "temp",	0x08800, 0x0000, 0x0800 )	/* 0800-0fff of rom2.bin - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x10800, 0x0800, 0x0800 )	/* 0800-0fff of rom3.bin - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x01000, 0x1000, 0x0800 )	/* 1000-17ff of rom1.bin - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx2", 0 )
+	ROM_COPY( "temp",	0x08000, 0x0000, 0x0800 )	/* 0000-07ff of rom2.bin - regular pin gfx (placed ok), bitplane 1 */
+	ROM_COPY( "temp",	0x10000, 0x0800, 0x0800 )	/* 0000-07ff of rom3.bin - regular pin gfx (placed ok), bitplane 2 */
+	ROM_COPY( "temp",	0x00800, 0x1000, 0x0800 )	/* 0800-0fff of rom1.bin - regular pin gfx (placed ok), bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx3", 0 )
+	ROM_COPY( "temp",	0x0c000, 0x0000, 0x0800 )	/* 4000-47ff of rom2.bin - empty (placed ok), bitplane 1 */
+	ROM_COPY( "temp",	0x14000, 0x0800, 0x0800 )	/* 4000-47ff of rom3.bin - empty (placed ok), bitplane 2 */
+	ROM_COPY( "temp",	0x04800, 0x1000, 0x0800 )	/* 4800-4fff of rom1.bin - empty (placed ok), bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx4", 0 )
+	ROM_COPY( "temp",	0x09800, 0x0000, 0x0800 )	/* 1800-1fff of rom2.bin - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x11800, 0x0800, 0x0800 )	/* 1800-1fff of rom3.bin - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x02000, 0x1000, 0x0800 )	/* 1800-1fff of rom1.bin - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx5", 0 )
+	ROM_COPY( "temp",	0x0a800, 0x0000, 0x0800 )	/* 2800-2fff of rom2.bin - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x12800, 0x0800, 0x0800 )	/* 2800-2fff of rom3.bin - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x03000, 0x1000, 0x0800 )	/* 3000-37ff of rom1.bin - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx6", 0 )
+	ROM_COPY( "temp",	0x0a000, 0x0000, 0x0800 )	/* 2000-27ff of rom2.bin - 'Video Klein' logo lower tiles (placed ok), bitplane 1 */
+	ROM_COPY( "temp",	0x12000, 0x0800, 0x0800 )	/* 2000-27ff of rom3.bin - 'Video Klein' logo lower tiles (placed ok), bitplane 2 */
+	ROM_COPY( "temp",	0x02800, 0x1000, 0x0800 )	/* 2800-2fff of rom1.bin - 'Video Klein' logo lower tiles (placed ok), bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx7", 0 )
+	ROM_COPY( "temp",	0x0e800, 0x0000, 0x0800 )	/* 6800-6fff of rom2.bin - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x16800, 0x0800, 0x0800 )	/* 6800-6fff of rom3.bin - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x07000, 0x1000, 0x0800 )	/* 7000-77ff of rom1.bin - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx8", 0 )
+	ROM_COPY( "temp",	0x0b800, 0x0000, 0x0800 )	/* 3800-3fff of rom2.bin - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x13800, 0x0800, 0x0800 )	/* 3800-3fff of rom3.bin - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x04000, 0x1000, 0x0800 )	/* 3800-3fff of rom1.bin - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx9", 0 )
+	ROM_COPY( "temp",	0x0c800, 0x0000, 0x0800 )	/* 4800-4fff of rom2.bin - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x14800, 0x0800, 0x0800 )	/* 4800-4fff of rom3.bin - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x05000, 0x1000, 0x0800 )	/* 4000-47ff of rom1.bin - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx10", 0 )
+	ROM_COPY( "temp",	0x09000, 0x0000, 0x0800 )	/* 1000-17ff of rom2.bin - extended pin gfx and logo upper tiles (placed ok), bitplane 1 */
+	ROM_COPY( "temp",	0x11000, 0x0800, 0x0800 )	/* 1000-17ff of rom3.bin - extended pin gfx and logo upper tiles (placed ok), bitplane 2 */
+	ROM_COPY( "temp",	0x01800, 0x1000, 0x0800 )	/* 1800-1fff of rom1.bin - extended pin gfx and logo upper tiles (placed ok), bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx11", 0 )
+	ROM_COPY( "temp",	0x0d000, 0x0000, 0x0800 )	/* 5000-57ff of rom2.bin - empty (placed ok), bitplane 1 */
+	ROM_COPY( "temp",	0x15000, 0x0800, 0x0800 )	/* 5000-57ff of rom3.bin - empty (placed ok), bitplane 2 */
+	ROM_COPY( "temp",	0x05800, 0x1000, 0x0800 )	/* 5800-5fff of rom1.bin - empty (placed ok), bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx12", 0 )
+	ROM_COPY( "temp",	0x0d800, 0x0000, 0x0800 )	/* 5800-5fff of rom2.bin - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x15800, 0x0800, 0x0800 )	/* 5800-5fff of rom3.bin - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x06000, 0x1000, 0x0800 )	/* 6000-67ff of rom1.bin - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx13", 0 )
+	ROM_COPY( "temp",	0x0e000, 0x0000, 0x0800 )	/* 6000-67ff of rom2.bin - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x16000, 0x0800, 0x0800 )	/* 6000-67ff of rom3.bin - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x06800, 0x1000, 0x0800 )	/* 6800-6fff of rom1.bin - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx14", 0 )
+	ROM_COPY( "temp",	0x0b000, 0x0000, 0x0800 )	/* 3000-37ff of rom2.bin - garbage (placed ok), bitplane 1 */
+	ROM_COPY( "temp",	0x13000, 0x0800, 0x0800 )	/* 3000-37ff of rom3.bin - garbage (placed ok), bitplane 2 */
+	ROM_COPY( "temp",	0x03800, 0x1000, 0x0800 )	/* 3800-3fff of rom1.bin - garbage (placed ok), bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx15", 0 )
+	ROM_COPY( "temp",	0x0f000, 0x0000, 0x0800 )	/* 7000-77ff of rom2.bin - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x17000, 0x0800, 0x0800 )	/* 7000-77ff of rom3.bin - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x07800, 0x1000, 0x0800 )	/* 7800-7fff of rom1.bin - empty, bitplane 3 */
+
+	ROM_REGION( 0x0100, "proms", 0 )
+	ROM_LOAD( "wjack_tbp.bin",	0x0000, 0x0100, BAD_DUMP CRC(ed15125b) SHA1(56fc00f2ce4ebe9cee73a45b142c33c00432b66b) )
+ROM_END
+
+
+ROM_START( wtchjackb )	/* Witch Jack 0.40 / 1995-02-27 */
+	ROM_REGION( 0x10000, "maincpu", 0 )
+	ROM_LOAD( "wj5x5040.bin",	0x8000, 0x8000, CRC(2f0f1d7a) SHA1(048d0641a4e03a77f4964898ad2c224cb487aa36) )
+
+	ROM_REGION( 0x18000, "temp", 0 )
+	ROM_LOAD( "wj5x5_1zs.bin",	0x00000, 0x8000, BAD_DUMP CRC(a780ba7f) SHA1(dde75187df298392333cfe1a19beed5b9d172aad) )
+	ROM_LOAD( "wj5x5_2zs.bin",	0x08000, 0x8000, BAD_DUMP CRC(0f4e9f82) SHA1(a22bbbf0130dd6ece61189ce81a3376213617509) )
+	ROM_LOAD( "wj5x5_3zs.bin",	0x10000, 0x8000, BAD_DUMP CRC(708e1d7f) SHA1(518312fd0bc24d7895eae0cfa9dbad99e1adf67c) )
+
+	ROM_REGION( 0x1800, "gfx0", 0 )
+	ROM_FILL(			0x0000, 0x1000, 0 )			/* filling bitplanes */
+	ROM_COPY( "temp",	0x0000, 0x1000, 0x0800 )	/* 0000-07ff of rom1.bin - char rom (placed ok), bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx1", 0 )
+	ROM_COPY( "temp",	0x08800, 0x0000, 0x0800 )	/* 0800-0fff of rom2.bin - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x10800, 0x0800, 0x0800 )	/* 0800-0fff of rom3.bin - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x01000, 0x1000, 0x0800 )	/* 1000-17ff of rom1.bin - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx2", 0 )
+	ROM_COPY( "temp",	0x08000, 0x0000, 0x0800 )	/* 0000-07ff of rom2.bin - regular pin gfx (placed ok), bitplane 1 */
+	ROM_COPY( "temp",	0x10000, 0x0800, 0x0800 )	/* 0000-07ff of rom3.bin - regular pin gfx (placed ok), bitplane 2 */
+	ROM_COPY( "temp",	0x00800, 0x1000, 0x0800 )	/* 0800-0fff of rom1.bin - regular pin gfx (placed ok), bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx3", 0 )
+	ROM_COPY( "temp",	0x0c000, 0x0000, 0x0800 )	/* 4000-47ff of rom2.bin - empty (placed ok), bitplane 1 */
+	ROM_COPY( "temp",	0x14000, 0x0800, 0x0800 )	/* 4000-47ff of rom3.bin - empty (placed ok), bitplane 2 */
+	ROM_COPY( "temp",	0x04800, 0x1000, 0x0800 )	/* 4800-4fff of rom1.bin - empty (placed ok), bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx4", 0 )
+	ROM_COPY( "temp",	0x09800, 0x0000, 0x0800 )	/* 1800-1fff of rom2.bin - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x11800, 0x0800, 0x0800 )	/* 1800-1fff of rom3.bin - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x02000, 0x1000, 0x0800 )	/* 1800-1fff of rom1.bin - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx5", 0 )
+	ROM_COPY( "temp",	0x0a800, 0x0000, 0x0800 )	/* 2800-2fff of rom2.bin - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x12800, 0x0800, 0x0800 )	/* 2800-2fff of rom3.bin - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x03000, 0x1000, 0x0800 )	/* 3000-37ff of rom1.bin - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx6", 0 )
+	ROM_COPY( "temp",	0x0a000, 0x0000, 0x0800 )	/* 2000-27ff of rom2.bin - 'Video Klein' logo lower tiles (placed ok), bitplane 1 */
+	ROM_COPY( "temp",	0x12000, 0x0800, 0x0800 )	/* 2000-27ff of rom3.bin - 'Video Klein' logo lower tiles (placed ok), bitplane 2 */
+	ROM_COPY( "temp",	0x02800, 0x1000, 0x0800 )	/* 2800-2fff of rom1.bin - 'Video Klein' logo lower tiles (placed ok), bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx7", 0 )
+	ROM_COPY( "temp",	0x0e800, 0x0000, 0x0800 )	/* 6800-6fff of rom2.bin - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x16800, 0x0800, 0x0800 )	/* 6800-6fff of rom3.bin - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x07000, 0x1000, 0x0800 )	/* 7000-77ff of rom1.bin - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx8", 0 )
+	ROM_COPY( "temp",	0x0b800, 0x0000, 0x0800 )	/* 3800-3fff of rom2.bin - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x13800, 0x0800, 0x0800 )	/* 3800-3fff of rom3.bin - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x04000, 0x1000, 0x0800 )	/* 3800-3fff of rom1.bin - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx9", 0 )
+	ROM_COPY( "temp",	0x0c800, 0x0000, 0x0800 )	/* 4800-4fff of rom2.bin - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x14800, 0x0800, 0x0800 )	/* 4800-4fff of rom3.bin - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x05000, 0x1000, 0x0800 )	/* 4000-47ff of rom1.bin - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx10", 0 )
+	ROM_COPY( "temp",	0x09000, 0x0000, 0x0800 )	/* 1000-17ff of rom2.bin - extended pin gfx and logo upper tiles (placed ok), bitplane 1 */
+	ROM_COPY( "temp",	0x11000, 0x0800, 0x0800 )	/* 1000-17ff of rom3.bin - extended pin gfx and logo upper tiles (placed ok), bitplane 2 */
+	ROM_COPY( "temp",	0x01800, 0x1000, 0x0800 )	/* 1800-1fff of rom1.bin - extended pin gfx and logo upper tiles (placed ok), bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx11", 0 )
+	ROM_COPY( "temp",	0x0d000, 0x0000, 0x0800 )	/* 5000-57ff of rom2.bin - empty (placed ok), bitplane 1 */
+	ROM_COPY( "temp",	0x15000, 0x0800, 0x0800 )	/* 5000-57ff of rom3.bin - empty (placed ok), bitplane 2 */
+	ROM_COPY( "temp",	0x05800, 0x1000, 0x0800 )	/* 5800-5fff of rom1.bin - empty (placed ok), bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx12", 0 )
+	ROM_COPY( "temp",	0x0d800, 0x0000, 0x0800 )	/* 5800-5fff of rom2.bin - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x15800, 0x0800, 0x0800 )	/* 5800-5fff of rom3.bin - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x06000, 0x1000, 0x0800 )	/* 6000-67ff of rom1.bin - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx13", 0 )
+	ROM_COPY( "temp",	0x0e000, 0x0000, 0x0800 )	/* 6000-67ff of rom2.bin - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x16000, 0x0800, 0x0800 )	/* 6000-67ff of rom3.bin - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x06800, 0x1000, 0x0800 )	/* 6800-6fff of rom1.bin - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx14", 0 )
+	ROM_COPY( "temp",	0x0b000, 0x0000, 0x0800 )	/* 3000-37ff of rom2.bin - garbage (placed ok), bitplane 1 */
+	ROM_COPY( "temp",	0x13000, 0x0800, 0x0800 )	/* 3000-37ff of rom3.bin - garbage (placed ok), bitplane 2 */
+	ROM_COPY( "temp",	0x03800, 0x1000, 0x0800 )	/* 3800-3fff of rom1.bin - garbage (placed ok), bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx15", 0 )
+	ROM_COPY( "temp",	0x0f000, 0x0000, 0x0800 )	/* 7000-77ff of rom2.bin - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x17000, 0x0800, 0x0800 )	/* 7000-77ff of rom3.bin - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x07800, 0x1000, 0x0800 )	/* 7800-7fff of rom1.bin - empty, bitplane 3 */
+
+	ROM_REGION( 0x0100, "proms", 0 )
+	ROM_LOAD( "wjack_tbp.bin",	0x0000, 0x0100, BAD_DUMP CRC(ed15125b) SHA1(56fc00f2ce4ebe9cee73a45b142c33c00432b66b) )
+ROM_END
+
+
+ROM_START( wtchjackc )	/* Witch Jack 0.40T / 1995-02-27, Not Working */
+	ROM_REGION( 0x10000, "maincpu", 0 )
+	ROM_LOAD( "wj5x5t40.bin",	0x8000, 0x8000, CRC(a3a4f1d3) SHA1(16dcaf880134f10152703cb3ca81dfcbe48bff8b) )
+
+	ROM_REGION( 0x18000, "temp", 0 )
+	ROM_LOAD( "wj5x5_1zs.bin",	0x00000, 0x8000, BAD_DUMP CRC(a780ba7f) SHA1(dde75187df298392333cfe1a19beed5b9d172aad) )
+	ROM_LOAD( "wj5x5_2zs.bin",	0x08000, 0x8000, BAD_DUMP CRC(0f4e9f82) SHA1(a22bbbf0130dd6ece61189ce81a3376213617509) )
+	ROM_LOAD( "wj5x5_3zs.bin",	0x10000, 0x8000, BAD_DUMP CRC(708e1d7f) SHA1(518312fd0bc24d7895eae0cfa9dbad99e1adf67c) )
+
+	ROM_REGION( 0x1800, "gfx0", 0 )
+	ROM_FILL(			0x0000, 0x1000, 0 )			/* filling bitplanes */
+	ROM_COPY( "temp",	0x0000, 0x1000, 0x0800 )	/* 0000-07ff of rom1.bin - char rom (placed ok), bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx1", 0 )
+	ROM_COPY( "temp",	0x08800, 0x0000, 0x0800 )	/* 0800-0fff of rom2.bin - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x10800, 0x0800, 0x0800 )	/* 0800-0fff of rom3.bin - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x01000, 0x1000, 0x0800 )	/* 1000-17ff of rom1.bin - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx2", 0 )
+	ROM_COPY( "temp",	0x08000, 0x0000, 0x0800 )	/* 0000-07ff of rom2.bin - regular pin gfx (placed ok), bitplane 1 */
+	ROM_COPY( "temp",	0x10000, 0x0800, 0x0800 )	/* 0000-07ff of rom3.bin - regular pin gfx (placed ok), bitplane 2 */
+	ROM_COPY( "temp",	0x00800, 0x1000, 0x0800 )	/* 0800-0fff of rom1.bin - regular pin gfx (placed ok), bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx3", 0 )
+	ROM_COPY( "temp",	0x0c000, 0x0000, 0x0800 )	/* 4000-47ff of rom2.bin - empty (placed ok), bitplane 1 */
+	ROM_COPY( "temp",	0x14000, 0x0800, 0x0800 )	/* 4000-47ff of rom3.bin - empty (placed ok), bitplane 2 */
+	ROM_COPY( "temp",	0x04800, 0x1000, 0x0800 )	/* 4800-4fff of rom1.bin - empty (placed ok), bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx4", 0 )
+	ROM_COPY( "temp",	0x09800, 0x0000, 0x0800 )	/* 1800-1fff of rom2.bin - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x11800, 0x0800, 0x0800 )	/* 1800-1fff of rom3.bin - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x02000, 0x1000, 0x0800 )	/* 1800-1fff of rom1.bin - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx5", 0 )
+	ROM_COPY( "temp",	0x0a800, 0x0000, 0x0800 )	/* 2800-2fff of rom2.bin - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x12800, 0x0800, 0x0800 )	/* 2800-2fff of rom3.bin - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x03000, 0x1000, 0x0800 )	/* 3000-37ff of rom1.bin - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx6", 0 )
+	ROM_COPY( "temp",	0x0a000, 0x0000, 0x0800 )	/* 2000-27ff of rom2.bin - 'Video Klein' logo lower tiles (placed ok), bitplane 1 */
+	ROM_COPY( "temp",	0x12000, 0x0800, 0x0800 )	/* 2000-27ff of rom3.bin - 'Video Klein' logo lower tiles (placed ok), bitplane 2 */
+	ROM_COPY( "temp",	0x02800, 0x1000, 0x0800 )	/* 2800-2fff of rom1.bin - 'Video Klein' logo lower tiles (placed ok), bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx7", 0 )
+	ROM_COPY( "temp",	0x0e800, 0x0000, 0x0800 )	/* 6800-6fff of rom2.bin - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x16800, 0x0800, 0x0800 )	/* 6800-6fff of rom3.bin - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x07000, 0x1000, 0x0800 )	/* 7000-77ff of rom1.bin - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx8", 0 )
+	ROM_COPY( "temp",	0x0b800, 0x0000, 0x0800 )	/* 3800-3fff of rom2.bin - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x13800, 0x0800, 0x0800 )	/* 3800-3fff of rom3.bin - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x04000, 0x1000, 0x0800 )	/* 3800-3fff of rom1.bin - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx9", 0 )
+	ROM_COPY( "temp",	0x0c800, 0x0000, 0x0800 )	/* 4800-4fff of rom2.bin - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x14800, 0x0800, 0x0800 )	/* 4800-4fff of rom3.bin - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x05000, 0x1000, 0x0800 )	/* 4000-47ff of rom1.bin - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx10", 0 )
+	ROM_COPY( "temp",	0x09000, 0x0000, 0x0800 )	/* 1000-17ff of rom2.bin - extended pin gfx and logo upper tiles (placed ok), bitplane 1 */
+	ROM_COPY( "temp",	0x11000, 0x0800, 0x0800 )	/* 1000-17ff of rom3.bin - extended pin gfx and logo upper tiles (placed ok), bitplane 2 */
+	ROM_COPY( "temp",	0x01800, 0x1000, 0x0800 )	/* 1800-1fff of rom1.bin - extended pin gfx and logo upper tiles (placed ok), bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx11", 0 )
+	ROM_COPY( "temp",	0x0d000, 0x0000, 0x0800 )	/* 5000-57ff of rom2.bin - empty (placed ok), bitplane 1 */
+	ROM_COPY( "temp",	0x15000, 0x0800, 0x0800 )	/* 5000-57ff of rom3.bin - empty (placed ok), bitplane 2 */
+	ROM_COPY( "temp",	0x05800, 0x1000, 0x0800 )	/* 5800-5fff of rom1.bin - empty (placed ok), bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx12", 0 )
+	ROM_COPY( "temp",	0x0d800, 0x0000, 0x0800 )	/* 5800-5fff of rom2.bin - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x15800, 0x0800, 0x0800 )	/* 5800-5fff of rom3.bin - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x06000, 0x1000, 0x0800 )	/* 6000-67ff of rom1.bin - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx13", 0 )
+	ROM_COPY( "temp",	0x0e000, 0x0000, 0x0800 )	/* 6000-67ff of rom2.bin - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x16000, 0x0800, 0x0800 )	/* 6000-67ff of rom3.bin - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x06800, 0x1000, 0x0800 )	/* 6800-6fff of rom1.bin - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx14", 0 )
+	ROM_COPY( "temp",	0x0b000, 0x0000, 0x0800 )	/* 3000-37ff of rom2.bin - garbage (placed ok), bitplane 1 */
+	ROM_COPY( "temp",	0x13000, 0x0800, 0x0800 )	/* 3000-37ff of rom3.bin - garbage (placed ok), bitplane 2 */
+	ROM_COPY( "temp",	0x03800, 0x1000, 0x0800 )	/* 3800-3fff of rom1.bin - garbage (placed ok), bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx15", 0 )
+	ROM_COPY( "temp",	0x0f000, 0x0000, 0x0800 )	/* 7000-77ff of rom2.bin - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x17000, 0x0800, 0x0800 )	/* 7000-77ff of rom3.bin - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x07800, 0x1000, 0x0800 )	/* 7800-7fff of rom1.bin - empty, bitplane 3 */
 
 	ROM_REGION( 0x0100, "proms", 0 )
-	ROM_LOAD( "s287.8c",	0x0000, 0x0100, CRC(7f31066b) SHA1(15420780ec6b2870fc4539ec3afe4f0c58eedf12) )
+	ROM_LOAD( "wjack_tbp.bin",	0x0000, 0x0100, BAD_DUMP CRC(ed15125b) SHA1(56fc00f2ce4ebe9cee73a45b142c33c00432b66b) )
 ROM_END
 
-/****************************************************
 
-  Unknown poker game, set 2.
-  198?.
+ROM_START( wtchjackd )	/* Witch Jack 0.62 / 1995-08-02 */
+	ROM_REGION( 0x10000, "maincpu", 0 )
+	ROM_LOAD( "wj5x563.bin",	0x8000, 0x8000, CRC(55e74382) SHA1(af0a890c55db36e8a2f847ea103858cc7b7115be) )	//
 
-  This one is totally encrypted.
-  The PCB has a daughterboard coated with some plastic
-  or epoxy resin.
+	ROM_REGION( 0x18000, "temp", 0 )
+	ROM_LOAD( "wj5x5_1zs.bin",	0x00000, 0x8000, BAD_DUMP CRC(a780ba7f) SHA1(dde75187df298392333cfe1a19beed5b9d172aad) )
+	ROM_LOAD( "wj5x5_2zs.bin",	0x08000, 0x8000, BAD_DUMP CRC(0f4e9f82) SHA1(a22bbbf0130dd6ece61189ce81a3376213617509) )
+	ROM_LOAD( "wj5x5_3zs.bin",	0x10000, 0x8000, BAD_DUMP CRC(708e1d7f) SHA1(518312fd0bc24d7895eae0cfa9dbad99e1adf67c) )
 
-  Char ROM is identical to the Witch Card one.
+	ROM_REGION( 0x1800, "gfx0", 0 )
+	ROM_FILL(			0x0000, 0x1000, 0 )			/* filling bitplanes */
+	ROM_COPY( "temp",	0x0000, 0x1000, 0x0800 )	/* 0000-07ff of rom1.bin - char rom (placed ok), bitplane 3 */
 
-*****************************************************/
+	ROM_REGION( 0x1800, "gfx1", 0 )
+	ROM_COPY( "temp",	0x08800, 0x0000, 0x0800 )	/* 0800-0fff of rom2.bin - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x10800, 0x0800, 0x0800 )	/* 0800-0fff of rom3.bin - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x01000, 0x1000, 0x0800 )	/* 1000-17ff of rom1.bin - empty, bitplane 3 */
 
-ROM_START( pokerduc )
+	ROM_REGION( 0x1800, "gfx2", 0 )
+	ROM_COPY( "temp",	0x08000, 0x0000, 0x0800 )	/* 0000-07ff of rom2.bin - regular pin gfx (placed ok), bitplane 1 */
+	ROM_COPY( "temp",	0x10000, 0x0800, 0x0800 )	/* 0000-07ff of rom3.bin - regular pin gfx (placed ok), bitplane 2 */
+	ROM_COPY( "temp",	0x00800, 0x1000, 0x0800 )	/* 0800-0fff of rom1.bin - regular pin gfx (placed ok), bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx3", 0 )
+	ROM_COPY( "temp",	0x0c000, 0x0000, 0x0800 )	/* 4000-47ff of rom2.bin - empty (placed ok), bitplane 1 */
+	ROM_COPY( "temp",	0x14000, 0x0800, 0x0800 )	/* 4000-47ff of rom3.bin - empty (placed ok), bitplane 2 */
+	ROM_COPY( "temp",	0x04800, 0x1000, 0x0800 )	/* 4800-4fff of rom1.bin - empty (placed ok), bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx4", 0 )
+	ROM_COPY( "temp",	0x09800, 0x0000, 0x0800 )	/* 1800-1fff of rom2.bin - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x11800, 0x0800, 0x0800 )	/* 1800-1fff of rom3.bin - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x02000, 0x1000, 0x0800 )	/* 1800-1fff of rom1.bin - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx5", 0 )
+	ROM_COPY( "temp",	0x0a800, 0x0000, 0x0800 )	/* 2800-2fff of rom2.bin - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x12800, 0x0800, 0x0800 )	/* 2800-2fff of rom3.bin - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x03000, 0x1000, 0x0800 )	/* 3000-37ff of rom1.bin - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx6", 0 )
+	ROM_COPY( "temp",	0x0a000, 0x0000, 0x0800 )	/* 2000-27ff of rom2.bin - 'Video Klein' logo lower tiles (placed ok), bitplane 1 */
+	ROM_COPY( "temp",	0x12000, 0x0800, 0x0800 )	/* 2000-27ff of rom3.bin - 'Video Klein' logo lower tiles (placed ok), bitplane 2 */
+	ROM_COPY( "temp",	0x02800, 0x1000, 0x0800 )	/* 2800-2fff of rom1.bin - 'Video Klein' logo lower tiles (placed ok), bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx7", 0 )
+	ROM_COPY( "temp",	0x0e800, 0x0000, 0x0800 )	/* 6800-6fff of rom2.bin - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x16800, 0x0800, 0x0800 )	/* 6800-6fff of rom3.bin - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x07000, 0x1000, 0x0800 )	/* 7000-77ff of rom1.bin - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx8", 0 )
+	ROM_COPY( "temp",	0x0b800, 0x0000, 0x0800 )	/* 3800-3fff of rom2.bin - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x13800, 0x0800, 0x0800 )	/* 3800-3fff of rom3.bin - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x04000, 0x1000, 0x0800 )	/* 3800-3fff of rom1.bin - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx9", 0 )
+	ROM_COPY( "temp",	0x0c800, 0x0000, 0x0800 )	/* 4800-4fff of rom2.bin - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x14800, 0x0800, 0x0800 )	/* 4800-4fff of rom3.bin - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x05000, 0x1000, 0x0800 )	/* 4000-47ff of rom1.bin - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx10", 0 )
+	ROM_COPY( "temp",	0x09000, 0x0000, 0x0800 )	/* 1000-17ff of rom2.bin - extended pin gfx and logo upper tiles (placed ok), bitplane 1 */
+	ROM_COPY( "temp",	0x11000, 0x0800, 0x0800 )	/* 1000-17ff of rom3.bin - extended pin gfx and logo upper tiles (placed ok), bitplane 2 */
+	ROM_COPY( "temp",	0x01800, 0x1000, 0x0800 )	/* 1800-1fff of rom1.bin - extended pin gfx and logo upper tiles (placed ok), bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx11", 0 )
+	ROM_COPY( "temp",	0x0d000, 0x0000, 0x0800 )	/* 5000-57ff of rom2.bin - empty (placed ok), bitplane 1 */
+	ROM_COPY( "temp",	0x15000, 0x0800, 0x0800 )	/* 5000-57ff of rom3.bin - empty (placed ok), bitplane 2 */
+	ROM_COPY( "temp",	0x05800, 0x1000, 0x0800 )	/* 5800-5fff of rom1.bin - empty (placed ok), bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx12", 0 )
+	ROM_COPY( "temp",	0x0d800, 0x0000, 0x0800 )	/* 5800-5fff of rom2.bin - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x15800, 0x0800, 0x0800 )	/* 5800-5fff of rom3.bin - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x06000, 0x1000, 0x0800 )	/* 6000-67ff of rom1.bin - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx13", 0 )
+	ROM_COPY( "temp",	0x0e000, 0x0000, 0x0800 )	/* 6000-67ff of rom2.bin - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x16000, 0x0800, 0x0800 )	/* 6000-67ff of rom3.bin - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x06800, 0x1000, 0x0800 )	/* 6800-6fff of rom1.bin - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx14", 0 )
+	ROM_COPY( "temp",	0x0b000, 0x0000, 0x0800 )	/* 3000-37ff of rom2.bin - garbage (placed ok), bitplane 1 */
+	ROM_COPY( "temp",	0x13000, 0x0800, 0x0800 )	/* 3000-37ff of rom3.bin - garbage (placed ok), bitplane 2 */
+	ROM_COPY( "temp",	0x03800, 0x1000, 0x0800 )	/* 3800-3fff of rom1.bin - garbage (placed ok), bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx15", 0 )
+	ROM_COPY( "temp",	0x0f000, 0x0000, 0x0800 )	/* 7000-77ff of rom2.bin - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x17000, 0x0800, 0x0800 )	/* 7000-77ff of rom3.bin - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x07800, 0x1000, 0x0800 )	/* 7800-7fff of rom1.bin - empty, bitplane 3 */
+
+	ROM_REGION( 0x0100, "proms", 0 )
+	ROM_LOAD( "wjack_tbp.bin",	0x0000, 0x0100, BAD_DUMP CRC(ed15125b) SHA1(56fc00f2ce4ebe9cee73a45b142c33c00432b66b) )
+ROM_END
+
+
+ROM_START( wtchjacke )	/* Witch Jack 0.64 / 1995-09-13 */
 	ROM_REGION( 0x10000, "maincpu", 0 )
-	ROM_LOAD( "b",	0x5000, 0x1000, CRC(8627fba5) SHA1(b94665f0bf425ff71f78c1258f910323c2a948f0) )
-	ROM_LOAD( "c",	0x6000, 0x1000, CRC(b35b4108) SHA1(6504ba55511637334c65e88ee5c60b1503b854b3) )
-	ROM_LOAD( "d",	0x7000, 0x1000, CRC(c48096ed) SHA1(279ba433369c7dc9cd902a19200e889eea45d115) )
+	ROM_LOAD( "wj5x564p.bin",	0x8000, 0x8000, CRC(7ee61b69) SHA1(313b750a7949f4d08cdf79c068d01ed91fc66dce) )
+
+	ROM_REGION( 0x18000, "temp", 0 )
+	ROM_LOAD( "wj5x5_1zs.bin",	0x00000, 0x8000, BAD_DUMP CRC(a780ba7f) SHA1(dde75187df298392333cfe1a19beed5b9d172aad) )
+	ROM_LOAD( "wj5x5_2zs.bin",	0x08000, 0x8000, BAD_DUMP CRC(0f4e9f82) SHA1(a22bbbf0130dd6ece61189ce81a3376213617509) )
+	ROM_LOAD( "wj5x5_3zs.bin",	0x10000, 0x8000, BAD_DUMP CRC(708e1d7f) SHA1(518312fd0bc24d7895eae0cfa9dbad99e1adf67c) )
+
+	ROM_REGION( 0x1800, "gfx0", 0 )
+	ROM_FILL(			0x0000, 0x1000, 0 )			/* filling bitplanes */
+	ROM_COPY( "temp",	0x0000, 0x1000, 0x0800 )	/* 0000-07ff of rom1.bin - char rom (placed ok), bitplane 3 */
 
 	ROM_REGION( 0x1800, "gfx1", 0 )
-	ROM_FILL(			0x0000, 0x1000, 0 ) /* filling the R-G bitplanes */
-	ROM_LOAD( "a.8a",	0x1000, 0x0800, CRC(c70a3e49) SHA1(eb2f15b344f4dec5f05701415848c854bb27aaa3) )    /* char ROM (cracked title) */
+	ROM_COPY( "temp",	0x08800, 0x0000, 0x0800 )	/* 0800-0fff of rom2.bin - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x10800, 0x0800, 0x0800 )	/* 0800-0fff of rom3.bin - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x01000, 0x1000, 0x0800 )	/* 1000-17ff of rom1.bin - empty, bitplane 3 */
 
 	ROM_REGION( 0x1800, "gfx2", 0 )
-	ROM_LOAD( "1.4a",	0x0000, 0x0800, CRC(f2f94661) SHA1(f37f7c0dff680fd02897dae64e13e297d0fdb3e7) )    /* cards deck gfx, bitplane1 */
-	ROM_LOAD( "2.6a",	0x0800, 0x0800, CRC(6bbb1e2d) SHA1(51ee282219bf84218886ad11a24bc6a8e7337527) )    /* cards deck gfx, bitplane2 */
-	ROM_LOAD( "3.7a",	0x1000, 0x0800, CRC(232374f3) SHA1(b75907edbf769b8c46fb1ebdb301c325c556e6c2) )    /* cards deck gfx, bitplane3 */
-	ROM_IGNORE(                 0x0800)	/* identical halves */
+	ROM_COPY( "temp",	0x08000, 0x0000, 0x0800 )	/* 0000-07ff of rom2.bin - regular pin gfx (placed ok), bitplane 1 */
+	ROM_COPY( "temp",	0x10000, 0x0800, 0x0800 )	/* 0000-07ff of rom3.bin - regular pin gfx (placed ok), bitplane 2 */
+	ROM_COPY( "temp",	0x00800, 0x1000, 0x0800 )	/* 0800-0fff of rom1.bin - regular pin gfx (placed ok), bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx3", 0 )
+	ROM_COPY( "temp",	0x0c000, 0x0000, 0x0800 )	/* 4000-47ff of rom2.bin - empty (placed ok), bitplane 1 */
+	ROM_COPY( "temp",	0x14000, 0x0800, 0x0800 )	/* 4000-47ff of rom3.bin - empty (placed ok), bitplane 2 */
+	ROM_COPY( "temp",	0x04800, 0x1000, 0x0800 )	/* 4800-4fff of rom1.bin - empty (placed ok), bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx4", 0 )
+	ROM_COPY( "temp",	0x09800, 0x0000, 0x0800 )	/* 1800-1fff of rom2.bin - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x11800, 0x0800, 0x0800 )	/* 1800-1fff of rom3.bin - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x02000, 0x1000, 0x0800 )	/* 1800-1fff of rom1.bin - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx5", 0 )
+	ROM_COPY( "temp",	0x0a800, 0x0000, 0x0800 )	/* 2800-2fff of rom2.bin - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x12800, 0x0800, 0x0800 )	/* 2800-2fff of rom3.bin - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x03000, 0x1000, 0x0800 )	/* 3000-37ff of rom1.bin - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx6", 0 )
+	ROM_COPY( "temp",	0x0a000, 0x0000, 0x0800 )	/* 2000-27ff of rom2.bin - 'Video Klein' logo lower tiles (placed ok), bitplane 1 */
+	ROM_COPY( "temp",	0x12000, 0x0800, 0x0800 )	/* 2000-27ff of rom3.bin - 'Video Klein' logo lower tiles (placed ok), bitplane 2 */
+	ROM_COPY( "temp",	0x02800, 0x1000, 0x0800 )	/* 2800-2fff of rom1.bin - 'Video Klein' logo lower tiles (placed ok), bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx7", 0 )
+	ROM_COPY( "temp",	0x0e800, 0x0000, 0x0800 )	/* 6800-6fff of rom2.bin - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x16800, 0x0800, 0x0800 )	/* 6800-6fff of rom3.bin - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x07000, 0x1000, 0x0800 )	/* 7000-77ff of rom1.bin - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx8", 0 )
+	ROM_COPY( "temp",	0x0b800, 0x0000, 0x0800 )	/* 3800-3fff of rom2.bin - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x13800, 0x0800, 0x0800 )	/* 3800-3fff of rom3.bin - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x04000, 0x1000, 0x0800 )	/* 3800-3fff of rom1.bin - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx9", 0 )
+	ROM_COPY( "temp",	0x0c800, 0x0000, 0x0800 )	/* 4800-4fff of rom2.bin - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x14800, 0x0800, 0x0800 )	/* 4800-4fff of rom3.bin - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x05000, 0x1000, 0x0800 )	/* 4000-47ff of rom1.bin - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx10", 0 )
+	ROM_COPY( "temp",	0x09000, 0x0000, 0x0800 )	/* 1000-17ff of rom2.bin - extended pin gfx and logo upper tiles (placed ok), bitplane 1 */
+	ROM_COPY( "temp",	0x11000, 0x0800, 0x0800 )	/* 1000-17ff of rom3.bin - extended pin gfx and logo upper tiles (placed ok), bitplane 2 */
+	ROM_COPY( "temp",	0x01800, 0x1000, 0x0800 )	/* 1800-1fff of rom1.bin - extended pin gfx and logo upper tiles (placed ok), bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx11", 0 )
+	ROM_COPY( "temp",	0x0d000, 0x0000, 0x0800 )	/* 5000-57ff of rom2.bin - empty (placed ok), bitplane 1 */
+	ROM_COPY( "temp",	0x15000, 0x0800, 0x0800 )	/* 5000-57ff of rom3.bin - empty (placed ok), bitplane 2 */
+	ROM_COPY( "temp",	0x05800, 0x1000, 0x0800 )	/* 5800-5fff of rom1.bin - empty (placed ok), bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx12", 0 )
+	ROM_COPY( "temp",	0x0d800, 0x0000, 0x0800 )	/* 5800-5fff of rom2.bin - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x15800, 0x0800, 0x0800 )	/* 5800-5fff of rom3.bin - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x06000, 0x1000, 0x0800 )	/* 6000-67ff of rom1.bin - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx13", 0 )
+	ROM_COPY( "temp",	0x0e000, 0x0000, 0x0800 )	/* 6000-67ff of rom2.bin - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x16000, 0x0800, 0x0800 )	/* 6000-67ff of rom3.bin - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x06800, 0x1000, 0x0800 )	/* 6800-6fff of rom1.bin - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx14", 0 )
+	ROM_COPY( "temp",	0x0b000, 0x0000, 0x0800 )	/* 3000-37ff of rom2.bin - garbage (placed ok), bitplane 1 */
+	ROM_COPY( "temp",	0x13000, 0x0800, 0x0800 )	/* 3000-37ff of rom3.bin - garbage (placed ok), bitplane 2 */
+	ROM_COPY( "temp",	0x03800, 0x1000, 0x0800 )	/* 3800-3fff of rom1.bin - garbage (placed ok), bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx15", 0 )
+	ROM_COPY( "temp",	0x0f000, 0x0000, 0x0800 )	/* 7000-77ff of rom2.bin - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x17000, 0x0800, 0x0800 )	/* 7000-77ff of rom3.bin - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x07800, 0x1000, 0x0800 )	/* 7800-7fff of rom1.bin - empty, bitplane 3 */
 
 	ROM_REGION( 0x0100, "proms", 0 )
-	ROM_LOAD( "tbp24s10.9c",	0x0000, 0x0100, CRC(7f31066b) SHA1(15420780ec6b2870fc4539ec3afe4f0c58eedf12) )
+	ROM_LOAD( "wjack_tbp.bin",	0x0000, 0x0100, BAD_DUMP CRC(ed15125b) SHA1(56fc00f2ce4ebe9cee73a45b142c33c00432b66b) )
 ROM_END
 
 
-/*  Jolli Witch (german)
-    Epoxy CPU box.
+ROM_START( wtchjackf )	/* Witch Jack 0.65 / 1995-10-19 */
+	ROM_REGION( 0x10000, "maincpu", 0 )
+	ROM_LOAD( "wj5x565p.bin",	0x8000, 0x8000, CRC(20c23876) SHA1(ca2309766a68ba280d71b3b62e00d38d70b8536a) )
 
-    Using the whole addressing
-*/
-ROM_START( witchjol )
-	ROM_REGION( 0x10000, "maincpu", 0 )	/* inside epoxy block with the CPU */
-	ROM_LOAD( "27c256.bin",	0x8000, 0x8000, CRC(14f05e3b) SHA1(83578f6a82b0974dd0325903926b2fd0d8e5c236) )
+	ROM_REGION( 0x18000, "temp", 0 )
+	ROM_LOAD( "wj5x5_1zs.bin",	0x00000, 0x8000, BAD_DUMP CRC(a780ba7f) SHA1(dde75187df298392333cfe1a19beed5b9d172aad) )
+	ROM_LOAD( "wj5x5_2zs.bin",	0x08000, 0x8000, BAD_DUMP CRC(0f4e9f82) SHA1(a22bbbf0130dd6ece61189ce81a3376213617509) )
+	ROM_LOAD( "wj5x5_3zs.bin",	0x10000, 0x8000, BAD_DUMP CRC(708e1d7f) SHA1(518312fd0bc24d7895eae0cfa9dbad99e1adf67c) )
 
-	ROM_REGION( 0x6000, "temp", 0 )
-	ROM_LOAD( "iii.5a",	0x0000, 0x2000, CRC(5ea338da) SHA1(5e55e17689541ffb9c23e45f689dda98a79bf789) )
-	ROM_LOAD( "ii.4a",	0x2000, 0x2000, CRC(044dfac0) SHA1(721f8f57e05ddcbdb838d12fd3e81a45346ee6db) )
-	ROM_LOAD( "i.2a",	0x4000, 0x2000, CRC(d467f6e2) SHA1(6aaf4cdfb76f5efeeee45635fea120711483648e) )
+	ROM_REGION( 0x1800, "gfx0", 0 )
+	ROM_FILL(			0x0000, 0x1000, 0 )			/* filling bitplanes */
+	ROM_COPY( "temp",	0x0000, 0x1000, 0x0800 )	/* 0000-07ff of rom1.bin - char rom (placed ok), bitplane 3 */
 
 	ROM_REGION( 0x1800, "gfx1", 0 )
-	ROM_FILL(			0x0000, 0x1000, 0 )			/* filling bitplanes */
-	ROM_COPY( "temp",	0x0000, 0x1000, 0x0800 )	/* 0000-07ff of 03.a3 - char rom, bitplane 3*/
+	ROM_COPY( "temp",	0x08800, 0x0000, 0x0800 )	/* 0800-0fff of rom2.bin - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x10800, 0x0800, 0x0800 )	/* 0800-0fff of rom3.bin - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x01000, 0x1000, 0x0800 )	/* 1000-17ff of rom1.bin - empty, bitplane 3 */
 
 	ROM_REGION( 0x1800, "gfx2", 0 )
-	ROM_COPY( "temp",	0x4000, 0x0000, 0x0800 )	/* 0800-0fff of 03.a3 - regular cards gfx, bitplane 3 */
-	ROM_COPY( "temp",	0x2000, 0x0800, 0x0800 )	/* 0000-07ff of 02.a2 - regular cards gfx, bitplane 2 */
-	ROM_COPY( "temp",	0x0800, 0x1000, 0x0800 )	/* 0000-07ff of 01.a1 - regular cards gfx, bitplane 1 */
+	ROM_COPY( "temp",	0x08000, 0x0000, 0x0800 )	/* 0000-07ff of rom2.bin - regular pin gfx (placed ok), bitplane 1 */
+	ROM_COPY( "temp",	0x10000, 0x0800, 0x0800 )	/* 0000-07ff of rom3.bin - regular pin gfx (placed ok), bitplane 2 */
+	ROM_COPY( "temp",	0x00800, 0x1000, 0x0800 )	/* 0800-0fff of rom1.bin - regular pin gfx (placed ok), bitplane 3 */
 
 	ROM_REGION( 0x1800, "gfx3", 0 )
-	ROM_COPY( "temp",	0x05000, 0x0000, 0x0800 )	/* 1800-1fff of 03.a3 - extended cards gfx, bitplane 3 */
-	ROM_COPY( "temp",	0x03000, 0x0800, 0x0800 )	/* 1000-17ff of 02.a2 - extended cards gfx, bitplane 2 */
-	ROM_COPY( "temp",	0x01800, 0x1000, 0x0800 )	/* 1000-17ff of 01.a1 - extended cards gfx, bitplane 1 */
+	ROM_COPY( "temp",	0x0c000, 0x0000, 0x0800 )	/* 4000-47ff of rom2.bin - empty (placed ok), bitplane 1 */
+	ROM_COPY( "temp",	0x14000, 0x0800, 0x0800 )	/* 4000-47ff of rom3.bin - empty (placed ok), bitplane 2 */
+	ROM_COPY( "temp",	0x04800, 0x1000, 0x0800 )	/* 4800-4fff of rom1.bin - empty (placed ok), bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx4", 0 )
+	ROM_COPY( "temp",	0x09800, 0x0000, 0x0800 )	/* 1800-1fff of rom2.bin - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x11800, 0x0800, 0x0800 )	/* 1800-1fff of rom3.bin - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x02000, 0x1000, 0x0800 )	/* 1800-1fff of rom1.bin - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx5", 0 )
+	ROM_COPY( "temp",	0x0a800, 0x0000, 0x0800 )	/* 2800-2fff of rom2.bin - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x12800, 0x0800, 0x0800 )	/* 2800-2fff of rom3.bin - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x03000, 0x1000, 0x0800 )	/* 3000-37ff of rom1.bin - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx6", 0 )
+	ROM_COPY( "temp",	0x0a000, 0x0000, 0x0800 )	/* 2000-27ff of rom2.bin - 'Video Klein' logo lower tiles (placed ok), bitplane 1 */
+	ROM_COPY( "temp",	0x12000, 0x0800, 0x0800 )	/* 2000-27ff of rom3.bin - 'Video Klein' logo lower tiles (placed ok), bitplane 2 */
+	ROM_COPY( "temp",	0x02800, 0x1000, 0x0800 )	/* 2800-2fff of rom1.bin - 'Video Klein' logo lower tiles (placed ok), bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx7", 0 )
+	ROM_COPY( "temp",	0x0e800, 0x0000, 0x0800 )	/* 6800-6fff of rom2.bin - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x16800, 0x0800, 0x0800 )	/* 6800-6fff of rom3.bin - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x07000, 0x1000, 0x0800 )	/* 7000-77ff of rom1.bin - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx8", 0 )
+	ROM_COPY( "temp",	0x0b800, 0x0000, 0x0800 )	/* 3800-3fff of rom2.bin - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x13800, 0x0800, 0x0800 )	/* 3800-3fff of rom3.bin - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x04000, 0x1000, 0x0800 )	/* 3800-3fff of rom1.bin - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx9", 0 )
+	ROM_COPY( "temp",	0x0c800, 0x0000, 0x0800 )	/* 4800-4fff of rom2.bin - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x14800, 0x0800, 0x0800 )	/* 4800-4fff of rom3.bin - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x05000, 0x1000, 0x0800 )	/* 4000-47ff of rom1.bin - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx10", 0 )
+	ROM_COPY( "temp",	0x09000, 0x0000, 0x0800 )	/* 1000-17ff of rom2.bin - extended pin gfx and logo upper tiles (placed ok), bitplane 1 */
+	ROM_COPY( "temp",	0x11000, 0x0800, 0x0800 )	/* 1000-17ff of rom3.bin - extended pin gfx and logo upper tiles (placed ok), bitplane 2 */
+	ROM_COPY( "temp",	0x01800, 0x1000, 0x0800 )	/* 1800-1fff of rom1.bin - extended pin gfx and logo upper tiles (placed ok), bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx11", 0 )
+	ROM_COPY( "temp",	0x0d000, 0x0000, 0x0800 )	/* 5000-57ff of rom2.bin - empty (placed ok), bitplane 1 */
+	ROM_COPY( "temp",	0x15000, 0x0800, 0x0800 )	/* 5000-57ff of rom3.bin - empty (placed ok), bitplane 2 */
+	ROM_COPY( "temp",	0x05800, 0x1000, 0x0800 )	/* 5800-5fff of rom1.bin - empty (placed ok), bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx12", 0 )
+	ROM_COPY( "temp",	0x0d800, 0x0000, 0x0800 )	/* 5800-5fff of rom2.bin - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x15800, 0x0800, 0x0800 )	/* 5800-5fff of rom3.bin - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x06000, 0x1000, 0x0800 )	/* 6000-67ff of rom1.bin - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx13", 0 )
+	ROM_COPY( "temp",	0x0e000, 0x0000, 0x0800 )	/* 6000-67ff of rom2.bin - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x16000, 0x0800, 0x0800 )	/* 6000-67ff of rom3.bin - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x06800, 0x1000, 0x0800 )	/* 6800-6fff of rom1.bin - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx14", 0 )
+	ROM_COPY( "temp",	0x0b000, 0x0000, 0x0800 )	/* 3000-37ff of rom2.bin - garbage (placed ok), bitplane 1 */
+	ROM_COPY( "temp",	0x13000, 0x0800, 0x0800 )	/* 3000-37ff of rom3.bin - garbage (placed ok), bitplane 2 */
+	ROM_COPY( "temp",	0x03800, 0x1000, 0x0800 )	/* 3800-3fff of rom1.bin - garbage (placed ok), bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx15", 0 )
+	ROM_COPY( "temp",	0x0f000, 0x0000, 0x0800 )	/* 7000-77ff of rom2.bin - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x17000, 0x0800, 0x0800 )	/* 7000-77ff of rom3.bin - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x07800, 0x1000, 0x0800 )	/* 7800-7fff of rom1.bin - empty, bitplane 3 */
 
 	ROM_REGION( 0x0100, "proms", 0 )
-//  ROM_LOAD( "24s10.bin",  0x0000, 0x0100, BAD_DUMP CRC(d5018fc0) SHA1(05c67d84da0a4053bcd3b9d144643d83892470ef) )
-	ROM_LOAD( "24s10.clr",	0x0000, 0x0100, BAD_DUMP CRC(560aafa5) SHA1(a85a72f7616146eae0d00b2fedf7b053a4794d10) )
+	ROM_LOAD( "wjack_tbp.bin",	0x0000, 0x0100, BAD_DUMP CRC(ed15125b) SHA1(56fc00f2ce4ebe9cee73a45b142c33c00432b66b) )
 ROM_END
 
-/******************************************
 
-  Wild Witch (Video Klein)
+ROM_START( wtchjackg )	/* Witch Jack 0.70S / 1996-03-26 */
+	ROM_REGION( 0x10000, "maincpu", 0 )
+	ROM_LOAD( "wj5x570s.bin",	0x8000, 0x8000, CRC(294e3ac6) SHA1(e58c38ae341dcb48572f8852ec858ef8433c6f95) )
 
-  Another evil hardware from Video Klein
-  with CPU box. Marked "1.63"
+	ROM_REGION( 0x18000, "temp", 0 )
+	ROM_LOAD( "wj5x5_1zs.bin",	0x00000, 0x8000, BAD_DUMP CRC(a780ba7f) SHA1(dde75187df298392333cfe1a19beed5b9d172aad) )
+	ROM_LOAD( "wj5x5_2zs.bin",	0x08000, 0x8000, BAD_DUMP CRC(0f4e9f82) SHA1(a22bbbf0130dd6ece61189ce81a3376213617509) )
+	ROM_LOAD( "wj5x5_3zs.bin",	0x10000, 0x8000, BAD_DUMP CRC(708e1d7f) SHA1(518312fd0bc24d7895eae0cfa9dbad99e1adf67c) )
 
-  The program ask you to install a new block
-  or retain the former buggy one.
+	ROM_REGION( 0x1800, "gfx0", 0 )
+	ROM_FILL(			0x0000, 0x1000, 0 )			/* filling bitplanes */
+	ROM_COPY( "temp",	0x0000, 0x1000, 0x0800 )	/* 0000-07ff of rom1.bin - char rom (placed ok), bitplane 3 */
 
+	ROM_REGION( 0x1800, "gfx1", 0 )
+	ROM_COPY( "temp",	0x08800, 0x0000, 0x0800 )	/* 0800-0fff of rom2.bin - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x10800, 0x0800, 0x0800 )	/* 0800-0fff of rom3.bin - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x01000, 0x1000, 0x0800 )	/* 1000-17ff of rom1.bin - empty, bitplane 3 */
 
-******************************************/
+	ROM_REGION( 0x1800, "gfx2", 0 )
+	ROM_COPY( "temp",	0x08000, 0x0000, 0x0800 )	/* 0000-07ff of rom2.bin - regular pin gfx (placed ok), bitplane 1 */
+	ROM_COPY( "temp",	0x10000, 0x0800, 0x0800 )	/* 0000-07ff of rom3.bin - regular pin gfx (placed ok), bitplane 2 */
+	ROM_COPY( "temp",	0x00800, 0x1000, 0x0800 )	/* 0800-0fff of rom1.bin - regular pin gfx (placed ok), bitplane 3 */
 
-ROM_START( wldwitch )
-	ROM_REGION( 0x10000, "maincpu", 0 )	/* Video Klein */
-	ROM_LOAD( "hn58c256p.box163",	0x8000, 0x8000, CRC(1de736a7) SHA1(e714a97999555fe0107390c8c9c2c3c1e822809a) )
+	ROM_REGION( 0x1800, "gfx3", 0 )
+	ROM_COPY( "temp",	0x0c000, 0x0000, 0x0800 )	/* 4000-47ff of rom2.bin - empty (placed ok), bitplane 1 */
+	ROM_COPY( "temp",	0x14000, 0x0800, 0x0800 )	/* 4000-47ff of rom3.bin - empty (placed ok), bitplane 2 */
+	ROM_COPY( "temp",	0x04800, 0x1000, 0x0800 )	/* 4800-4fff of rom1.bin - empty (placed ok), bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx4", 0 )
+	ROM_COPY( "temp",	0x09800, 0x0000, 0x0800 )	/* 1800-1fff of rom2.bin - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x11800, 0x0800, 0x0800 )	/* 1800-1fff of rom3.bin - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x02000, 0x1000, 0x0800 )	/* 1800-1fff of rom1.bin - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx5", 0 )
+	ROM_COPY( "temp",	0x0a800, 0x0000, 0x0800 )	/* 2800-2fff of rom2.bin - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x12800, 0x0800, 0x0800 )	/* 2800-2fff of rom3.bin - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x03000, 0x1000, 0x0800 )	/* 3000-37ff of rom1.bin - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx6", 0 )
+	ROM_COPY( "temp",	0x0a000, 0x0000, 0x0800 )	/* 2000-27ff of rom2.bin - 'Video Klein' logo lower tiles (placed ok), bitplane 1 */
+	ROM_COPY( "temp",	0x12000, 0x0800, 0x0800 )	/* 2000-27ff of rom3.bin - 'Video Klein' logo lower tiles (placed ok), bitplane 2 */
+	ROM_COPY( "temp",	0x02800, 0x1000, 0x0800 )	/* 2800-2fff of rom1.bin - 'Video Klein' logo lower tiles (placed ok), bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx7", 0 )
+	ROM_COPY( "temp",	0x0e800, 0x0000, 0x0800 )	/* 6800-6fff of rom2.bin - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x16800, 0x0800, 0x0800 )	/* 6800-6fff of rom3.bin - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x07000, 0x1000, 0x0800 )	/* 7000-77ff of rom1.bin - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx8", 0 )
+	ROM_COPY( "temp",	0x0b800, 0x0000, 0x0800 )	/* 3800-3fff of rom2.bin - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x13800, 0x0800, 0x0800 )	/* 3800-3fff of rom3.bin - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x04000, 0x1000, 0x0800 )	/* 3800-3fff of rom1.bin - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx9", 0 )
+	ROM_COPY( "temp",	0x0c800, 0x0000, 0x0800 )	/* 4800-4fff of rom2.bin - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x14800, 0x0800, 0x0800 )	/* 4800-4fff of rom3.bin - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x05000, 0x1000, 0x0800 )	/* 4000-47ff of rom1.bin - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx10", 0 )
+	ROM_COPY( "temp",	0x09000, 0x0000, 0x0800 )	/* 1000-17ff of rom2.bin - extended pin gfx and logo upper tiles (placed ok), bitplane 1 */
+	ROM_COPY( "temp",	0x11000, 0x0800, 0x0800 )	/* 1000-17ff of rom3.bin - extended pin gfx and logo upper tiles (placed ok), bitplane 2 */
+	ROM_COPY( "temp",	0x01800, 0x1000, 0x0800 )	/* 1800-1fff of rom1.bin - extended pin gfx and logo upper tiles (placed ok), bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx11", 0 )
+	ROM_COPY( "temp",	0x0d000, 0x0000, 0x0800 )	/* 5000-57ff of rom2.bin - empty (placed ok), bitplane 1 */
+	ROM_COPY( "temp",	0x15000, 0x0800, 0x0800 )	/* 5000-57ff of rom3.bin - empty (placed ok), bitplane 2 */
+	ROM_COPY( "temp",	0x05800, 0x1000, 0x0800 )	/* 5800-5fff of rom1.bin - empty (placed ok), bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx12", 0 )
+	ROM_COPY( "temp",	0x0d800, 0x0000, 0x0800 )	/* 5800-5fff of rom2.bin - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x15800, 0x0800, 0x0800 )	/* 5800-5fff of rom3.bin - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x06000, 0x1000, 0x0800 )	/* 6000-67ff of rom1.bin - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx13", 0 )
+	ROM_COPY( "temp",	0x0e000, 0x0000, 0x0800 )	/* 6000-67ff of rom2.bin - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x16000, 0x0800, 0x0800 )	/* 6000-67ff of rom3.bin - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x06800, 0x1000, 0x0800 )	/* 6800-6fff of rom1.bin - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx14", 0 )
+	ROM_COPY( "temp",	0x0b000, 0x0000, 0x0800 )	/* 3000-37ff of rom2.bin - garbage (placed ok), bitplane 1 */
+	ROM_COPY( "temp",	0x13000, 0x0800, 0x0800 )	/* 3000-37ff of rom3.bin - garbage (placed ok), bitplane 2 */
+	ROM_COPY( "temp",	0x03800, 0x1000, 0x0800 )	/* 3800-3fff of rom1.bin - garbage (placed ok), bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx15", 0 )
+	ROM_COPY( "temp",	0x0f000, 0x0000, 0x0800 )	/* 7000-77ff of rom2.bin - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x17000, 0x0800, 0x0800 )	/* 7000-77ff of rom3.bin - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x07800, 0x1000, 0x0800 )	/* 7800-7fff of rom1.bin - empty, bitplane 3 */
+
+	ROM_REGION( 0x0100, "proms", 0 )
+	ROM_LOAD( "wjack_tbp.bin",	0x0000, 0x0100, BAD_DUMP CRC(ed15125b) SHA1(56fc00f2ce4ebe9cee73a45b142c33c00432b66b) )
+ROM_END
+
+
+ROM_START( wtchjackh )	/* Witch Jack 0.70P / 1996-03-26 */
+	ROM_REGION( 0x10000, "maincpu", 0 )
+	ROM_LOAD( "wj5x570p.bin",	0x8000, 0x8000, CRC(d77d8119) SHA1(c8999e3c55257750f27f1683f5b416e8e4e4297d) )
 
 	ROM_REGION( 0x18000, "temp", 0 )
-	ROM_LOAD( "03.a3",	0x00000, 0x8000, CRC(ae474414) SHA1(6dee760cee18e125791c17b562ca8aabe1f4593e) )
-	ROM_LOAD( "02.a2",	0x08000, 0x8000, CRC(f6450111) SHA1(8b44c90c62d5026ccfba88b31e1113e01c6bcf85) )
-	ROM_LOAD( "01.a1",	0x10000, 0x8000, CRC(6d644987) SHA1(26243abe051f3266e2d1743ec599d4e8bbb692e4) )
+	ROM_LOAD( "wj5x5_1zs.bin",	0x00000, 0x8000, BAD_DUMP CRC(a780ba7f) SHA1(dde75187df298392333cfe1a19beed5b9d172aad) )
+	ROM_LOAD( "wj5x5_2zs.bin",	0x08000, 0x8000, BAD_DUMP CRC(0f4e9f82) SHA1(a22bbbf0130dd6ece61189ce81a3376213617509) )
+	ROM_LOAD( "wj5x5_3zs.bin",	0x10000, 0x8000, BAD_DUMP CRC(708e1d7f) SHA1(518312fd0bc24d7895eae0cfa9dbad99e1adf67c) )
 
-	ROM_REGION( 0x1800, "gfx1", 0 )
+	ROM_REGION( 0x1800, "gfx0", 0 )
 	ROM_FILL(			0x0000, 0x1000, 0 )			/* filling bitplanes */
-	ROM_COPY( "temp",	0x0000, 0x1000, 0x0800 )	/* 0000-07ff of 03.a3 - char rom, bitplane 3*/
+	ROM_COPY( "temp",	0x0000, 0x1000, 0x0800 )	/* 0000-07ff of rom1.bin - char rom (placed ok), bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx1", 0 )
+	ROM_COPY( "temp",	0x08800, 0x0000, 0x0800 )	/* 0800-0fff of rom2.bin - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x10800, 0x0800, 0x0800 )	/* 0800-0fff of rom3.bin - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x01000, 0x1000, 0x0800 )	/* 1000-17ff of rom1.bin - empty, bitplane 3 */
 
 	ROM_REGION( 0x1800, "gfx2", 0 )
-	ROM_COPY( "temp",	0x10000, 0x0000, 0x0800 )	/* 0000-07ff of 01.a1 - regular cards gfx, bitplane 1 */
-	ROM_COPY( "temp",	0x08000, 0x0800, 0x0800 )	/* 0000-07ff of 02.a2 - regular cards gfx, bitplane 2 */
-	ROM_COPY( "temp",	0x00800, 0x1000, 0x0800 )	/* 0800-0fff of 03.a3 - regular cards gfx, bitplane 3 */
+	ROM_COPY( "temp",	0x08000, 0x0000, 0x0800 )	/* 0000-07ff of rom2.bin - regular pin gfx (placed ok), bitplane 1 */
+	ROM_COPY( "temp",	0x10000, 0x0800, 0x0800 )	/* 0000-07ff of rom3.bin - regular pin gfx (placed ok), bitplane 2 */
+	ROM_COPY( "temp",	0x00800, 0x1000, 0x0800 )	/* 0800-0fff of rom1.bin - regular pin gfx (placed ok), bitplane 3 */
 
 	ROM_REGION( 0x1800, "gfx3", 0 )
-	ROM_COPY( "temp",	0x11000, 0x0000, 0x0800 )	/* 1000-17ff of 01.a1 - extended cards gfx, bitplane 1 */
-	ROM_COPY( "temp",	0x09000, 0x0800, 0x0800 )	/* 1000-17ff of 02.a2 - extended cards gfx, bitplane 2 */
-	ROM_COPY( "temp",	0x01800, 0x1000, 0x0800 )	/* 1800-1fff of 03.a3 - extended cards gfx, bitplane 3 */
+	ROM_COPY( "temp",	0x0c000, 0x0000, 0x0800 )	/* 4000-47ff of rom2.bin - empty (placed ok), bitplane 1 */
+	ROM_COPY( "temp",	0x14000, 0x0800, 0x0800 )	/* 4000-47ff of rom3.bin - empty (placed ok), bitplane 2 */
+	ROM_COPY( "temp",	0x04800, 0x1000, 0x0800 )	/* 4800-4fff of rom1.bin - empty (placed ok), bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx4", 0 )
+	ROM_COPY( "temp",	0x09800, 0x0000, 0x0800 )	/* 1800-1fff of rom2.bin - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x11800, 0x0800, 0x0800 )	/* 1800-1fff of rom3.bin - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x02000, 0x1000, 0x0800 )	/* 1800-1fff of rom1.bin - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx5", 0 )
+	ROM_COPY( "temp",	0x0a800, 0x0000, 0x0800 )	/* 2800-2fff of rom2.bin - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x12800, 0x0800, 0x0800 )	/* 2800-2fff of rom3.bin - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x03000, 0x1000, 0x0800 )	/* 3000-37ff of rom1.bin - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx6", 0 )
+	ROM_COPY( "temp",	0x0a000, 0x0000, 0x0800 )	/* 2000-27ff of rom2.bin - 'Video Klein' logo lower tiles (placed ok), bitplane 1 */
+	ROM_COPY( "temp",	0x12000, 0x0800, 0x0800 )	/* 2000-27ff of rom3.bin - 'Video Klein' logo lower tiles (placed ok), bitplane 2 */
+	ROM_COPY( "temp",	0x02800, 0x1000, 0x0800 )	/* 2800-2fff of rom1.bin - 'Video Klein' logo lower tiles (placed ok), bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx7", 0 )
+	ROM_COPY( "temp",	0x0e800, 0x0000, 0x0800 )	/* 6800-6fff of rom2.bin - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x16800, 0x0800, 0x0800 )	/* 6800-6fff of rom3.bin - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x07000, 0x1000, 0x0800 )	/* 7000-77ff of rom1.bin - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx8", 0 )
+	ROM_COPY( "temp",	0x0b800, 0x0000, 0x0800 )	/* 3800-3fff of rom2.bin - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x13800, 0x0800, 0x0800 )	/* 3800-3fff of rom3.bin - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x04000, 0x1000, 0x0800 )	/* 3800-3fff of rom1.bin - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx9", 0 )
+	ROM_COPY( "temp",	0x0c800, 0x0000, 0x0800 )	/* 4800-4fff of rom2.bin - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x14800, 0x0800, 0x0800 )	/* 4800-4fff of rom3.bin - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x05000, 0x1000, 0x0800 )	/* 4000-47ff of rom1.bin - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx10", 0 )
+	ROM_COPY( "temp",	0x09000, 0x0000, 0x0800 )	/* 1000-17ff of rom2.bin - extended pin gfx and logo upper tiles (placed ok), bitplane 1 */
+	ROM_COPY( "temp",	0x11000, 0x0800, 0x0800 )	/* 1000-17ff of rom3.bin - extended pin gfx and logo upper tiles (placed ok), bitplane 2 */
+	ROM_COPY( "temp",	0x01800, 0x1000, 0x0800 )	/* 1800-1fff of rom1.bin - extended pin gfx and logo upper tiles (placed ok), bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx11", 0 )
+	ROM_COPY( "temp",	0x0d000, 0x0000, 0x0800 )	/* 5000-57ff of rom2.bin - empty (placed ok), bitplane 1 */
+	ROM_COPY( "temp",	0x15000, 0x0800, 0x0800 )	/* 5000-57ff of rom3.bin - empty (placed ok), bitplane 2 */
+	ROM_COPY( "temp",	0x05800, 0x1000, 0x0800 )	/* 5800-5fff of rom1.bin - empty (placed ok), bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx12", 0 )
+	ROM_COPY( "temp",	0x0d800, 0x0000, 0x0800 )	/* 5800-5fff of rom2.bin - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x15800, 0x0800, 0x0800 )	/* 5800-5fff of rom3.bin - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x06000, 0x1000, 0x0800 )	/* 6000-67ff of rom1.bin - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx13", 0 )
+	ROM_COPY( "temp",	0x0e000, 0x0000, 0x0800 )	/* 6000-67ff of rom2.bin - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x16000, 0x0800, 0x0800 )	/* 6000-67ff of rom3.bin - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x06800, 0x1000, 0x0800 )	/* 6800-6fff of rom1.bin - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx14", 0 )
+	ROM_COPY( "temp",	0x0b000, 0x0000, 0x0800 )	/* 3000-37ff of rom2.bin - garbage (placed ok), bitplane 1 */
+	ROM_COPY( "temp",	0x13000, 0x0800, 0x0800 )	/* 3000-37ff of rom3.bin - garbage (placed ok), bitplane 2 */
+	ROM_COPY( "temp",	0x03800, 0x1000, 0x0800 )	/* 3800-3fff of rom1.bin - garbage (placed ok), bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx15", 0 )
+	ROM_COPY( "temp",	0x0f000, 0x0000, 0x0800 )	/* 7000-77ff of rom2.bin - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x17000, 0x0800, 0x0800 )	/* 7000-77ff of rom3.bin - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x07800, 0x1000, 0x0800 )	/* 7800-7fff of rom1.bin - empty, bitplane 3 */
 
 	ROM_REGION( 0x0100, "proms", 0 )
-//  ROM_LOAD( "24s10.bin",  0x0000, 0x0100, BAD_DUMP CRC(d5018fc0) SHA1(05c67d84da0a4053bcd3b9d144643d83892470ef) )
-	ROM_LOAD( "24s10.clr",	0x0000, 0x0100, BAD_DUMP CRC(560aafa5) SHA1(a85a72f7616146eae0d00b2fedf7b053a4794d10) )
-
-	ROM_REGION( 0x0400, "proms2", 0 )
-	ROM_LOAD( "82s137.box",	0x0000, 0x0400, CRC(4ae3ecf5) SHA1(e1e540ae13e7ce5ac6391f325160ec997ea6cc2f) )
+	ROM_LOAD( "wjack_tbp.bin",	0x0000, 0x0100, BAD_DUMP CRC(ed15125b) SHA1(56fc00f2ce4ebe9cee73a45b142c33c00432b66b) )
 ROM_END
 
 
-/***************************************************************
+ROM_START( wtchjacki )	/* Witch Jack 0.87 / 1996-07-16, GFX OK */
+	ROM_REGION( 0x10000, "maincpu", 0 )
+	ROM_LOAD( "wj5x5087.bin",	0x8000, 0x8000, CRC(b027d8a5) SHA1(f06b92cc7aacadca1b8c98bda19efa670596891c) )
 
-  Casino Poker
-  1987, PM / Beck Elektronik
+	ROM_REGION( 0x18000, "temp", 0 )
+	ROM_LOAD( "wj5x5_1zs.bin",	0x00000, 0x8000, CRC(a780ba7f) SHA1(dde75187df298392333cfe1a19beed5b9d172aad) )
+	ROM_LOAD( "wj5x5_2zs.bin",	0x08000, 0x8000, CRC(0f4e9f82) SHA1(a22bbbf0130dd6ece61189ce81a3376213617509) )
+	ROM_LOAD( "wj5x5_3zs.bin",	0x10000, 0x8000, CRC(708e1d7f) SHA1(518312fd0bc24d7895eae0cfa9dbad99e1adf67c) )
 
-  1x Xtal 10.000 MHz.
-  1x UM6502A
-  2x UM6521A
-  1x UM6845
+	ROM_REGION( 0x1800, "gfx0", 0 )
+	ROM_FILL(			0x0000, 0x1000, 0 )			/* filling bitplanes */
+	ROM_COPY( "temp",	0x0000, 0x1000, 0x0800 )	/* 0000-07ff of rom1.bin - char rom (placed ok), bitplane 3 */
 
-  GFX ROMS 051, 052, 053 and 054 have duplicated halves.
+	ROM_REGION( 0x1800, "gfx1", 0 )
+	ROM_COPY( "temp",	0x08800, 0x0000, 0x0800 )	/* 0800-0fff of rom2.bin - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x10800, 0x0800, 0x0800 )	/* 0800-0fff of rom3.bin - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x01000, 0x1000, 0x0800 )	/* 1000-17ff of rom1.bin - empty, bitplane 3 */
 
-  Bipolar PROM 24sa10 is filled with 0x09, so has at least
-  fixed bits 0 and 3 along the whole data. Needs a redump
-  using a supported EEPROM programmer.
+	ROM_REGION( 0x1800, "gfx2", 0 )
+	ROM_COPY( "temp",	0x08000, 0x0000, 0x0800 )	/* 0000-07ff of rom2.bin - regular pin gfx (placed ok), bitplane 1 */
+	ROM_COPY( "temp",	0x10000, 0x0800, 0x0800 )	/* 0000-07ff of rom3.bin - regular pin gfx (placed ok), bitplane 2 */
+	ROM_COPY( "temp",	0x00800, 0x1000, 0x0800 )	/* 0800-0fff of rom1.bin - regular pin gfx (placed ok), bitplane 3 */
 
-  Discrete sound circuitry was traced, being identical to the Golden Poker one.
-  Only difference is the PC617 replaced by one PC817.
+	ROM_REGION( 0x1800, "gfx3", 0 )
+	ROM_COPY( "temp",	0x0c000, 0x0000, 0x0800 )	/* 4000-47ff of rom2.bin - empty (placed ok), bitplane 1 */
+	ROM_COPY( "temp",	0x14000, 0x0800, 0x0800 )	/* 4000-47ff of rom3.bin - empty (placed ok), bitplane 2 */
+	ROM_COPY( "temp",	0x04800, 0x1000, 0x0800 )	/* 4800-4fff of rom1.bin - empty (placed ok), bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx4", 0 )
+	ROM_COPY( "temp",	0x09800, 0x0000, 0x0800 )	/* 1800-1fff of rom2.bin - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x11800, 0x0800, 0x0800 )	/* 1800-1fff of rom3.bin - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x02000, 0x1000, 0x0800 )	/* 1800-1fff of rom1.bin - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx5", 0 )
+	ROM_COPY( "temp",	0x0a800, 0x0000, 0x0800 )	/* 2800-2fff of rom2.bin - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x12800, 0x0800, 0x0800 )	/* 2800-2fff of rom3.bin - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x03000, 0x1000, 0x0800 )	/* 3000-37ff of rom1.bin - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx6", 0 )
+	ROM_COPY( "temp",	0x0a000, 0x0000, 0x0800 )	/* 2000-27ff of rom2.bin - 'Video Klein' logo lower tiles (placed ok), bitplane 1 */
+	ROM_COPY( "temp",	0x12000, 0x0800, 0x0800 )	/* 2000-27ff of rom3.bin - 'Video Klein' logo lower tiles (placed ok), bitplane 2 */
+	ROM_COPY( "temp",	0x02800, 0x1000, 0x0800 )	/* 2800-2fff of rom1.bin - 'Video Klein' logo lower tiles (placed ok), bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx7", 0 )
+	ROM_COPY( "temp",	0x0e800, 0x0000, 0x0800 )	/* 6800-6fff of rom2.bin - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x16800, 0x0800, 0x0800 )	/* 6800-6fff of rom3.bin - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x07000, 0x1000, 0x0800 )	/* 7000-77ff of rom1.bin - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx8", 0 )
+	ROM_COPY( "temp",	0x0b800, 0x0000, 0x0800 )	/* 3800-3fff of rom2.bin - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x13800, 0x0800, 0x0800 )	/* 3800-3fff of rom3.bin - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x04000, 0x1000, 0x0800 )	/* 3800-3fff of rom1.bin - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx9", 0 )
+	ROM_COPY( "temp",	0x0c800, 0x0000, 0x0800 )	/* 4800-4fff of rom2.bin - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x14800, 0x0800, 0x0800 )	/* 4800-4fff of rom3.bin - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x05000, 0x1000, 0x0800 )	/* 4000-47ff of rom1.bin - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx10", 0 )
+	ROM_COPY( "temp",	0x09000, 0x0000, 0x0800 )	/* 1000-17ff of rom2.bin - extended pin gfx and logo upper tiles (placed ok), bitplane 1 */
+	ROM_COPY( "temp",	0x11000, 0x0800, 0x0800 )	/* 1000-17ff of rom3.bin - extended pin gfx and logo upper tiles (placed ok), bitplane 2 */
+	ROM_COPY( "temp",	0x01800, 0x1000, 0x0800 )	/* 1800-1fff of rom1.bin - extended pin gfx and logo upper tiles (placed ok), bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx11", 0 )
+	ROM_COPY( "temp",	0x0d000, 0x0000, 0x0800 )	/* 5000-57ff of rom2.bin - empty (placed ok), bitplane 1 */
+	ROM_COPY( "temp",	0x15000, 0x0800, 0x0800 )	/* 5000-57ff of rom3.bin - empty (placed ok), bitplane 2 */
+	ROM_COPY( "temp",	0x05800, 0x1000, 0x0800 )	/* 5800-5fff of rom1.bin - empty (placed ok), bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx12", 0 )
+	ROM_COPY( "temp",	0x0d800, 0x0000, 0x0800 )	/* 5800-5fff of rom2.bin - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x15800, 0x0800, 0x0800 )	/* 5800-5fff of rom3.bin - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x06000, 0x1000, 0x0800 )	/* 6000-67ff of rom1.bin - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx13", 0 )
+	ROM_COPY( "temp",	0x0e000, 0x0000, 0x0800 )	/* 6000-67ff of rom2.bin - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x16000, 0x0800, 0x0800 )	/* 6000-67ff of rom3.bin - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x06800, 0x1000, 0x0800 )	/* 6800-6fff of rom1.bin - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx14", 0 )
+	ROM_COPY( "temp",	0x0b000, 0x0000, 0x0800 )	/* 3000-37ff of rom2.bin - garbage (placed ok), bitplane 1 */
+	ROM_COPY( "temp",	0x13000, 0x0800, 0x0800 )	/* 3000-37ff of rom3.bin - garbage (placed ok), bitplane 2 */
+	ROM_COPY( "temp",	0x03800, 0x1000, 0x0800 )	/* 3800-3fff of rom1.bin - garbage (placed ok), bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx15", 0 )
+	ROM_COPY( "temp",	0x0f000, 0x0000, 0x0800 )	/* 7000-77ff of rom2.bin - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x17000, 0x0800, 0x0800 )	/* 7000-77ff of rom3.bin - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x07800, 0x1000, 0x0800 )	/* 7800-7fff of rom1.bin - empty, bitplane 3 */
 
-  The sound is ugly and seems that was programmed that way.
+	ROM_REGION( 0x0100, "proms", 0 )
+	ROM_LOAD( "wjack_tbp.bin",	0x0000, 0x0100, BAD_DUMP CRC(ed15125b) SHA1(56fc00f2ce4ebe9cee73a45b142c33c00432b66b) )
+ROM_END
 
-***************************************************************/
 
-ROM_START( caspoker )
+ROM_START( wtchjackj )	/* Witch Jack 0.87-88 / 1996-10-02, GFX OK */
 	ROM_REGION( 0x10000, "maincpu", 0 )
-	ROM_LOAD( "234.bin",	0x4000, 0x1000, CRC(174bc526) SHA1(faef01484f0e0ea769d7bd2c5ad03369a6fdf037) )
-	ROM_LOAD( "235.bin",	0x5000, 0x1000, CRC(2e43552f) SHA1(5fbe0e62dec960850ef5f937254858fcd4da9e64) )
-	ROM_LOAD( "236.bin",	0x6000, 0x1000, CRC(3f4cfa39) SHA1(e2750a9c5d12c668e599181ee3972c5d78bd0006) )
-	ROM_LOAD( "237.bin",	0x7000, 0x1000, CRC(b411d0c4) SHA1(0617cd312026da78a171fc23f4788393d70371cf) )
+	ROM_LOAD( "wj5x5088.bin",	0x8000, 0x8000, CRC(08143537) SHA1(ef16531bcf955daded1be406dd3f61f37070298c) )
+
+	ROM_REGION( 0x18000, "temp", 0 )
+	ROM_LOAD( "wj5x5_1zs.bin",	0x00000, 0x8000, CRC(a780ba7f) SHA1(dde75187df298392333cfe1a19beed5b9d172aad) )
+	ROM_LOAD( "wj5x5_2zs.bin",	0x08000, 0x8000, CRC(0f4e9f82) SHA1(a22bbbf0130dd6ece61189ce81a3376213617509) )
+	ROM_LOAD( "wj5x5_3zs.bin",	0x10000, 0x8000, CRC(708e1d7f) SHA1(518312fd0bc24d7895eae0cfa9dbad99e1adf67c) )
+
+	ROM_REGION( 0x1800, "gfx0", 0 )
+	ROM_FILL(			0x0000, 0x1000, 0 )			/* filling bitplanes */
+	ROM_COPY( "temp",	0x0000, 0x1000, 0x0800 )	/* 0000-07ff of rom1.bin - char rom (placed ok), bitplane 3 */
 
 	ROM_REGION( 0x1800, "gfx1", 0 )
-	ROM_FILL(				0x0000, 0x1000, 0 ) /* filling the R-G bitplanes */
-	ROM_LOAD( "054.bin",	0x1000, 0x0800, CRC(7b401a09) SHA1(affb90a52761c36be7c67f7606f3f982f6dc724e) )    /* text chars */
-	ROM_IGNORE(                     0x0800)	/* identical halves, discarding the 2nd half */
+	ROM_COPY( "temp",	0x08800, 0x0000, 0x0800 )	/* 0800-0fff of rom2.bin - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x10800, 0x0800, 0x0800 )	/* 0800-0fff of rom3.bin - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x01000, 0x1000, 0x0800 )	/* 1000-17ff of rom1.bin - empty, bitplane 3 */
 
 	ROM_REGION( 0x1800, "gfx2", 0 )
-	ROM_LOAD( "051.bin",	0x0000, 0x0800, CRC(82d823e5) SHA1(75bdf427a6204ef87444be0d8b06a07c5a2fc38f) )    /* cards deck gfx, bitplane1 */
-	ROM_IGNORE(                     0x0800)	/* identical halves, discarding the 2nd half */
-	ROM_LOAD( "052.bin",	0x0800, 0x0800, CRC(eda12738) SHA1(ec7806c2bf1a238f489459c3c3653f43febaa464) )    /* cards deck gfx, bitplane2 */
-	ROM_IGNORE(                     0x0800)	/* identical halves, discarding the 2nd half */
-	ROM_LOAD( "053.bin",	0x1000, 0x0800, CRC(d147ae0a) SHA1(dfdf0a42eb0a6f2afc9f301b0cf01411085247bd) )    /* cards deck gfx, bitplane3 */
-	ROM_IGNORE(                     0x0800)	/* identical halves, discarding the 2nd half */
+	ROM_COPY( "temp",	0x08000, 0x0000, 0x0800 )	/* 0000-07ff of rom2.bin - regular pin gfx (placed ok), bitplane 1 */
+	ROM_COPY( "temp",	0x10000, 0x0800, 0x0800 )	/* 0000-07ff of rom3.bin - regular pin gfx (placed ok), bitplane 2 */
+	ROM_COPY( "temp",	0x00800, 0x1000, 0x0800 )	/* 0800-0fff of rom1.bin - regular pin gfx (placed ok), bitplane 3 */
 
-	ROM_REGION( 0x0800,	"nvram", 0 )	/* default NVRAM, otherwise settings parameters are incorrect */
-	ROM_LOAD( "caspoker_nvram.bin", 0x0000, 0x0800, CRC(be6e2671) SHA1(aef1b09d09e07eb39480a7901ed8535f74e461fa) )
+	ROM_REGION( 0x1800, "gfx3", 0 )
+	ROM_COPY( "temp",	0x0c000, 0x0000, 0x0800 )	/* 4000-47ff of rom2.bin - empty (placed ok), bitplane 1 */
+	ROM_COPY( "temp",	0x14000, 0x0800, 0x0800 )	/* 4000-47ff of rom3.bin - empty (placed ok), bitplane 2 */
+	ROM_COPY( "temp",	0x04800, 0x1000, 0x0800 )	/* 4800-4fff of rom1.bin - empty (placed ok), bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx4", 0 )
+	ROM_COPY( "temp",	0x09800, 0x0000, 0x0800 )	/* 1800-1fff of rom2.bin - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x11800, 0x0800, 0x0800 )	/* 1800-1fff of rom3.bin - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x02000, 0x1000, 0x0800 )	/* 1800-1fff of rom1.bin - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx5", 0 )
+	ROM_COPY( "temp",	0x0a800, 0x0000, 0x0800 )	/* 2800-2fff of rom2.bin - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x12800, 0x0800, 0x0800 )	/* 2800-2fff of rom3.bin - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x03000, 0x1000, 0x0800 )	/* 3000-37ff of rom1.bin - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx6", 0 )
+	ROM_COPY( "temp",	0x0a000, 0x0000, 0x0800 )	/* 2000-27ff of rom2.bin - 'Video Klein' logo lower tiles (placed ok), bitplane 1 */
+	ROM_COPY( "temp",	0x12000, 0x0800, 0x0800 )	/* 2000-27ff of rom3.bin - 'Video Klein' logo lower tiles (placed ok), bitplane 2 */
+	ROM_COPY( "temp",	0x02800, 0x1000, 0x0800 )	/* 2800-2fff of rom1.bin - 'Video Klein' logo lower tiles (placed ok), bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx7", 0 )
+	ROM_COPY( "temp",	0x0e800, 0x0000, 0x0800 )	/* 6800-6fff of rom2.bin - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x16800, 0x0800, 0x0800 )	/* 6800-6fff of rom3.bin - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x07000, 0x1000, 0x0800 )	/* 7000-77ff of rom1.bin - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx8", 0 )
+	ROM_COPY( "temp",	0x0b800, 0x0000, 0x0800 )	/* 3800-3fff of rom2.bin - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x13800, 0x0800, 0x0800 )	/* 3800-3fff of rom3.bin - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x04000, 0x1000, 0x0800 )	/* 3800-3fff of rom1.bin - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx9", 0 )
+	ROM_COPY( "temp",	0x0c800, 0x0000, 0x0800 )	/* 4800-4fff of rom2.bin - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x14800, 0x0800, 0x0800 )	/* 4800-4fff of rom3.bin - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x05000, 0x1000, 0x0800 )	/* 4000-47ff of rom1.bin - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx10", 0 )
+	ROM_COPY( "temp",	0x09000, 0x0000, 0x0800 )	/* 1000-17ff of rom2.bin - extended pin gfx and logo upper tiles (placed ok), bitplane 1 */
+	ROM_COPY( "temp",	0x11000, 0x0800, 0x0800 )	/* 1000-17ff of rom3.bin - extended pin gfx and logo upper tiles (placed ok), bitplane 2 */
+	ROM_COPY( "temp",	0x01800, 0x1000, 0x0800 )	/* 1800-1fff of rom1.bin - extended pin gfx and logo upper tiles (placed ok), bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx11", 0 )
+	ROM_COPY( "temp",	0x0d000, 0x0000, 0x0800 )	/* 5000-57ff of rom2.bin - empty (placed ok), bitplane 1 */
+	ROM_COPY( "temp",	0x15000, 0x0800, 0x0800 )	/* 5000-57ff of rom3.bin - empty (placed ok), bitplane 2 */
+	ROM_COPY( "temp",	0x05800, 0x1000, 0x0800 )	/* 5800-5fff of rom1.bin - empty (placed ok), bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx12", 0 )
+	ROM_COPY( "temp",	0x0d800, 0x0000, 0x0800 )	/* 5800-5fff of rom2.bin - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x15800, 0x0800, 0x0800 )	/* 5800-5fff of rom3.bin - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x06000, 0x1000, 0x0800 )	/* 6000-67ff of rom1.bin - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx13", 0 )
+	ROM_COPY( "temp",	0x0e000, 0x0000, 0x0800 )	/* 6000-67ff of rom2.bin - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x16000, 0x0800, 0x0800 )	/* 6000-67ff of rom3.bin - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x06800, 0x1000, 0x0800 )	/* 6800-6fff of rom1.bin - empty, bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx14", 0 )
+	ROM_COPY( "temp",	0x0b000, 0x0000, 0x0800 )	/* 3000-37ff of rom2.bin - garbage (placed ok), bitplane 1 */
+	ROM_COPY( "temp",	0x13000, 0x0800, 0x0800 )	/* 3000-37ff of rom3.bin - garbage (placed ok), bitplane 2 */
+	ROM_COPY( "temp",	0x03800, 0x1000, 0x0800 )	/* 3800-3fff of rom1.bin - garbage (placed ok), bitplane 3 */
+
+	ROM_REGION( 0x1800, "gfx15", 0 )
+	ROM_COPY( "temp",	0x0f000, 0x0000, 0x0800 )	/* 7000-77ff of rom2.bin - empty, bitplane 1 */
+	ROM_COPY( "temp",	0x17000, 0x0800, 0x0800 )	/* 7000-77ff of rom3.bin - empty, bitplane 2 */
+	ROM_COPY( "temp",	0x07800, 0x1000, 0x0800 )	/* 7800-7fff of rom1.bin - empty, bitplane 3 */
 
-	ROM_REGION( 0x0100, "proms", 0 )	/* from other games */
-	ROM_LOAD( "24sa10.bin",	0x0000, 0x0100, BAD_DUMP CRC(7f31066b) SHA1(15420780ec6b2870fc4539ec3afe4f0c58eedf12) ) /* PROM dump needed */
+	ROM_REGION( 0x0100, "proms", 0 )
+	ROM_LOAD( "wjack_tbp.bin",	0x0000, 0x0100, BAD_DUMP CRC(ed15125b) SHA1(56fc00f2ce4ebe9cee73a45b142c33c00432b66b) )
 ROM_END
 
 
+
 /*********************************************
 *                Driver Init                 *
 *********************************************/
@@ -5044,6 +9442,163 @@
 	ROM[0x453b] = 0xea;
 }
 
+static DRIVER_INIT( vkdlsww )
+{
+    /* $f2c9-f2ca, NOPing the BNE-->KILL
+       after compare with Dallas TK data
+    */
+
+	UINT8 *ROM = machine.region("maincpu")->base();
+
+	ROM[0xf2c9] = 0xea;
+	ROM[0xf2ca] = 0xea;
+}
+
+static DRIVER_INIT( vkdlswwa )
+{
+    /* $df80-df81, NOPing the BNE-->KILL
+       after compare with Dallas TK data
+    */
+
+	UINT8 *ROM = machine.region("maincpu")->base();
+
+	ROM[0xdf80] = 0xea;
+	ROM[0xdf81] = 0xea;
+}
+
+static DRIVER_INIT( vkdlswwc )
+{
+    /* $e42f-e430, NOPing the BNE-->KILL
+       after compare with Dallas TK data
+    */
+
+	UINT8 *ROM = machine.region("maincpu")->base();
+
+	ROM[0xe42f] = 0xea;
+	ROM[0xe430] = 0xea;
+}
+
+static DRIVER_INIT( vkdlswwd )
+{
+    /* $e442-e443, NOPing the BNE-->KILL
+       after compare with Dallas TK data
+    */
+
+	UINT8 *ROM = machine.region("maincpu")->base();
+
+	ROM[0xe442] = 0xea;
+	ROM[0xe443] = 0xea;
+}
+
+static DRIVER_INIT( vkdlswwh )
+{
+    /* $e4d5-e4d6, NOPing the BNE-->KILL
+       after compare with Dallas TK data
+    */
+
+	UINT8 *ROM = machine.region("maincpu")->base();
+
+	ROM[0xe4d5] = 0xea;
+	ROM[0xe4d6] = 0xea;
+}
+
+static DRIVER_INIT( vkdlswwl )
+{
+    /* $e87c-e87d, NOPing the BNE-->KILL
+       after compare with Dallas TK data
+    */
+
+	UINT8 *ROM = machine.region("maincpu")->base();
+
+	ROM[0xe87c] = 0xea;
+	ROM[0xe87d] = 0xea;
+}
+
+static DRIVER_INIT( vkdlswwo )
+{
+    /* $e7d5-e7d6, NOPing the BNE-->KILL
+       after compare with Dallas TK data
+    */
+
+	UINT8 *ROM = machine.region("maincpu")->base();
+
+	ROM[0xe7d5] = 0xea;
+	ROM[0xe7d6] = 0xea;
+}
+
+static DRIVER_INIT( vkdlswwp )
+{
+    /* $e7d9-e7da, NOPing the BNE-->KILL
+       after compare with Dallas TK data
+    */
+
+	UINT8 *ROM = machine.region("maincpu")->base();
+
+	ROM[0xe7d9] = 0xea;
+	ROM[0xe7da] = 0xea;
+}
+
+static DRIVER_INIT( vkdlswwr )
+{
+    /* $e7f7-e7f8, NOPing the BNE-->KILL
+       after compare with Dallas TK data
+    */
+
+	UINT8 *ROM = machine.region("maincpu")->base();
+
+	ROM[0xe7f7] = 0xea;
+	ROM[0xe7f8] = 0xea;
+}
+
+static DRIVER_INIT( vkdlswws )
+{
+    /* $e8a5-e8a6, NOPing the BNE-->KILL
+       after compare with Dallas TK data
+    */
+
+	UINT8 *ROM = machine.region("maincpu")->base();
+
+	ROM[0xe8a5] = 0xea;
+	ROM[0xe8a6] = 0xea;
+}
+
+static DRIVER_INIT( vkdlswwt )
+{
+    /* $e955-e956, NOPing the BNE-->KILL
+       after compare with Dallas TK data
+    */
+
+	UINT8 *ROM = machine.region("maincpu")->base();
+
+	ROM[0xe955] = 0xea;
+	ROM[0xe956] = 0xea;
+}
+
+static DRIVER_INIT( vkdlswwu )
+{
+    /* $ee6b-ee6c, NOPing the BNE-->KILL
+       after compare with Dallas TK data
+    */
+
+	UINT8 *ROM = machine.region("maincpu")->base();
+
+	ROM[0xee6b] = 0xea;
+	ROM[0xee6c] = 0xea;
+}
+
+static DRIVER_INIT( vkdlswwv )
+{
+    /* $f052-f053, NOPing the BNE-->KILL
+       after compare with Dallas TK data
+    */
+
+	UINT8 *ROM = machine.region("maincpu")->base();
+
+	ROM[0xf052] = 0xea;
+	ROM[0xf053] = 0xea;
+}
+
+
 /***********************************************
 
   ICP1 Daughterboard encryption
@@ -5124,90 +9679,188 @@
 	/* nothing yet... */
 }
 
+/**********************************************
+
+  Witch Strike protection
+
+  (a default Dallas TK NVRAM should be made)
+
+  Each time the DEAL button is pressed, the program
+  do the following execution....
+
+  C9F5:  JSR $F2D4
+
+  and then...
+
+  F2D4: 48            pha
+  F2D5: 8A            txa
+  F2D6: 48            pha
+  F2D7: A2 00         ldx  #$00
+  F2D9: BD EE F2      lda  $F2EE,x    ; read a char.
+  F2DC: F0 08         beq  $F2E6      ; if 0 (end of string), branch to end.
+  F2DE: DD E0 2F      cmp  $2FE0,x    ; compare with dallas offset.
+  F2E1: D0 07         bne  $F2EA      ; if different, go to $F2EA (kill)
+  F2E3: E8            inx             ; increment X-register.
+  F2E4: D0 F3         bne  $F2D9      ; loop to read the next char....
+  F2E6: 68            pla             ; end.
+  F2E7: AA            tax
+  F2E8: 68            pla
+  F2E9: 60            rts
+
+  F2EA: 02            kil  $02        ; kill.
+  F2EB: 4C EA F2      jmp  $F2EA      ; just in case the 1st time fails, go to kill again.
+
+  The following string is tested...
+
+  F2EE:  76 69 64 65 6F 20 6B 6C 65 69 6E 20 74 65 73 74 64 61 74 61 00  |  video klein testdata.
+
+  So nasty... and unneccessary.
+
+***********************************************/
+
+static DRIVER_INIT( wstrike )
+{
+    /* NOPing the BNE --> $F2EA (KILL)
+       after compare with a string inside the Dallas TK RAM
+    */
+
+	UINT8 *ROM = machine.region("maincpu")->base();
+
+	ROM[0xf2e1] = 0xea;
+	ROM[0xf2e2] = 0xea;
+}
+
 
 /*********************************************
 *                Game Drivers                *
 *********************************************/
 
-/*     YEAR  NAME      PARENT    MACHINE   INPUT     INIT      ROT      COMPANY                     FULLNAME                                  FLAGS             LAYOUT  */
-GAMEL( 1981, goldnpkr, 0,        goldnpkr, goldnpkr, 0,        ROT0,   "Bonanza Enterprises, Ltd", "Golden Poker Double Up (Big Boy)",        0,                layout_goldnpkr )
-GAMEL( 1981, goldnpkb, goldnpkr, goldnpkr, goldnpkr, 0,        ROT0,   "Bonanza Enterprises, Ltd", "Golden Poker Double Up (Mini Boy)",       0,                layout_goldnpkr )
-
-GAMEL( 198?, pottnpkr, 0,        pottnpkr, pottnpkr, 0,        ROT0,   "bootleg",                  "Jack Potten's Poker (set 1)",             0,                layout_goldnpkr )
-GAMEL( 198?, potnpkra, pottnpkr, pottnpkr, potnpkra, 0,        ROT0,   "bootleg",                  "Jack Potten's Poker (set 2)",             0,                layout_goldnpkr )
-GAMEL( 198?, potnpkrb, pottnpkr, pottnpkr, pottnpkr, 0,        ROT0,   "bootleg",                  "Jack Potten's Poker (set 3)",             0,                layout_goldnpkr )
-GAMEL( 198?, potnpkrc, pottnpkr, pottnpkr, potnpkrc, 0,        ROT0,   "bootleg",                  "Jack Potten's Poker (set 4)",             0,                layout_goldnpkr )
-GAMEL( 198?, potnpkrd, pottnpkr, pottnpkr, potnpkrc, 0,        ROT0,   "bootleg",                  "Jack Potten's Poker (set 5)",             0,                layout_goldnpkr )
-GAMEL( 198?, potnpkre, pottnpkr, pottnpkr, pottnpkr, 0,        ROT0,   "bootleg",                  "Jack Potten's Poker (set 6)",             0,                layout_goldnpkr )
-GAMEL( 198?, superdbl, pottnpkr, goldnpkr, goldnpkr, 0,        ROT0,   "Karateco",                 "Super Double (French)",                   0,                layout_goldnpkr )
-GAMEL( 198?, ngold,    pottnpkr, pottnpkr, ngold,    0,        ROT0,   "<unknown>",                "Jack Potten's Poker (NGold, set 1)",      0,                layout_goldnpkr )
-GAMEL( 198?, ngolda,   pottnpkr, pottnpkr, ngold,    0,        ROT0,   "<unknown>",                "Jack Potten's Poker (NGold, set 2)",      0,                layout_goldnpkr )
-GAMEL( 198?, ngoldb,   pottnpkr, pottnpkr, ngold,    0,        ROT0,   "<unknown>",                "Jack Potten's Poker (NGold, set 3)",      GAME_IMPERFECT_GRAPHICS, layout_goldnpkr )
-
-GAMEL( 1991, witchcrd, 0,        witchcrd, witchcrd, vkdlsc,   ROT0,   "Video Klein?",             "Witch Card (Video Klein CPU box, set 1)", 0,                layout_goldnpkr )
-GAME(  1991, witchcda, witchcrd, witchcrd, witchcda, 0,        ROT0,   "<unknown>",                "Witch Card (Spanish, witch game, set 1)", 0 )
-GAME(  1991, witchcdb, witchcrd, witchcrd, witchcda, 0,        ROT0,   "<unknown>",                "Witch Card (Spanish, witch game, set 2)", 0 )
-GAME(  1991, witchcdc, witchcrd, witchcrd, witchcdc, 0,        ROT0,   "<unknown>",                "Witch Card (English, no witch game)",     0 )
-GAMEL( 1994, witchcdd, witchcrd, witchcrd, witchcdd, 0,        ROT0,   "Proma",                    "Witch Card (German, WC3050, set 1 )",     0,                layout_goldnpkr )
-GAMEL( 1991, witchcde, witchcrd, witchcrd, witchcrd, vkdlsc,   ROT0,   "Video Klein",              "Witch Card (Video Klein CPU box, set 2)", 0,                layout_goldnpkr )
-GAMEL( 1985, witchcdf, witchcrd, witchcrd, witchcdf, 0,        ROT0,   "PM / Beck Elektronik",     "Witch Card (English, witch game, lamps)", 0,                layout_goldnpkr )
-GAMEL( 199?, witchcdg, witchcrd, wcfalcon, witchcrd, 0,        ROT0,   "Falcon",                   "Witch Card (Falcon, enhanced sound)",     0,                layout_goldnpkr )
-GAMEL( 1994, witchcdh, witchcrd, witchcrd, witchcdd, 0,        ROT0,   "Proma",                    "Witch Card (German, WC3050, set 2 )",     0,                layout_goldnpkr )
-GAMEL( 1994, witchcdi, witchcrd, witchcrd, witchcdd, 0,        ROT0,   "Proma",                    "Witch Card (German, WC3050, 27-4-94)",    0,                layout_goldnpkr )
-GAMEL( 1991, witchgme, witchcrd, witchcrd, witchcrd, 0,        ROT0,   "Video Klein",              "Witch Game (Video Klein, set 1)",         0,                layout_goldnpkr )
-GAMEL( 1997, witchcdk, witchcrd, witchcrd, witchcrd, 0,        ROT0,   "Video Klein",              "Witch Game (Video Klein, set 2)",         GAME_NOT_WORKING, layout_goldnpkr )
-GAMEL( 1994, witchjol, witchcrd, wcrdxtnd, witchjol, vkdlsa,   ROT0,   "Video Klein?",             "Jolli Witch (Export, 6T/12T ver 1.57D)",  GAME_IMPERFECT_COLORS, layout_goldnpkr )
-GAMEL( 1994, wldwitch, witchcrd, wcrdxtnd, wldwitch, vkdlsb,   ROT0,   "Video Klein",              "Wild Witch (Export, 6T/12T ver 1.74A)",   GAME_IMPERFECT_COLORS, layout_goldnpkr )
-
-GAMEL( 1990, bsuerte,  0,        witchcrd, bsuerte,  0,        ROT0,   "<unknown>",                "Buena Suerte (Spanish, set 1)",           0,                layout_goldnpkr )
-GAMEL( 1991, bsuertea, bsuerte,  witchcrd, bsuerte,  0,        ROT0,   "<unknown>",                "Buena Suerte (Spanish, set 2)",           0,                layout_goldnpkr )
-GAMEL( 1991, bsuerteb, bsuerte,  witchcrd, bsuerte,  0,        ROT0,   "<unknown>",                "Buena Suerte (Spanish, set 3)",           0,                layout_goldnpkr )
-GAMEL( 1991, bsuertec, bsuerte,  witchcrd, bsuerte,  0,        ROT0,   "<unknown>",                "Buena Suerte (Spanish, set 4)",           0,                layout_goldnpkr )
-GAMEL( 1991, bsuerted, bsuerte,  witchcrd, bsuerte,  0,        ROT0,   "<unknown>",                "Buena Suerte (Spanish, set 5)",           0,                layout_goldnpkr )
-GAMEL( 1991, bsuertee, bsuerte,  witchcrd, bsuerte,  0,        ROT0,   "<unknown>",                "Buena Suerte (Spanish, set 6)",           0,                layout_goldnpkr )
-GAMEL( 1991, bsuertef, bsuerte,  witchcrd, bsuerte,  0,        ROT0,   "<unknown>",                "Buena Suerte (Spanish, set 7)",           0,                layout_goldnpkr )
-GAME(  1991, bsuerteg, bsuerte,  witchcrd, bsuertew, 0,        ROT0,   "<unknown>",                "Buena Suerte (Spanish, set 8)",           0 )
-GAME(  1991, bsuerteh, bsuerte,  witchcrd, bsuertew, 0,        ROT0,   "<unknown>",                "Buena Suerte (Spanish, set 9)",           0 )
-GAMEL( 1991, bsuertei, bsuerte,  witchcrd, bsuerte,  0,        ROT0,   "<unknown>",                "Buena Suerte (Spanish, set 10)",          0,                layout_goldnpkr )
-GAMEL( 1991, bsuertej, bsuerte,  witchcrd, bsuerte,  0,        ROT0,   "<unknown>",                "Buena Suerte (Spanish, set 11)",          0,                layout_goldnpkr )
-GAMEL( 1991, bsuertek, bsuerte,  witchcrd, bsuerte,  0,        ROT0,   "<unknown>",                "Buena Suerte (Spanish, set 12)",          0,                layout_goldnpkr )
-GAMEL( 1991, bsuertel, bsuerte,  witchcrd, bsuerte,  0,        ROT0,   "<unknown>",                "Buena Suerte (Spanish, set 13)",          0,                layout_goldnpkr )
-GAMEL( 1991, bsuertem, bsuerte,  witchcrd, bsuerte,  0,        ROT0,   "<unknown>",                "Buena Suerte (Spanish, set 14)",          0,                layout_goldnpkr )
-GAMEL( 1991, bsuerten, bsuerte,  witchcrd, bsuerte,  0,        ROT0,   "<unknown>",                "Buena Suerte (Spanish, set 15)",          0,                layout_goldnpkr )
-GAMEL( 1991, bsuerteo, bsuerte,  witchcrd, bsuerte,  0,        ROT0,   "<unknown>",                "Buena Suerte (Spanish, set 16)",          0,                layout_goldnpkr )
-GAMEL( 1991, bsuertep, bsuerte,  witchcrd, bsuerte,  0,        ROT0,   "<unknown>",                "Buena Suerte (Spanish, set 17)",          0,                layout_goldnpkr )
-GAMEL( 1991, bsuerteq, bsuerte,  witchcrd, bsuerte,  0,        ROT0,   "<unknown>",                "Buena Suerte (Spanish, set 18)",          0,                layout_goldnpkr )
-GAMEL( 1991, bsuerter, bsuerte,  witchcrd, bsuerte,  0,        ROT0,   "<unknown>",                "Buena Suerte (Spanish, set 19)",          0,                layout_goldnpkr )
-GAMEL( 1991, bsuertes, bsuerte,  witchcrd, bsuerte,  0,        ROT0,   "<unknown>",                "Buena Suerte (Spanish, set 20)",          0,                layout_goldnpkr )
-GAMEL( 1991, bsuertet, bsuerte,  witchcrd, bsuerte,  0,        ROT0,   "<unknown>",                "Buena Suerte (Spanish, set 21)",          0,                layout_goldnpkr )
-GAMEL( 1991, bsuerteu, bsuerte,  witchcrd, bsuerte,  0,        ROT0,   "<unknown>",                "Buena Suerte (Spanish, set 22)",          0,                layout_goldnpkr )
-GAMEL( 1991, goodluck, bsuerte,  witchcrd, goodluck, 0,        ROT0,   "<unknown>",                "Good Luck",                               0,                layout_goldnpkr )
-
-GAMEL( 1991, falcnwld,  0,        wildcard, wildcard, 0,       ROT0,   "TVG",                      "Falcons Wild - Wild Card 1991 (TVG)",     0,                layout_goldnpkr )
-GAMEL( 1990, falcnwlda, falcnwld, wildcard, wildcard, 0,       ROT0,   "Video Klein",              "Falcons Wild - World Wide Poker (Video Klein)",     GAME_UNEMULATED_PROTECTION, layout_goldnpkr )
-GAME(  1983, falcnwldb, falcnwld, wildcrdb, wildcard, flcnw,   ROT0,   "Falcon",                   "Falcons Wild - World Wide Poker (Falcon original)", GAME_NOT_WORKING )
+/*     YEAR  NAME       PARENT    MACHINE   INPUT     INIT      ROT      COMPANY                     FULLNAME                                  FLAGS             LAYOUT  */
+GAMEL( 1981, goldnpkr,  0,        goldnpkr, goldnpkr, 0,        ROT0,   "Bonanza Enterprises, Ltd", "Golden Poker Double Up (Big Boy)",        0,                layout_goldnpkr )
+GAMEL( 1981, goldnpkb,  goldnpkr, goldnpkr, goldnpkr, 0,        ROT0,   "Bonanza Enterprises, Ltd", "Golden Poker Double Up (Mini Boy)",       0,                layout_goldnpkr )
+
+GAMEL( 198?, pottnpkr,  0,        pottnpkr, pottnpkr, 0,        ROT0,   "bootleg",                  "Jack Potten's Poker (set 1)",             0,                layout_goldnpkr )
+GAMEL( 198?, potnpkra,  pottnpkr, pottnpkr, potnpkra, 0,        ROT0,   "bootleg",                  "Jack Potten's Poker (set 2)",             0,                layout_goldnpkr )
+GAMEL( 198?, potnpkrb,  pottnpkr, pottnpkr, pottnpkr, 0,        ROT0,   "bootleg",                  "Jack Potten's Poker (set 3)",             0,                layout_goldnpkr )
+GAMEL( 198?, potnpkrc,  pottnpkr, pottnpkr, potnpkrc, 0,        ROT0,   "bootleg",                  "Jack Potten's Poker (set 4)",             0,                layout_goldnpkr )
+GAMEL( 198?, potnpkrd,  pottnpkr, pottnpkr, potnpkrc, 0,        ROT0,   "bootleg",                  "Jack Potten's Poker (set 5)",             0,                layout_goldnpkr )
+GAMEL( 198?, potnpkre,  pottnpkr, pottnpkr, pottnpkr, 0,        ROT0,   "bootleg",                  "Jack Potten's Poker (set 6)",             0,                layout_goldnpkr )
+GAMEL( 198?, superdbl,  pottnpkr, goldnpkr, goldnpkr, 0,        ROT0,   "Karateco",                 "Super Double (French)",                   0,                layout_goldnpkr )
+GAMEL( 198?, ngold,     pottnpkr, pottnpkr, ngold,    0,        ROT0,   "<unknown>",                "Jack Potten's Poker (NGold, set 1)",      0,                layout_goldnpkr )
+GAMEL( 198?, ngolda,    pottnpkr, pottnpkr, ngold,    0,        ROT0,   "<unknown>",                "Jack Potten's Poker (NGold, set 2)",      0,                layout_goldnpkr )
+GAMEL( 198?, ngoldb,    pottnpkr, pottnpkr, ngold,    0,        ROT0,   "<unknown>",                "Jack Potten's Poker (NGold, set 3)",      GAME_IMPERFECT_GRAPHICS, layout_goldnpkr )
+
+GAMEL( 1991, witchcrd,  0,        witchcrd, witchcrd, vkdlsc,   ROT0,   "Video Klein?",             "Witch Card (Video Klein CPU box, set 1)", 0,                layout_goldnpkr )
+GAME(  1991, witchcda,  witchcrd, witchcrd, witchcda, 0,        ROT0,   "<unknown>",                "Witch Card (Spanish, witch game, set 1)", 0 )
+GAME(  1991, witchcdb,  witchcrd, witchcrd, witchcda, 0,        ROT0,   "<unknown>",                "Witch Card (Spanish, witch game, set 2)", 0 )
+GAME(  1991, witchcdc,  witchcrd, witchcrd, witchcdc, 0,        ROT0,   "<unknown>",                "Witch Card (English, no witch game)",     0 )
+GAMEL( 1994, witchcdd,  witchcrd, witchcrd, witchcdd, 0,        ROT0,   "Proma",                    "Witch Card (German, WC3050, set 1 )",     0,                layout_goldnpkr )
+GAMEL( 1991, witchcde,  witchcrd, witchcrd, witchcrd, vkdlsc,   ROT0,   "Video Klein",              "Witch Card (Video Klein CPU box, set 2)", 0,                layout_goldnpkr )
+GAMEL( 1985, witchcdf,  witchcrd, witchcrd, witchcdf, 0,        ROT0,   "PM / Beck Elektronik",     "Witch Card (English, witch game, lamps)", 0,                layout_goldnpkr )
+GAMEL( 199?, witchcdg,  witchcrd, wcfalcon, witchcrd, 0,        ROT0,   "Falcon",                   "Witch Card (Falcon, enhanced sound)",     0,                layout_goldnpkr )
+GAMEL( 1994, witchcdh,  witchcrd, witchcrd, witchcdd, 0,        ROT0,   "Proma",                    "Witch Card (German, WC3050, set 2 )",     0,                layout_goldnpkr )
+GAMEL( 1994, witchcdi,  witchcrd, witchcrd, witchcdd, 0,        ROT0,   "Proma",                    "Witch Card (German, WC3050, 27-4-94)",    0,                layout_goldnpkr )
+
+GAMEL( 1991, witchgme,  0,        witchcrd, witchcrd, 0,        ROT0,   "Video Klein",              "Witch Game (Video Klein, set 1)",         0,                layout_goldnpkr )
+GAMEL( 1997, witchcdk,  witchgme, witchcrd, witchcrd, 0,        ROT0,   "Video Klein",              "Witch Game (Video Klein, set 2)",         GAME_NOT_WORKING, layout_goldnpkr )
+
+GAMEL( 1994, witchjol,  0,        wcrdxtnd, witchjol, vkdlsa,   ROT0,   "Video Klein",              "Jolli Witch (Export, 6T/12T ver 1.57D)",  0,                layout_goldnpkr )
+
+GAMEL( 2001, wldwitch,  0,        wcrdxtnd, wldwitch, vkdlsww,  ROT0,   "Video Klein",              "Wild Witch (Export, 6T/12T ver 1.84A)",       0,                layout_goldnpkr )	/* Ver 184A, 2001-09-12 */
+GAMEL( 1992, wldwitcha, wldwitch, wcrdxtnd, wldwitch, vkdlswwa, ROT0,   "Video Klein",              "Wild Witch (Export, 6T/12T ver 1.57-SP)",     0,                layout_goldnpkr )	/* Ver 157-SP, 1992-12-25 */
+GAMEL( 1992, wldwitchb, wldwitch, wcrdxtnd, wldwitch, 0,        ROT0,   "Video Klein",              "Wild Witch (Export, 6T/12T ver 1.57-TE)",     GAME_NOT_WORKING, layout_goldnpkr )	/* Ver 157-TE, 1992-12-25 */
+GAMEL( 1994, wldwitchc, wldwitch, wcrdxtnd, wldwitch, vkdlswwc, ROT0,   "Video Klein",              "Wild Witch (Export, 6T/12T ver 1.62A)",       0,                layout_goldnpkr )	/* Ver 162A, 1994-04-26 */
+GAMEL( 1994, wldwitchd, wldwitch, wcrdxtnd, wldwitch, vkdlswwd, ROT0,   "Video Klein",              "Wild Witch (Export, 6T/12T ver 1.62B)",       0,                layout_goldnpkr )	/* Ver 162B, 1994-04-26 */
+GAMEL( 1994, wldwitche, wldwitch, wcrdxtnd, wldwitch, 0,        ROT0,   "Video Klein",              "Wild Witch (Export, 6T/12T ver 1.62A-F)",     GAME_NOT_WORKING, layout_goldnpkr )	/* Ver 162A-F, 1994-04-26 */
+GAMEL( 1994, wldwitchf, wldwitch, wcrdxtnd, wldwitch, vkdlswwc, ROT0,   "Video Klein",              "Wild Witch (Export, 6T/12T ver 1.62A alt)",   0,                layout_goldnpkr )	/* Ver 162A alt, 1994-11-03 */
+GAMEL( 1994, wldwitchg, wldwitch, wcrdxtnd, wldwitch, vkdlswwd, ROT0,   "Video Klein",              "Wild Witch (Export, 6T/12T ver 1.62B alt)",   0,                layout_goldnpkr )	/* Ver 162B alt, 1994-11-03 */
+GAMEL( 1995, wldwitchh, wldwitch, wcrdxtnd, wldwitch, vkdlswwh, ROT0,   "Video Klein",              "Wild Witch (Export, 6T/12T ver 1.65A)",       0,                layout_goldnpkr )	/* Ver 165A, 1995-11-16 */
+GAMEL( 1996, wldwitchi, wldwitch, wcrdxtnd, wldwitch, vkdlswwh, ROT0,   "Video Klein",              "Wild Witch (Export, 6T/12T ver 1.65A-S)",     0,                layout_goldnpkr )	/* Ver 165A-S (Fast Deal), 1996-03-26 */
+GAMEL( 1996, wldwitchj, wldwitch, wcrdxtnd, wldwitch, vkdlswwh, ROT0,   "Video Klein",              "Wild Witch (Export, 6T/12T ver 1.65A-S alt)", 0,                layout_goldnpkr )	/* Ver 165A-S alt (Fast Deal), 1996-05-26 */
+GAMEL( 1996, wldwitchk, wldwitch, wcrdxtnd, wldwitch, vkdlswwh, ROT0,   "Video Klein",              "Wild Witch (Export, 6T/12T ver 1.65A-N)",     0,                layout_goldnpkr )	/* Ver 165A-N, 1996-05-29 */
+GAMEL( 1996, wldwitchl, wldwitch, wcrdxtnd, wldwitch, vkdlswwl, ROT0,   "Video Klein",              "Wild Witch (Export, 6T/12T ver 1.70A beta)",  0,                layout_goldnpkr )	/* Ver 170A-beta, 1996-06-25 */
+GAMEL( 1996, wldwitchm, wldwitch, wcrdxtnd, wldwitch, vkdlswwl, ROT0,   "Video Klein",              "Wild Witch (Export, 6T/12T ver 1.70A)",       0,                layout_goldnpkr )	/* Ver 170A, 1996-09-30 */
+GAMEL( 1997, wldwitchn, wldwitch, wcrdxtnd, wldwitch, vkdlswwl, ROT0,   "Video Klein",              "Wild Witch (Export, 6T/12T ver 1.70A alt)",   0,                layout_goldnpkr )	/* Ver 170A alt, 1997-06-11 */
+GAMEL( 1998, wldwitcho, wldwitch, wcrdxtnd, wldwitch, vkdlswwo, ROT0,   "Video Klein",              "Wild Witch (Export, 6T/12T ver 1.74A-SP-BELG)", 0,              layout_goldnpkr )	/* Ver 174A-SP-BELG (no D-UP, no payout), 1998-05-11 */
+GAMEL( 1998, wldwitchp, wldwitch, wcrdxtnd, wldwitch, vkdlswwp, ROT0,   "Video Klein",              "Wild Witch (Export, 6T/12T ver 1.74A)",       0,                layout_goldnpkr )	/* Ver 174A (no D-UP, no payout), 1998-09-20 */
+GAMEL( 1998, wldwitchq, wldwitch, wcrdxtnd, wldwitch, vkdlsb,   ROT0,   "Video Klein",              "Wild Witch (Export, 6T/12T ver 1.74A alt)",   0,                layout_goldnpkr )	/* Ver 174A alt, box, 1998-09-25 */
+GAMEL( 1999, wldwitchr, wldwitch, wcrdxtnd, wldwitch, vkdlswwr, ROT0,   "Video Klein",              "Wild Witch (Export, 6B/12B ver 1.75A-E English)", 0,            layout_goldnpkr )	/* Ver 175A-E (English), 1999-01-11 */
+GAMEL( 1999, wldwitchs, wldwitch, wcrdxtnd, wldwitch, vkdlswws, ROT0,   "Video Klein",              "Wild Witch (Export, 6T/12T ver 1.76A)",       0,                layout_goldnpkr )	/* Ver 176A, 1999-??-?? */
+GAMEL( 1999, wldwitcht, wldwitch, wcrdxtnd, wldwitch, vkdlswwt, ROT0,   "Video Klein",              "Wild Witch (Export, 6T/12T ver 1.77A)",       0,                layout_goldnpkr )	/* Ver 177A, 1999-??-?? */
+GAMEL( 2000, wldwitchu, wldwitch, wcrdxtnd, wldwitch, vkdlswwu, ROT0,   "Video Klein",              "Wild Witch (Export, 6T/12T ver 1.79A)",       0,                layout_goldnpkr )	/* Ver 179A, 2000-05-10 */
+GAMEL( 2001, wldwitchv, wldwitch, wcrdxtnd, wldwitch, vkdlswwv, ROT0,   "Video Klein",              "Wild Witch (Export, 6T/12T ver 1.83A)",       0,                layout_goldnpkr )	/* Ver 183A, 2001-06-13 */
+
+GAMEL( 1998, wupndown,  0,        wcrdxtnd, wupndown, 0,        ROT0,   "Video Klein",              "Witch Up & Down (Export, 6T/12T ver 1.02)",        0,           layout_upndown )	/* Ver 1.02, 1998-10-26 */
+GAMEL( 1998, wupndowna, wupndown, wcrdxtnd, wupndown, 0,        ROT0,   "Video Klein",              "Witch Up & Down (Export, 6T/12T ver 0.99, set 1)", 0,           layout_upndown )	/* Ver 0.99, 1998-04-09 */
+GAMEL( 1998, wupndownb, wupndown, wcrdxtnd, wupndown, 0,        ROT0,   "Video Klein",              "Witch Up & Down (Export, 6T/12T ver 0.99, set 2)", 0,           layout_upndown )	/* Ver 0.99, 1998-03-23 */
+GAMEL( 1998, wupndownc, wupndown, wcrdxtnd, wupndown, 0,        ROT0,   "Video Klein",              "Witch Up & Down (Export, 6T/12T ver 0.99, set 3)", 0,           layout_upndown )	/* Ver 0.99 alt, 1998-05-11 */
+GAMEL( 1998, wupndownd, wupndown, wcrdxtnd, wupndown, 0,        ROT0,   "Video Klein",              "Witch Up & Down (Export, 6T/12T ver 0.99T)",       0,           layout_upndown )	/* Ver 0.99T, 1998-03-23 */
+
+GAMEL( 1992, wstrike,   0,        wcrdxtnd, wstrike,  wstrike,  ROT0,   "Video Klein",              "Witch Strike (Export, 6T/12T ver 1.01A)",     0,                layout_goldnpkr )
+GAMEL( 1992, wstrikea,  wstrike,  wcrdxtnd, wstrike,  wstrike,  ROT0,   "Video Klein",              "Witch Strike (Export, 6T/12T ver 1.01B)",     0,                layout_goldnpkr )
+
+GAMEL( 1996, wtchjack,  0,        wcrdxtnd, wtchjack, 0,        ROT0,   "Video Klein",              "Witch Jack (Export, 6T/12T ver 0.87-89)", 0,                       layout_goldnpkr )	/* Ver 0.87-89 / 1996-10-08 GFX OK */
+GAMEL( 1994, wtchjacka, wtchjack, wcrdxtnd, wtchjack, 0,        ROT0,   "Video Klein",              "Witch Jackpot (Export, 6T/12T ver 0.25)", GAME_IMPERFECT_GRAPHICS, layout_goldnpkr )	/* Ver 0.25 / 1994-11-24 */
+GAMEL( 1995, wtchjackb, wtchjack, wcrdxtnd, wtchjack, 0,        ROT0,   "Video Klein",              "Witch Jack (Export, 6T/12T ver 0.40)",    GAME_IMPERFECT_GRAPHICS, layout_goldnpkr )	/* Ver 0.40 / 1995-02-27 */
+GAMEL( 1995, wtchjackc, wtchjack, wcrdxtnd, wtchjack, 0,        ROT0,   "Video Klein",              "Witch Jack (Export, 6T/12T ver 0.40T)",   GAME_NOT_WORKING,        layout_goldnpkr )	/* Ver 0.40T / 1995-02-27 */
+GAMEL( 1995, wtchjackd, wtchjack, wcrdxtnd, wtchjack, 0,        ROT0,   "Video Klein",              "Witch Jack (Export, 6T/12T ver 0.62)",    GAME_IMPERFECT_GRAPHICS, layout_goldnpkr )	/* Ver 0.62 / 1995-08-02 */
+GAMEL( 1995, wtchjacke, wtchjack, wcrdxtnd, wtchjack, 0,        ROT0,   "Video Klein",              "Witch Jack (Export, 6T/12T ver 0.64)",    GAME_IMPERFECT_GRAPHICS, layout_goldnpkr )	/* Ver 0.64 / 1995-09-13 */
+GAMEL( 1995, wtchjackf, wtchjack, wcrdxtnd, wtchjack, 0,        ROT0,   "Video Klein",              "Witch Jack (Export, 6T/12T ver 0.65)",    GAME_IMPERFECT_GRAPHICS, layout_goldnpkr )	/* Ver 0.65 / 1995-10-19 */
+GAMEL( 1996, wtchjackg, wtchjack, wcrdxtnd, wtchjack, 0,        ROT0,   "Video Klein",              "Witch Jack (Export, 6T/12T ver 0.70S)",   GAME_IMPERFECT_GRAPHICS, layout_goldnpkr )	/* Ver 0.70S / 1996-03-26 */
+GAMEL( 1996, wtchjackh, wtchjack, wcrdxtnd, wtchjack, 0,        ROT0,   "Video Klein",              "Witch Jack (Export, 6T/12T ver 0.70P)",   GAME_IMPERFECT_GRAPHICS, layout_goldnpkr )	/* Ver 0.70P / 1996-03-26 */
+GAMEL( 1996, wtchjacki, wtchjack, wcrdxtnd, wtchjack, 0,        ROT0,   "Video Klein",              "Witch Jack (Export, 6T/12T ver 0.87)",    0,                       layout_goldnpkr )	/* Ver 0.87 / 1996-07-16, GFX OK */
+GAMEL( 1996, wtchjackj, wtchjack, wcrdxtnd, wtchjack, 0,        ROT0,   "Video Klein",              "Witch Jack (Export, 6T/12T ver 0.87-88)", 0,                       layout_goldnpkr )	/* Ver 0.87-88 / 1996-10-02, GFX OK */
+
+GAMEL( 1990, bsuerte,   0,        witchcrd, bsuerte,  0,        ROT0,   "<unknown>",                "Buena Suerte (Spanish, set 1)",           0,                layout_goldnpkr )
+GAMEL( 1991, bsuertea,  bsuerte,  witchcrd, bsuerte,  0,        ROT0,   "<unknown>",                "Buena Suerte (Spanish, set 2)",           0,                layout_goldnpkr )
+GAMEL( 1991, bsuerteb,  bsuerte,  witchcrd, bsuerte,  0,        ROT0,   "<unknown>",                "Buena Suerte (Spanish, set 3)",           0,                layout_goldnpkr )
+GAMEL( 1991, bsuertec,  bsuerte,  witchcrd, bsuerte,  0,        ROT0,   "<unknown>",                "Buena Suerte (Spanish, set 4)",           0,                layout_goldnpkr )
+GAMEL( 1991, bsuerted,  bsuerte,  witchcrd, bsuerte,  0,        ROT0,   "<unknown>",                "Buena Suerte (Spanish, set 5)",           0,                layout_goldnpkr )
+GAMEL( 1991, bsuertee,  bsuerte,  witchcrd, bsuerte,  0,        ROT0,   "<unknown>",                "Buena Suerte (Spanish, set 6)",           0,                layout_goldnpkr )
+GAMEL( 1991, bsuertef,  bsuerte,  witchcrd, bsuerte,  0,        ROT0,   "<unknown>",                "Buena Suerte (Spanish, set 7)",           0,                layout_goldnpkr )
+GAME(  1991, bsuerteg,  bsuerte,  witchcrd, bsuertew, 0,        ROT0,   "<unknown>",                "Buena Suerte (Spanish, set 8)",           0 )
+GAME(  1991, bsuerteh,  bsuerte,  witchcrd, bsuertew, 0,        ROT0,   "<unknown>",                "Buena Suerte (Spanish, set 9)",           0 )
+GAMEL( 1991, bsuertei,  bsuerte,  witchcrd, bsuerte,  0,        ROT0,   "<unknown>",                "Buena Suerte (Spanish, set 10)",          0,                layout_goldnpkr )
+GAMEL( 1991, bsuertej,  bsuerte,  witchcrd, bsuerte,  0,        ROT0,   "<unknown>",                "Buena Suerte (Spanish, set 11)",          0,                layout_goldnpkr )
+GAMEL( 1991, bsuertek,  bsuerte,  witchcrd, bsuerte,  0,        ROT0,   "<unknown>",                "Buena Suerte (Spanish, set 12)",          0,                layout_goldnpkr )
+GAMEL( 1991, bsuertel,  bsuerte,  witchcrd, bsuerte,  0,        ROT0,   "<unknown>",                "Buena Suerte (Spanish, set 13)",          0,                layout_goldnpkr )
+GAMEL( 1991, bsuertem,  bsuerte,  witchcrd, bsuerte,  0,        ROT0,   "<unknown>",                "Buena Suerte (Spanish, set 14)",          0,                layout_goldnpkr )
+GAMEL( 1991, bsuerten,  bsuerte,  witchcrd, bsuerte,  0,        ROT0,   "<unknown>",                "Buena Suerte (Spanish, set 15)",          0,                layout_goldnpkr )
+GAMEL( 1991, bsuerteo,  bsuerte,  witchcrd, bsuerte,  0,        ROT0,   "<unknown>",                "Buena Suerte (Spanish, set 16)",          0,                layout_goldnpkr )
+GAMEL( 1991, bsuertep,  bsuerte,  witchcrd, bsuerte,  0,        ROT0,   "<unknown>",                "Buena Suerte (Spanish, set 17)",          0,                layout_goldnpkr )
+GAMEL( 1991, bsuerteq,  bsuerte,  witchcrd, bsuerte,  0,        ROT0,   "<unknown>",                "Buena Suerte (Spanish, set 18)",          0,                layout_goldnpkr )
+GAMEL( 1991, bsuerter,  bsuerte,  witchcrd, bsuerte,  0,        ROT0,   "<unknown>",                "Buena Suerte (Spanish, set 19)",          0,                layout_goldnpkr )
+GAMEL( 1991, bsuertes,  bsuerte,  witchcrd, bsuerte,  0,        ROT0,   "<unknown>",                "Buena Suerte (Spanish, set 20)",          0,                layout_goldnpkr )
+GAMEL( 1991, bsuertet,  bsuerte,  witchcrd, bsuerte,  0,        ROT0,   "<unknown>",                "Buena Suerte (Spanish, set 21)",          0,                layout_goldnpkr )
+GAMEL( 1991, bsuerteu,  bsuerte,  witchcrd, bsuerte,  0,        ROT0,   "<unknown>",                "Buena Suerte (Spanish, set 22)",          0,                layout_goldnpkr )
+GAMEL( 1991, goodluck,  bsuerte,  witchcrd, goodluck, 0,        ROT0,   "<unknown>",                "Good Luck",                               0,                layout_goldnpkr )
+
+GAMEL( 1991, falcnwld,  0,        wildcard, wildcard, 0,        ROT0,   "TVG",                      "Falcons Wild - Wild Card 1991 (TVG)",     0,                layout_goldnpkr )
+GAMEL( 1990, falcnwlda, falcnwld, wildcard, wildcard, 0,        ROT0,   "Video Klein",              "Falcons Wild - World Wide Poker (Video Klein, set 1)", 0,   layout_goldnpkr )
+GAMEL( 1990, falcnwldb, falcnwld, wildcard, wildcard, 0,        ROT0,   "Video Klein",              "Falcons Wild - World Wide Poker (Video Klein, set 2)", 0,   layout_goldnpkr )
+GAME(  1983, falcnwldc, falcnwld, wildcrdb, wildcard, flcnw,    ROT0,   "Falcon",                   "Falcons Wild - World Wide Poker (Falcon original)",    GAME_NOT_WORKING )
 
 /*************************************** OTHER SETS ***************************************/
 
-/*     YEAR  NAME      PARENT    MACHINE   INPUT     INIT      ROT      COMPANY                     FULLNAME                                  FLAGS             LAYOUT  */
-GAMEL( 1981, pmpoker,  0,        goldnpkr, pmpoker,  0,        ROT0,   "PM / Beck Elektronik",     "PlayMan Poker (German)",                  0,                layout_pmpoker  )
-GAMEL( 198?, royale,   0,        goldnpkr, royale,   royale,   ROT0,   "<unknown>",                "Royale (set 1)",                          GAME_NOT_WORKING, layout_goldnpkr )
-GAMEL( 198?, royalea,  royale,   goldnpkr, royale,   royale,   ROT0,   "<unknown>",                "Royale (set 2)",                          GAME_NOT_WORKING, layout_goldnpkr )
-GAME(  1993, sloco93,  0,        witchcrd, sloco93,  0,        ROT0,   "<unknown>",                "Super Loco 93 (Spanish, set 1)",          0 )
-GAME(  1993, sloco93a, sloco93,  witchcrd, sloco93,  0,        ROT0,   "<unknown>",                "Super Loco 93 (Spanish, set 2)",          0 )
-GAME(  198?, maverik,  0,        witchcrd, bsuerte,  0,        ROT0,   "<unknown>",                "Maverik",                                 0 )
-GAMEL( 1986, brasil86, 0,        witchcrd, bsuerte,  0,        ROT0,   "<unknown>",                "Brasil 86",                               0,                layout_goldnpkr )
-GAMEL( 1987, brasil87, 0,        witchcrd, bsuerte,  0,        ROT0,   "<unknown>",                "Brasil 87",                               0,                layout_goldnpkr )
-GAMEL( 1989, brasil89, 0,        witchcrd, bsuerte,  0,        ROT0,   "<unknown>",                "Brasil 89 (set 1)",                       0,                layout_goldnpkr )
-GAMEL( 1989, brasil89a,brasil89, witchcrd, bsuerte,  0,        ROT0,   "<unknown>",                "Brasil 89 (set 2)",                       0,                layout_goldnpkr )
-GAME(  1993, brasil93, 0,        witchcrd, bsuerte,  0,        ROT0,   "<unknown>",                "Brasil 93",                               0 )				// no lamps
-GAME(  1991, poker91,  0,        witchcrd, poker91,  0,        ROT0,   "<unknown>",                "Poker 91",                                0 )
-GAME(  198?, genie,    0,        genie,    genie,    0,        ROT0,   "Video Fun Games Ltd.",     "Genie",                                   0 )
-GAMEL( 1983, silverga, 0,        goldnpkr, goldnpkr, 0,        ROT0,   "<unknown>",                "Silver Game",                             0,                layout_goldnpkr )
-GAME(  1987, caspoker, 0,        goldnpkr, caspoker, 0,        ROT0,   "PM / Beck Elektronik",     "Casino Poker (Ver PM86LO-35-5, German)",  GAME_IMPERFECT_COLORS )
+/*     YEAR  NAME       PARENT    MACHINE   INPUT     INIT      ROT      COMPANY                     FULLNAME                                  FLAGS             LAYOUT  */
+GAMEL( 1981, pmpoker,   0,        goldnpkr, pmpoker,  0,        ROT0,   "PM / Beck Elektronik",     "PlayMan Poker (German)",                  0,                layout_pmpoker  )
+GAMEL( 198?, royale,    0,        goldnpkr, royale,   royale,   ROT0,   "<unknown>",                "Royale (set 1)",                          GAME_NOT_WORKING, layout_goldnpkr )
+GAMEL( 198?, royalea,   royale,   goldnpkr, royale,   royale,   ROT0,   "<unknown>",                "Royale (set 2)",                          GAME_NOT_WORKING, layout_goldnpkr )
+GAME(  1993, sloco93,   0,        witchcrd, sloco93,  0,        ROT0,   "<unknown>",                "Super Loco 93 (Spanish, set 1)",          0 )
+GAME(  1993, sloco93a,  sloco93,  witchcrd, sloco93,  0,        ROT0,   "<unknown>",                "Super Loco 93 (Spanish, set 2)",          0 )
+GAME(  198?, maverik,   0,        witchcrd, bsuerte,  0,        ROT0,   "<unknown>",                "Maverik",                                 0 )
+GAMEL( 1986, brasil86,  0,        witchcrd, bsuerte,  0,        ROT0,   "<unknown>",                "Brasil 86",                               0,                layout_goldnpkr )
+GAMEL( 1987, brasil87,  0,        witchcrd, bsuerte,  0,        ROT0,   "<unknown>",                "Brasil 87",                               0,                layout_goldnpkr )
+GAMEL( 1989, brasil89,  0,        witchcrd, bsuerte,  0,        ROT0,   "<unknown>",                "Brasil 89 (set 1)",                       0,                layout_goldnpkr )
+GAMEL( 1989, brasil89a, brasil89, witchcrd, bsuerte,  0,        ROT0,   "<unknown>",                "Brasil 89 (set 2)",                       0,                layout_goldnpkr )
+GAME(  1993, brasil93,  0,        witchcrd, bsuerte,  0,        ROT0,   "<unknown>",                "Brasil 93",                               0 )				// no lamps
+GAME(  1991, poker91,   0,        witchcrd, poker91,  0,        ROT0,   "<unknown>",                "Poker 91",                                0 )
+GAME(  198?, genie,     0,        genie,    genie,    0,        ROT0,   "Video Fun Games Ltd.",     "Genie",                                   0 )
+GAMEL( 1983, silverga,  0,        goldnpkr, goldnpkr, 0,        ROT0,   "<unknown>",                "Silver Game",                             0,                layout_goldnpkr )
+GAME(  1987, caspoker,  0,        goldnpkr, caspoker, 0,        ROT0,   "PM / Beck Elektronik",     "Casino Poker (Ver PM86LO-35-5, German)",  GAME_IMPERFECT_COLORS )
 
-GAME(  198?, pokerdub, 0,        pottnpkr, goldnpkr, 0,        ROT0,   "<unknown>",                "unknown French poker game",               GAME_NOT_WORKING )	// lacks of 2nd program ROM.
-GAME(  198?, pokerduc, 0,        goldnpkr, goldnpkr, icp1db,   ROT0,   "<unknown>",                "unknown encrypted poker game",            GAME_NOT_WORKING )	// encrypted.
+GAME(  198?, pokerdub,  0,        pottnpkr, goldnpkr, 0,        ROT0,   "<unknown>",                "unknown French poker game",               GAME_NOT_WORKING )	// lacks of 2nd program ROM.
+GAME(  198?, pokerduc,  0,        goldnpkr, goldnpkr, icp1db,   ROT0,   "<unknown>",                "unknown encrypted poker game",            GAME_NOT_WORKING )	// encrypted.
 
 
 
diff -Nru src-old/mame/drivers/gp_2.c src/mame/drivers/gp_2.c
--- src-old/mame/drivers/gp_2.c	2011-12-23 19:29:55.000000000 +0100
+++ src/mame/drivers/gp_2.c	2012-03-15 07:40:01.000000000 +0100
@@ -250,8 +250,8 @@
 
 
 GAME(1984,	agent777,	0,			gp_2,	gp_2,	gp_2,	ROT0,	"Game Plan",	"Agents 777",				GAME_IS_SKELETON_MECHANICAL)
-GAME(1985,	andromep,	0,			gp_2,	gp_2,	gp_2,	ROT0,	"Game Plan",	"Andromeda",				GAME_IS_SKELETON_MECHANICAL)
-GAME(1985,	andromepa,	andromep,	gp_2,	gp_2,	gp_2,	ROT0,	"Game Plan",	"Andromeda (alternate set)",GAME_IS_SKELETON_MECHANICAL)
+GAME(1985,	andromep,	0,			gp_2,	gp_2,	gp_2,	ROT0,	"Game Plan",	"Andromeda (set 1)",		GAME_IS_SKELETON_MECHANICAL)
+GAME(1985,	andromepa,	andromep,	gp_2,	gp_2,	gp_2,	ROT0,	"Game Plan",	"Andromeda (set 2)",        GAME_IS_SKELETON_MECHANICAL)
 GAME(1984,	attila,		0,			gp_2,	gp_2,	gp_2,	ROT0,	"Game Plan",	"Attila The Hun",			GAME_IS_SKELETON_MECHANICAL)
 GAME(1985,	cpthook,	0,			gp_2,	gp_2,	gp_2,	ROT0,	"Game Plan",	"Captain Hook",				GAME_IS_SKELETON_MECHANICAL)
 GAME(1985,	cyclopes,	0,			gp_2,	gp_2,	gp_2,	ROT0,	"Game Plan",	"Cyclopes",					GAME_IS_SKELETON_MECHANICAL)
diff -Nru src-old/mame/drivers/gts80a.c src/mame/drivers/gts80a.c
--- src-old/mame/drivers/gts80a.c	2012-01-18 22:41:47.000000000 +0100
+++ src/mame/drivers/gts80a.c	2012-03-15 07:40:01.000000000 +0100
@@ -672,5 +672,5 @@
 /* disp3 */GAME(1984,	touchdn,	0,		gts80a_s,	gts80a,	gts80a,	ROT0,	"Gottlieb",		"Touchdown",			GAME_IS_SKELETON_MECHANICAL)
 
 /* custom (+video) */
-GAME(1981,	caveman,	0,			caveman,	caveman,	gts80a,	ROT0,	"Gottlieb",		"Caveman (Pinball/Video Combo)",		GAME_IS_SKELETON_MECHANICAL)
+GAME(1981,	caveman,	0,			caveman,	caveman,	gts80a,	ROT0,	"Gottlieb",		"Caveman (Pinball/Video Combo, set 1)",	GAME_IS_SKELETON_MECHANICAL)
 GAME(1981,	cavemana,	caveman,	caveman,	caveman,	gts80a,	ROT0,	"Gottlieb",		"Caveman (Pinball/Video Combo, set 2)",	GAME_IS_SKELETON_MECHANICAL)
diff -Nru src-old/mame/drivers/hotstuff.c src/mame/drivers/hotstuff.c
--- src-old/mame/drivers/hotstuff.c	2012-01-12 23:19:49.000000000 +0100
+++ src/mame/drivers/hotstuff.c	2012-03-20 02:04:58.000000000 +0100
@@ -11,6 +11,10 @@
 		: driver_device(mconfig, type, tag) { }
 
 	UINT16* m_bitmapram;
+	struct
+	{
+		UINT8 index;
+	}m_ioboard;
 };
 
 
@@ -62,11 +66,52 @@
 	return 0;
 }
 
+/* TODO: identify this ... */
+static READ8_HANDLER( ioboard_status_r )
+{
+	hotstuff_state *state = space->machine().driver_data<hotstuff_state>();
+	UINT8 res;
+
+	printf("STATUS R\n");
+
+	switch(state->m_ioboard.index)
+	{
+		case 0x0c: res = 0x80|0x10; break;
+		default: res = 0; break;//space->machine().rand(); break;
+	}
+
+	return res;
+}
+
+static READ8_HANDLER( ioboard_unk_r )
+{
+	printf("UNK R\n");
+
+	return 0xff;
+}
+
+static WRITE8_HANDLER( ioboard_data_w )
+{
+	printf("DATA %02x\n",data);
+}
+
+static WRITE8_HANDLER( ioboard_reg_w )
+{
+	hotstuff_state *state = space->machine().driver_data<hotstuff_state>();
+
+	state->m_ioboard.index = data;
+	printf("REG %02x\n",data);
+}
+
 static ADDRESS_MAP_START( hotstuff_map, AS_PROGRAM, 16 )
 	AM_RANGE(0x000000, 0x07ffff) AM_ROM
+	AM_RANGE(0x080000, 0x0fffff) AM_NOP //ROM AM_REGION("data", 0)
 
 	AM_RANGE(0x400000, 0x40ffff) AM_RAM
 
+	AM_RANGE(0x680000, 0x680001) AM_READWRITE8(ioboard_status_r,ioboard_data_w,0xff00)
+	AM_RANGE(0x680000, 0x680001) AM_READWRITE8(ioboard_unk_r,ioboard_reg_w,0x00ff)
+
 	AM_RANGE(0x980000, 0x9bffff) AM_RAM AM_BASE_MEMBER(hotstuff_state, m_bitmapram)
 ADDRESS_MAP_END
 
diff -Nru src-old/mame/drivers/igs_m027.c src/mame/drivers/igs_m027.c
--- src-old/mame/drivers/igs_m027.c	2012-02-11 12:01:01.000000000 +0100
+++ src/mame/drivers/igs_m027.c	2012-03-25 15:56:49.000000000 +0200
@@ -1,4 +1,4 @@
-/* IGS ARM7 (IGS027A) based Mahjong / Gambling platform
+/* IGS ARM7 (IGS027A) based Mahjong / Gambling platform(s)
  Driver by Xing Xing
 
  These games use the IGS027A processor.
@@ -242,48 +242,6 @@
 	0x12,0x56,0x97,0x26,0x1D,0x5F,0xA7,0xF8,0x89,0x3F,0x14,0x36,0x72,0x3B,0x48,0x7B,
 	0xF1,0xED,0x72,0xB7,0x7A,0x56,0x05,0xDE,0x7B,0x27,0x6D,0xCF,0x33,0x4C,0x14,0x86,
 };
-static void sdwx_decrypt(running_machine &machine)
-{
-
-	int i;
-	UINT16 *src = (UINT16 *) machine.region("user1")->base();
-
-	int rom_size = 0x80000;
-
-	for(i=0; i<rom_size/2; i++) {
-		UINT16 x = src[i];
-
-    if((i & 0x00480) != 0x00080)
-      x ^= 0x0001;
-
-
-    if((i & 0x004008) == 0x004008)
-      x ^= 0x0002;
-
-
- //   if((i & 0x000030) == 0x000010)
- //     x ^= 0x0004;
-
-    if((i & 0x000242) != 0x000042)
-      x ^= 0x0008;
-
-    if((i & 0x08100) == 0x08000)
-      x ^= 0x0010;
-
-    if((i & 0x022004) != 0x000004)
-      x ^= 0x0020;
-
-    if((i & 0x11800) != 0x10000)
-      x ^= 0x0040;
-
-    if((i & 0x004820) == 0x004820)
-      x ^= 0x0080;
-
-    x ^= sdwx_tab[(i >> 1) & 0xff] << 8;
-
-		src[i] = x;
-	}
-}
 
 
 
@@ -416,14 +374,6 @@
 
 
 
-static DRIVER_INIT( sdwx )
-{
-	sdwx_decrypt(machine);
-	sdwx_gfx_decrypt(machine);
-	logerror("init OK!\n");
-}
-
-
 
 /***************************************************************************
 
@@ -690,7 +640,7 @@
 	ROM_REGION( 0x400000, "gfx2", 0 )
 	ROM_LOAD( "gfii_cg.u17", 0x000000, 0x200000, CRC(2568359c) SHA1(f1f240246e53496bf624c84f7cae3edb9675579f) )
 
-	ROM_REGION( 0x200000, "unknown", 0 )
+	ROM_REGION( 0x200000, "oki", 0 )
 	ROM_LOAD( "gfii_sp.u13", 0x00000, 0x080000, CRC(61da1d58) SHA1(0a79578f0daf15f0efe2b0eeac59a60d8372a644) )
 ROM_END
 
@@ -760,7 +710,7 @@
 ROM_START( chessc2 )
 	ROM_REGION( 0x04000, "maincpu", 0 )
 	/* Internal rom of IGS027A ARM based MCU */
-	ROM_LOAD( "gonefsh2_igs027a", 0x00000, 0x4000, NO_DUMP )
+	ROM_LOAD( "chessc2_igs027a", 0x00000, 0x4000, NO_DUMP )
 
 	ROM_REGION( 0x80000, "user1", 0 ) // external ARM data / prg
 	ROM_LOAD( "ccii_v-707uso.u12", 0x000000, 0x80000, CRC(5937b67b) SHA1(967b3adf6f5bf92d63ec460d595e473898a78372) )
@@ -771,24 +721,270 @@
 	ROM_REGION( 0x400000, "gfx2", 0 )
 	ROM_LOAD( "ccii_cg.u17", 0x000000, 0x200000, CRC(47e45157) SHA1(4459799a4a6c30a2d0a3ad9ac54e92b62221e10b) )
 
-	ROM_REGION( 0x200000, "unknown", 0 )
+	ROM_REGION( 0x200000, "oki", 0 )
 	ROM_LOAD( "ccii_sp.u13", 0x00000, 0x080000,  CRC(220a7b71) SHA1(7dab7baa97c20b83763cf46ef0a6e5e8c4d6a348) )
 ROM_END
 
 
 
+
+
+ROM_START( haunthig )
+	ROM_REGION( 0x04000, "maincpu", 0 )
+	/* Internal rom of IGS027A ARM based MCU */
+	ROM_LOAD( "haunthig_igs027a", 0x00000, 0x4000, NO_DUMP )
+
+	ROM_REGION( 0x80000, "user1", 0 ) // external ARM data / prg
+	ROM_LOAD( "hauntedhouse_ver-101us.u34", 0x000000, 0x80000, CRC(4bf045d4) SHA1(78c848fd69961df8d9b75f92ad57c3534fbf08db) )
+
+	ROM_REGION( 0x80000, "gfx1", 0 )
+	ROM_LOAD( "haunted-h_text.u15", 0x000000, 0x80000, CRC(c23f48c8) SHA1(0cb1b6c61611a081ae4a3c0be51812045ff632fe) )
+
+	// are these PGM-like sprites?
+	ROM_REGION( 0x400000, "gfx2", 0 )
+	ROM_LOAD( "haunted-h_cg.u32", 0x000000, 0x400000, CRC(e0ea10e6) SHA1(e81be78fea93e72d4b1f4c0b58560bda46cf7948) )
+	ROM_REGION( 0x400000, "gfx3", 0 )
+	ROM_LOAD( "haunted-h_ext.u12", 0x000000, 0x400000, CRC(662eb883) SHA1(831ebe29e1e7a8b2c2fff7fbc608975771c3486c) )
+
+
+	ROM_REGION( 0x200000, "oki", 0 )
+	ROM_LOAD( "haunted-h_sp.u3", 0x00000, 0x200000,  CRC(fe3fcddf) SHA1(ac57ab6d4e4883747c093bd19d0025cf6588cb2c) )
+ROM_END
+
+static void pgm_create_dummy_internal_arm_region(running_machine &machine)
+{
+	UINT16 *temp16 = (UINT16 *)machine.region("maincpu")->base();
+
+	// fill with RX 14
+	int i;
+	for (i=0;i<0x4000/2;i+=2)
+	{
+		temp16[i] = 0xff1e;
+		temp16[i+1] = 0xe12f;
+
+	}
+
+	// jump straight to external area
+	temp16[(0x0000)/2] = 0xd088;
+	temp16[(0x0002)/2] = 0xe59f;
+	temp16[(0x0004)/2] = 0x0680;
+	temp16[(0x0006)/2] = 0xe3a0;
+	temp16[(0x0008)/2] = 0xff10;
+	temp16[(0x000a)/2] = 0xe12f;
+	temp16[(0x0090)/2] = 0x0400;
+	temp16[(0x0092)/2] = 0x1000;
+}
+
+
+static void sdwx_decrypt(running_machine &machine)
+{
+
+	int i;
+	UINT16 *src = (UINT16 *) machine.region("user1")->base();
+
+	int rom_size = 0x80000;
+
+	for(i=0; i<rom_size/2; i++)
+	{
+		UINT16 x = src[i];
+
+		if((i & 0x000480) != 0x000080)  x ^= 0x0001;
+		if((i & 0x004008) == 0x004008)  x ^= 0x0002;
+		if((i & 0x000030) == 0x000010)  x ^= 0x0004;
+		if((i & 0x000242) != 0x000042)  x ^= 0x0008;
+		if((i & 0x008100) == 0x008000)  x ^= 0x0010;
+		if((i & 0x022004) != 0x000004)  x ^= 0x0020;
+		if((i & 0x011800) != 0x010000)  x ^= 0x0040;
+		if((i & 0x004820) == 0x004820)  x ^= 0x0080;
+
+		x ^= sdwx_tab[(i >> 1) & 0xff] << 8;
+
+		src[i] = x;
+	}
+}
+
+
+static const UINT8 hauntedh_tab[0x100] = {
+	0x49, 0x47, 0x53, 0x30, 0x32, 0x35, 0x34, 0x52, 0x44, 0x34, 0x30, 0x36, 0x30, 0x35, 0x32, 0x36,
+	0x6C, 0x65, 0x33, 0xFD, 0x7A, 0x71, 0x3D, 0xB8, 0x07, 0xF1, 0x86, 0x96, 0x19, 0x5A, 0xA2, 0x05,
+	0x49, 0xB1, 0xED, 0x2E, 0x7C, 0x7A, 0x65, 0x8B, 0xE1, 0xE3, 0xC8, 0xAA, 0x2B, 0x32, 0xEE, 0x3F,
+	0x10, 0x6C, 0x69, 0x70, 0x02, 0x47, 0x5B, 0x5D, 0x2D, 0x52, 0x97, 0xEF, 0xB1, 0x63, 0xFB, 0xE3,
+	0x21, 0x41, 0x0C, 0x17, 0x3C, 0x93, 0xD4, 0x13, 0xEB, 0x08, 0xF9, 0xDB, 0x7A, 0xC8, 0x1E, 0xF4,
+	0x1B, 0x1B, 0x7F, 0xB4, 0x98, 0x59, 0xC8, 0xCF, 0x58, 0x12, 0x36, 0x1F, 0x96, 0x7D, 0xF0, 0xB3,
+	0xDC, 0x26, 0xA8, 0x1C, 0xC6, 0xD4, 0x6E, 0xF3, 0xF5, 0xB9, 0xD4, 0xAF, 0x52, 0xDD, 0x48, 0xA5,
+	0x85, 0xCC, 0xAD, 0x60, 0xB4, 0x7F, 0x3C, 0x24, 0x80, 0x88, 0x9B, 0xBD, 0x3E, 0x82, 0x3B, 0x8D,
+	0x73, 0xB8, 0xF7, 0xD5, 0x92, 0x15, 0xeb, 0x43, 0xF9, 0x4C, 0x91, 0xBD, 0x29, 0x48, 0x22, 0x6D,
+	0x45, 0xD6, 0x2C, 0x0D, 0xCE, 0x91, 0x70, 0x74, 0x9D, 0x0E, 0xFE, 0x62, 0x22, 0x49, 0x94, 0x88,
+	0xDB, 0x50, 0x33, 0xDB, 0x18, 0x2E, 0x03, 0x1B, 0xED, 0x1A, 0x69, 0x9E, 0x78, 0xE1, 0x66, 0x62,
+	0x54, 0x91, 0x33, 0x52, 0x5E, 0x67, 0x1B, 0xD9, 0xA7, 0xFB, 0x98, 0xA5, 0xBA, 0xAA, 0xB1, 0xBD,
+	0x0F, 0x44, 0x93, 0xC6, 0xCF, 0xF7, 0x6F, 0x91, 0xCA, 0x7B, 0x93, 0xEA, 0xB6, 0x7F, 0xCC, 0x9C,
+	0xAB, 0x54, 0xFB, 0xC8, 0xDB, 0xD9, 0xF5, 0x68, 0x96, 0xA7, 0xA1, 0x1F, 0x7D, 0x7D, 0x4C, 0x43,
+	0x06, 0xED, 0x50, 0x2D, 0x30, 0x48, 0xE6, 0xC0, 0x88, 0xC8, 0x48, 0x38, 0x5D, 0xFC, 0x0a, 0x35,
+	0x3F, 0x79, 0xBA, 0x07, 0xBE, 0xBF, 0xB7, 0x3B, 0x61, 0x69, 0x4F, 0x67, 0xE5, 0x9A, 0x1D, 0x33
+};
+
+static void hauntedh_decrypt(running_machine &machine)
+{
+	int i;
+	UINT16 *src = (UINT16 *) machine.region("user1")->base();
+
+	int rom_size = 0x080000;
+
+	for(i=0; i<rom_size/2; i++) {
+    		UINT16 x = src[i];
+
+		if ((i & 0x040480) != 0x000080) x ^= 0x0001;
+	//  if ((i & 0x104008) == 0x104008) x ^= 0x0002;
+	//  if ((i & 0x080030) == 0x080010) x ^= 0x0004;
+		if ((i & 0x000042) != 0x000042) x ^= 0x0008;
+	//  if ((i & 0x048100) == 0x048000) x ^= 0x0010;
+		if ((i & 0x002004) != 0x000004) x ^= 0x0020;
+		if ((i & 0x001800) != 0x000000) x ^= 0x0040;
+		if ((i & 0x004820) == 0x004820) x ^= 0x0080;
+
+		x ^= hauntedh_tab[(i>> 1) & 0xff] << 8;
+
+		src[i] = x;
+	}
+}
+
+
+static const UINT8 chessc2_tab[0x100] = {
+	0x49, 0x47, 0x53, 0x30, 0x30, 0x38, 0x32, 0x52, 0x44, 0x34, 0x30, 0x32, 0x31, 0x32, 0x31, 0x31,
+	0x28, 0xCA, 0x9C, 0xAD, 0xBB, 0x2D, 0xF0, 0x41, 0x6E, 0xCE, 0xAD, 0x73, 0xAE, 0x1C, 0xD1, 0x14,
+	0x6F, 0x9A, 0x75, 0x18, 0xA8, 0x91, 0x68, 0xe4, 0x09, 0xF4, 0x0F, 0xD7, 0xFF, 0x93, 0x7D, 0x1B,
+	0xEB, 0x84, 0xce, 0xAD, 0x9E, 0xCF, 0xC9, 0xAB, 0x18, 0x59, 0xb6, 0xde, 0x82, 0x13, 0x7C, 0x88,
+	0x69, 0x63, 0xFF, 0x6F, 0x3C, 0xD2, 0xB9, 0x29, 0x09, 0xF8, 0x97, 0xAA, 0x74, 0xA5, 0x16, 0x0D,
+	0xF9, 0x51, 0x9E, 0x9f, 0x63, 0xC6, 0x1E, 0x32, 0x8C, 0x0C, 0xE9, 0xA0, 0x56, 0x95, 0xD1, 0x9D,
+	0xEA, 0xA9, 0x82, 0xC3, 0x30, 0x15, 0x21, 0xD8, 0x8F, 0x10, 0x25, 0x61, 0xE6, 0x6D, 0x75, 0x6D,
+	0xCB, 0x08, 0xC3, 0x9B, 0x03, 0x6A, 0x28, 0x6D, 0x42, 0xBF, 0x00, 0xd2, 0x24, 0xFA, 0x08, 0xEE,
+	0x6B, 0x46, 0xB7, 0x2C, 0x7B, 0xB0, 0xDA, 0x86, 0x13, 0x14, 0x73, 0x14, 0x4D, 0x45, 0xD3, 0xD4,
+	0xD9, 0x80, 0xF5, 0xB8, 0x76, 0x13, 0x1E, 0xF6, 0xB1, 0x4A, 0xB3, 0x8B, 0xE2, 0x9A, 0x5A, 0x11,
+	0x64, 0x11, 0x55, 0xC3, 0x14, 0xFD, 0x1B, 0xCe, 0x0C, 0xDC, 0x38, 0xDA, 0xA1, 0x84, 0x66, 0xD9,
+	0x9b, 0x93, 0xED, 0x0F, 0xB4, 0x19, 0x38, 0x62, 0x53, 0x85, 0xB9, 0xE5, 0x89, 0xCd, 0xFE, 0x9E,
+	0x4D, 0xE2, 0x14, 0x9F, 0xF4, 0x53, 0x1C, 0x46, 0xf4, 0x40, 0x2C, 0xCC, 0xDa, 0x82, 0x69, 0x15,
+	0x88, 0x18, 0x62, 0xB7, 0xB4, 0xD5, 0xAF, 0x4B, 0x9E, 0x48, 0xCA, 0xF4, 0x11, 0xEC, 0x2D, 0x2C,
+	0x9D, 0x91, 0xAD, 0xDA, 0x13, 0x0A, 0x16, 0x86, 0x41, 0x18, 0x08, 0x01, 0xef, 0x97, 0x11, 0x1f,
+	0x1A, 0xE7, 0x0C, 0xC9, 0x6D, 0x9D, 0xB9, 0x49, 0x0B, 0x6B, 0x9E, 0xD4, 0x72, 0x4D, 0x1D, 0x59
+};
+
+static void chessc2_decrypt(running_machine &machine)
+{
+	int i;
+	UINT16 *src = (UINT16 *) machine.region("user1")->base();
+
+	int rom_size = 0x80000;
+
+	for(i=0; i<rom_size/2; i++) {
+		UINT16 x = src[i];
+
+		if ((i & 0x040480) != 0x000080) x ^= 0x0001;
+		if ((i & 0x004008) == 0x004008) x ^= 0x0002;
+	//  if ((i & 0x080030) == 0x080010) x ^= 0x0004;
+		if ((i & 0x000242) != 0x000042) x ^= 0x0008;
+		if ((i & 0x008100) == 0x008000) x ^= 0x0010;
+		if ((i & 0x002004) != 0x000004) x ^= 0x0020; // correct??
+		if ((i & 0x011800) != 0x010000) x ^= 0x0040;
+		if ((i & 0x004820) == 0x004820) x ^= 0x0080;
+
+		x ^= chessc2_tab[(i>> 1) & 0xff] << 8;
+
+		src[i] = x;
+	}
+}
+
+
+static const UINT8 klxyj_tab[0x100] = {
+	0x49, 0x47, 0x53, 0x30, 0x30, 0x30, 0x38, 0x52, 0x44, 0x34, 0x30, 0x31, 0x30, 0x39, 0x32, 0x34,
+	0x3F, 0x0F, 0x66, 0x9A, 0xBF, 0x0D, 0x06, 0x55, 0x09, 0x01, 0xEB, 0x72, 0xEB, 0x9B, 0x89, 0xFA,
+	0x24, 0xD1, 0x5D, 0xCA, 0xE6, 0x8A, 0x8C, 0xE0, 0x92, 0x8D, 0xBF, 0xE4, 0xAF, 0xAA, 0x3E, 0xFA,
+	0x2B, 0x27, 0x4B, 0xC7, 0xD6, 0x6D, 0xC1, 0xC2, 0x1C, 0xF4, 0xED, 0xBD, 0x03, 0x6C, 0xAD, 0xB3,
+	0x65, 0x2D, 0xC7, 0xD3, 0x6E, 0xE0, 0x8C, 0xCE, 0x59, 0x6F, 0xAE, 0x5E, 0x66, 0x2B, 0x5E, 0x17,
+	0x20, 0x3D, 0xA9, 0x72, 0xCD, 0x4F, 0x14, 0x17, 0x35, 0x7B, 0x77, 0x6B, 0x98, 0x73, 0x17, 0x5A,
+	0xEA, 0xF2, 0x07, 0x66, 0x51, 0x64, 0xC1, 0xF0, 0xE2, 0xD1, 0x00, 0xC6, 0x97, 0x0F, 0xE0, 0xEE,
+	0x94, 0x28, 0x39, 0xB2, 0x9B, 0x0A, 0x38, 0xED, 0xCC, 0x6E, 0x40, 0x94, 0xA2, 0x0A, 0x00, 0x88,
+	0x2B, 0xFA, 0xD5, 0x9A, 0x87, 0x6C, 0x62, 0xDF, 0xA4, 0x8B, 0x6D, 0x37, 0x38, 0xAE, 0xFD, 0x18,
+	0xFF, 0xC2, 0xB2, 0xA0, 0x37, 0xF5, 0x64, 0xDB, 0x59, 0xA5, 0x00, 0x51, 0x19, 0x88, 0x9F, 0xD4,
+	0xA0, 0x1C, 0xE7, 0x88, 0x08, 0x51, 0xA7, 0x33, 0x19, 0x75, 0xAE, 0xC7, 0x42, 0x61, 0xEC, 0x2D,
+	0xDB, 0xE2, 0xCC, 0x54, 0x9A, 0x6A, 0xD1, 0x7A, 0x53, 0xF8, 0x6F, 0xBA, 0xF4, 0x45, 0x2C, 0xD7,
+	0xC0, 0x30, 0xF7, 0x47, 0xCC, 0x6B, 0xC8, 0x83, 0xB7, 0x67, 0x7A, 0x8E, 0xAD, 0x7E, 0xE5, 0xC4,
+	0x9F, 0x60, 0x40, 0xE5, 0xBC, 0xC0, 0xB5, 0x61, 0x33, 0x3F, 0x46, 0xE6, 0x2D, 0x98, 0xDF, 0x28,
+	0x05, 0x0E, 0xBC, 0xF0, 0xCA, 0x13, 0xFE, 0x68, 0xF7, 0x3A, 0x89, 0xA5, 0x71, 0x5F, 0x21, 0x76,
+	0xC2, 0x14, 0xC5, 0x6C, 0x95, 0x4f, 0x4f, 0x2A, 0x71, 0x52, 0x3C, 0xEE, 0xAA, 0xDB, 0xf1, 0x00
+};
+
+static void klxyj_decrypt(running_machine &machine)
+{
+	int i;
+	UINT16 *src = (UINT16 *) machine.region("user1")->base();
+
+	int rom_size = 0x80000;
+
+	for(i=0; i<rom_size/2; i++) {
+		UINT16 x = src[i];
+
+		if ((i & 0x040480) != 0x000080) x ^= 0x0001;
+		if ((i & 0x004008) == 0x004008) x ^= 0x0002;
+	//  if ((i & 0x080030) == 0x080010) x ^= 0x0004;
+		if ((i & 0x000242) != 0x000042) x ^= 0x0008;
+		if ((i & 0x008100) == 0x008000) x ^= 0x0010;
+		if ((i & 0x002004) != 0x000004) x ^= 0x0020;
+		if ((i & 0x011800) != 0x010000) x ^= 0x0040;
+		if ((i & 0x004820) == 0x004820) x ^= 0x0080;
+
+		x ^= klxyj_tab[(i>> 1) & 0xff] << 8;
+
+		src[i] = x;
+	}
+}
+
+static DRIVER_INIT( igs_m027 )
+{
+	pgm_create_dummy_internal_arm_region(machine);
+}
+
+static DRIVER_INIT( sdwx )
+{
+	sdwx_decrypt(machine);
+	sdwx_gfx_decrypt(machine);
+	pgm_create_dummy_internal_arm_region(machine);
+}
+
+static DRIVER_INIT( klxyj )
+{
+	klxyj_decrypt(machine);
+	//sdwx_gfx_decrypt(machine);
+	pgm_create_dummy_internal_arm_region(machine);
+}
+
+static DRIVER_INIT( chessc2 )
+{
+	chessc2_decrypt(machine);
+	//sdwx_gfx_decrypt(machine);
+	pgm_create_dummy_internal_arm_region(machine);
+}
+
+static DRIVER_INIT( hauntedh )
+{
+	hauntedh_decrypt(machine);
+	//sdwx_gfx_decrypt(machine);
+	pgm_create_dummy_internal_arm_region(machine);
+}
+
+
 /***************************************************************************
 
     Game Drivers
 
 ***************************************************************************/
 
-GAME( 2002,  sdwx,		0, igs_majhong, sdwx, sdwx, ROT0, "IGS", "Sheng Dan Wu Xian", GAME_NO_SOUND | GAME_NOT_WORKING ) // aka Christmas 5 Line?
-GAME( 200?,  sddz,		0, igs_majhong, sdwx, 0,    ROT0, "IGS", "Super Dou Di Zhu",  GAME_NO_SOUND | GAME_NOT_WORKING )
-GAME( 2000,  bigd2,		0, igs_majhong, sdwx, 0,    ROT0, "IGS", "Big D2",  GAME_NO_SOUND | GAME_NOT_WORKING )
-GAME( 200?,  lhzb3,		0, igs_majhong, sdwx, 0,    ROT0, "IGS", "Long Hu Zheng Ba 3", GAME_NO_SOUND | GAME_NOT_WORKING )
-GAME( 200?,  lhzb4,		0, igs_majhong, sdwx, 0,    ROT0, "IGS", "Long Hu Zheng Ba 4", GAME_NO_SOUND | GAME_NOT_WORKING )
-GAME( 200?,  klxyj,		0, igs_majhong, sdwx, 0,    ROT0, "IGS", "Kuai Le Xi You Ji",  GAME_NO_SOUND | GAME_NOT_WORKING )
-GAME( 2000,  mgfx,		0, igs_majhong, sdwx, 0,    ROT0, "IGS", "Man Guan Fu Xing",   GAME_NO_SOUND | GAME_NOT_WORKING )
-GAME( 200?,  gonefsh2,	0, igs_majhong, sdwx, 0,    ROT0, "IGS", "Gone Fishing 2",   GAME_NO_SOUND | GAME_NOT_WORKING )
-GAME( 200?,  chessc2,	0, igs_majhong, sdwx, 0,    ROT0, "IGS", "Chess Challenge 2",   GAME_NO_SOUND | GAME_NOT_WORKING )
+GAME( 2002,  sdwx,		0, igs_majhong, sdwx, sdwx,        ROT0, "IGS", "Sheng Dan Wu Xian", GAME_NO_SOUND | GAME_NOT_WORKING ) // aka Christmas 5 Line?
+GAME( 200?,  sddz,		0, igs_majhong, sdwx, igs_m027,    ROT0, "IGS", "Super Dou Di Zhu",  GAME_NO_SOUND | GAME_NOT_WORKING )
+GAME( 2000,  bigd2,		0, igs_majhong, sdwx, igs_m027,    ROT0, "IGS", "Big D2",  GAME_NO_SOUND | GAME_NOT_WORKING )
+GAME( 200?,  lhzb3,		0, igs_majhong, sdwx, igs_m027,    ROT0, "IGS", "Long Hu Zheng Ba 3", GAME_NO_SOUND | GAME_NOT_WORKING )
+GAME( 200?,  lhzb4,		0, igs_majhong, sdwx, igs_m027,    ROT0, "IGS", "Long Hu Zheng Ba 4", GAME_NO_SOUND | GAME_NOT_WORKING )
+GAME( 200?,  klxyj,		0, igs_majhong, sdwx, klxyj,       ROT0, "IGS", "Kuai Le Xi You Ji",  GAME_NO_SOUND | GAME_NOT_WORKING )
+GAME( 2000,  mgfx,		0, igs_majhong, sdwx, igs_m027,    ROT0, "IGS", "Man Guan Fu Xing",   GAME_NO_SOUND | GAME_NOT_WORKING )
+GAME( 200?,  gonefsh2,	0, igs_majhong, sdwx, igs_m027,    ROT0, "IGS", "Gone Fishing 2",   GAME_NO_SOUND | GAME_NOT_WORKING )
+GAME( 200?,  chessc2,	0, igs_majhong, sdwx, chessc2,     ROT0, "IGS", "Chess Challenge 2",   GAME_NO_SOUND | GAME_NOT_WORKING )
+GAME( 200?,  haunthig,	0, igs_majhong, sdwx, hauntedh,    ROT0, "IGS", "Haunted House (IGS)",   GAME_NO_SOUND | GAME_NOT_WORKING )
diff -Nru src-old/mame/drivers/itech8.c src/mame/drivers/itech8.c
--- src-old/mame/drivers/itech8.c	2012-01-12 23:19:49.000000000 +0100
+++ src/mame/drivers/itech8.c	2012-03-15 07:40:01.000000000 +0100
@@ -2706,8 +2706,8 @@
  *************************************/
 
 /* Wheel of Fortune-style PCB */
-GAME( 1989, wfortune, 0,        wfortune,          wfortune, 0,        ROT0,   "GameTek", "Wheel Of Fortune", 0 )
-GAME( 1989, wfortunea,wfortune, wfortune,          wfortune, 0,        ROT0,   "GameTek", "Wheel Of Fortune (alternate)", 0 )
+GAME( 1989, wfortune, 0,        wfortune,          wfortune, 0,        ROT0,   "GameTek", "Wheel Of Fortune (set 1)", 0 )
+GAME( 1989, wfortunea,wfortune, wfortune,          wfortune, 0,        ROT0,   "GameTek", "Wheel Of Fortune (set 2)", 0 )
 
 /* Grudge Match-style PCB */
 GAME( 1989, grmatch,  0,        grmatch,           grmatch,  grmatch,  ROT0,   "Yankee Game Technology", "Grudge Match (Yankee Game Technology)", 0 )
diff -Nru src-old/mame/drivers/jankenmn.c src/mame/drivers/jankenmn.c
--- src-old/mame/drivers/jankenmn.c	1970-01-01 01:00:00.000000000 +0100
+++ src/mame/drivers/jankenmn.c	2012-03-25 15:56:49.000000000 +0200
@@ -0,0 +1,382 @@
+/***************************************************************************
+
+  JANKENMAN UNIT
+
+  Driver by Roberto Fresca.
+  With further improvements by MAME Team.
+
+
+  Coin-operated Z80-CTC + DAC system. No screen, just artwork with lamps + LEDs.
+  Janken man is coming from Jankenpon, the rock-paper-scissors game.
+  There are several versions of this game, the most notable difference being in
+  the artwork and bonus lamps. The kid's voice and hand are the same among all.
+
+  Control panel is composed of buttons:
+  Guu (rock), Choki (scissors), Paa (paper).
+  Some cabs have a Start button and/or Payout button too.
+
+  Info:
+  http://dgm.hmc6.net/museum/jyankenman.html
+  http://dgm.hmc6.net/museum/jyankenman_kattaraageru.html
+  (and many videos on Youtube)
+
+
+  Janken Man series (working on this hardware):
+
+  * Janken Man (Pretty Carnival) (3 station prize game), (c) 1985, Sunwise.
+  * New Janken Man,                                      (c) 1986, Sunwise.
+  * Janken Man Fever,                                    (c) 1988, Sunwise.
+  * Janken Man Fever JP,                                 (c) 1991, Sunwise.
+  * Janken Man JP,                                       (c) 1991, Sunwise.
+  * Janken Man Kattara Ageru,                            (c) 1991, Sunwise.
+  * Janken Man Bubbles,                                  (c) 1992, Sunwise.
+  * Janken Man Big,                                      (c) 19??, Sunwise.
+  * Janken Man Lucky!,                                   (c) 199?, Sunwise.
+
+
+****************************************************************************
+
+  Hardware Notes...
+
+  1x LH0080A          ; Sharp, Z80A CPU.
+  1x LH0082A          ; Sharp, Z80 CTC Counter Timer Circuit.
+  2x M5L8255AP-5      ; Mitsubishi, PPI 8255 (I/O).
+  1x HM6116P-3        ; Hitachi, SRAM.
+
+  1x 27C128           ; Program, labeled 'PCG1'.
+  1x 27C020           ; Waveform (8bit mono unsigned 8192Hz), labeled 'PCG2'.
+
+  1x AD7523JN         ; InterSil, D/A Converter, 8-Bit, Multiplying, 6.7MHz.
+  1x LA8358           ; Sanyo, ???. (near volume knob)
+  1x 386D NJR         ; New Japan Radio, LM386D IC (500mW, 1-Channel Mono Audio AMP).
+  3x M54562P          ; 8-Unit 500mA source type Darlington Transistor Array with clamp diode.
+
+  1x 2.500 MHz Xtal.
+  1x 8 DIP Switches bank.
+
+
+****************************************************************************
+
+  Other specs...
+
+  Name of game:       Janken Man.
+  Manufacturer:       Sanwaizu Co., Ltd. (Bankruptcy on March 6, 1998)
+  Year:               May 1985 (1985)
+  Body dimensions:    Depth: 355mm,  Width: 340mm, Height: 855mm (body only)
+  Weight:             30kg.
+  Power:              AC 100V 50/60Hz.
+  Power consumption:  32W
+  Capacity:           400 game tokens, 200 commemorative tokens
+  Safe capacity:      6000 coins 10 yen, 500 coins 100 yen.
+  Coin acceptor:      10 and 100 yens, Manufactured by Asahi Seiko 730-A/BW.
+  Coin selector:      KWM/740 made by Asahi Seiko.
+  Hopper:             MP04975 made by MAX.
+  Solenoid:           AES-112 manufactured by Asahi Seiko.
+
+
+****************************************************************************
+
+  The waveform is 8bit mono unsigned at 8192Hz.
+  Sampleset has sounds, music and voice at approximate rom offsets:
+
+  $00c58-$038a4: "jan ken pon!"                   --> Is the call for rock paper and scissors.
+  $04d2e-$05a4b: "zuko"                           --> Is just used for sound effect when player loses.
+  $05b2d-$08207: "ai ko desho"                    --> Is the call for rematch when you've drawn.
+  $08410-$0a9ec: "ooatari"                        --> "you got it! / perfect!".
+  $0a9ec-$0c008: "yappii"                         --> Is just an exclamation of happiness.
+  $0c008-$0dac0: "attarii"                        --> "you got it".
+
+  unused PCM data:
+
+  $15db7-$18628: "kakariin o oyobi kudasai"       --> "please call the attendant".
+  $18628-$1a4f3: "keihin ga deru yo"              --> "your prize is incoming".
+  $3c26d-$3f677: "keihin o sentaku shite kudasai" --> "please select your prize".
+
+
+****************************************************************************
+
+  About lamps...
+
+  The internal layout has lamps mapped the following way:
+
+  digits:
+
+    0 = Left
+    1 = Right
+
+  lamps:
+
+    0 = Multiplier 1 "attarii" (pays x1)
+    1 = Multiplier 2 "ooatari" (pays x2)
+
+    2 = Rock button LED
+    3 = Scissors button LED
+    4 = Paper button LED
+
+    5 = Lose
+    6 = Draw
+    7 = Win
+
+    8 = Base Hand
+    9 = Paper components
+    10 = Paper/Scissors components
+    11 = Rock components
+    12 = Scissors components
+    13 = Rock/Scissors components
+
+    14 = Payout error LED
+
+  Not implemented in internal .lay:
+
+    15 = Rotating blue lamp
+
+
+***************************************************************************/
+
+#define MASTER_CLOCK		XTAL_2_5MHz
+
+#include "emu.h"
+#include "cpu/z80/z80.h"
+#include "cpu/z80/z80daisy.h"
+#include "machine/z80ctc.h"
+#include "machine/i8255.h"
+#include "sound/dac.h"
+
+#include "jankenmn.lh"
+
+
+class jankenmn_state : public driver_device
+{
+public:
+	jankenmn_state(const machine_config &mconfig, device_type type, const char *tag)
+		: driver_device(mconfig, type, tag) { }
+
+};
+
+
+/*********************************************
+*            Read/Write Handlers             *
+*********************************************/
+
+static const UINT8 led_map[16] = // 7748 IC?
+	{ 0x3f,0x06,0x5b,0x4f,0x66,0x6d,0x7c,0x07,0x7f,0x67,0x58,0x4c,0x62,0x69,0x78,0x00 };
+
+static WRITE8_DEVICE_HANDLER( jankenmn_lamps1_w )
+{
+	// hand state: d0: rock, d1: scissors, d2: paper
+	output_set_lamp_value(8, (data & 7) != 0);
+	output_set_lamp_value(11, data & 1);
+	output_set_lamp_value(12, data >> 1 & 1);
+	output_set_lamp_value(9, data >> 2 & 1);
+	output_set_lamp_value(10, (data & 6) != 0);
+	output_set_lamp_value(13, (data & 3) != 0);
+
+	// d4-d7: led7seg (remaining credits) right digit
+	output_set_digit_value(1, led_map[data >> 4 & 0xf]);
+
+	// d3: ? (only set if game is over)
+}
+
+static WRITE8_DEVICE_HANDLER( jankenmn_lamps2_w )
+{
+	// button LEDs: d1: paper, d2: scissors, d3: rock
+	output_set_lamp_value(2, data >> 3 & 1);
+	output_set_lamp_value(3, data >> 2 & 1);
+	output_set_lamp_value(4, data >> 1 & 1);
+
+	// lamps: d5: draw, d6: lose, d7: win
+	output_set_lamp_value(5, data >> 6 & 1);
+	output_set_lamp_value(6, data >> 5 & 1);
+	output_set_lamp_value(7, data >> 7 & 1);
+
+	// d4: payout error LED
+	output_set_lamp_value(14, data >> 4 & 1);
+
+	// d0: led7seg (remaining credits) left digit
+	output_set_digit_value(0, led_map[data & 1]);
+}
+
+static WRITE8_DEVICE_HANDLER( jankenmn_lamps3_w )
+{
+	// d1: blue rotating lamp on top of cab
+	output_set_lamp_value(15, data >> 1 & 1);
+
+	// d2: payout (waits for hopper status)
+	coin_counter_w(device->machine(), 2, data & 0x04);
+
+	// d3: right multiplier lamp(2), d4: left multiplier lamp(1)
+	output_set_lamp_value(0, data >> 4 & 1);
+	output_set_lamp_value(1, data >> 3 & 1);
+
+	// d5: assume coin lockout
+	coin_lockout_global_w(device->machine(), ~data & 0x20);
+
+	// d0, d6, d7: N/C?
+}
+
+static CUSTOM_INPUT( jankenmn_hopper_status_r )
+{
+	// temp workaround, needs hopper
+	return field.machine().rand();
+}
+
+
+/*********************************************
+*           Memory Map Definition            *
+*********************************************/
+
+static ADDRESS_MAP_START( jankenmn_map, AS_PROGRAM, 8 )
+	AM_RANGE(0x0000, 0xbfff) AM_ROM
+	AM_RANGE(0xc000, 0xc7ff) AM_RAM
+	AM_RANGE(0xe000, 0xffff) AM_ROM
+ADDRESS_MAP_END
+
+static ADDRESS_MAP_START( jankenmn_port_map, AS_IO, 8 )
+	ADDRESS_MAP_GLOBAL_MASK(0xff)
+	AM_RANGE(0x00, 0x03) AM_DEVREADWRITE("ctc", z80ctc_r, z80ctc_w)
+	AM_RANGE(0x10, 0x13) AM_DEVREADWRITE_MODERN("ppi8255_0", i8255_device, read, write)
+	AM_RANGE(0x20, 0x23) AM_DEVREADWRITE_MODERN("ppi8255_1", i8255_device, read, write)
+	AM_RANGE(0x30, 0x30) AM_WRITENOP // ???
+ADDRESS_MAP_END
+
+
+/*********************************************
+*          Input Ports Definitions           *
+*********************************************/
+
+static INPUT_PORTS_START( jankenmn )
+	PORT_START("IN0")
+	PORT_BIT( 0x01, IP_ACTIVE_HIGH, IPT_BUTTON1 ) PORT_CODE(KEYCODE_Z) PORT_NAME("Guu (Rock)")
+	PORT_BIT( 0x02, IP_ACTIVE_HIGH, IPT_BUTTON2 ) PORT_CODE(KEYCODE_X) PORT_NAME("Choki (Scissors)")
+	PORT_BIT( 0x04, IP_ACTIVE_HIGH, IPT_BUTTON3 ) PORT_CODE(KEYCODE_C) PORT_NAME("Paa (Paper)")
+	PORT_BIT( 0x08, IP_ACTIVE_HIGH, IPT_UNKNOWN )
+	PORT_BIT( 0x10, IP_ACTIVE_HIGH, IPT_COIN3 ) // 100 yen coin
+	PORT_BIT( 0x20, IP_ACTIVE_HIGH, IPT_SPECIAL ) PORT_CUSTOM(jankenmn_hopper_status_r, NULL)
+	PORT_BIT( 0x40, IP_ACTIVE_HIGH, IPT_COIN2 ) // 10 yen coin
+	PORT_BIT( 0x80, IP_ACTIVE_HIGH, IPT_COIN1 ) // 10 yen coin
+
+	PORT_START("DSW")
+	PORT_DIPNAME( 0x03, 0x03, DEF_STR( Coinage ) )	PORT_DIPLOCATION("DSW:7,8")
+	PORT_DIPSETTING( 0x00, "Lamp Test" )
+	PORT_DIPSETTING( 0x02, DEF_STR( 3C_1C ) )		// or 4 credits on 100 yen
+	PORT_DIPSETTING( 0x01, DEF_STR( 2C_1C ) )		// or 6 credits on 100 yen
+	PORT_DIPSETTING( 0x03, DEF_STR( 1C_1C ) )		// or 11 credits on 100 yen
+	PORT_DIPNAME( 0x04, 0x04, DEF_STR( Unknown ) )	PORT_DIPLOCATION("DSW:6")
+	PORT_DIPSETTING(    0x04, DEF_STR( Off ) )
+	PORT_DIPSETTING(    0x00, DEF_STR( On ) )
+	PORT_DIPNAME( 0x08, 0x08, DEF_STR( Unknown ) )	PORT_DIPLOCATION("DSW:5")
+	PORT_DIPSETTING(    0x08, DEF_STR( Off ) )
+	PORT_DIPSETTING(    0x00, DEF_STR( On ) )
+	PORT_DIPNAME( 0x10, 0x10, DEF_STR( Unknown ) )	PORT_DIPLOCATION("DSW:4")
+	PORT_DIPSETTING(    0x10, DEF_STR( Off ) )
+	PORT_DIPSETTING(    0x00, DEF_STR( On ) )
+	PORT_DIPNAME( 0x20, 0x20, DEF_STR( Unknown ) )	PORT_DIPLOCATION("DSW:3")
+	PORT_DIPSETTING(    0x20, DEF_STR( Off ) )
+	PORT_DIPSETTING(    0x00, DEF_STR( On ) )
+	PORT_DIPNAME( 0x40, 0x40, DEF_STR( Unknown ) )	PORT_DIPLOCATION("DSW:2")
+	PORT_DIPSETTING(    0x40, DEF_STR( Off ) )
+	PORT_DIPSETTING(    0x00, DEF_STR( On ) )
+	PORT_DIPNAME( 0x80, 0x80, DEF_STR( Unknown ) )	PORT_DIPLOCATION("DSW:1")
+	PORT_DIPSETTING(    0x80, DEF_STR( Off ) )
+	PORT_DIPSETTING(    0x00, DEF_STR( On ) )
+
+INPUT_PORTS_END
+
+
+/*********************************************
+*   CTC & Daisy Chain Interrupts Interface   *
+*********************************************/
+
+static Z80CTC_INTERFACE( ctc_intf )
+{
+	0,              	/* timer disables */
+	DEVCB_CPU_INPUT_LINE("maincpu", INPUT_LINE_IRQ0),	/* interrupt handler */
+	DEVCB_NULL,			/* ZC/TO0 callback */
+	DEVCB_NULL,         /* ZC/TO1 callback */
+	DEVCB_NULL          /* ZC/TO2 callback */
+};
+
+static const z80_daisy_config daisy_chain[] =
+{
+	{ "ctc" },
+	{ NULL }
+};
+
+
+/*********************************************
+*          PPI 8255 (x2) Interface           *
+*********************************************/
+
+static I8255_INTERFACE (ppi8255_intf_0)
+{
+	/* (10-13) Mode 0 - Ports A & B set as input, high C & low C as output. */
+	DEVCB_INPUT_PORT("DSW"),
+	DEVCB_NULL,
+	DEVCB_INPUT_PORT("IN0"),
+	DEVCB_NULL,
+	DEVCB_NULL,
+	DEVCB_HANDLER(jankenmn_lamps3_w)
+};
+
+static I8255_INTERFACE (ppi8255_intf_1)
+{
+	/* (20-23) Mode 0 - Ports A, B, high C & low C set as output. */
+	DEVCB_NULL,
+	DEVCB_DEVICE_HANDLER("dac", dac_w),
+	DEVCB_NULL,
+	DEVCB_HANDLER(jankenmn_lamps1_w),
+	DEVCB_NULL,
+	DEVCB_HANDLER(jankenmn_lamps2_w)
+};
+
+
+/*********************************************
+*               Machine Config               *
+*********************************************/
+
+static MACHINE_CONFIG_START( jankenmn, jankenmn_state )
+	/* basic machine hardware */
+	MCFG_CPU_ADD("maincpu", Z80, MASTER_CLOCK)	/* 2.5 MHz */
+	MCFG_CPU_CONFIG(daisy_chain)
+	MCFG_CPU_PROGRAM_MAP(jankenmn_map)
+	MCFG_CPU_IO_MAP(jankenmn_port_map)
+
+	MCFG_I8255_ADD( "ppi8255_0", ppi8255_intf_0 )
+	MCFG_I8255_ADD( "ppi8255_1", ppi8255_intf_1 )
+
+	MCFG_Z80CTC_ADD("ctc", MASTER_CLOCK, ctc_intf)
+
+	/* NO VIDEO */
+
+	/* sound hardware */
+	MCFG_SPEAKER_STANDARD_MONO("mono")
+
+	MCFG_SOUND_ADD("dac", DAC, 0)
+	MCFG_SOUND_ROUTE(ALL_OUTPUTS, "mono", 1.0)
+
+MACHINE_CONFIG_END
+
+
+/*********************************************
+*                  Rom Load                  *
+*********************************************/
+
+ROM_START( jankenmn )
+	ROM_REGION( 0x40000, "maincpu", 0 )
+	ROM_LOAD( "pcg2.bin",   0x0000, 0xc000, CRC(48a8f769) SHA1(656346ca0a83fd8ff5c8683152e4c5e1a1c797fa) )
+	ROM_CONTINUE(           0xe000, 0x2000 )
+	ROM_IGNORE( 0x32000 ) // lots of unused PCM data
+
+	// Z80 code/data in $0000-$2b4f, rest is empty. CTC probably at 58-5b.
+	// Can't find any sign of 8255 PPI. Is this an unused leftover or testrom?
+	ROM_REGION( 0x4000, "temp", 0 )
+	ROM_LOAD( "pcg1.bin",   0x0000, 0x4000,  CRC(a9c5aa2e) SHA1(c3b81eeefa5c442231cd26615aaf6c682063b26f) )
+ROM_END
+
+
+/*********************************************
+*                Game Drivers                *
+*********************************************/
+
+/*     YEAR  NAME      PARENT  MACHINE   INPUT     INIT  ROT    COMPANY    FULLNAME                   FLAGS...  LAYOUT */
+GAMEL( 1991, jankenmn, 0,      jankenmn, jankenmn, 0,    ROT0, "Sunwise", "Janken Man Kattara Ageru", 0,        layout_jankenmn )
diff -Nru src-old/mame/drivers/kyugo.c src/mame/drivers/kyugo.c
--- src-old/mame/drivers/kyugo.c	2012-01-12 23:19:49.000000000 +0100
+++ src/mame/drivers/kyugo.c	2012-03-15 07:40:01.000000000 +0100
@@ -1403,8 +1403,8 @@
 GAME( 1984, gyrodinet, gyrodine, gyrodine, gyrodine, gyrodine, ROT90, "Crux (Taito Corporation license)", "Gyrodine (Taito Corporation license)", GAME_SUPPORTS_SAVE )
 GAME( 1984, buzzard,   gyrodine, gyrodine, gyrodine, gyrodine, ROT90, "Crux", "Buzzard", GAME_SUPPORTS_SAVE )
 GAME( 1985, repulse,   0,        repulse,  repulse,  0,        ROT90, "Sega", "Repulse", GAME_SUPPORTS_SAVE ) // by Crux?
-GAME( 1985, 99lstwar,  repulse,  repulse,  repulse,  0,        ROT90, "Sega (Proma license)", "'99: The Last War", GAME_SUPPORTS_SAVE )
-GAME( 1985, 99lstwara, repulse,  repulse,  repulse,  0,        ROT90, "Sega (Proma license)", "'99: The Last War (alternate)", GAME_SUPPORTS_SAVE )
+GAME( 1985, 99lstwar,  repulse,  repulse,  repulse,  0,        ROT90, "Sega (Proma license)", "'99: The Last War (set 1)", GAME_SUPPORTS_SAVE )
+GAME( 1985, 99lstwara, repulse,  repulse,  repulse,  0,        ROT90, "Sega (Proma license)", "'99: The Last War (set 2)", GAME_SUPPORTS_SAVE )
 GAME( 1985, 99lstwark, repulse,  repulse,  repulse,  0,        ROT90, "Sega (Kyugo license)", "'99: The Last War (Kyugo)", GAME_SUPPORTS_SAVE )
 GAME( 1985, sonofphx,  repulse,  repulse,  repulse,  0,        ROT90, "bootleg (Associated Overseas MFR, Inc)", "Son of Phoenix", GAME_SUPPORTS_SAVE )
 GAME( 1985, flashgal,  0,        repulse,  flashgal, 0,        ROT0,  "Sega", "Flashgal (set 1)", GAME_SUPPORTS_SAVE )
diff -Nru src-old/mame/drivers/liberate.c src/mame/drivers/liberate.c
--- src-old/mame/drivers/liberate.c	2012-01-12 23:19:49.000000000 +0100
+++ src/mame/drivers/liberate.c	2012-03-15 07:40:01.000000000 +0100
@@ -1414,8 +1414,8 @@
  *************************************/
 
 GAME( 1983, prosoccr,  0,        prosoccr,  prosoccr, prosport, ROT270, "Data East Corporation", "Pro Soccer", GAME_SUPPORTS_SAVE )
-GAME( 1983, prosport,  0,        prosport,  prosport, prosport, ROT270, "Data East Corporation", "Pro Sports - Bowling, Tennis, and Golf", GAME_NO_COCKTAIL | GAME_IMPERFECT_GRAPHICS | GAME_IMPERFECT_SOUND | GAME_SUPPORTS_SAVE )
-GAME( 1983, prosporta, prosport, prosport,  prosport, prosport, ROT270, "Data East Corporation", "Pro Sports - Bowling, Tennis, and Golf (alternate)", GAME_NO_COCKTAIL | GAME_IMPERFECT_GRAPHICS | GAME_IMPERFECT_SOUND | GAME_SUPPORTS_SAVE )
+GAME( 1983, prosport,  0,        prosport,  prosport, prosport, ROT270, "Data East Corporation", "Pro Sports - Bowling, Tennis, and Golf (set 1)", GAME_NO_COCKTAIL | GAME_IMPERFECT_GRAPHICS | GAME_IMPERFECT_SOUND | GAME_SUPPORTS_SAVE )
+GAME( 1983, prosporta, prosport, prosport,  prosport, prosport, ROT270, "Data East Corporation", "Pro Sports - Bowling, Tennis, and Golf (set 2)", GAME_NO_COCKTAIL | GAME_IMPERFECT_GRAPHICS | GAME_IMPERFECT_SOUND | GAME_SUPPORTS_SAVE )
 GAME( 1983, boomrang,  0,        boomrang,  boomrang, prosport, ROT270, "Data East Corporation", "Boomer Rang'r / Genesis (set 1)", GAME_SUPPORTS_SAVE )
 GAME( 1983, boomranga, boomrang, boomrang,  boomrang, prosport, ROT270, "Data East Corporation", "Boomer Rang'r / Genesis (set 2)", GAME_SUPPORTS_SAVE )
 GAME( 1984, kamikcab,  0,        boomrang,  kamikcab, prosport, ROT270, "Data East Corporation", "Kamikaze Cabbie", GAME_SUPPORTS_SAVE )
diff -Nru src-old/mame/drivers/maygay1b.c src/mame/drivers/maygay1b.c
--- src-old/mame/drivers/maygay1b.c	2012-02-26 19:05:45.000000000 +0100
+++ src/mame/drivers/maygay1b.c	2012-03-14 15:08:46.000000000 +0100
@@ -4155,6 +4155,7 @@
 	ROM_REGION( 0x20000, "maincpu", ROMREGION_ERASE00  )
 	ROM_LOAD( "just2-0n.p1", 0x0000, 0x020000, CRC(d63d1710) SHA1(feccdd6dc242d32f04a080ab6a637cd6ec330c0d) )
 	ROM_REGION( 0x20000, "altrevs", ROMREGION_ERASE00  )
+	ROM_LOAD( "j_t_job.1_8", 0x0000, 0x010000, CRC(338c0ec0) SHA1(b57b760f542e69dfa43d805e5beca40975a4f901) ) /* might be underdumped */
 	ROM_LOAD( "j_t_job.1_9", 0x0000, 0x020000, CRC(4f6da2b2) SHA1(43b4c314d5ee934d8dc8972c3c0585096d78793f) )
 	ROM_LOAD( "just2-0p.p1", 0x0000, 0x020000, CRC(8d809ba4) SHA1(a6fd142edb0a98c847cb376efe40756d19bccb02) )
 	ROM_LOAD( "just2-1n.p1", 0x0000, 0x020000, CRC(7af617ab) SHA1(3288eb180bb0b6c742a70d6044ea7a8c92fd2835) )
diff -Nru src-old/mame/drivers/mcatadv.c src/mame/drivers/mcatadv.c
--- src-old/mame/drivers/mcatadv.c	2012-01-14 02:39:13.000000000 +0100
+++ src/mame/drivers/mcatadv.c	2012-03-24 23:16:07.000000000 +0100
@@ -498,7 +498,7 @@
 	ROM_LOAD( "u9.bin", 0x00000, 0x20000, CRC(fda05171) SHA1(2c69292573ec35034572fa824c0cae2839d23919) )
 	ROM_RELOAD( 0x10000, 0x20000 )
 
-	ROM_REGION( 0x500000, "gfx1", 0 ) /* Sprites */
+	ROM_REGION( 0x800000, "gfx1", ROMREGION_ERASEFF ) /* Sprites */
 	ROM_LOAD16_BYTE( "mca-u82.bin", 0x000000, 0x100000, CRC(5f01d746) SHA1(11b241456e15299912ee365eedb8f9d5e5ca875d) )
 	ROM_LOAD16_BYTE( "mca-u83.bin", 0x000001, 0x100000, CRC(4e1be5a6) SHA1(cb19aad42dba54d6a4a33859f27254c2a3271e8c) )
 	ROM_LOAD16_BYTE( "mca-u84.bin", 0x200000, 0x080000, CRC(df202790) SHA1(f6ae54e799af195860ed0ab3c85138cf2f10efa6) )
@@ -527,7 +527,7 @@
 	ROM_LOAD( "u9.bin", 0x00000, 0x20000, CRC(fda05171) SHA1(2c69292573ec35034572fa824c0cae2839d23919) )
 	ROM_RELOAD( 0x10000, 0x20000 )
 
-	ROM_REGION( 0x500000, "gfx1", 0 ) /* Sprites */
+	ROM_REGION( 0x800000, "gfx1", ROMREGION_ERASEFF ) /* Sprites */
 	ROM_LOAD16_BYTE( "mca-u82.bin", 0x000000, 0x100000, CRC(5f01d746) SHA1(11b241456e15299912ee365eedb8f9d5e5ca875d) )
 	ROM_LOAD16_BYTE( "mca-u83.bin", 0x000001, 0x100000, CRC(4e1be5a6) SHA1(cb19aad42dba54d6a4a33859f27254c2a3271e8c) )
 	ROM_LOAD16_BYTE( "mca-u84.bin", 0x200000, 0x080000, CRC(df202790) SHA1(f6ae54e799af195860ed0ab3c85138cf2f10efa6) )
@@ -556,7 +556,7 @@
 	ROM_LOAD( "u9.bin", 0x00000, 0x20000, CRC(fda05171) SHA1(2c69292573ec35034572fa824c0cae2839d23919) )
 	ROM_RELOAD( 0x10000, 0x20000 )
 
-	ROM_REGION( 0x500000, "gfx1", 0 ) /* Sprites */
+	ROM_REGION( 0x800000, "gfx1", ROMREGION_ERASEFF ) /* Sprites */
 	ROM_LOAD16_BYTE( "mca-u82.bin", 0x000000, 0x100000, CRC(5f01d746) SHA1(11b241456e15299912ee365eedb8f9d5e5ca875d) )
 	ROM_LOAD16_BYTE( "mca-u83.bin", 0x000001, 0x100000, CRC(4e1be5a6) SHA1(cb19aad42dba54d6a4a33859f27254c2a3271e8c) )
 	ROM_LOAD16_BYTE( "u84.bin",     0x200000, 0x100000, CRC(843fd624) SHA1(2e16d8a909fe9447da37a87428bff0734af59a00) )
@@ -589,7 +589,7 @@
 	ROM_LOAD( "nos-ps.u9", 0x00000, 0x40000, CRC(832551e9) SHA1(86fc481b1849f378c88593594129197c69ea1359) )
 	ROM_RELOAD( 0x10000, 0x40000 )
 
-	ROM_REGION( 0x500000, "gfx1", 0 ) /* Sprites */
+	ROM_REGION( 0x800000, "gfx1", ROMREGION_ERASEFF ) /* Sprites */
 	ROM_LOAD16_BYTE( "nos-se-0.u82", 0x000000, 0x100000, CRC(9d99108d) SHA1(466540989d7b1b7f6dc7acbae74f6a8201973d45) )
 	ROM_LOAD16_BYTE( "nos-so-0.u83", 0x000001, 0x100000, CRC(7df0fc7e) SHA1(2e064cb5367b2839d736d339c4f1a44785b4eedf) )
 	ROM_LOAD16_BYTE( "nos-se-1.u84", 0x200000, 0x100000, CRC(aad07607) SHA1(89c51a9cb6b8d8ed3a357f5d8ac8399ff1c7ad46) )
@@ -618,7 +618,7 @@
 	ROM_LOAD( "nos-ps.u9", 0x00000, 0x40000, CRC(832551e9) SHA1(86fc481b1849f378c88593594129197c69ea1359) )
 	ROM_RELOAD( 0x10000, 0x40000 )
 
-	ROM_REGION( 0x500000, "gfx1", 0 ) /* Sprites */
+	ROM_REGION( 0x800000, "gfx1", ROMREGION_ERASEFF ) /* Sprites */
 	ROM_LOAD16_BYTE( "nos-se-0.u82", 0x000000, 0x100000, CRC(9d99108d) SHA1(466540989d7b1b7f6dc7acbae74f6a8201973d45) )
 	ROM_LOAD16_BYTE( "nos-so-0.u83", 0x000001, 0x100000, CRC(7df0fc7e) SHA1(2e064cb5367b2839d736d339c4f1a44785b4eedf) )
 	ROM_LOAD16_BYTE( "nos-se-1.u84", 0x200000, 0x100000, CRC(aad07607) SHA1(89c51a9cb6b8d8ed3a357f5d8ac8399ff1c7ad46) )
@@ -647,7 +647,7 @@
 	ROM_LOAD( "nos-ps.u9", 0x00000, 0x40000, CRC(832551e9) SHA1(86fc481b1849f378c88593594129197c69ea1359) )
 	ROM_RELOAD( 0x10000, 0x40000 )
 
-	ROM_REGION( 0x500000, "gfx1", 0 ) /* Sprites */
+	ROM_REGION( 0x800000, "gfx1", ROMREGION_ERASEFF ) /* Sprites */
 	ROM_LOAD16_BYTE( "nos-se-0.u82", 0x000000, 0x100000, CRC(9d99108d) SHA1(466540989d7b1b7f6dc7acbae74f6a8201973d45) )
 	ROM_LOAD16_BYTE( "nos-so-0.u83", 0x000001, 0x100000, CRC(7df0fc7e) SHA1(2e064cb5367b2839d736d339c4f1a44785b4eedf) )
 	ROM_LOAD16_BYTE( "nos-se-1.u84", 0x200000, 0x100000, CRC(aad07607) SHA1(89c51a9cb6b8d8ed3a357f5d8ac8399ff1c7ad46) )
diff -Nru src-old/mame/drivers/midyunit.c src/mame/drivers/midyunit.c
--- src-old/mame/drivers/midyunit.c	2012-02-23 06:39:44.000000000 +0100
+++ src/mame/drivers/midyunit.c	2012-03-15 07:40:01.000000000 +0100
@@ -2327,6 +2327,37 @@
 	ROM_LOAD ( "mkg-u109.rom",  0x580000, 0x80000, CRC(cafc47bb) SHA1(8610af6e52f7089ff4acd850c53ab8b4119e4445) )
 ROM_END
 
+ROM_START( mkyturboe )
+	ROM_REGION( 0x50000, "adpcm", 0 )	/* sound CPU */
+	ROM_LOAD (  "mks-u3.rom", 0x10000, 0x40000, CRC(c615844c) SHA1(5732f9053a5f73b0cc3b0166d7dc4430829d5bc7) )
+
+	ROM_REGION( 0x200000, "oki", 0 )	/* ADPCM */
+	ROM_LOAD ( "mks-u12.rom", 0x00000, 0x40000, CRC(258bd7f9) SHA1(463890b23f17350fb9b8a85897b0777c45bc2d54) )
+	ROM_RELOAD(               0x40000, 0x40000 )
+	ROM_LOAD ( "mks-u13.rom", 0x80000, 0x40000, CRC(7b7ec3b6) SHA1(6eec1b90d4a4855f34a7ebfbf93f3358d5627db4) )
+	ROM_RELOAD(               0xc0000, 0x40000 )
+
+	/* A 'NIBBLE BOARD' daughtercard holding a GAL16V8A-2SP, 27C040 EPROM and a 9.8304MHz XTAL plugs into the U89 socket */
+	ROM_REGION16_LE( 0x100000, "user1", 0 )	/* 34010 code */
+	ROM_LOAD16_BYTE( "turbo30.u105", 0x00000, 0x80000, CRC(29680b34) SHA1(a4c911b9872be38597913f946a4bcc1039e7d85d) )
+	ROM_LOAD16_BYTE(  "turbo30.u89", 0x00001, 0x80000, CRC(84d66a75) SHA1(11ee7ae7fc1c13cafa8312f101878393ae6fd8b7) )
+        ROM_REGION( 0x800000, "gfx1", 0 )
+	ROM_LOAD ( "mkg-u111.rom",  0x000000, 0x80000, CRC(d17096c4) SHA1(01ef390a372c9d94adf138f9543ebb88b89f4c38) )
+	ROM_LOAD ( "mkg-u112.rom",  0x080000, 0x80000, CRC(993bc2e4) SHA1(7791edbec2b4b8971a3e790346dd7564ecf16d5c) )
+	ROM_LOAD ( "mkg-u113.rom",  0x100000, 0x80000, CRC(6fb91ede) SHA1(a3735b49f93b08c44fbc97e2b5aad394628fbe90) )
+	ROM_LOAD ( "mkg-u114.rom",  0x180000, 0x80000, CRC(ed1ff88a) SHA1(6b090b658ee6148af953bd0c9216f37162b6460f) )
+
+	ROM_LOAD (  "mkg-u95.rom",  0x200000, 0x80000, CRC(a002a155) SHA1(3cf7909e92bcd428063596fc5b9953e0000d6eca) )
+	ROM_LOAD (  "mkg-u96.rom",  0x280000, 0x80000, CRC(dcee8492) SHA1(a912b74d3b26ebd1b1613cc631080f83ececeaf8) )
+	ROM_LOAD (  "mkg-u97.rom",  0x300000, 0x80000, CRC(de88caef) SHA1(a7927b504dc56ca5c9048373977fe5743b0a3f0b) )
+	ROM_LOAD (  "mkg-u98.rom",  0x380000, 0x80000, CRC(37eb01b4) SHA1(06092460bd137e08d0f8df8560942ed877d40e09) )
+
+	ROM_LOAD ( "mkg-u106.rom",  0x400000, 0x80000, CRC(45acaf21) SHA1(5edd36c55f4e5d3c74fb85171728ec0a58284b12) )
+	ROM_LOAD ( "mkg-u107.rom",  0x480000, 0x80000, CRC(2a6c10a0) SHA1(cc90923c44f2961b945a0fd0f85ecc2ba04af2cb) )
+	ROM_LOAD ( "mkg-u108.rom",  0x500000, 0x80000, CRC(23308979) SHA1(0b36788624a1cf0d3f4c895be5ba967b8dfcf85e) )
+	ROM_LOAD ( "mkg-u109.rom",  0x580000, 0x80000, CRC(cafc47bb) SHA1(8610af6e52f7089ff4acd850c53ab8b4119e4445) )
+ROM_END
+
 ROM_START( mknifty )
 	ROM_REGION( 0x50000, "adpcm", 0 )	/* sound CPU */
 	ROM_LOAD (  "mks-u3.rom", 0x10000, 0x40000, CRC(c615844c) SHA1(5732f9053a5f73b0cc3b0166d7dc4430829d5bc7) )
@@ -2702,10 +2733,11 @@
 GAME( 1992, mkprot8,  mk,       yunit_adpcm_6bit_faster, mkla2,    mkyunit,  ROT0, "Midway",   "Mortal Kombat (prototype, rev 8.0 07/21/92)", GAME_SUPPORTS_SAVE )
 GAME( 1992, mkprot4,  mk,       yunit_adpcm_6bit_faster, mkla2,    mkyunit,  ROT0, "Midway",   "Mortal Kombat (prototype, rev 4.0 07/14/92)", GAME_SUPPORTS_SAVE )
 GAME( 1992, mkyturbo, mk,       yunit_adpcm_6bit_fast,   mkla4,    mkyturbo, ROT0, "hack",     "Mortal Kombat (Turbo 3.1 09/09/93, hack)", GAME_SUPPORTS_SAVE )
+GAME( 1992, mkyturboe,mk,       yunit_adpcm_6bit_fast,   mkla4,    mkyturbo, ROT0, "hack",     "Mortal Kombat (Turbo 3.0 08/31/92, hack)", GAME_SUPPORTS_SAVE )
 GAME( 1992, mknifty,  mk,       yunit_adpcm_6bit_fast,   mkla4,    mkyturbo, ROT0, "hack",     "Mortal Kombat (Nifty Kombo, hack)", GAME_SUPPORTS_SAVE )
 GAME( 1992, mknifty666, mk,     yunit_adpcm_6bit_fast,   mkla4,    mkyturbo, ROT0, "hack",     "Mortal Kombat (Nifty Kombo 666, hack)", GAME_SUPPORTS_SAVE )
-GAME( 1992, mkyawdim, mk,       mkyawdim,                mkla4,    mkyawdim, ROT0, "bootleg (Yawdim)", "Mortal Kombat (Yawdim bootleg)", GAME_SUPPORTS_SAVE )
-GAME( 1992, mkyawdim2,mk,       mkyawdim,                mkla4,    mkyawdim, ROT0, "bootleg (Yawdim)", "Mortal Kombat (Yawdim bootleg - Set 2)", GAME_SUPPORTS_SAVE | GAME_NO_SOUND )
+GAME( 1992, mkyawdim, mk,       mkyawdim,                mkla4,    mkyawdim, ROT0, "bootleg (Yawdim)", "Mortal Kombat (Yawdim bootleg, set 1)", GAME_SUPPORTS_SAVE )
+GAME( 1992, mkyawdim2,mk,       mkyawdim,                mkla4,    mkyawdim, ROT0, "bootleg (Yawdim)", "Mortal Kombat (Yawdim bootleg, set 2)", GAME_SUPPORTS_SAVE | GAME_NO_SOUND )
 
 GAME( 1992, totcarn,  0,        yunit_adpcm_6bit_fast,   totcarn,  totcarn,  ROT0, "Midway",   "Total Carnage (rev LA1 03/10/92)", GAME_SUPPORTS_SAVE )
 GAME( 1992, totcarnp, totcarn,  yunit_adpcm_6bit_fast,   totcarn,  totcarn,  ROT0, "Midway",   "Total Carnage (prototype, rev 1.0 01/25/92)", GAME_SUPPORTS_SAVE )
diff -Nru src-old/mame/drivers/mirax.c src/mame/drivers/mirax.c
--- src-old/mame/drivers/mirax.c	2012-01-12 23:19:49.000000000 +0100
+++ src/mame/drivers/mirax.c	2012-03-15 07:40:01.000000000 +0100
@@ -502,5 +502,5 @@
 
 }
 
-GAME( 1985, mirax,  0,     mirax, mirax, mirax, ROT90, "Current Technologies", "Mirax",         0 )
+GAME( 1985, mirax,  0,     mirax, mirax, mirax, ROT90, "Current Technologies", "Mirax (set 1)", 0 )
 GAME( 1985, miraxa, mirax, mirax, mirax, mirax, ROT90, "Current Technologies", "Mirax (set 2)", 0 )
diff -Nru src-old/mame/drivers/model2.c src/mame/drivers/model2.c
--- src-old/mame/drivers/model2.c	2012-03-06 00:01:57.000000000 +0100
+++ src/mame/drivers/model2.c	2012-03-17 19:52:54.000000000 +0100
@@ -490,7 +490,8 @@
 /*
     Rail Chase 2 "Drive I/O BD" documentation
 
-    I'm fairly sure that this is actually controlled by a CPU with undumped program code.
+    Controlled by a CPU with undumped program code.
+    Aux board 837-11694, Z80 (4Mhz) with program rom EPR-17895 (undumped)
 
     commands 0x2* are for device status bits (all of them active low)
 
@@ -2329,7 +2330,7 @@
 	MODEL2A_VID_BOARD
 ROM_END
 
-ROM_START( zerogunaj ) /* Zero Gunner (Japan), Model 2A - Sega game ID# 834-11342 */
+ROM_START( zerogunaj ) /* Zero Gunner (Japan), Model 2A - Sega game ID# 833-11341, Sega ROM board ID# 834-11342 */
 	ROM_REGION( 0x200000, "maincpu", 0 ) // i960 program
 	ROM_LOAD32_WORD("epr-20288.12", 0x000000, 0x080000, CRC(162305d5) SHA1(c0d67fbb8f89daacd32bbc1ad0d55a73b60016d8) )
 	ROM_LOAD32_WORD("epr-20289.13", 0x000002, 0x080000, CRC(b5acb940) SHA1(e4c66c6bc9d5433b76ea12cf625fc359439144bb) )
@@ -3185,7 +3186,7 @@
 	ROM_LOAD("mpr-20815.37", 0x600000, 0x200000, CRC(1b5aaae4) SHA1(32b4bf6c096fdccdd5d8f1ddb6c27d3389a52234) ) /* Located at position 35 on 2C-CRX rom board */
 ROM_END
 
-ROM_START( schamp ) /* Sonic Championship, Model 2B - Sega game ID: 834-12786 */
+ROM_START( schamp ) /* Sonic Championship, Model 2B - Sega ROM board ID# 834-12786 */
 	ROM_REGION( 0x200000, "maincpu", 0 ) // i960 program
 	ROM_LOAD32_WORD("epr-19141.15", 0x000000, 0x080000, CRC(b942ef21) SHA1(2372412d49349894c99d545313c12413c2d1ec86) ) /* Default country is USA, game title is "Sonic Championship" when region */
 	ROM_LOAD32_WORD("epr-19142.16", 0x000002, 0x080000, CRC(2d54bd76) SHA1(9456fb9a847e01548fc30d36ef161325788653d5) ) /*  is USA or Export; "Sonic the Fighters" when set to Japan */
@@ -3631,7 +3632,7 @@
 	ROM_LOAD("mpr-19058.34", 0x0400000, 0x400000, CRC(e237c11c) SHA1(7c89cba757bd58747ed0d633b2fe7ef559fcd15e) )
 ROM_END
 
-ROM_START( lastbrnxu ) /* Last Bronx Revision A (USA), Model 2B - Sega game ID# 834-12360 */
+ROM_START( lastbrnxu ) /* Last Bronx Revision A (USA), Model 2B - Sega ROM board ID# 834-12360 */
 	ROM_REGION( 0x200000, "maincpu", 0 ) // i960 program
 	ROM_LOAD32_WORD("epr-19059a.15", 0x000000, 0x080000, CRC(25478257) SHA1(c6b7a5788617faff6cf612a824b29a9474db87f3) )
 	ROM_LOAD32_WORD("epr-19060a.16", 0x000002, 0x080000, CRC(c48906b2) SHA1(a0904c97234f218caf489dc55e33082e453791a0) )
@@ -3766,7 +3767,7 @@
 	ROM_LOAD("mpr-21280.sd4", 0x0600000, 0x200000, CRC(aa548124) SHA1(a94adfe16b5c3236746451c181ccd3e1c27432f4) )
 ROM_END
 
-ROM_START( indy500 ) /* Defaults to Twin (Stand Alone) Cab version.  2 credits to start - Can be set to Deluxe setting in service mode, Sega ID# 834-12362 */
+ROM_START( indy500 ) /* Defaults to Twin (Stand Alone) Cab version.  2 credits to start - Can be set to Deluxe setting in service mode, Sega ROM board ID# 834-12362 */
 	ROM_REGION( 0x200000, "maincpu", 0 ) // i960 program
 	ROM_LOAD32_WORD("epr-18598a.15", 0x000000, 0x080000, CRC(3cdcac0f) SHA1(2f616e363f4d246fece309e81325e5e3c4e9d9f8) ) /* Higher rom numbers indicate a newer version */
 	ROM_LOAD32_WORD("epr-18599a.16", 0x000002, 0x080000, CRC(32bde9a2) SHA1(0982952ab3c5b035f37beb9304ac950c0e78aea8) ) /* Different attract mode... what else??? */
@@ -3997,7 +3998,7 @@
 	ROM_LOAD("mpr-19296.34", 0x0400000, 0x400000, CRC(b4b9faff) SHA1(3a258e0f7c642d043cbab5f94dfe69fac8561e93) )
 ROM_END
 
-ROM_START( rchase2 ) /* Rail Chase 2 Revision A, Model 2B */
+ROM_START( rchase2 ) /* Rail Chase 2 Revision A, Model 2B. Sega game ID# 833-11809 */
 	ROM_REGION( 0x200000, "maincpu", 0 ) // i960 program
 	ROM_LOAD32_WORD("epr-18045a.15", 0x000000, 0x080000, CRC(bfca0314) SHA1(9eb0f2cdab8c10fda9edc0ddc439263af3903cdc) )
 	ROM_LOAD32_WORD("epr-18046a.16", 0x000002, 0x080000, CRC(0b8d3074) SHA1(fee8436399fb97ad5b8357b81e69bd5c27af1dde) )
@@ -4036,7 +4037,7 @@
 
 	/* the Drive I/O clearly has a CPU on it (see above) */
 	ROM_REGION( 0x1000, "iocpu", 0 )
-	ROM_LOAD("drive_io.bin", 0x0000, 0x1000, NO_DUMP )
+	ROM_LOAD("epr-17895", 0x0000, 0x1000, NO_DUMP ) /* Z80 code, unknown rom size */
 ROM_END
 
 
@@ -4147,7 +4148,7 @@
 	ROM_LOAD("mpr-20253.35",  0x0600000, 0x200000, CRC(ca6aa17c) SHA1(f6df2483ca75573449ba36638dbbed4be7843a44) )
 ROM_END
 
-/* Over Rev: There is known to be an undumped Model 2B version with EPR-19992 & EPR-19993 program roms */
+/* Over Rev: There is known to be an undumped Model 2B version with EPR-19992B & EPR-19993B program roms */
 ROM_START( overrev ) /* Over Rev Revision A, Model 2C */
 	ROM_REGION( 0x200000, "maincpu", 0 ) // i960 program
 	ROM_LOAD32_WORD( "epr-20124a.15", 0x000000, 0x080000, CRC(74beb8d7) SHA1(c65c641138ecd7312c4930702d1498b8a346175a) )
@@ -4413,7 +4414,7 @@
 	ROM_LOAD("mpr-19154.32", 0x000000, 0x400000, CRC(7cd9e679) SHA1(b9812c4f3042f95febc96bcdd46e3b0724ad4b4f) )
 ROM_END
 
-ROM_START( von ) /* Virtual On Cyber Troopers Revision B (US), Model 2B, Sega ID# 834-12346-01 */
+ROM_START( von ) /* Virtual On Cyber Troopers Revision B (US), Model 2B, Sega Game ID# 833-12345-01, ROM board ID# 834-12346-01 */
 	ROM_REGION( 0x200000, "maincpu", 0 ) // i960 program
 	ROM_LOAD32_WORD("epr-18828b.15", 0x000000, 0x080000, CRC(6499cc59) SHA1(8289be295f021acbf0c903513ba97ae7de50dedb) )
 	ROM_LOAD32_WORD("epr-18829b.16", 0x000002, 0x080000, CRC(0053b10f) SHA1(b89cc814b02b4ab5e37c75ee1a9cf57b88b63053) )
@@ -4601,7 +4602,7 @@
 	ROM_LOAD("mpr-19187.34", 0x400000, 0x200000, CRC(20918769) SHA1(90951bd61654d39537c54325b6e157a019edcda8) )
 ROM_END
 
-ROM_START( dynabb97 ) /* Dynamite Baseball 97 Revision A, Model 2B */
+ROM_START( dynabb97 ) /* Dynamite Baseball 97 Revision A, Model 2B. Sega game ID# 833-12803 */
 	ROM_REGION( 0x200000, "maincpu", 0 ) // i960 program
 	ROM_LOAD32_WORD("epr-19833a.15", 0x000000, 0x080000, CRC(d99ed1b2) SHA1(b04613d564c04c35feafccad56ed85810d894185) )
 	ROM_LOAD32_WORD("epr-19834a.16", 0x000002, 0x080000, CRC(24192bb1) SHA1(c535ab4b38ffd42f03eed6a5a1706e867eaccd67) )
diff -Nru src-old/mame/drivers/model3.c src/mame/drivers/model3.c
--- src-old/mame/drivers/model3.c	2012-01-12 23:19:49.000000000 +0100
+++ src/mame/drivers/model3.c	2012-03-18 06:30:53.000000000 +0100
@@ -2389,7 +2389,7 @@
 	ROM_LOAD( "epr-19338a.bin", 0x000000, 0x010000, CRC(c9fac464) SHA1(47b9ab7921a685c01629afb592d597faa11d2bd6) )
 ROM_END
 
-ROM_START( scuda )	/* step 1.5 */
+ROM_START( scuda )	/* step 1.5, Sega game ID# is 833-13041, ROM board ID# 834-13042 */
 	ROM_REGION64_BE( 0x4800000, "user1", 0 ) /* program + data ROMs */
 	// CROM
 	ROM_LOAD64_WORD_SWAP( "epr-19688.17",  0x0600006,  0x80000,  CRC(a4c85103) SHA1(b2e57f86d0a49e3e88fa7d6a77bbd99039c034bb) )
@@ -2545,7 +2545,7 @@
 	ROM_LOAD( "epr-19338.bin", 0x000000, 0x010000, CRC(dbf88de6) SHA1(8f5c83e82c26a37a1ed0476d7dfeb698b8417899) )
 ROM_END
 
-ROM_START( vf3 )	/* step 1.0 */
+ROM_START( vf3 )	/* step 1.0, Sega game ID# is 833-12712, ROM board ID# 834-12821 */
 	ROM_REGION64_BE( 0x4800000, "user1", 0 ) /* program + data ROMs */
 	// CROM
 	ROM_LOAD64_WORD_SWAP( "epr-19227c.17",  0x600006, 0x080000, CRC(a7df4d75) SHA1(1b1186227f830556c5e2b6ca4c2bf20673b22f94) )
@@ -2908,7 +2908,7 @@
 	ROM_FILL( 0x000000, 0x80000, 0 )
 ROM_END
 
-ROM_START( lostwsga )	/* Step 1.5 */
+ROM_START( lostwsga )	/* Step 1.5, PCB cage labeled 834-13172 THE LOST WORLD U/R   Rev A known to exist, but not dumped */
 	ROM_REGION64_BE( 0x4800000, "user1", 0 ) /* program + data ROMs */
 	// CROM
 	ROM_LOAD64_WORD_SWAP( "epr-19939.17",  0x600006, 0x080000, CRC(8788b939) SHA1(30932057f763545568526f85977aa0afc4b66e7d) )
@@ -3133,7 +3133,7 @@
 	ROM_FILL( 0x000000, 0x80000, 0 )
 ROM_END
 
-ROM_START( vs298 )	/* Step 2.0 */
+ROM_START( vs298 )	/* Step 2.0, Sega ID# 833-13346, ROM board ID# 834-13347 */
 	ROM_REGION64_BE( 0x4800000, "user1", 0 ) /* program + data ROMs */
 	// CROM
 	ROM_LOAD64_WORD_SWAP( "epr-20917.17",  0x400006, 0x100000, CRC(c3bbb270) SHA1(16b2342031ff72408f2290e775df5c8aa344c2e4) )
@@ -4656,7 +4656,7 @@
 	ROM_FILL( 0x000000, 0x80000, 0 )
 ROM_END
 
-ROM_START( spikeofe )	/* Step 2.1, Sega game ID# is 834-13747 */
+ROM_START( spikeofe )	/* Step 2.1, Sega game ID# is 833-13746, ROM board ID# 834-13747 SPK F/E */
 	ROM_REGION64_BE( 0x8800000, "user1", 0 ) /* program + data ROMs */
 	// CROM
 	ROM_LOAD64_WORD_SWAP( "epr-21653.17", 0x000006, 0x200000, CRC(f4bd9c3c) SHA1(de509c25226939d7a9c1b402ab6923844c12314e) )
@@ -5786,8 +5786,8 @@
 /* Model 3 Step 2.1 */
 GAME( 1998, daytona2,         0, model3_21, daytona2, daytona2, ROT0, "Sega", "Daytona USA 2 (Revision A)", GAME_NOT_WORKING | GAME_IMPERFECT_GRAPHICS | GAME_IMPERFECT_SOUND )
 GAME( 1998, dayto2pe,         0, model3_21, daytona2, dayto2pe, ROT0, "Sega", "Daytona USA 2 Power Edition", GAME_NOT_WORKING | GAME_IMPERFECT_GRAPHICS | GAME_IMPERFECT_SOUND )
-GAME( 1998, dirtdvls,         0, model3_21, model3,   dirtdvls, ROT0, "Sega", "Dirt Devils (Revision A)", GAME_NOT_WORKING | GAME_IMPERFECT_GRAPHICS | GAME_IMPERFECT_SOUND )
-GAME( 1998, dirtdvlsa, dirtdvls, model3_21, model3,   dirtdvls, ROT0, "Sega", "Dirt Devils (alt) (Revision A)", GAME_NOT_WORKING | GAME_IMPERFECT_GRAPHICS | GAME_IMPERFECT_SOUND )
+GAME( 1998, dirtdvls,         0, model3_21, model3,   dirtdvls, ROT0, "Sega", "Dirt Devils (set 1) (Revision A)", GAME_NOT_WORKING | GAME_IMPERFECT_GRAPHICS | GAME_IMPERFECT_SOUND )
+GAME( 1998, dirtdvlsa, dirtdvls, model3_21, model3,   dirtdvls, ROT0, "Sega", "Dirt Devils (set 2) (Revision A)", GAME_NOT_WORKING | GAME_IMPERFECT_GRAPHICS | GAME_IMPERFECT_SOUND )
 GAME( 1998, swtrilgy,         0, model3_21, swtrilgy, swtrilgy, ROT0, "Sega / LucasArts", "Star Wars Trilogy (Revision A)", GAME_NOT_WORKING | GAME_IMPERFECT_GRAPHICS | GAME_IMPERFECT_SOUND )
 GAME( 1998, swtrilgya, swtrilgy, model3_21, swtrilgy, swtrilga, ROT0, "Sega / LucasArts", "Star Wars Trilogy", GAME_NOT_WORKING | GAME_IMPERFECT_GRAPHICS | GAME_IMPERFECT_SOUND )
 GAME( 1998, spikeout,         0, model3_21, model3,   spikeout, ROT0, "Sega", "Spikeout (Revision C)", GAME_NOT_WORKING | GAME_IMPERFECT_GRAPHICS | GAME_IMPERFECT_SOUND )
diff -Nru src-old/mame/drivers/mrgame.c src/mame/drivers/mrgame.c
--- src-old/mame/drivers/mrgame.c	2011-12-23 19:29:55.000000000 +0100
+++ src/mame/drivers/mrgame.c	2012-03-15 07:40:01.000000000 +0100
@@ -169,7 +169,7 @@
 
 
 GAME(1988,  dakar,     0,         mrgame,  mrgame,  mrgame,  ROT0,  "Mr Game",    "Dakar",                      GAME_IS_SKELETON_MECHANICAL)
-GAME(1988,  motrshow,  0,         mrgame,  mrgame,  mrgame,  ROT0,  "Mr Game",    "Motor Show",                 GAME_IS_SKELETON_MECHANICAL)
-GAME(1988,  motrshowa, motrshow,  mrgame,  mrgame,  mrgame,  ROT0,  "Mr Game",    "Motor Show (alternate set)", GAME_IS_SKELETON_MECHANICAL)
+GAME(1988,  motrshow,  0,         mrgame,  mrgame,  mrgame,  ROT0,  "Mr Game",    "Motor Show (set 1)",         GAME_IS_SKELETON_MECHANICAL)
+GAME(1988,  motrshowa, motrshow,  mrgame,  mrgame,  mrgame,  ROT0,  "Mr Game",    "Motor Show (set 2)",         GAME_IS_SKELETON_MECHANICAL)
 GAME(1990,  macattck,  0,         mrgame,  mrgame,  mrgame,  ROT0,  "Mr Game",    "Mac Attack",                 GAME_IS_SKELETON_MECHANICAL)
 GAME(1990,  wcup90,    0,         mrgame,  mrgame,  mrgame,  ROT0,  "Mr Game",    "World Cup 90",               GAME_IS_SKELETON_MECHANICAL)
diff -Nru src-old/mame/drivers/naomi.c src/mame/drivers/naomi.c
--- src-old/mame/drivers/naomi.c	2012-03-11 19:17:00.000000000 +0100
+++ src/mame/drivers/naomi.c	2012-03-25 03:49:32.000000000 +0200
@@ -5903,7 +5903,7 @@
 	ROM_LOAD("gundmgd-default-eeprom.bin", 0, 0x80, CRC(dc80fa1e) SHA1(5a412576b9fd4899ab0c11f93257600a5eb8b994))
 
 	DISK_REGION( "gdrom" )
-	DISK_IMAGE_READONLY( "gdl-0001", 0, SHA1(615e19c22f32096f3aad557019a14313b60a4070) )
+	DISK_IMAGE_READONLY( "gdl-0001", 0, BAD_DUMP SHA1(615e19c22f32096f3aad557019a14313b60a4070) )
 
 	ROM_REGION( 0x4000, "pic", ROMREGION_ERASEFF)
 	//PIC16C622A (317-5069-COM)
@@ -5921,7 +5921,7 @@
 	ROM_LOAD("sfz3ugd-default-eeprom.bin", 0, 0x80, CRC(699dd01b) SHA1(1a1e6fd1e47ed58a2afbf7f632fccf72a4708531))
 
 	DISK_REGION( "gdrom" )
-	DISK_IMAGE_READONLY( "gdl-0002", 0, SHA1(af4669fdd7ce8e6ec4a170748d401e322a3d7ae8) )
+	DISK_IMAGE_READONLY( "gdl-0002", 0, BAD_DUMP SHA1(af4669fdd7ce8e6ec4a170748d401e322a3d7ae8) )
 
 	ROM_REGION( 0x4000, "pic", ROMREGION_ERASEFF)
 	//PIC16C622A (317-5072-COM)
@@ -5935,7 +5935,7 @@
 	NAOMI_DEFAULT_EEPROM
 
 	DISK_REGION( "gdrom" )
-	DISK_IMAGE_READONLY( "gdl-0004", 0,  SHA1(7a7fba0fbbc769c5120b08e6d692f1ac63a42225) )
+	DISK_IMAGE_READONLY( "gdl-0004", 0, BAD_DUMP  SHA1(7a7fba0fbbc769c5120b08e6d692f1ac63a42225) )
 
 	ROM_REGION( 0x4000, "pic", ROMREGION_ERASEFF)
 	//PIC16C622A (317-5076-JPN)
@@ -5949,7 +5949,7 @@
 	NAOMI_DEFAULT_EEPROM
 
 	DISK_REGION( "gdrom" )
-	DISK_IMAGE_READONLY( "gdl-0005", 0, SHA1(f5513c88528741798ee49f936b9b69480360f103) )
+	DISK_IMAGE_READONLY( "gdl-0005", 0, BAD_DUMP SHA1(f5513c88528741798ee49f936b9b69480360f103) )
 
 	ROM_REGION( 0x4000, "pic", ROMREGION_ERASEFF)
     //PIC16C621A-20 (317-5077-JPN)
@@ -5966,7 +5966,7 @@
 	ROM_LOAD("gundmxgd-default-eeprom.bin", 0, 0x80, CRC(dc0e8d45) SHA1(4088d25fdf7399552882b9656b66dff2345c376e))
 
 	DISK_REGION( "gdrom" )
-	DISK_IMAGE_READONLY( "gdl-0006", 0, SHA1(b28d6598711b5a9c744bbf07ad03fc60962d2e28) )
+	DISK_IMAGE_READONLY( "gdl-0006", 0, BAD_DUMP SHA1(b28d6598711b5a9c744bbf07ad03fc60962d2e28) )
 
 	ROM_REGION( 0x4000, "pic", ROMREGION_ERASEFF)
 	//PIC16C622A (317-5079-COM)
@@ -5980,7 +5980,7 @@
 	NAOMI_DEFAULT_EEPROM
 
 	DISK_REGION( "gdrom" )
-	DISK_IMAGE_READONLY( "gdl-0007a", 0, SHA1(56510390667b39b3915d8bc078660cbe093cf566) )
+	DISK_IMAGE_READONLY( "gdl-0007a", 0, BAD_DUMP SHA1(56510390667b39b3915d8bc078660cbe093cf566) )
 
 	ROM_REGION( 0x4000, "pic", ROMREGION_ERASEFF)
 	//PIC16C622A (317-5078-COM)
@@ -5994,7 +5994,7 @@
 	NAOMI_DEFAULT_EEPROM
 
 	DISK_REGION( "gdrom" )
-	DISK_IMAGE_READONLY( "gdl-0010", 0, SHA1(65dcc22dd9e9b70975096464ad8e31a4a73dc5fd) )
+	DISK_IMAGE_READONLY( "gdl-0010", 0, BAD_DUMP SHA1(65dcc22dd9e9b70975096464ad8e31a4a73dc5fd) )
 
 	ROM_REGION( 0x4000, "pic", ROMREGION_ERASEFF)
 	//PIC16C622A (317-5081-JPN)
@@ -6008,7 +6008,7 @@
 	NAOMI_DEFAULT_EEPROM
 
 	DISK_REGION( "gdrom" )
-	DISK_IMAGE_READONLY( "gdl-0011", 0, SHA1(b7328eb2c588d55284bdcea0fe89bb8e629a8669) )
+	DISK_IMAGE_READONLY( "gdl-0011", 0, BAD_DUMP SHA1(b7328eb2c588d55284bdcea0fe89bb8e629a8669) )
 
 	ROM_REGION( 0x4000, "pic", ROMREGION_ERASEFF)
 	//PIC16C622A (317-5082-COM)
@@ -6022,7 +6022,7 @@
 	NAOMI_DEFAULT_EEPROM
 
 	DISK_REGION( "gdrom" )
-	DISK_IMAGE_READONLY( "gdl-0012", 0, SHA1(aae4c1321fdee37d5405c6cbe648e0596624ed13) )
+	DISK_IMAGE_READONLY( "gdl-0012", 0, BAD_DUMP SHA1(aae4c1321fdee37d5405c6cbe648e0596624ed13) )
 
 	ROM_REGION( 0x4000, "pic", ROMREGION_ERASEFF)
 	//PIC16C622A (317-5083-COM)
@@ -6039,7 +6039,7 @@
 	ROM_LOAD("moeru-default-eeprom.bin", 0, 0x80, CRC(50ca079f) SHA1(788a399017b94d9d1a981ea703af0d4a178dadb6))
 
 	DISK_REGION( "gdrom" )
-	DISK_IMAGE_READONLY( "gdl-0013", 0, SHA1(c8869069c28bc8eec96d820886bc388d69d46143) )
+	DISK_IMAGE_READONLY( "gdl-0013", 0, BAD_DUMP SHA1(c8869069c28bc8eec96d820886bc388d69d46143) )
 
 	ROM_REGION( 0x4000, "pic", ROMREGION_ERASEFF)
 	//PIC16C622A (317-5084-JPN)
@@ -6053,7 +6053,7 @@
 	NAOMI_DEFAULT_EEPROM
 
 	DISK_REGION( "gdrom" )
-	DISK_IMAGE_READONLY( "gdl-0014a", 0, SHA1(f88d8203c8692f51c9492d5549a3ad7d9583dc6f) )
+	DISK_IMAGE_READONLY( "gdl-0014a", 0, BAD_DUMP SHA1(f88d8203c8692f51c9492d5549a3ad7d9583dc6f) )
 
 	ROM_REGION( 0x4000, "pic", ROMREGION_ERASEFF)
 	//PIC16C622A (317-5085-JPN)
@@ -6070,7 +6070,7 @@
 	ROM_LOAD("quizqgd-default-eeprom.bin", 0, 0x80, CRC(46c10aa3) SHA1(0a082243399a45c1c9d757f59ed660b3b7a9730d))
 
 	DISK_REGION( "gdrom" )
-	DISK_IMAGE_READONLY( "gdl-0017", 0, SHA1(94a9319633388968611892e36691b45c94b4f83f) )
+	DISK_IMAGE_READONLY( "gdl-0017", 0, BAD_DUMP SHA1(94a9319633388968611892e36691b45c94b4f83f) )
 
 	ROM_REGION( 0x4000, "pic", ROMREGION_ERASEFF)
 	//PIC16C622A (317-5090-JPN)
@@ -6083,7 +6083,7 @@
 	NAOMI_DEFAULT_EEPROM
 
 	DISK_REGION( "gdrom" )
-	DISK_IMAGE_READONLY( "gdl-0018", 0, SHA1(3e40ca7d43173fe7048d199fdc127b9411e10360) )
+	DISK_IMAGE_READONLY( "gdl-0018", 0, BAD_DUMP SHA1(3e40ca7d43173fe7048d199fdc127b9411e10360) )
 
 	ROM_REGION( 0x50, "pic", ROMREGION_ERASE)
 	//PIC16C622A (317-5091-JPN)
@@ -6096,7 +6096,7 @@
 	NAOMI_DEFAULT_EEPROM
 
 	DISK_REGION( "gdrom" )
-	DISK_IMAGE_READONLY( "gdl-0019a", 0, SHA1(d44906505ff698eda6feee6c2b9402e19f64e5d3) )
+	DISK_IMAGE_READONLY( "gdl-0019a", 0, BAD_DUMP SHA1(d44906505ff698eda6feee6c2b9402e19f64e5d3) )
 
 	ROM_REGION( 0x4000, "pic", ROMREGION_ERASEFF)
 	//PIC16C622A (317-5092-JPN)
@@ -6113,7 +6113,7 @@
 	ROM_LOAD("tetkiwam-default-eeprom.bin", 0, 0x80, CRC(843f2a99) SHA1(6615f5f27e76a71f7415f972bbcdf6570b0e953a))
 
 	DISK_REGION( "gdrom" )
-	DISK_IMAGE_READONLY( "gdl-0020", 0, SHA1(7b2ef47ca2038d6a93615b760b03e8f7cb1b83c2) )
+	DISK_IMAGE_READONLY( "gdl-0020", 0, BAD_DUMP SHA1(7b2ef47ca2038d6a93615b760b03e8f7cb1b83c2) )
 
 	ROM_REGION( 0x4000, "pic", ROMREGION_ERASEFF)
 	//PIC16C622A (317-5093-JPN)
@@ -6130,7 +6130,7 @@
 	ROM_LOAD("shikgam2-default-eeprom.bin", 0, 0x80, CRC(5fb60e27) SHA1(a64242083a718f0a4b1d2e4707f5eb7480265719))
 
 	DISK_REGION( "gdrom" )
-	DISK_IMAGE_READONLY( "gdl-0021", 0, SHA1(f5036711a28a211e8d71400a8322db3172c5733f) )
+	DISK_IMAGE_READONLY( "gdl-0021", 0, BAD_DUMP SHA1(f5036711a28a211e8d71400a8322db3172c5733f) )
 
 	ROM_REGION( 0x4000, "pic", ROMREGION_ERASEFF)
 	//PIC16C622A (317-5095-JPN)
@@ -6147,7 +6147,7 @@
 	ROM_LOAD("usagiym-default-eeprom.bin", 0, 0x80, CRC(1fbdf0ca) SHA1(5854c693b7d6451cefeb737109aeaf64751fc4f7))
 
 	DISK_REGION( "gdrom" )
-	DISK_IMAGE_READONLY( "gdl-0022", 0, SHA1(45deba05a12abbf6390c0fc0e4cdeaedfa7d2ca5) )
+	DISK_IMAGE_READONLY( "gdl-0022", 0, BAD_DUMP SHA1(45deba05a12abbf6390c0fc0e4cdeaedfa7d2ca5) )
 
 	ROM_REGION( 0x4000, "pic", ROMREGION_ERASEFF)
 	//PIC16C622A (317-5096-JPN)
@@ -6164,7 +6164,7 @@
 	ROM_LOAD("bdrdown-default-eeprom.bin", 0, 0x80, CRC(5b19727c) SHA1(1dd9c721d58e4542d04afe17baa77980d0ed8b6a))
 
 	DISK_REGION( "gdrom" )
-	DISK_IMAGE_READONLY( "gdl-0023a", 0, SHA1(caac915104d61f2122f5afe27da1ef5fa9cf9f9a) )
+	DISK_IMAGE_READONLY( "gdl-0023a", 0, BAD_DUMP SHA1(caac915104d61f2122f5afe27da1ef5fa9cf9f9a) )
 
 	ROM_REGION( 0x4000, "pic", ROMREGION_ERASEFF)
 	//PIC16C622A (317-5097-JPN)
@@ -6182,7 +6182,7 @@
 	ROM_LOAD("psyvar2-default-eeprom.bin", 0, 0x80, CRC(9d8661f3) SHA1(c696277a7b488bee6ddb33a1d5345a85c1567cbe))
 
 	DISK_REGION( "gdrom" )
-	DISK_IMAGE_READONLY( "gdl-0024", 0,  SHA1(d346762036fb1c40a261a434b50e63459f306f14) )
+	DISK_IMAGE_READONLY( "gdl-0024", 0,  BAD_DUMP SHA1(d346762036fb1c40a261a434b50e63459f306f14) )
 
 	ROM_REGION( 0x4000, "pic", ROMREGION_ERASEFF)
 	//PIC16C621A (317-5100-JPN)
@@ -6199,7 +6199,7 @@
 	ROM_LOAD("cfield-default-eeprom.bin", 0, 0x80, CRC(a7acb6bf) SHA1(5aae6366bfb3ee3120da405abb93e2007cd94683))
 
 	DISK_REGION( "gdrom" )
-	DISK_IMAGE_READONLY( "gdl-0025", 0, SHA1(be0d88eb4f48403a2ceaa7ef588ed60b96ba93bf) )
+	DISK_IMAGE_READONLY( "gdl-0025", 0, BAD_DUMP SHA1(be0d88eb4f48403a2ceaa7ef588ed60b96ba93bf) )
 
 	ROM_REGION( 0x4000, "pic", ROMREGION_ERASEFF)
 	//PIC16C621A (317-5102-COM)
@@ -6216,7 +6216,7 @@
 	ROM_LOAD("trizeal-default-eeprom.bin", 0, 0x80, CRC(ac0847ce) SHA1(ec12a6bbf074bf3bfe2e9bfe2855b7bd7e699f3c))
 
 	DISK_REGION( "gdrom" )
-	DISK_IMAGE_READONLY( "gdl-0026", 0, SHA1(e4c1e51292a7923b25bfc61d38fe386bf596002a) )
+	DISK_IMAGE_READONLY( "gdl-0026", 0, BAD_DUMP SHA1(e4c1e51292a7923b25bfc61d38fe386bf596002a) )
 
 	ROM_REGION( 0x4000, "pic", ROMREGION_ERASEFF)
 	//PIC16C621A (317-5103-JPN)
@@ -6230,7 +6230,7 @@
 	NAOMI_DEFAULT_EEPROM
 
 	DISK_REGION( "gdrom" )
-	DISK_IMAGE_READONLY( "gdl-0028c", 0, SHA1(66de09738551e351784cc9695a58b35fdf6b6c4b) )
+	DISK_IMAGE_READONLY( "gdl-0028c", 0, BAD_DUMP SHA1(66de09738551e351784cc9695a58b35fdf6b6c4b) )
 
 	ROM_REGION( 0x4000, "pic", ROMREGION_ERASEFF)
 	//PIC16C622A (317-5104-JPN)
@@ -6247,7 +6247,7 @@
 	ROM_LOAD("senko-default-eeprom.bin", 0, 0x80, CRC(b3d3be09) SHA1(55af4f6e35f82f683682bf731d3070bc275d6e57))
 
 	DISK_REGION( "gdrom" )
-	DISK_IMAGE_READONLY( "gdl-0030a", 0,  SHA1(1f7ade47e37a0026451b5baf3ba746400de8d156) )
+	DISK_IMAGE_READONLY( "gdl-0030a", 0, BAD_DUMP  SHA1(1f7ade47e37a0026451b5baf3ba746400de8d156) )
 
 	ROM_REGION( 0x4000, "pic", ROMREGION_ERASEFF)
 	//PIC16C622A (317-5107-JPN)
@@ -6263,7 +6263,7 @@
 	ROM_LOAD("senkoo-default-eeprom.bin", 0, 0x80, CRC(a2203a7f) SHA1(2a3a52667b9c8e0c9b4e4003b7c6965cd4de11f3))
 
 	DISK_REGION( "gdrom" )
-	DISK_IMAGE_READONLY( "gdl-0030", 0,  SHA1(c7f25c05f47a490c5da9369c588b6136e93c280e) )
+	DISK_IMAGE_READONLY( "gdl-0030", 0, BAD_DUMP  SHA1(c7f25c05f47a490c5da9369c588b6136e93c280e) )
 
 	ROM_REGION( 0x4000, "pic", ROMREGION_ERASEFF)
 	//PIC16C622A (317-5107-JPN)
@@ -6280,7 +6280,7 @@
 	ROM_LOAD("ss2005-default-eeprom.bin", 0, 0x80, CRC(26bd9003) SHA1(f35551c96c49eef5473ff50a94b82ef5110b0f10))
 
 	DISK_REGION( "gdrom" )
-	DISK_IMAGE_READONLY( "gdl-0031", 0, SHA1(83697f45f0ffbb964f0504b19171c554499cd709) )
+	DISK_IMAGE_READONLY( "gdl-0031", 0, BAD_DUMP SHA1(83697f45f0ffbb964f0504b19171c554499cd709) )
 
 	ROM_REGION( 0x4000, "pic", ROMREGION_ERASEFF)
 	//PIC16C622A (317-5108-JPN)
@@ -6294,7 +6294,7 @@
 	NAOMI_DEFAULT_EEPROM
 
 	DISK_REGION( "gdrom" )
-	DISK_IMAGE_READONLY( "gdl-0031a", 0, SHA1(6091525845fc2042ed43cae5a1b60c603e16cf97) )
+	DISK_IMAGE_READONLY( "gdl-0031a", 0,BAD_DUMP  SHA1(6091525845fc2042ed43cae5a1b60c603e16cf97) )
 
 	ROM_REGION( 0x4000, "pic", ROMREGION_ERASEFF)
 	//PIC16C622A (317-5108-JPN)
@@ -6311,7 +6311,7 @@
 	ROM_LOAD("radirgy-default-eeprom.bin", 0, 0x80, CRC(8d60a282) SHA1(6d81dec88a1ade45e1edf2bdb3683c6cd0651eeb))
 
 	DISK_REGION( "gdrom" )
-	DISK_IMAGE_READONLY( "gdl-0032", 0, SHA1(ebd7a40e59082e660ebf9a2d4ae7cb64371dae8d) )
+	DISK_IMAGE_READONLY( "gdl-0032", 0, BAD_DUMP SHA1(ebd7a40e59082e660ebf9a2d4ae7cb64371dae8d) )
 
 	ROM_REGION( 0x4000, "pic", ROMREGION_ERASEFF)
 	//PIC16C621A (317-5110-JPN)
@@ -6325,7 +6325,7 @@
 	NAOMI_DEFAULT_EEPROM
 
 	DISK_REGION( "gdrom" )
-	DISK_IMAGE_READONLY( "gdl-0033a", 0, SHA1(29de69ae97a9099b1bbe936dfa965bb4a3195f68) )
+	DISK_IMAGE_READONLY( "gdl-0033a", 0, BAD_DUMP SHA1(29de69ae97a9099b1bbe936dfa965bb4a3195f68) )
 
 	ROM_REGION( 0x4000, "pic", ROMREGION_ERASEFF)
 	//PIC16C621A (317-5111-JPN)
@@ -6339,7 +6339,7 @@
 	NAOMI_DEFAULT_EEPROM
 
 	DISK_REGION( "gdrom" )
-	DISK_IMAGE_READONLY( "gdl-0034", 0, SHA1(10fd7edb0b620133c003d686e5af2ed27004fa09) )
+	DISK_IMAGE_READONLY( "gdl-0034", 0, BAD_DUMP SHA1(10fd7edb0b620133c003d686e5af2ed27004fa09) )
 
 	ROM_REGION( 0x4000, "pic", ROMREGION_ERASEFF)
 	//PIC16C621A (317-5115-JPN)
@@ -6373,7 +6373,7 @@
 	ROM_LOAD("trgheart-default-eeprom.bin", 0, 0x80, CRC(7faff313) SHA1(1bc25e4595ef050e82eb820842ba6ccd63b6703e))
 
 	DISK_REGION( "gdrom" )
-	DISK_IMAGE_READONLY( "gdl-0036a", 0, SHA1(91f1e19136997cb1e2edfb1ad342b9427d1d3bfb) )
+	DISK_IMAGE_READONLY( "gdl-0036a", 0, BAD_DUMP SHA1(91f1e19136997cb1e2edfb1ad342b9427d1d3bfb) )
 
 	ROM_REGION( 0x4000, "pic", ROMREGION_ERASEFF)
 	//PIC16C622A (317-5121-JPN)
@@ -6401,7 +6401,7 @@
 	NAOMI_DEFAULT_EEPROM
 
 	DISK_REGION( "gdrom" )
-	DISK_IMAGE_READONLY( "gdl-0038", 0, SHA1(430572f7e76c4fe009e2de91bf891d85613366b7) )
+	DISK_IMAGE_READONLY( "gdl-0038", 0, BAD_DUMP SHA1(430572f7e76c4fe009e2de91bf891d85613366b7) )
 
 	ROM_REGION( 0x4000, "pic", ROMREGION_ERASEFF)
 	//PIC16C622A (317-5123-COM)
@@ -6415,7 +6415,7 @@
 	NAOMI_DEFAULT_EEPROM
 
 	DISK_REGION( "gdrom" )
-	DISK_IMAGE_READONLY( "gdl-0039", 0, SHA1(ffc7f6e113ad69422a4f22f318bdf9b1dc5c25db) )
+	DISK_IMAGE_READONLY( "gdl-0039", 0, BAD_DUMP SHA1(ffc7f6e113ad69422a4f22f318bdf9b1dc5c25db) )
 
 	ROM_REGION( 0x4000, "pic", ROMREGION_ERASEFF)
 	//PIC16C622A (317-5124-JPN)
@@ -6428,7 +6428,7 @@
 	NAOMI_DEFAULT_EEPROM
 
 	DISK_REGION( "gdrom" )
-	DISK_IMAGE_READONLY( "gdl-0039a", 0, SHA1(e6aa3d65b43a20606e6754bcb8665438770a1f8c) )
+	DISK_IMAGE_READONLY( "gdl-0039a", 0, BAD_DUMP SHA1(e6aa3d65b43a20606e6754bcb8665438770a1f8c) )
 
 	ROM_REGION( 0x4000, "pic", ROMREGION_ERASEFF)
 	//PIC16C622A (317-5124-JPN)
@@ -6445,7 +6445,7 @@
 	ROM_LOAD("karous-default-eeprom.bin", 0, 0x80, CRC(b017451c) SHA1(a16d8e2cde8ebe0e2dd6d0b5c027bcdff56a809b))
 
 	DISK_REGION( "gdrom" )
-	DISK_IMAGE_READONLY( "gdl-0040", 0, SHA1(a62c8d4b6c5be44a4aeeea1a1a94f3d0fe542593) )
+	DISK_IMAGE_READONLY( "gdl-0040", 0, BAD_DUMP SHA1(a62c8d4b6c5be44a4aeeea1a1a94f3d0fe542593) )
 
 	ROM_REGION( 0x4000, "pic", ROMREGION_ERASEFF)
 	//PIC16C621A (317-5125-COM)
@@ -6480,7 +6480,7 @@
 	NAOMI_DEFAULT_EEPROM
 
 	DISK_REGION( "gdrom" )
-	DISK_IMAGE_READONLY( "gdl-0041", 0, SHA1(3a589e1c79ead971c821a7566032b0187e339684) )
+	DISK_IMAGE_READONLY( "gdl-0041", 0, BAD_DUMP SHA1(3a589e1c79ead971c821a7566032b0187e339684) )
 
 	ROM_REGION( 0x4000, "pic", ROMREGION_ERASEFF)
 	//PIC16C621A (317-5126-JPN)
@@ -6494,7 +6494,7 @@
 	NAOMI_DEFAULT_EEPROM
 
 	DISK_REGION( "gdrom" )
-	DISK_IMAGE_READONLY( "gdl-0042", 0, SHA1(984a4fa012d83dd8c748304958c847c9867f4125) )
+	DISK_IMAGE_READONLY( "gdl-0042", 0, BAD_DUMP SHA1(984a4fa012d83dd8c748304958c847c9867f4125) )
 
 	ROM_REGION( 0x4000, "pic", ROMREGION_ERASEFF)
 	//PIC16C621A (317-5127-JPN)
@@ -6531,7 +6531,7 @@
 	NAOMI_DEFAULT_EEPROM
 
 	DISK_REGION( "gdrom" )
-	DISK_IMAGE_READONLY( "gds-0001", 0, SHA1(bd05f197ba8643577883dd25d9d5a74c91b27ca9) )
+	DISK_IMAGE_READONLY( "gds-0001", 0, BAD_DUMP SHA1(bd05f197ba8643577883dd25d9d5a74c91b27ca9) )
 
 	ROM_REGION( 0x4000, "pic", ROMREGION_ERASEFF)
 	ROM_LOAD("317-0298-com.pic", 0x00, 0x4000, CRC(15971bf6) SHA1(815152ab05edb1789a26898cfd66b5a7c4a1f765) )
@@ -6560,7 +6560,7 @@
 	NAOMI_DEFAULT_EEPROM
 
 	DISK_REGION( "gdrom" )
-	DISK_IMAGE_READONLY( "gds-0016", 0, SHA1(59bac62db4a536c63fec3464c665e00633fcf1a3) )
+	DISK_IMAGE_READONLY( "gds-0016", 0, BAD_DUMP SHA1(59bac62db4a536c63fec3464c665e00633fcf1a3) )
 
 	ROM_REGION( 0x4000, "pic", ROMREGION_ERASEFF)
 	ROM_LOAD( "317-0321-com.pic", 0x000000, 0x004000, CRC(81519e71) SHA1(a30d25f81c77384ed26faa67c942802f2f3d7817) )
@@ -6571,7 +6571,7 @@
 	NAOMI_DEFAULT_EEPROM
 
 	DISK_REGION( "gdrom" )
-	DISK_IMAGE_READONLY( "gds-0003", 0, SHA1(caaba214c1faca78b3370bcd4190eb2853d7f825) )
+	DISK_IMAGE_READONLY( "gds-0003", 0, BAD_DUMP SHA1(caaba214c1faca78b3370bcd4190eb2853d7f825) )
 
 	//PIC16C622A (317-0300-COM)
 	//(sticker 253-5508-0300)
@@ -6587,7 +6587,7 @@
 	NAOMI_DEFAULT_EEPROM
 
 	DISK_REGION( "gdrom" )
-	DISK_IMAGE_READONLY( "gds-0004", 0, SHA1(3cce788393ed194ba9b603f9896ff893691d6b00) )
+	DISK_IMAGE_READONLY( "gds-0004", 0, BAD_DUMP SHA1(3cce788393ed194ba9b603f9896ff893691d6b00) )
 
 	ROM_REGION( 0x4000, "pic", ROMREGION_ERASEFF)
 	//PIC16C622A (317-0302-COM)
@@ -6601,7 +6601,7 @@
 	NAOMI_DEFAULT_EEPROM
 
 	DISK_REGION( "gdrom" )
-	DISK_IMAGE_READONLY( "gds-0005", 0, SHA1(d1c3fb2350e4a89372373e7f629c42b741af29b3) )
+	DISK_IMAGE_READONLY( "gds-0005", 0, BAD_DUMP SHA1(d1c3fb2350e4a89372373e7f629c42b741af29b3) )
 
 	ROM_REGION( 0x4000, "pic", ROMREGION_ERASEFF)
 	//PIC16C622A (317-0303-COM)
@@ -6636,7 +6636,7 @@
 	NAOMI_DEFAULT_EEPROM
 
 	DISK_REGION( "gdrom" )
-	DISK_IMAGE_READONLY( "gds-0008", 0, SHA1(2fadcd141bdbde77b2b335b270959a516af44d99) )
+	DISK_IMAGE_READONLY( "gds-0008", 0, BAD_DUMP SHA1(2fadcd141bdbde77b2b335b270959a516af44d99) )
 
 	ROM_REGION( 0x4000, "pic", ROMREGION_ERASEFF)
 	ROM_LOAD("317-0307-com.pic", 0x00, 0x4000, CRC(4046de19) SHA1(8adda9f223e926148b36744bbbaa89557544a229) )
@@ -6679,7 +6679,7 @@
 	ROM_LOAD("epr-22084.ic3", 0x0000, 0x10000, CRC(18cf58bb) SHA1(1494f8215231929e41bbe2a133658d01882fbb0f) )
 
 	DISK_REGION( "gdrom" )
-	DISK_IMAGE_READONLY( "gds-0009a", 0, SHA1(d502155ddaf881c2c9505528004b9904aa32a59c) )
+	DISK_IMAGE_READONLY( "gds-0009a", 0, BAD_DUMP SHA1(d502155ddaf881c2c9505528004b9904aa32a59c) )
 
 	ROM_REGION( 0x4000, "pic", ROMREGION_ERASEFF)
 	//PIC16C622A (317-0308-COM)
@@ -6693,7 +6693,7 @@
 	NAOMI_DEFAULT_EEPROM
 
 	DISK_REGION( "gdrom" )
-	DISK_IMAGE_READONLY( "gds-0010", 0,  SHA1(c3135ede3a8bdadab91aed49abacbfbde8037069) )
+	DISK_IMAGE_READONLY( "gds-0010", 0,  BAD_DUMP SHA1(c3135ede3a8bdadab91aed49abacbfbde8037069) )
 
 	ROM_REGION( 0x4000, "pic", ROMREGION_ERASEFF)
 	//PIC16C622A (317-0309-COM)
@@ -6707,7 +6707,7 @@
 	NAOMI_DEFAULT_EEPROM
 
 	DISK_REGION( "gdrom" )
-	DISK_IMAGE_READONLY( "gds-0011", 0,  SHA1(b778403d73c8cdd13383691c9be2094ddfc1ba84) )
+	DISK_IMAGE_READONLY( "gds-0011", 0,  BAD_DUMP SHA1(b778403d73c8cdd13383691c9be2094ddfc1ba84) )
 
 	ROM_REGION( 0x4000, "pic", ROMREGION_ERASEFF)
 	//PIC16C621A (317-0312-COM)
@@ -6723,7 +6723,7 @@
 	ROM_LOAD("keyboard-default-eeprom.bin", 0, 0x80, CRC(9262fc90) SHA1(6080c029967932cace361d673bf04c805276a7de))
 
 	DISK_REGION( "gdrom" )
-	DISK_IMAGE_READONLY( "gds-0017", 0, SHA1(fb86eff3ef38de7fd78cfde897d5332d2092c172) )
+	DISK_IMAGE_READONLY( "gds-0017", 0, BAD_DUMP SHA1(fb86eff3ef38de7fd78cfde897d5332d2092c172) )
 
 	ROM_REGION( 0x4000, "pic", ROMREGION_ERASEFF)
 	ROM_LOAD("317-0323-com.pic", 0x00, 0x4000, CRC(c8854ef2) SHA1(b43b956df142fe4167dcc2ec805921e25bba180f) )
@@ -6736,7 +6736,7 @@
 	NAOMI_DEFAULT_EEPROM
 
 	DISK_REGION( "gdrom" )
-	DISK_IMAGE_READONLY( "gds-0019", 0, SHA1(955d3c0cb991be3057138c562cff69c5ef887787) )
+	DISK_IMAGE_READONLY( "gds-0019", 0, BAD_DUMP SHA1(955d3c0cb991be3057138c562cff69c5ef887787) )
 
 	ROM_REGION( 0x4000, "pic", ROMREGION_ERASEFF)
 	//PIC16C622A (317-0330-COM)
@@ -6773,7 +6773,7 @@
 	NAOMI_DEFAULT_EEPROM
 
 	DISK_REGION( "gdrom" )
-	DISK_IMAGE_READONLY( "gds-0015a", 0, SHA1(c6e9c9901bd4f075454b7f18baf08df81bc2f1ad) )
+	DISK_IMAGE_READONLY( "gds-0015a", 0, BAD_DUMP SHA1(c6e9c9901bd4f075454b7f18baf08df81bc2f1ad) )
 
 	ROM_REGION( 0x4000, "pic", ROMREGION_ERASEFF)
 	ROM_LOAD("317-0318-exp.pic", 0x00, 0x4000, CRC(83de4047) SHA1(1808ac0d8353b92296de37f98b490a42a0e141cf) )
@@ -6786,7 +6786,7 @@
 	NAOMI_DEFAULT_EEPROM
 
 	DISK_REGION( "gdrom" )
-	DISK_IMAGE_READONLY( "gds-0018", 0, SHA1(0633a99a666f363ab30450a76b9753685d6b1f57) )
+	DISK_IMAGE_READONLY( "gds-0018", 0, BAD_DUMP SHA1(0633a99a666f363ab30450a76b9753685d6b1f57) )
 
 	ROM_REGION( 0x4000, "pic", ROMREGION_ERASEFF)
 	ROM_LOAD("317-0332-j.pic", 0x00, 0x4000, CRC(f71cb2fc) SHA1(281b3b3b03edf9a39e380976de528b7c9674de53) )
@@ -6798,7 +6798,7 @@
 	NAOMI_DEFAULT_EEPROM
 
 	DISK_REGION( "gdrom" )
-	DISK_IMAGE_READONLY( "gds-0021a", 0,  SHA1(15c6f9434494a31693cbb8e33da36e0e8a8f7c62) )
+	DISK_IMAGE_READONLY( "gds-0021a", 0, BAD_DUMP  SHA1(15c6f9434494a31693cbb8e33da36e0e8a8f7c62) )
 
 	ROM_REGION( 0x4000, "pic", ROMREGION_ERASEFF)
 	//PIC16C622A (317-0332-JPN)
@@ -6812,7 +6812,7 @@
 	NAOMI_DEFAULT_EEPROM
 
 	DISK_REGION( "gdrom" )
-	DISK_IMAGE_READONLY( "gds-0026b", 0,  SHA1(8ddc3ccd32ab3416fbe2921f6d6617d6c9f23203) )
+	DISK_IMAGE_READONLY( "gds-0026b", 0, BAD_DUMP  SHA1(8ddc3ccd32ab3416fbe2921f6d6617d6c9f23203) )
 
 	ROM_REGION( 0x4000, "pic", ROMREGION_ERASEFF)
 	//PIC16C622A (317-0345-JPN)
@@ -6825,7 +6825,7 @@
 	NAOMI_DEFAULT_EEPROM
 
 	DISK_REGION( "gdrom" )
-	DISK_IMAGE_READONLY( "gds-0026", 0, SHA1(253acede106b7fbf49e24458e7fda868720e9549) )
+	DISK_IMAGE_READONLY( "gds-0026", 0, BAD_DUMP SHA1(253acede106b7fbf49e24458e7fda868720e9549) )
 
 	ROM_REGION( 0x50, "pic", ROMREGION_ERASE)
 	ROM_LOAD("gds-0026.rom", 0x00, 0x50, NO_DUMP) // file on GD-ROM is BFK.BIN , _NOT_ BEM.BIN which is for Initial D : Arcade Stage (Japan)
@@ -6837,7 +6837,7 @@
 	NAOMI_DEFAULT_EEPROM
 
 	DISK_REGION( "gdrom" )
-	DISK_IMAGE_READONLY( "gds-0027", 0,  SHA1(44746f0ceb1a3bbcd1db11a35c78c93a030f02de) )
+	DISK_IMAGE_READONLY( "gds-0027", 0, BAD_DUMP  SHA1(44746f0ceb1a3bbcd1db11a35c78c93a030f02de) )
 
 	ROM_REGION( 0x4000, "pic", ROMREGION_ERASEFF)
 	//PIC16C622A (317-0357-EXP)
@@ -6849,7 +6849,7 @@
 	NAOMI_DEFAULT_EEPROM
 
 	DISK_REGION( "gdrom" )
-	DISK_IMAGE_READONLY( "gds-0032c", 0,  SHA1(005b93f9785c76a778f90f04d74d4b3cc1785a01) )
+	DISK_IMAGE_READONLY( "gds-0032c", 0, BAD_DUMP  SHA1(005b93f9785c76a778f90f04d74d4b3cc1785a01) )
 
 	ROM_REGION( 0x4000, "pic", ROMREGION_ERASEFF)
 	//PIC16C622A (317-????-JPN)
@@ -6861,7 +6861,7 @@
 	NAOMI_DEFAULT_EEPROM
 
 	DISK_REGION( "gdrom" )
-	DISK_IMAGE_READONLY( "gds-0032b", 0, SHA1(568411aa72ca308a03a6b5b61c79833464b88bc6) )
+	DISK_IMAGE_READONLY( "gds-0032b", 0, BAD_DUMP SHA1(568411aa72ca308a03a6b5b61c79833464b88bc6) )
 
 	ROM_REGION( 0x50, "pic", ROMREGION_ERASE)
 	ROM_LOAD("gds-0032_pic", 0x00, 0x50, NO_DUMP ) // PIC was missing
@@ -6872,7 +6872,7 @@
 	NAOMI_DEFAULT_EEPROM
 
 	DISK_REGION( "gdrom" )
-	DISK_IMAGE_READONLY( "gds-0033", 0,  SHA1(8908238a0211c6343ce6f3f27729e33c4e276d35) )
+	DISK_IMAGE_READONLY( "gds-0033", 0, BAD_DUMP  SHA1(8908238a0211c6343ce6f3f27729e33c4e276d35) )
 
 	ROM_REGION( 0x4300, "pic", ROMREGION_ERASEFF)
 	//PIC16C622A (317-0384-COM)
@@ -6906,7 +6906,7 @@
 	NAOMI_DEFAULT_EEPROM
 
 	DISK_REGION( "gdrom" )
-	DISK_IMAGE_READONLY( "gds-0022", 0, SHA1(70b41745225006e7876176cbd239edecd4c3f8b6) )
+	DISK_IMAGE_READONLY( "gds-0022", 0, BAD_DUMP SHA1(70b41745225006e7876176cbd239edecd4c3f8b6) )
 
 	ROM_REGION( 0x4000, "pic", ROMREGION_ERASEFF)
 	ROM_LOAD("317-0333-com.pic", 0x00, 0x4000, CRC(15fb7792) SHA1(03932ba9b1738d5ab75b2a465cc3254e75f59f63) )
@@ -6919,7 +6919,7 @@
 	NAOMI_DEFAULT_EEPROM
 
 	DISK_REGION( "gdrom" )
-	DISK_IMAGE_READONLY( "gds-0023a", 0, SHA1(cd9d808b59eb8f40673ec4353d476f2b9c7f783c) )
+	DISK_IMAGE_READONLY( "gds-0023a", 0, BAD_DUMP SHA1(cd9d808b59eb8f40673ec4353d476f2b9c7f783c) )
 
 	ROM_REGION( 0x4000, "pic", ROMREGION_ERASEFF) // uses the vf4 pic
 	//PIC16C622A (317-0314-COM)
@@ -6933,7 +6933,7 @@
 	NAOMI_DEFAULT_EEPROM
 
 	DISK_REGION( "gdrom" )
-	DISK_IMAGE_READONLY( "gds-0023c", 0, SHA1(1fcb5530748886f4c4f45487d047859182ff7496))
+	DISK_IMAGE_READONLY( "gds-0023c", 0, BAD_DUMP SHA1(1fcb5530748886f4c4f45487d047859182ff7496))
 
 	ROM_REGION( 0x4000, "pic", ROMREGION_ERASEFF) // uses the vf4 evolution pic
 	//PIC16C622A (317-0338-JPN)
@@ -6950,7 +6950,7 @@
 	ROM_LOAD("puyofev-default-eeprom.bin", 0, 0x80, CRC(42e5fd40) SHA1(e805bca22ae192e26965ba00534e6b87a3df238f))
 
 	DISK_REGION( "gdrom" )
-	DISK_IMAGE_READONLY( "gds-0031", 0, SHA1(da2d421da9472b149619b6931bb2fe624be75fa2) )
+	DISK_IMAGE_READONLY( "gds-0031", 0, BAD_DUMP SHA1(da2d421da9472b149619b6931bb2fe624be75fa2) )
 
 	ROM_REGION( 0x4000, "pic", ROMREGION_ERASEFF)
 	//PIC16C621A (317-0375-COM)
@@ -7168,7 +7168,7 @@
 	NAOMI_DEFAULT_EEPROM
 
 	DISK_REGION( "gdrom" )
-	DISK_IMAGE_READONLY( "gds-0006", 0, SHA1(aca09a88506f5e462ad3fb33eac5478a2a010609) )
+	DISK_IMAGE_READONLY( "gds-0006", 0, BAD_DUMP SHA1(aca09a88506f5e462ad3fb33eac5478a2a010609) )
 
 	ROM_REGION( 0x4000, "pic", ROMREGION_ERASEFF)
 	//PIC16C622A (317-0304-COM)
@@ -7181,7 +7181,7 @@
 	NAOMI_DEFAULT_EEPROM
 
 	DISK_REGION( "gdrom" )
-	DISK_IMAGE_READONLY( "gds-0012", 0, SHA1(c34588f59c6091cd1c3ef235171dad8d5247e707) )
+	DISK_IMAGE_READONLY( "gds-0012", 0, BAD_DUMP SHA1(c34588f59c6091cd1c3ef235171dad8d5247e707) )
 
 	ROM_REGION( 0x4000, "pic", ROMREGION_ERASEFF)
 	//PIC16C622A (317-0314-COM)
@@ -7195,7 +7195,7 @@
 	NAOMI_DEFAULT_EEPROM
 
 	DISK_REGION( "gdrom" )
-	DISK_IMAGE_READONLY( "gds-0012b", 0, SHA1(9b8e05c3d28a09323b13c198dfcc2b771bba67cd) )
+	DISK_IMAGE_READONLY( "gds-0012b", 0, BAD_DUMP SHA1(9b8e05c3d28a09323b13c198dfcc2b771bba67cd) )
 
 	ROM_REGION( 0x4000, "pic", ROMREGION_ERASEFF)
 	//PIC16C622A (317-0314-COM)
@@ -7209,7 +7209,7 @@
 	NAOMI_DEFAULT_EEPROM
 
 	DISK_REGION( "gdrom" )
-	DISK_IMAGE_READONLY( "gds-0012c", 0, SHA1(0ec149d7edfb326777cdc45a2ac8ad578a32aba1) )
+	DISK_IMAGE_READONLY( "gds-0012c", 0, BAD_DUMP SHA1(0ec149d7edfb326777cdc45a2ac8ad578a32aba1) )
 
 	ROM_REGION( 0x4000, "pic", ROMREGION_ERASEFF)
 	//PIC16C622A (317-0314-COM)
@@ -7224,7 +7224,7 @@
 	NAOMI_DEFAULT_EEPROM
 
 	DISK_REGION( "gdrom" )
-	DISK_IMAGE_READONLY( "gds-0024b", 0, SHA1(a829169542f3bed76095ad6bfbbde7d494d04d72) )
+	DISK_IMAGE_READONLY( "gds-0024b", 0, BAD_DUMP SHA1(a829169542f3bed76095ad6bfbbde7d494d04d72) )
 
 	ROM_REGION( 0x4000, "pic", ROMREGION_ERASEFF)
 	//PIC16C622A (317-0338-JPN)
@@ -7238,7 +7238,7 @@
 	NAOMI_DEFAULT_EEPROM
 
 	DISK_REGION( "gdrom" )
-	DISK_IMAGE_READONLY( "gds-0024a", 0, SHA1(6225e778d73db18be26f882d4f9cd3b3a136d1c9) )
+	DISK_IMAGE_READONLY( "gds-0024a", 0, BAD_DUMP SHA1(6225e778d73db18be26f882d4f9cd3b3a136d1c9) )
 
 	ROM_REGION( 0x4000, "pic", ROMREGION_ERASEFF)
 	//PIC16C622A (317-0338-JPN)
@@ -7251,7 +7251,7 @@
 	NAOMI_DEFAULT_EEPROM
 
 	DISK_REGION( "gdrom" )
-	DISK_IMAGE_READONLY( "gds-0036f", 0, SHA1(ea35d6ecdf94e5c9a545952758da80f658755df0) )
+	DISK_IMAGE_READONLY( "gds-0036f", 0, BAD_DUMP SHA1(ea35d6ecdf94e5c9a545952758da80f658755df0) )
 
 	ROM_REGION( 0x4000, "pic", ROMREGION_ERASEFF)
 	//PIC16C622A (317-0387-COM)
@@ -7264,7 +7264,7 @@
 	NAOMI_DEFAULT_EEPROM
 
 	DISK_REGION( "gdrom" )
-	DISK_IMAGE_READONLY( "gds-0036d", 0, SHA1(2f7654307a4c978c5af6c8238c44e70275dd34f9) )
+	DISK_IMAGE_READONLY( "gds-0036d", 0, BAD_DUMP SHA1(2f7654307a4c978c5af6c8238c44e70275dd34f9) )
 
 	ROM_REGION( 0x4000, "pic", ROMREGION_ERASEFF)
 	//PIC16C622A (317-0387-COM)
@@ -7279,7 +7279,7 @@
 	NAOMI_DEFAULT_EEPROM
 
 	DISK_REGION( "gdrom" )
-	DISK_IMAGE_READONLY( "gds-0036a", 0, SHA1(cd630fc4e8f7ed5641b85c609584d7efe0eac137) )
+	DISK_IMAGE_READONLY( "gds-0036a", 0, BAD_DUMP SHA1(cd630fc4e8f7ed5641b85c609584d7efe0eac137) )
 
 	ROM_REGION( 0x4000, "pic", ROMREGION_ERASEFF)
 	//PIC16C622A (317-0387-COM)
@@ -7317,7 +7317,7 @@
 	NAOMI_DEFAULT_EEPROM
 
 	DISK_REGION( "gdrom" )
-	DISK_IMAGE_READONLY( "gds-0014", 0, SHA1(1ebb3695196c11a86276e034df2e1c8d7fa6b96f) )
+	DISK_IMAGE_READONLY( "gds-0014", 0, BAD_DUMP SHA1(1ebb3695196c11a86276e034df2e1c8d7fa6b96f) )
 
 	//PIC16C622A (317-0317-COM)
 	//(sticker 253-5508-0317)
@@ -7332,7 +7332,7 @@
 	NAOMI_DEFAULT_EEPROM
 
 	DISK_REGION( "gdrom" )
-	DISK_IMAGE_READONLY( "gds-0020b", 0, SHA1(c0e901623ef4fcd97b7e4d29ae556e6f2e91b8ad) )
+	DISK_IMAGE_READONLY( "gds-0020b", 0, BAD_DUMP SHA1(c0e901623ef4fcd97b7e4d29ae556e6f2e91b8ad) )
 
 	ROM_REGION( 0x4000, "pic", ROMREGION_ERASEFF)
 	//PIC16C622A (317-0331-JPN)
@@ -7345,7 +7345,7 @@
 	NAOMI_DEFAULT_EEPROM
 
 	DISK_REGION( "gdrom" )
-	DISK_IMAGE_READONLY( "gds-0025", 0, SHA1(8ea92cf6b493f21b9453832edad7cbc5e5b350c1) )
+	DISK_IMAGE_READONLY( "gds-0025", 0, BAD_DUMP SHA1(8ea92cf6b493f21b9453832edad7cbc5e5b350c1) )
 
 	ROM_REGION( 0x4000, "pic", ROMREGION_ERASEFF)
 	ROM_LOAD("317-0343-com.pic", 0x00, 0x4000, CRC(80eea4eb) SHA1(5aedc0d52a2a8a2d186ca591094835d972574092) )
@@ -7905,7 +7905,7 @@
 /* Cart games on Namco custom ROM board */
 /* 25209801 */ GAME( 2000, wldkicks, naomi, naomim2, naomi,    naomi,    ROT0, "Capcom / Namco", "World Kicks (WK1 Ver. A)", GAME_UNEMULATED_PROTECTION|GAME_FLAGS )
 /* 25349801 */ GAME( 2000, toukon4,  naomi, naomim2, naomi,    naomi,    ROT0, "Capcom / Namco", "Shin Nihon Pro Wrestling Toukon Retsuden 4 Arcade Edition (TRF1 Ver. A)", GAME_UNEMULATED_PROTECTION|GAME_FLAGS )
-// 25469801 Ninja Assault
+/* 25469801 */
 /* 25709801 */ GAME( 2001, gunsur2,  naomi, naomi,   naomi,    naomi,    ROT0, "Capcom / Namco", "Gun Survivor 2 Biohazard Code: Veronica (BHF1 Ver. A)", GAME_UNEMULATED_PROTECTION|GAME_FLAGS )
 /* 25869812 */ GAME( 2002, mazan,    naomi, naomim2, naomi,    naomi,    ROT0, "Capcom / Namco", "Mazan: Flash of the Blade (MAZ1 Ver. A)", GAME_UNEMULATED_PROTECTION|GAME_FLAGS )
 
diff -Nru src-old/mame/drivers/othldrby.c src/mame/drivers/othldrby.c
--- src-old/mame/drivers/othldrby.c	2012-01-14 02:39:13.000000000 +0100
+++ src/mame/drivers/othldrby.c	2012-03-19 22:10:00.000000000 +0100
@@ -6,6 +6,9 @@
 
 Video IC is S951060-VGP
 
+TODO:
+- a PCB pic is needed in order to identify the RTC used by this.
+
 Notes:
 - Sprite/tile priorities are NOT orthogonal to sprite/sprite priorities:
   sprites with a higher priority appear over sprites with a lower priority,
@@ -20,15 +23,10 @@
 #include "includes/othldrby.h"
 
 
-static READ16_HANDLER( pip )
+/* Guess: reads when doing r/w to video device */
+static READ16_HANDLER( othldrby_scanline_r )
 {
-	othldrby_state *state = space->machine().driver_data<othldrby_state>();
-	return state->m_toggle ^= 1;
-}
-
-static READ16_HANDLER( pap )
-{
-	return space->machine().rand();
+	return space->machine().primary_screen->vpos();
 }
 
 
@@ -89,11 +87,11 @@
 	AM_RANGE(0x300000, 0x300001) AM_WRITE(othldrby_videoram_addr_w)
 	AM_RANGE(0x300004, 0x300007) AM_READWRITE(othldrby_videoram_r, othldrby_videoram_w)
 	AM_RANGE(0x300008, 0x300009) AM_WRITE(othldrby_vreg_addr_w)
-	AM_RANGE(0x30000c, 0x30000d) AM_READ(pip)	// vblank?
+	AM_RANGE(0x30000c, 0x30000d) AM_READ_PORT("VBLANK")
 	AM_RANGE(0x30000c, 0x30000f) AM_WRITE(othldrby_vreg_w)
 	AM_RANGE(0x400000, 0x400fff) AM_RAM_WRITE(paletteram16_xBBBBBGGGGGRRRRR_word_w) AM_BASE_GENERIC(paletteram)
 	AM_RANGE(0x600000, 0x600001) AM_DEVREADWRITE8_MODERN("oki", okim6295_device, read, write, 0x00ff)
-	AM_RANGE(0x700000, 0x700001) AM_READ(pap)	// scanline???
+	AM_RANGE(0x700000, 0x700001) AM_READ(othldrby_scanline_r)
 	AM_RANGE(0x700004, 0x700005) AM_READ_PORT("DSW1")
 	AM_RANGE(0x700008, 0x700009) AM_READ_PORT("DSW2")
 	AM_RANGE(0x70000c, 0x70000d) AM_READ_PORT("P1")
@@ -105,6 +103,9 @@
 
 
 static INPUT_PORTS_START( othldrby )
+	PORT_START("VBLANK")
+	PORT_BIT( 0x01, IP_ACTIVE_HIGH, IPT_VBLANK )
+
 	PORT_START("DSW1")
 	PORT_DIPNAME( 0x01, 0x00, DEF_STR( Demo_Sounds ) )
 	PORT_DIPSETTING(    0x01, DEF_STR( Off ) )
@@ -250,7 +251,7 @@
 	/* video hardware */
 	MCFG_SCREEN_ADD("screen", RASTER)
 	MCFG_SCREEN_REFRESH_RATE(60)
-	MCFG_SCREEN_VBLANK_TIME(ATTOSECONDS_IN_USEC(0))
+	MCFG_SCREEN_VBLANK_TIME(ATTOSECONDS_IN_USEC(2500))
 	MCFG_SCREEN_SIZE(64*8, 32*8)
 	MCFG_SCREEN_VISIBLE_AREA(12*8, (64-12)*8-1, 1*8, 31*8-1 )
 	MCFG_SCREEN_UPDATE_STATIC(othldrby)
diff -Nru src-old/mame/drivers/pgm.c src/mame/drivers/pgm.c
--- src-old/mame/drivers/pgm.c	2012-02-11 12:01:01.000000000 +0100
+++ src/mame/drivers/pgm.c	2012-03-25 15:56:49.000000000 +0200
@@ -63,59 +63,32 @@
 game region code..
 
 ASIC 3:
-    used by:
-    different per region, supplies region code
-    used by:
-    Oriental Legend
-    function:
+    state based device?
+    see
+    machine/pgmprot.c
 
 ASIC 25 + ASIC 12
-    ASIC25 is a logic device (not MCU) which performs bitswap operations
-    ASIC12 is ... ? (rom overlays?)
-
-    used by:
-    Dragon World 2
+    state based device + rom overlays
+    see
+    machine/pgmprot5.c
 
 ASIC 25 + ASIC 22
-    ASIC25 is a logic device (not MCU) which performs bitswap operations, and connects to the ASIC22.  It differs per region.
-    ASIC22 is an MCU and acts as an encrypted DMA device
-
-    (ASIC22 can be swapped between games with no side-effects, ASIC25 can't)
-
-    used by:
-    Dragon World 3
-    The Killing Blade
+    state based device + encrypted DMA device
+    see
+    machine/pgmprot4.c
 
 ASIC 25 + ASIC 28
-    ASIC25 (see above)
-    ASIC28 acts as an encrypted DMA device (updated version of ASIC22 with different encryption etc.)
-
-    used by:
-    Oriental Legend Super
+    state based device + encrypted DMA device?
+    see
+    machine/pgmprot6.c
+
+ASIC 027A(55857F/55857G):
+    ARM based CPUs with internal ROM
+    see
+    machine/pgmprot1.c
+    machine/pgmprot2.c
+    machine/pgmprot3.c
 
-ASIC 27 (55857E):
-    performs a variety of calculations, quite complex, different per region, supplies region code
-
-    used by:
-    Knights of Valour 1 / (Plus?)
-    Photo Y2k / Real and Fake
-
-ASIC 27A(55857F/55857G):
-    arm7 cpu with 16kb internal rom (different per game / region) + optional external data rom
-    probably used to give extra power to the system, lots of calculations are offloaded to it
-    used by:
-    Knights of Valour Super Heroes / Plus
-    Puzzli II
-    Oriental Legend Special Plus
-    Knights of Valor 2 / 2 Plus
-    DoDonPachi II
-    Martial Masters
-    The Gladiator
-    Demon Front
-    The Killing Blade Plus
-    Spectral VS Generation
-
-    The 55857G variant appears to be protected against reading even from native code.
 
 there are probably more...
 
@@ -213,20 +186,13 @@
 */
 
 #define PGMLOGERROR 0
-#define PGMARM7LOGERROR 1
 
 #include "emu.h"
-#include "cpu/z80/z80.h"
-#include "cpu/m68000/m68000.h"
-#include "cpu/arm7/arm7.h"
-#include "sound/ics2115.h"
-#include "cpu/arm7/arm7core.h"
-#include "machine/nvram.h"
 #include "includes/pgm.h"
-#include "machine/v3021.h"
+
 
 UINT16 *pgm_mainram;
-static void IGS022_reset(running_machine& machine);
+
 
 static READ16_HANDLER( pgm_videoram_r )
 {
@@ -259,85 +225,6 @@
 	return (state->m_z80_mainram[offset * 2] << 8) | state->m_z80_mainram[offset * 2 + 1];
 }
 
-static READ32_HANDLER( arm7_latch_arm_r )
-{
-	pgm_state *state = space->machine().driver_data<pgm_state>();
-
-	if (PGMARM7LOGERROR)
-		logerror("ARM7: Latch read: %08x (%08x) (%06x)\n", state->m_kov2_latchdata_68k_w, mem_mask, cpu_get_pc(&space->device()));
-	return state->m_kov2_latchdata_68k_w;
-}
-
-static WRITE32_HANDLER( arm7_latch_arm_w )
-{
-	pgm_state *state = space->machine().driver_data<pgm_state>();
-
-	if (PGMARM7LOGERROR)
-		logerror("ARM7: Latch write: %08x (%08x) (%06x)\n", data, mem_mask, cpu_get_pc(&space->device()));
-
-	COMBINE_DATA(&state->m_kov2_latchdata_arm_w);
-}
-
-static READ32_HANDLER( arm7_shareram_r )
-{
-	pgm_state *state = space->machine().driver_data<pgm_state>();
-
-	if (PGMARM7LOGERROR)
-		logerror("ARM7: ARM7 Shared RAM Read: %04x = %08x (%08x) (%06x)\n", offset << 2, state->m_arm7_shareram[offset], mem_mask, cpu_get_pc(&space->device()));
-	return state->m_arm7_shareram[offset];
-}
-
-static WRITE32_HANDLER( arm7_shareram_w )
-{
-	pgm_state *state = space->machine().driver_data<pgm_state>();
-
-	if (PGMARM7LOGERROR)
-		logerror("ARM7: ARM7 Shared RAM Write: %04x = %08x (%08x) (%06x)\n", offset << 2, data, mem_mask, cpu_get_pc(&space->device()));
-	COMBINE_DATA(&state->m_arm7_shareram[offset]);
-}
-
-static READ16_HANDLER( arm7_latch_68k_r )
-{
-	pgm_state *state = space->machine().driver_data<pgm_state>();
-
-	if (PGMARM7LOGERROR)
-		logerror("M68K: Latch read: %04x (%04x) (%06x)\n", state->m_kov2_latchdata_arm_w & 0x0000ffff, mem_mask, cpu_get_pc(&space->device()));
-	return state->m_kov2_latchdata_arm_w;
-}
-
-static WRITE16_HANDLER( arm7_latch_68k_w )
-{
-	pgm_state *state = space->machine().driver_data<pgm_state>();
-
-	if (PGMARM7LOGERROR)
-		logerror("M68K: Latch write: %04x (%04x) (%06x)\n", data & 0x0000ffff, mem_mask, cpu_get_pc(&space->device()));
-	COMBINE_DATA(&state->m_kov2_latchdata_68k_w);
-
-	generic_pulse_irq_line(state->m_prot, ARM7_FIRQ_LINE, 1);
-	space->machine().scheduler().boost_interleave(attotime::zero, attotime::from_usec(200));
-	device_spin_until_time(&space->device(), state->m_prot->cycles_to_attotime(200)); // give the arm time to respond (just boosting the interleave doesn't help)
-}
-
-static READ16_HANDLER( arm7_ram_r )
-{
-	pgm_state *state = space->machine().driver_data<pgm_state>();
-	UINT16 *share16 = (UINT16 *)state->m_arm7_shareram;
-
-	if (PGMARM7LOGERROR)
-		logerror("M68K: ARM7 Shared RAM Read: %04x = %04x (%08x) (%06x)\n", BYTE_XOR_LE(offset), share16[BYTE_XOR_LE(offset)], mem_mask, cpu_get_pc(&space->device()));
-	return share16[BYTE_XOR_LE(offset)];
-}
-
-static WRITE16_HANDLER( arm7_ram_w )
-{
-	pgm_state *state = space->machine().driver_data<pgm_state>();
-	UINT16 *share16 = (UINT16 *)state->m_arm7_shareram;
-
-	if (PGMARM7LOGERROR)
-		logerror("M68K: ARM7 Shared RAM Write: %04x = %04x (%04x) (%06x)\n", BYTE_XOR_LE(offset), data, mem_mask, cpu_get_pc(&space->device()));
-	COMBINE_DATA(&share16[BYTE_XOR_LE(offset)]);
-}
-
 static WRITE16_HANDLER ( z80_ram_w )
 {
 	pgm_state *state = space->machine().driver_data<pgm_state>();
@@ -407,7 +294,7 @@
 	soundlatch3_w(space, 0, data);
 }
 
-static void sound_irq( device_t *device, int level )
+void pgm_sound_irq( device_t *device, int level )
 {
 	pgm_state *state = device->machine().driver_data<pgm_state>();
 	device_set_input_line(state->m_soundcpu, 0, level);
@@ -418,172 +305,16 @@
     sound_irq
 };*/
 
-/*** Misc Protection Handlers *************************************************************/
-
-/* Kov Superheroes */
-
-static READ32_HANDLER( kovsh_arm7_protlatch_r )
-{
-	pgm_state *state = space->machine().driver_data<pgm_state>();
-
-	space->machine().scheduler().synchronize(); // force resync
-
-	return (state->m_kovsh_highlatch_68k_w << 16) | (state->m_kovsh_lowlatch_68k_w);
-}
-
-static WRITE32_HANDLER( kovsh_arm7_protlatch_w )
-{
-	pgm_state *state = space->machine().driver_data<pgm_state>();
-
-	space->machine().scheduler().synchronize(); // force resync
-
-	if (ACCESSING_BITS_16_31)
-	{
-		state->m_kovsh_highlatch_arm_w = data >> 16;
-		state->m_kovsh_highlatch_68k_w = 0;
-	}
-	if (ACCESSING_BITS_0_15)
-	{
-		state->m_kovsh_lowlatch_arm_w = data;
-		state->m_kovsh_lowlatch_68k_w = 0;
-	}
-}
-
-static READ16_HANDLER( kovsh_68k_protlatch_r )
-{
-	pgm_state *state = space->machine().driver_data<pgm_state>();
-
-	space->machine().scheduler().synchronize(); // force resync
-
-	switch (offset)
-	{
-		case 1: return state->m_kovsh_highlatch_arm_w;
-		case 0: return state->m_kovsh_lowlatch_arm_w;
-	}
-	return -1;
-}
-
-static WRITE16_HANDLER( kovsh_68k_protlatch_w )
-{
-	pgm_state *state = space->machine().driver_data<pgm_state>();
-
-	space->machine().scheduler().synchronize(); // force resync
-
-	switch (offset)
-	{
-		case 1:
-			state->m_kovsh_highlatch_68k_w = data;
-			break;
-
-		case 0:
-			state->m_kovsh_lowlatch_68k_w = data;
-			break;
-	}
-}
-
-static READ16_HANDLER( kovsh_arm7_ram_r )
-{
-	pgm_state *state = space->machine().driver_data<pgm_state>();
-	UINT16 *share16 = (UINT16 *)state->m_arm7_shareram;
-
-	if (PGMARM7LOGERROR)
-		logerror("M68K: ARM7 Shared RAM Read: %04x = %04x (%08x) (%06x)\n", BYTE_XOR_LE(offset), share16[BYTE_XOR_LE(offset)], mem_mask, cpu_get_pc(&space->device()));
-	return share16[BYTE_XOR_LE(offset << 1)];
-}
-
-static WRITE16_HANDLER( kovsh_arm7_ram_w )
-{
-	pgm_state *state = space->machine().driver_data<pgm_state>();
-	UINT16 *share16 = (UINT16 *)state->m_arm7_shareram;
-
-	if (PGMARM7LOGERROR)
-		logerror("M68K: ARM7 Shared RAM Write: %04x = %04x (%04x) (%06x)\n", BYTE_XOR_LE(offset), data, mem_mask, cpu_get_pc(&space->device()));
-	COMBINE_DATA(&share16[BYTE_XOR_LE(offset << 1)]);
-}
-
-
-
-
-static READ32_HANDLER( kovsh_arm7_unk_r )
-{
-	pgm_state *state = space->machine().driver_data<pgm_state>();
-	return state->m_kovsh_counter++;
-}
-
-static READ32_HANDLER( kovsh_exrom_r )
-{
-	return 0x00000000;
-}
-
-
-//55857G
-
-static WRITE32_HANDLER( svg_arm7_ram_sel_w )
-{
-	pgm_state *state = space->machine().driver_data<pgm_state>();
-	state->m_svg_ram_sel = data & 1;
-}
-
-static READ32_HANDLER( svg_arm7_shareram_r )
-{
-	pgm_state *state = space->machine().driver_data<pgm_state>();
-	return state->m_svg_shareram[state->m_svg_ram_sel & 1][offset];
-}
-
-static WRITE32_HANDLER( svg_arm7_shareram_w )
-{
-	pgm_state *state = space->machine().driver_data<pgm_state>();
-	COMBINE_DATA(&state->m_svg_shareram[state->m_svg_ram_sel & 1][offset]);
-}
-
-static READ16_HANDLER( svg_m68k_ram_r )
-{
-	pgm_state *state = space->machine().driver_data<pgm_state>();
-	int ram_sel = (state->m_svg_ram_sel & 1) ^ 1;
-	UINT16 *share16 = (UINT16 *)(state->m_svg_shareram[ram_sel & 1]);
-
-	return share16[BYTE_XOR_LE(offset)];
-}
-
-static WRITE16_HANDLER( svg_m68k_ram_w )
-{
-	pgm_state *state = space->machine().driver_data<pgm_state>();
-	int ram_sel = (state->m_svg_ram_sel & 1) ^ 1;
-	UINT16 *share16 = (UINT16 *)(state->m_svg_shareram[ram_sel & 1]);
-
-	COMBINE_DATA(&share16[BYTE_XOR_LE(offset)]);
-}
-
-static READ16_HANDLER( svg_68k_nmi_r )
-{
-	return 0;
-}
-
-static WRITE16_HANDLER( svg_68k_nmi_w )
-{
-	pgm_state *state = space->machine().driver_data<pgm_state>();
-	generic_pulse_irq_line(state->m_prot, ARM7_FIRQ_LINE, 1);
-	space->machine().scheduler().boost_interleave(attotime::zero, attotime::from_usec(200));
-	device_spin_until_time(&space->device(), state->m_prot->cycles_to_attotime(200)); // give the arm time to respond (just boosting the interleave doesn't help)
-}
-
-static WRITE16_HANDLER( svg_latch_68k_w )
-{
-	pgm_state *state = space->machine().driver_data<pgm_state>();
-	if (PGMARM7LOGERROR)
-		logerror("M68K: Latch write: %04x (%04x) (%06x)\n", data & 0x0000ffff, mem_mask, cpu_get_pc(&space->device()));
-	COMBINE_DATA(&state->m_kov2_latchdata_68k_w);
-}
 
 /*** Memory Maps *************************************************************/
 
 /*** Z80 (sound CPU)**********************************************************/
 
-static ADDRESS_MAP_START( z80_mem, AS_PROGRAM, 8 )
+ADDRESS_MAP_START( pgm_z80_mem, AS_PROGRAM, 8 )
 	AM_RANGE(0x0000, 0xffff) AM_RAM AM_BASE_MEMBER(pgm_state, m_z80_mainram)
 ADDRESS_MAP_END
 
-static ADDRESS_MAP_START( z80_io, AS_IO, 8 )
+ADDRESS_MAP_START( pgm_z80_io, AS_IO, 8 )
 	AM_RANGE(0x8000, 0x8003) AM_DEVREADWRITE("ics", ics2115_device::read, ics2115_device::write)
 	AM_RANGE(0x8100, 0x81ff) AM_READWRITE(soundlatch3_r, z80_l3_w)
 	AM_RANGE(0x8200, 0x82ff) AM_READWRITE(soundlatch_r, soundlatch_w)
@@ -592,7 +323,7 @@
 
 /*** 68000 (main CPU) + variants for protection devices **********************/
 
-static ADDRESS_MAP_START( pgm_base_mem, AS_PROGRAM, 16)
+ADDRESS_MAP_START( pgm_base_mem, AS_PROGRAM, 16)
 	AM_RANGE(0x700006, 0x700007) AM_WRITENOP // Watchdog?
 
 	AM_RANGE(0x800000, 0x81ffff) AM_RAM AM_MIRROR(0x0e0000) AM_BASE(&pgm_mainram) AM_SHARE("sram") /* Main Ram */
@@ -616,108 +347,24 @@
 	AM_RANGE(0xc10000, 0xc1ffff) AM_READWRITE(z80_ram_r, z80_ram_w) /* Z80 Program */
 ADDRESS_MAP_END
 
-static ADDRESS_MAP_START( pgm_mem, AS_PROGRAM, 16)
+ADDRESS_MAP_START( pgm_mem, AS_PROGRAM, 16)
 	AM_IMPORT_FROM(pgm_base_mem)
 	AM_RANGE(0x000000, 0x01ffff) AM_ROM   /* BIOS ROM */
 ADDRESS_MAP_END
 
-static ADDRESS_MAP_START( pgm_basic_mem, AS_PROGRAM, 16)
-	AM_IMPORT_FROM(pgm_mem)
-	AM_RANGE(0x100000, 0x3fffff) AM_ROMBANK("bank1") /* Game ROM */
-ADDRESS_MAP_END
-
-static ADDRESS_MAP_START( killbld_mem, AS_PROGRAM, 16)
-	AM_IMPORT_FROM(pgm_mem)
-	AM_RANGE(0x100000, 0x2fffff) AM_ROMBANK("bank1") /* Game ROM */
-	AM_RANGE(0x300000, 0x303fff) AM_RAM AM_BASE_MEMBER(pgm_state, m_sharedprotram) // Shared with protection device
-ADDRESS_MAP_END
-
-static ADDRESS_MAP_START( olds_mem, AS_PROGRAM, 16)
+ADDRESS_MAP_START( pgm_basic_mem, AS_PROGRAM, 16)
 	AM_IMPORT_FROM(pgm_mem)
 	AM_RANGE(0x100000, 0x3fffff) AM_ROMBANK("bank1") /* Game ROM */
-	AM_RANGE(0x400000, 0x403fff) AM_RAM AM_BASE_MEMBER(pgm_state, m_sharedprotram) // Shared with protection device
-ADDRESS_MAP_END
-
-/* 55857E? */
-/* Knights of Valor, Photo Y2k */
-/*  no execute only space? */
-static ADDRESS_MAP_START( kov_map, AS_PROGRAM, 16)
-	AM_IMPORT_FROM(pgm_mem)
-	AM_RANGE(0x100000, 0x4effff) AM_ROMBANK("bank1") /* Game ROM */
-	AM_RANGE(0x4f0000, 0x4f003f) AM_READWRITE(kovsh_arm7_ram_r, kovsh_arm7_ram_w) /* ARM7 Shared RAM */
-	AM_RANGE(0x500000, 0x500005) AM_READWRITE(kovsh_68k_protlatch_r, kovsh_68k_protlatch_w) /* ARM7 Latch */
-ADDRESS_MAP_END
-
-/* 55857F? */
-/* Knights of Valor 2, Martial Masters, DoDonpachi 2 */
-/*  no execute only space? */
-static ADDRESS_MAP_START( kov2_mem, AS_PROGRAM, 16)
-	AM_IMPORT_FROM(pgm_mem)
-	AM_RANGE(0x100000, 0x5fffff) AM_ROMBANK("bank1") /* Game ROM */
-	AM_RANGE(0xd00000, 0xd0ffff) AM_READWRITE(arm7_ram_r, arm7_ram_w) /* ARM7 Shared RAM */
-	AM_RANGE(0xd10000, 0xd10001) AM_READWRITE(arm7_latch_68k_r, arm7_latch_68k_w) /* ARM7 Latch */
-ADDRESS_MAP_END
-
-/* 55857G? */
-/* Demon Front, The Gladiator, Happy 6-in-1, Spectral Vs. Generation, Killing Blade EX */
-/*  the ones with an EXECUTE ONLY region of ARM space? */
-static ADDRESS_MAP_START( svg_68k_mem, AS_PROGRAM, 16)
-	AM_IMPORT_FROM(pgm_mem)
-	AM_RANGE(0x100000, 0x1fffff) AM_ROMBANK("bank1")  /* Game ROM */
-
-	AM_RANGE(0x500000, 0x51ffff) AM_READWRITE(svg_m68k_ram_r, svg_m68k_ram_w)    /* ARM7 Shared RAM */
-	AM_RANGE(0x5c0000, 0x5c0001) AM_READWRITE(svg_68k_nmi_r, svg_68k_nmi_w)      /* ARM7 FIQ */
-	AM_RANGE(0x5c0300, 0x5c0301) AM_READWRITE(arm7_latch_68k_r, svg_latch_68k_w) /* ARM7 Latch */
-ADDRESS_MAP_END
-
-
-static ADDRESS_MAP_START( cavepgm_mem, AS_PROGRAM, 16)
-	AM_IMPORT_FROM(pgm_base_mem)
-	AM_RANGE(0x000000, 0x3fffff) AM_ROM
-	/* protection devices installed (simulated) later */
-ADDRESS_MAP_END
-
-/*** ARM7 (protection CPUs) **************************************************/
-
-static ADDRESS_MAP_START( 55857E_arm7_map, AS_PROGRAM, 32 )
-	AM_RANGE(0x00000000, 0x00003fff) AM_ROM
-	AM_RANGE(0x08100000, 0x083fffff) AM_READ(kovsh_exrom_r) // unpopulated, returns 0 to keep checksum happy
-	AM_RANGE(0x10000000, 0x100003ff) AM_RAM // internal ram for asic
-	AM_RANGE(0x40000000, 0x40000003) AM_READWRITE(kovsh_arm7_protlatch_r, kovsh_arm7_protlatch_w)
-	AM_RANGE(0x40000008, 0x4000000b) AM_WRITENOP // ?
-	AM_RANGE(0x4000000c, 0x4000000f) AM_READ(kovsh_arm7_unk_r)
-	AM_RANGE(0x50800000, 0x5080003f) AM_READWRITE(arm7_shareram_r, arm7_shareram_w) AM_BASE_MEMBER(pgm_state, m_arm7_shareram)
-	AM_RANGE(0x50000000, 0x500003ff) AM_RAM // uploads xor table to decrypt 68k rom here
-ADDRESS_MAP_END
-
-static ADDRESS_MAP_START( 55857F_arm7_map, AS_PROGRAM, 32 )
-	AM_RANGE(0x00000000, 0x00003fff) AM_ROM
-	AM_RANGE(0x08000000, 0x083fffff) AM_ROM AM_REGION("user1", 0)
-	AM_RANGE(0x10000000, 0x100003ff) AM_RAM
-	AM_RANGE(0x18000000, 0x1800ffff) AM_RAM
-	AM_RANGE(0x38000000, 0x38000003) AM_READWRITE(arm7_latch_arm_r, arm7_latch_arm_w) /* 68k Latch */
-	AM_RANGE(0x48000000, 0x4800ffff) AM_READWRITE(arm7_shareram_r, arm7_shareram_w) AM_BASE_MEMBER(pgm_state, m_arm7_shareram)
-	AM_RANGE(0x50000000, 0x500003ff) AM_RAM
 ADDRESS_MAP_END
 
 
-static ADDRESS_MAP_START( 55857G_arm7_map, AS_PROGRAM, 32 )
-	AM_RANGE(0x00000000, 0x00003fff) AM_ROM
-	AM_RANGE(0x08000000, 0x087fffff) AM_ROM AM_REGION("user1", 0)
-	AM_RANGE(0x10000000, 0x100003ff) AM_RAM
-	AM_RANGE(0x18000000, 0x1803ffff) AM_RAM
-	AM_RANGE(0x38000000, 0x3801ffff) AM_READWRITE(svg_arm7_shareram_r, svg_arm7_shareram_w)
-	AM_RANGE(0x48000000, 0x48000003) AM_READWRITE(arm7_latch_arm_r, arm7_latch_arm_w) /* 68k Latch */
-	AM_RANGE(0x40000018, 0x4000001b) AM_WRITE(svg_arm7_ram_sel_w) /* RAM SEL */
-	AM_RANGE(0x50000000, 0x500003ff) AM_RAM
-ADDRESS_MAP_END
 
 
 /*** Input Ports *************************************************************/
 
 /* enough for 4 players, the basic dips mapped are listed in the test mode */
 
-static INPUT_PORTS_START( pgm )
+INPUT_PORTS_START( pgm )
 	PORT_START("P1P2")
 	PORT_BIT( 0x0001, IP_ACTIVE_LOW, IPT_START1 )
 	PORT_BIT( 0x0002, IP_ACTIVE_LOW, IPT_JOYSTICK_UP ) PORT_PLAYER(1)
@@ -802,243 +449,9 @@
 	PORT_BIT( 0xffff, IP_ACTIVE_LOW, IPT_UNUSED )
 INPUT_PORTS_END
 
-static INPUT_PORTS_START( orlegend )
-	PORT_INCLUDE ( pgm )
-
-	PORT_MODIFY("Region")
-	PORT_DIPNAME( 0x0003, 0x0000, DEF_STR( Region ) )
-	PORT_CONFSETTING(      0x0000, DEF_STR( World ) )
-    PORT_CONFSETTING(      0x0001, "World (duplicate)" ) // again?
-	PORT_CONFSETTING(      0x0002, DEF_STR( Korea ) )
-	PORT_CONFSETTING(      0x0003, DEF_STR( China ) )
-INPUT_PORTS_END
-
-static INPUT_PORTS_START( orld105k )
-	PORT_INCLUDE ( pgm )
-
-	PORT_MODIFY("Region")
-	PORT_DIPNAME( 0x0003, 0x0002, DEF_STR( Unused ) )	// region switch
-	PORT_DIPSETTING(      0x0002, DEF_STR( Off ) )		// if enabled, game gives
-	PORT_DIPSETTING(      0x0000, DEF_STR( On ) )		// "incorrect version" error
-INPUT_PORTS_END
-
-static INPUT_PORTS_START( sango )
-	PORT_INCLUDE ( pgm )
-
-	PORT_MODIFY("Region")	/* Region - supplied by protection device */
-	PORT_CONFNAME( 0x000f, 0x0005, DEF_STR( Region ) )
-	PORT_CONFSETTING(      0x0000, DEF_STR( China ) )
-	PORT_CONFSETTING(      0x0001, DEF_STR( Taiwan ) )
-	PORT_CONFSETTING(      0x0002, "Japan (Alta license)" )
-	PORT_CONFSETTING(      0x0003, DEF_STR( Korea ) )
-	PORT_CONFSETTING(      0x0004, DEF_STR( Hong_Kong ) )
-	PORT_CONFSETTING(      0x0005, DEF_STR( World ) )
-INPUT_PORTS_END
-
-static INPUT_PORTS_START( sango_ch )
-	PORT_INCLUDE ( pgm )
-
-	PORT_MODIFY("Region")	/* Region - supplied by protection device */
-	PORT_CONFNAME( 0x000f, 0x0000, DEF_STR( Region ) )
-	PORT_CONFSETTING(      0x0000, DEF_STR( China ) )
-	PORT_CONFSETTING(      0x0001, DEF_STR( Taiwan ) )
-	PORT_CONFSETTING(      0x0002, "Japan (Alta license)" )
-	PORT_CONFSETTING(      0x0003, DEF_STR( Korea ) )
-	PORT_CONFSETTING(      0x0004, DEF_STR( Hong_Kong ) )
-	PORT_CONFSETTING(      0x0005, DEF_STR( World ) )
-INPUT_PORTS_END
-
-static INPUT_PORTS_START( dw3 )
-	PORT_INCLUDE ( pgm )
 
-	PORT_MODIFY("Region")	/* Region - supplied by protection device */
-	PORT_CONFNAME( 0x000f, 0x0006, DEF_STR( Region ) )
-	PORT_CONFSETTING(      0x0000, "0" )
-	PORT_CONFSETTING(      0x0001, "1" )
-	PORT_CONFSETTING(      0x0002, "2" )
-	PORT_CONFSETTING(      0x0003, "3" )
-	PORT_CONFSETTING(      0x0004, "4" )
-	PORT_CONFSETTING(      0x0005, "5" )
-	PORT_CONFSETTING(      0x0006, DEF_STR( World ) )
-	PORT_CONFSETTING(      0x0007, "7" )
-
-INPUT_PORTS_END
-
-
-static INPUT_PORTS_START( olds )
-	PORT_INCLUDE ( pgm )
-
-	PORT_MODIFY("Region")	/* Region - supplied by protection device */
-	PORT_CONFNAME( 0x000f, 0x0006, DEF_STR( Region ) )
-	/* includes the following regions:
-    1 = taiwan, 2 = china, 3 = japan (title = orlegend special),
-    4 = korea, 5 = hong kong, 6 = world */
-	PORT_CONFSETTING(      0x0001, DEF_STR( Taiwan ) )
-	PORT_CONFSETTING(      0x0002, DEF_STR( China ) )
-	PORT_CONFSETTING(      0x0003, DEF_STR( Japan ) )
-	PORT_CONFSETTING(      0x0004, DEF_STR( Korea ) )
-	PORT_CONFSETTING(      0x0005, DEF_STR( Hong_Kong ) )
-	PORT_CONFSETTING(      0x0006, DEF_STR( World ) )
-INPUT_PORTS_END
-
-static INPUT_PORTS_START( killbld )
-	PORT_INCLUDE ( pgm )
-
-	PORT_MODIFY("Region")	/* Region - supplied by protection device */
-	PORT_DIPNAME( 0x00ff, 0x0021, "Region (not currently working)" ) // different regions supply different protection code sequences, we only have the China one ATM
-	PORT_DIPSETTING(      0x0016, DEF_STR( Taiwan ) )
-	PORT_DIPSETTING(      0x0017, DEF_STR( China ) )
-	PORT_DIPSETTING(      0x0018, DEF_STR( Hong_Kong ) )
-	PORT_DIPSETTING(      0x0019, DEF_STR( Japan ) )
-//  PORT_DIPSETTING(      0x001a, "1a" ) // invalid
-//  PORT_DIPSETTING(      0x001b, "1b" ) // invalid
-//  PORT_DIPSETTING(      0x001c, "1c" ) // invalid
-//  PORT_DIPSETTING(      0x001d, "1d" ) // invalid
-//  PORT_DIPSETTING(      0x001e, "1e" ) // invalid
-//  PORT_DIPSETTING(      0x001f, "1f" ) // invalid
-	PORT_DIPSETTING(      0x0020, DEF_STR( Korea ) )
-	PORT_DIPSETTING(      0x0021, DEF_STR( World ) )
-INPUT_PORTS_END
-
-static INPUT_PORTS_START( photoy2k )
-	PORT_INCLUDE ( pgm )
-
-	PORT_MODIFY("Region")	/* Region - supplied by protection device */
-	PORT_CONFNAME( 0x000f, 0x0003, DEF_STR( Region ) )
-	PORT_CONFSETTING(      0x0000, DEF_STR( Taiwan ) )
-	PORT_CONFSETTING(      0x0001, DEF_STR( China ) )
-	PORT_CONFSETTING(      0x0002, "Japan (Alta license)" )
-	PORT_CONFSETTING(      0x0003, DEF_STR( World ) )
-	PORT_CONFSETTING(      0x0004, DEF_STR( Korea ) )
-	PORT_CONFSETTING(      0x0005, DEF_STR( Hong_Kong ) )
-INPUT_PORTS_END
-
-static INPUT_PORTS_START( ddp2 )
-	PORT_INCLUDE ( pgm )
-
-/*  // probably not dsw related anyway
-    PORT_START("UNK0")
-    PORT_DIPNAME( 0x0001, 0x0001, "4" )
-    PORT_DIPSETTING(      0x0001, DEF_STR( Off ) )
-    PORT_DIPSETTING(      0x0000, DEF_STR( On ) )
-    PORT_DIPNAME( 0x0002, 0x0002, DEF_STR( Unknown ) )
-    PORT_DIPSETTING(      0x0002, DEF_STR( Off ) )
-    PORT_DIPSETTING(      0x0000, DEF_STR( On ) )
-    PORT_DIPNAME( 0x0004, 0x0004, DEF_STR( Unknown ) )
-    PORT_DIPSETTING(      0x0004, DEF_STR( Off ) )
-    PORT_DIPSETTING(      0x0000, DEF_STR( On ) )
-    PORT_DIPNAME( 0x0008, 0x0008, DEF_STR( Unknown ) )
-    PORT_DIPSETTING(      0x0008, DEF_STR( Off ) )
-    PORT_DIPSETTING(      0x0000, DEF_STR( On ) )
-    PORT_DIPNAME( 0x0010, 0x0000, DEF_STR( Unknown ) )  // Freezes if off?
-    PORT_DIPSETTING(      0x0010, DEF_STR( Off ) )
-    PORT_DIPSETTING(      0x0000, DEF_STR( On ) )
-    PORT_DIPNAME( 0x0020, 0x0020, DEF_STR( Unknown ) )
-    PORT_DIPSETTING(      0x0020, DEF_STR( Off ) )
-    PORT_DIPSETTING(      0x0000, DEF_STR( On ) )
-    PORT_DIPNAME( 0x0040, 0x0040, DEF_STR( Unknown ) )
-    PORT_DIPSETTING(      0x0040, DEF_STR( Off ) )
-    PORT_DIPSETTING(      0x0000, DEF_STR( On ) )
-    PORT_DIPNAME( 0x0080, 0x0080, DEF_STR( Unknown ) )
-    PORT_DIPSETTING(      0x0080, DEF_STR( Off ) )
-    PORT_DIPSETTING(      0x0000, DEF_STR( On ) )
-    PORT_DIPNAME( 0x0100, 0x0100, DEF_STR( Unknown ) )
-    PORT_DIPSETTING(      0x0100, DEF_STR( Off ) )
-    PORT_DIPSETTING(      0x0000, DEF_STR( On ) )
-    PORT_DIPNAME( 0x0200, 0x0200, DEF_STR( Unknown ) )
-    PORT_DIPSETTING(      0x0200, DEF_STR( Off ) )
-    PORT_DIPSETTING(      0x0000, DEF_STR( On ) )
-    PORT_DIPNAME( 0x0400, 0x0400, DEF_STR( Unknown ) )
-    PORT_DIPSETTING(      0x0400, DEF_STR( Off ) )
-    PORT_DIPSETTING(      0x0000, DEF_STR( On ) )
-    PORT_DIPNAME( 0x0800, 0x0800, DEF_STR( Unknown ) )
-    PORT_DIPSETTING(      0x0800, DEF_STR( Off ) )
-    PORT_DIPSETTING(      0x0000, DEF_STR( On ) )
-    PORT_DIPNAME( 0x1000, 0x1000, DEF_STR( Unknown ) )
-    PORT_DIPSETTING(      0x1000, DEF_STR( Off ) )
-    PORT_DIPSETTING(      0x0000, DEF_STR( On ) )
-    PORT_DIPNAME( 0x2000, 0x2000, DEF_STR( Unknown ) )
-    PORT_DIPSETTING(      0x2000, DEF_STR( Off ) )
-    PORT_DIPSETTING(      0x0000, DEF_STR( On ) )
-    PORT_DIPNAME( 0x4000, 0x4000, DEF_STR( Unknown ) )
-    PORT_DIPSETTING(      0x4000, DEF_STR( Off ) )
-    PORT_DIPSETTING(      0x0000, DEF_STR( On ) )
-    PORT_DIPNAME( 0x8000, 0x8000, DEF_STR( Unknown ) )
-    PORT_DIPSETTING(      0x8000, DEF_STR( Off ) )
-    PORT_DIPSETTING(      0x0000, DEF_STR( On ) )
-
-    PORT_START("UNK1")
-    PORT_DIPNAME( 0x0001, 0x0001, "5" )
-    PORT_DIPSETTING(      0x0001, DEF_STR( Off ) )
-    PORT_DIPSETTING(      0x0000, DEF_STR( On ) )
-    PORT_DIPNAME( 0x0002, 0x0002, DEF_STR( Unknown ) )
-    PORT_DIPSETTING(      0x0002, DEF_STR( Off ) )
-    PORT_DIPSETTING(      0x0000, DEF_STR( On ) )
-    PORT_DIPNAME( 0x0004, 0x0004, DEF_STR( Unknown ) )
-    PORT_DIPSETTING(      0x0004, DEF_STR( Off ) )
-    PORT_DIPSETTING(      0x0000, DEF_STR( On ) )
-    PORT_DIPNAME( 0x0008, 0x0008, DEF_STR( Unknown ) )
-    PORT_DIPSETTING(      0x0008, DEF_STR( Off ) )
-    PORT_DIPSETTING(      0x0000, DEF_STR( On ) )
-    PORT_DIPNAME( 0x0010, 0x0010, DEF_STR( Unknown ) )
-    PORT_DIPSETTING(      0x0010, DEF_STR( Off ) )
-    PORT_DIPSETTING(      0x0000, DEF_STR( On ) )
-    PORT_DIPNAME( 0x0020, 0x0020, DEF_STR( Unknown ) )
-    PORT_DIPSETTING(      0x0020, DEF_STR( Off ) )
-    PORT_DIPSETTING(      0x0000, DEF_STR( On ) )
-    PORT_DIPNAME( 0x0040, 0x0040, DEF_STR( Unknown ) )
-    PORT_DIPSETTING(      0x0040, DEF_STR( Off ) )
-    PORT_DIPSETTING(      0x0000, DEF_STR( On ) )
-    PORT_DIPNAME( 0x0080, 0x0080, DEF_STR( Unknown ) )
-    PORT_DIPSETTING(      0x0080, DEF_STR( Off ) )
-    PORT_DIPSETTING(      0x0000, DEF_STR( On ) )
-    PORT_DIPNAME( 0x0100, 0x0100, DEF_STR( Unknown ) )
-    PORT_DIPSETTING(      0x0100, DEF_STR( Off ) )
-    PORT_DIPSETTING(      0x0000, DEF_STR( On ) )
-    PORT_DIPNAME( 0x0200, 0x0200, DEF_STR( Unknown ) )
-    PORT_DIPSETTING(      0x0200, DEF_STR( Off ) )
-    PORT_DIPSETTING(      0x0000, DEF_STR( On ) )
-    PORT_DIPNAME( 0x0400, 0x0400, DEF_STR( Unknown ) )
-    PORT_DIPSETTING(      0x0400, DEF_STR( Off ) )
-    PORT_DIPSETTING(      0x0000, DEF_STR( On ) )
-    PORT_DIPNAME( 0x0800, 0x0800, DEF_STR( Unknown ) )
-    PORT_DIPSETTING(      0x0800, DEF_STR( Off ) )
-    PORT_DIPSETTING(      0x0000, DEF_STR( On ) )
-    PORT_DIPNAME( 0x1000, 0x1000, DEF_STR( Unknown ) )
-    PORT_DIPSETTING(      0x1000, DEF_STR( Off ) )
-    PORT_DIPSETTING(      0x0000, DEF_STR( On ) )
-    PORT_DIPNAME( 0x2000, 0x2000, DEF_STR( Unknown ) )
-    PORT_DIPSETTING(      0x2000, DEF_STR( Off ) )
-    PORT_DIPSETTING(      0x0000, DEF_STR( On ) )
-    PORT_DIPNAME( 0x4000, 0x4000, DEF_STR( Unknown ) )
-    PORT_DIPSETTING(      0x4000, DEF_STR( Off ) )
-    PORT_DIPSETTING(      0x0000, DEF_STR( On ) )
-    PORT_DIPNAME( 0x8000, 0x8000, DEF_STR( Unknown ) )
-    PORT_DIPSETTING(      0x8000, DEF_STR( Off ) )
-    PORT_DIPSETTING(      0x0000, DEF_STR( On ) )
-*/
-	PORT_MODIFY("Region")	/* Region - supplied by protection device */
-	PORT_CONFNAME( 0x000f, 0x0005, DEF_STR( Region ) )
-	PORT_CONFSETTING(      0x0000, DEF_STR( China ) )
-	PORT_CONFSETTING(      0x0001, DEF_STR( Taiwan ) )
-	PORT_CONFSETTING(      0x0002, "Japan (Cave license)" )
-	PORT_CONFSETTING(      0x0003, DEF_STR( Korea ) )
-	PORT_CONFSETTING(      0x0004, DEF_STR( Hong_Kong ) )
-	PORT_CONFSETTING(      0x0005, DEF_STR( World ) )
-INPUT_PORTS_END
 
-static INPUT_PORTS_START( oldsplus )
-	PORT_INCLUDE ( pgm )
 
-	PORT_MODIFY("Region")	/* Region - supplied by protection device */
-	PORT_CONFNAME( 0x000f, 0x0001, DEF_STR( Region ) )
-	PORT_CONFSETTING(      0x0001, DEF_STR( China ) )
-	PORT_CONFSETTING(      0x0002, DEF_STR( Japan ) )
-	PORT_CONFSETTING(      0x0003, DEF_STR( Korea ) )
-	PORT_CONFSETTING(      0x0004, DEF_STR( Hong_Kong ) )
-	PORT_CONFSETTING(      0x0005, DEF_STR( World ) )
-	PORT_CONFSETTING(      0x0006, DEF_STR( Taiwan ) )
-INPUT_PORTS_END
 
 
 /*** GFX Decodes *************************************************************/
@@ -1074,7 +487,7 @@
 	 32*256
 };
 
-static GFXDECODE_START( pgm )
+GFXDECODE_START( pgm )
 	GFXDECODE_ENTRY( "tiles", 0, pgm8_charlayout,    0x800, 32  ) /* 8x8x4 Tiles */
 	// we have to unpack the data before we can decode it as 32x32, hence we don't know how many tiles etc. in advance, see INIT
 	//GFXDECODE_ENTRY( "gfx2", 0, pgm32_charlayout,   0x400, 32  ) /* 32x32x5 Tiles */
@@ -1082,9 +495,9 @@
 
 /*** Machine Driver **********************************************************/
 
-/* only dragon world 2 NEEDs irq4, Puzzli 2 explicitly doesn't want it, what
-   is the source? maybe the protection device? */
-static TIMER_DEVICE_CALLBACK( drgw_interrupt )
+/* most games require IRQ4 for inputs to work, Puzzli 2 is explicit about not wanting it tho
+   what is the source? */
+TIMER_DEVICE_CALLBACK( pgm_interrupt )
 {
 	pgm_state *state = timer.machine().driver_data<pgm_state>();
 	int scanline = param;
@@ -1096,7 +509,7 @@
 		if (!state->m_irq4_disabled) device_set_input_line(state->m_maincpu, 4, HOLD_LINE);
 }
 
-static MACHINE_START( pgm )
+MACHINE_START( pgm )
 {
 	pgm_state *state = machine.driver_data<pgm_state>();
 
@@ -1106,40 +519,24 @@
 	state->m_soundcpu = machine.device<cpu_device>("soundcpu");
 	state->m_prot = machine.device<cpu_device>("prot");
 	state->m_ics = machine.device("ics");
-
-//  state->save_item(NAME(state->m_cal_val));
-//  state->save_item(NAME(state->m_cal_mask));
-//  state->save_item(NAME(state->m_cal_com));
-//  state->save_item(NAME(state->m_cal_cnt));
 }
 
-static MACHINE_RESET( pgm )
+MACHINE_RESET( pgm )
 {
-//  pgm_state *state = machine.driver_data<pgm_state>();
-
 	cputag_set_input_line(machine, "soundcpu", INPUT_LINE_HALT, ASSERT_LINE);
-
-//  state->m_cal_val = 0;
-//  state->m_cal_mask = 0;
-//  state->m_cal_com = 0;
-//  state->m_cal_cnt = 0;
 }
 
-static MACHINE_RESET( killbld );
-static MACHINE_RESET( dw3 );
-static MACHINE_RESET( olds );
-extern MACHINE_RESET( kov );
 
 MACHINE_CONFIG_FRAGMENT( pgmbase )
 	/* basic machine hardware */
 	MCFG_CPU_ADD("maincpu", M68000, 20000000) /* 20 mhz! verified on real board */
 	MCFG_CPU_PROGRAM_MAP(pgm_basic_mem)
 	MCFG_CPU_VBLANK_INT("screen", irq6_line_hold)
-	MCFG_TIMER_ADD_SCANLINE("scantimer", drgw_interrupt, "screen", 0, 1)
+	MCFG_TIMER_ADD_SCANLINE("scantimer", pgm_interrupt, "screen", 0, 1)
 
 	MCFG_CPU_ADD("soundcpu", Z80, 33868800/4)
-	MCFG_CPU_PROGRAM_MAP(z80_mem)
-	MCFG_CPU_IO_MAP(z80_io)
+	MCFG_CPU_PROGRAM_MAP(pgm_z80_mem)
+	MCFG_CPU_IO_MAP(pgm_z80_io)
 
 	MCFG_MACHINE_START( pgm )
 	MCFG_MACHINE_RESET( pgm )
@@ -1163,254 +560,85 @@
 
 	/*sound hardware */
 	MCFG_SPEAKER_STANDARD_MONO("mono")
-    MCFG_ICS2115_ADD("ics", 0, sound_irq)
+    MCFG_ICS2115_ADD("ics", 0, pgm_sound_irq)
 	MCFG_SOUND_ROUTE(ALL_OUTPUTS, "mono", 5.0)
 MACHINE_CONFIG_END
 
-static MACHINE_CONFIG_START( pgm, pgm_state )
+MACHINE_CONFIG_START( pgm, pgm_state )
 	MCFG_FRAGMENT_ADD(pgmbase)
 MACHINE_CONFIG_END
 
 
 
 
-static MACHINE_CONFIG_DERIVED( killbld, pgm )
-	MCFG_CPU_MODIFY("maincpu")
-	MCFG_CPU_PROGRAM_MAP(killbld_mem)
 
-	MCFG_MACHINE_RESET(killbld)
-MACHINE_CONFIG_END
 
 
-static MACHINE_CONFIG_DERIVED( dw3, pgm )
-	MCFG_CPU_MODIFY("maincpu")
-	MCFG_CPU_PROGRAM_MAP(killbld_mem)
 
-	MCFG_MACHINE_RESET(dw3)
-MACHINE_CONFIG_END
 
 
-static MACHINE_CONFIG_DERIVED( olds, pgm )
-	MCFG_CPU_MODIFY("maincpu")
-	MCFG_CPU_PROGRAM_MAP(olds_mem)
 
-	MCFG_MACHINE_RESET(olds)
-MACHINE_CONFIG_END
+/*** Rom Loading *************************************************************/
 
-/******* ARM 55857E *******/
+/* take note of "gfx2" needed for expanding the 32x32x5bpp data and
+   "sprmask" needed for expanding the Sprite Colour Data */
 
-static MACHINE_CONFIG_DERIVED( kov, pgm )
-	MCFG_CPU_MODIFY("maincpu")
-	MCFG_CPU_PROGRAM_MAP(kov_map)
-
-	/* protection CPU */
-	MCFG_CPU_ADD("prot", ARM7, 20000000)	// 55857E?
-	MCFG_CPU_PROGRAM_MAP(55857E_arm7_map)
-MACHINE_CONFIG_END
+#define ROM_LOAD16_WORD_SWAP_BIOS(bios,name,offset,length,hash) \
+		ROMX_LOAD(name, offset, length, hash, ROM_GROUPWORD | ROM_REVERSE | ROM_BIOS(bios+1)) /* Note '+1' */
 
-static MACHINE_CONFIG_DERIVED( kov_disabled_arm, pgm ) // for simulated cases
-	MCFG_CPU_MODIFY("maincpu")
-	MCFG_CPU_PROGRAM_MAP(pgm_basic_mem)
+#define PGM_68K_BIOS \
+	ROM_SYSTEM_BIOS( 0, "v2",     "PGM Bios V2" ) \
+	ROM_LOAD16_WORD_SWAP_BIOS( 0, "pgm_p02s.u20",    0x00000, 0x020000, CRC(78c15fa2) SHA1(885a6558e022602cc6f482ac9667ba9f61e75092) ) /* Version 2 (Label: IGS | PGM P02S | 1P0792D1 | J992438 )*/ \
+	ROM_SYSTEM_BIOS( 1, "v1",     "PGM Bios V1" ) \
+	ROM_LOAD16_WORD_SWAP_BIOS( 1, "pgm_p01s.u20",    0x00000, 0x020000, CRC(e42b166e) SHA1(2a9df9ec746b14b74fae48b1a438da14973702ea) ) /* Version 1 */ \
 
-	/* protection CPU */
-	MCFG_CPU_ADD("prot", ARM7, 20000000)	// 55857E?
-	MCFG_CPU_PROGRAM_MAP(55857E_arm7_map)
-	MCFG_DEVICE_DISABLE()
-MACHINE_CONFIG_END
+#define PGM_AUDIO_BIOS \
+	ROM_LOAD( "pgm_m01s.rom", 0x000000, 0x200000, CRC(45ae7159) SHA1(d3ed3ff3464557fd0df6b069b2e431528b0ebfa8) ) \
 
-static MACHINE_CONFIG_DERIVED( kov_simulated_arm, kov_disabled_arm ) // for simulated cases
-	MCFG_CPU_MODIFY("maincpu")
-	MCFG_CPU_PROGRAM_MAP(kov_map)
+#define PGM_VIDEO_BIOS \
+	ROM_LOAD( "pgm_t01s.rom", 0x000000, 0x200000, CRC(1a7123a0) SHA1(cc567f577bfbf45427b54d6695b11b74f2578af3) ) \
 
-	MCFG_MACHINE_RESET(kov)
-MACHINE_CONFIG_END
+/* The Bios - NOT A GAME */
+ROM_START( pgm )
+	ROM_REGION( 0x600000, "maincpu", 0 ) /* 68000 Code */
+	PGM_68K_BIOS
 
-/******* ARM 55857F *******/
+	ROM_REGION( 0x200000, "tiles", 0 ) /* 8x8 Text Layer Tiles */
+	PGM_VIDEO_BIOS
 
-static MACHINE_CONFIG_DERIVED( kov2, pgm )
-	MCFG_CPU_MODIFY("maincpu")
-	MCFG_CPU_PROGRAM_MAP(kov2_mem)
-
-	/* protection CPU */
-	MCFG_CPU_ADD("prot", ARM7, 20000000)	// 55857F
-	MCFG_CPU_PROGRAM_MAP(55857F_arm7_map)
-MACHINE_CONFIG_END
+	ROM_REGION( 0x200000, "ics", 0 ) /* Samples - (8 bit mono 11025Hz) - */
+	PGM_AUDIO_BIOS
 
-static MACHINE_CONFIG_DERIVED( kov2_disabled_arm, pgm ) // for simulated cases
-	MCFG_CPU_MODIFY("maincpu")
-	MCFG_CPU_PROGRAM_MAP(pgm_basic_mem)
+	ROM_REGION( 0x1000000, "sprcol", ROMREGION_ERASEFF ) /* Sprite Colour Data */
+	ROM_REGION( 0x1000000, "sprmask", ROMREGION_ERASEFF ) /* Sprite Masks + Colour Indexes */
+ROM_END
 
-	/* protection CPU */
-	MCFG_CPU_ADD("prot", ARM7, 20000000)	// 55857F
-	MCFG_CPU_PROGRAM_MAP(55857F_arm7_map)
-	MCFG_DEVICE_DISABLE()
-MACHINE_CONFIG_END
+ROM_START( orlegend )
+	ROM_REGION( 0x600000, "maincpu", 0 ) /* 68000 Code  */
+	PGM_68K_BIOS
+	ROM_LOAD16_WORD_SWAP( "p0103.rom",    0x100000, 0x200000, CRC(d5e93543) SHA1(f081edc26514ca8354c13c7f6f89aba8e4d3e7d2) )
 
-/******* ARM 55857G *******/
+	ROM_REGION( 0x800000, "tiles",  0 ) /* 8x8 Text Tiles + 32x32 BG Tiles */
+	PGM_VIDEO_BIOS
+	ROM_LOAD( "t0100.rom",    0x180000, 0x400000, CRC(61425e1e) SHA1(20753b86fc12003cfd763d903f034dbba8010b32) )
 
-static MACHINE_CONFIG_DERIVED( svg, pgm )
-	MCFG_CPU_MODIFY("maincpu")
-	MCFG_CPU_PROGRAM_MAP(svg_68k_mem)
-
-	/* protection CPU */
-	MCFG_CPU_ADD("prot", ARM7, 20000000)	// 55857G
-	MCFG_CPU_PROGRAM_MAP(55857G_arm7_map)
-MACHINE_CONFIG_END
+	ROM_REGION( 0x1800000, "sprcol", 0 ) /* Sprite Colour Data */
+	ROM_LOAD( "a0100.rom",    0x0000000, 0x400000, CRC(8b3bd88a) SHA1(42db3a60c6ba9d83ebe2008c8047d094027f65a7) )
+	ROM_LOAD( "a0101.rom",    0x0400000, 0x400000, CRC(3b9e9644) SHA1(5b95ec1d25c3bc3504c93547f5adb5ce24376405) )
+	ROM_LOAD( "a0102.rom",    0x0800000, 0x400000, CRC(069e2c38) SHA1(9bddca8c2f5bd80f4abe4e1f062751736dc151dd) )
+	ROM_LOAD( "a0103.rom",    0x0c00000, 0x400000, CRC(4460a3fd) SHA1(cbebdb65c17605853f7d0b298018dd8801a25a58) )
+	ROM_LOAD( "a0104.rom",    0x1000000, 0x400000, CRC(5f8abb56) SHA1(6c1ddc0309862a141aa0c0f63b641aec9257aaee) )
+	ROM_LOAD( "a0105.rom",    0x1400000, 0x400000, CRC(a17a7147) SHA1(44eeb43c6b0ebb829559a20ae357383fbdeecd82) )
 
+	ROM_REGION( 0x1000000, "sprmask", 0 ) /* Sprite Masks + Colour Indexes */
+	ROM_LOAD( "b0100.rom",    0x0000000, 0x400000, CRC(69d2e48c) SHA1(5b5f759007264c07b3b39be8e03a713698e1fc2a) )
+	ROM_LOAD( "b0101.rom",    0x0400000, 0x400000, CRC(0d587bf3) SHA1(5347828b0a6e4ddd7a263663d2c2604407e4d49c) )
+	ROM_LOAD( "b0102.rom",    0x0800000, 0x400000, CRC(43823c1e) SHA1(e10a1a9a81b51b11044934ff702e35d8d7ab1b08) )
 
-static MACHINE_CONFIG_DERIVED( svg_disabled_arm, pgm ) // for simulated cases
-	MCFG_CPU_MODIFY("maincpu")
-	MCFG_CPU_PROGRAM_MAP(pgm_basic_mem)
-
-	/* protection CPU */
-	MCFG_CPU_ADD("prot", ARM7, 20000000)	// 55857G
-	MCFG_CPU_PROGRAM_MAP(55857G_arm7_map)
-	MCFG_DEVICE_DISABLE()
-MACHINE_CONFIG_END
-
-class cavepgm_state : public pgm_state
-{
-public:
-	cavepgm_state(const machine_config &mconfig, device_type type, const char *tag)
-		: pgm_state(mconfig, type, tag) {
-
-		m_ddp3internal_slot = 0;
-	}
-
-	UINT16 m_value0;
-	UINT16 m_value1;
-	UINT16 m_valuekey;
-	UINT16 m_ddp3lastcommand;
-	UINT32 m_valueresponse;
-	int m_ddp3internal_slot;
-	UINT32 m_ddp3slots[0x100];
-	INT16 m_ddp3thrust;
-};
-
-static MACHINE_START( cavepgm )
-{
-	MACHINE_START_CALL(pgm);
-
-	cavepgm_state *state = machine.driver_data<cavepgm_state>();
-
-	state->save_item(NAME(state->m_value0));
-	state->save_item(NAME(state->m_value1));
-	state->save_item(NAME(state->m_valuekey));
-	state->save_item(NAME(state->m_valueresponse));
-	state->save_item(NAME(state->m_ddp3internal_slot));
-	state->save_item(NAME(state->m_ddp3slots));
-}
-
-static MACHINE_CONFIG_START( cavepgm, cavepgm_state )
-
-	/* basic machine hardware */
-	MCFG_CPU_ADD("maincpu", M68000, 20000000)
-	MCFG_CPU_PROGRAM_MAP(cavepgm_mem)
-	MCFG_TIMER_ADD_SCANLINE("scantimer", drgw_interrupt, "screen", 0, 1)
-
-	MCFG_CPU_ADD("soundcpu", Z80, 33868800/4)
-	MCFG_CPU_PROGRAM_MAP(z80_mem)
-	MCFG_CPU_IO_MAP(z80_io)
-
-	MCFG_MACHINE_START( cavepgm )
-	MCFG_MACHINE_RESET( pgm )
-	MCFG_NVRAM_ADD_0FILL("sram")
-
-	MCFG_V3021_ADD("rtc")
-
-	/* video hardware */
-	MCFG_SCREEN_ADD("screen", RASTER)
-	MCFG_SCREEN_REFRESH_RATE(59.17) // verified on pcb
-	MCFG_SCREEN_VBLANK_TIME(ATTOSECONDS_IN_USEC(0))
-	MCFG_SCREEN_SIZE(64*8, 64*8)
-	MCFG_SCREEN_VISIBLE_AREA(0*8, 56*8-1, 0*8, 28*8-1)
-	MCFG_SCREEN_UPDATE_STATIC(pgm)
-	MCFG_SCREEN_VBLANK_STATIC(pgm)
-
-	MCFG_GFXDECODE(pgm)
-	MCFG_PALETTE_LENGTH(0x1200/2)
-
-	MCFG_VIDEO_START(pgm)
-
-	/*sound hardware */
-	MCFG_SPEAKER_STANDARD_MONO("mono")
-    MCFG_ICS2115_ADD("ics", 0, sound_irq)
-	MCFG_SOUND_ROUTE(ALL_OUTPUTS, "mono", 5.0)
-MACHINE_CONFIG_END
-
-// for now we're using a protection sim close ot the CavePgm one, so use that state.
-static MACHINE_CONFIG_DERIVED( puzzli2_disabled_arm, cavepgm )
-	MCFG_CPU_MODIFY("maincpu")
-	MCFG_CPU_PROGRAM_MAP(pgm_basic_mem)
-
-	/* protection CPU */
-	MCFG_CPU_ADD("prot", ARM7, 20000000)	// 55857F?
-	MCFG_CPU_PROGRAM_MAP(55857F_arm7_map)
-	MCFG_DEVICE_DISABLE()
-MACHINE_CONFIG_END
-
-
-/*** Rom Loading *************************************************************/
-
-/* take note of "gfx2" needed for expanding the 32x32x5bpp data and
-   "sprmask" needed for expanding the Sprite Colour Data */
-
-#define ROM_LOAD16_WORD_SWAP_BIOS(bios,name,offset,length,hash) \
-		ROMX_LOAD(name, offset, length, hash, ROM_GROUPWORD | ROM_REVERSE | ROM_BIOS(bios+1)) /* Note '+1' */
-
-#define PGM_68K_BIOS \
-	ROM_SYSTEM_BIOS( 0, "v2",     "PGM Bios V2" ) \
-	ROM_LOAD16_WORD_SWAP_BIOS( 0, "pgm_p02s.u20",    0x00000, 0x020000, CRC(78c15fa2) SHA1(885a6558e022602cc6f482ac9667ba9f61e75092) ) /* Version 2 (Label: IGS | PGM P02S | 1P0792D1 | J992438 )*/ \
-	ROM_SYSTEM_BIOS( 1, "v1",     "PGM Bios V1" ) \
-	ROM_LOAD16_WORD_SWAP_BIOS( 1, "pgm_p01s.u20",    0x00000, 0x020000, CRC(e42b166e) SHA1(2a9df9ec746b14b74fae48b1a438da14973702ea) ) /* Version 1 */ \
-
-#define PGM_AUDIO_BIOS \
-	ROM_LOAD( "pgm_m01s.rom", 0x000000, 0x200000, CRC(45ae7159) SHA1(d3ed3ff3464557fd0df6b069b2e431528b0ebfa8) ) \
-
-#define PGM_VIDEO_BIOS \
-	ROM_LOAD( "pgm_t01s.rom", 0x000000, 0x200000, CRC(1a7123a0) SHA1(cc567f577bfbf45427b54d6695b11b74f2578af3) ) \
-
-/* The Bios - NOT A GAME */
-ROM_START( pgm )
-	ROM_REGION( 0x600000, "maincpu", 0 ) /* 68000 Code */
-	PGM_68K_BIOS
-
-	ROM_REGION( 0x200000, "tiles", 0 ) /* 8x8 Text Layer Tiles */
-	PGM_VIDEO_BIOS
-
-	ROM_REGION( 0x200000, "ics", 0 ) /* Samples - (8 bit mono 11025Hz) - */
-	PGM_AUDIO_BIOS
-
-	ROM_REGION( 0x1000000, "sprcol", ROMREGION_ERASEFF ) /* Sprite Colour Data */
-	ROM_REGION( 0x1000000, "sprmask", ROMREGION_ERASEFF ) /* Sprite Masks + Colour Indexes */
-ROM_END
-
-ROM_START( orlegend )
-	ROM_REGION( 0x600000, "maincpu", 0 ) /* 68000 Code  */
-	PGM_68K_BIOS
-	ROM_LOAD16_WORD_SWAP( "p0103.rom",    0x100000, 0x200000, CRC(d5e93543) SHA1(f081edc26514ca8354c13c7f6f89aba8e4d3e7d2) )
-
-	ROM_REGION( 0x800000, "tiles",  0 ) /* 8x8 Text Tiles + 32x32 BG Tiles */
-	PGM_VIDEO_BIOS
-	ROM_LOAD( "t0100.rom",    0x180000, 0x400000, CRC(61425e1e) SHA1(20753b86fc12003cfd763d903f034dbba8010b32) )
-
-	ROM_REGION( 0x1800000, "sprcol", 0 ) /* Sprite Colour Data */
-	ROM_LOAD( "a0100.rom",    0x0000000, 0x400000, CRC(8b3bd88a) SHA1(42db3a60c6ba9d83ebe2008c8047d094027f65a7) )
-	ROM_LOAD( "a0101.rom",    0x0400000, 0x400000, CRC(3b9e9644) SHA1(5b95ec1d25c3bc3504c93547f5adb5ce24376405) )
-	ROM_LOAD( "a0102.rom",    0x0800000, 0x400000, CRC(069e2c38) SHA1(9bddca8c2f5bd80f4abe4e1f062751736dc151dd) )
-	ROM_LOAD( "a0103.rom",    0x0c00000, 0x400000, CRC(4460a3fd) SHA1(cbebdb65c17605853f7d0b298018dd8801a25a58) )
-	ROM_LOAD( "a0104.rom",    0x1000000, 0x400000, CRC(5f8abb56) SHA1(6c1ddc0309862a141aa0c0f63b641aec9257aaee) )
-	ROM_LOAD( "a0105.rom",    0x1400000, 0x400000, CRC(a17a7147) SHA1(44eeb43c6b0ebb829559a20ae357383fbdeecd82) )
-
-	ROM_REGION( 0x1000000, "sprmask", 0 ) /* Sprite Masks + Colour Indexes */
-	ROM_LOAD( "b0100.rom",    0x0000000, 0x400000, CRC(69d2e48c) SHA1(5b5f759007264c07b3b39be8e03a713698e1fc2a) )
-	ROM_LOAD( "b0101.rom",    0x0400000, 0x400000, CRC(0d587bf3) SHA1(5347828b0a6e4ddd7a263663d2c2604407e4d49c) )
-	ROM_LOAD( "b0102.rom",    0x0800000, 0x400000, CRC(43823c1e) SHA1(e10a1a9a81b51b11044934ff702e35d8d7ab1b08) )
-
-	ROM_REGION( 0x600000, "ics", 0 ) /* Samples - (8 bit mono 11025Hz) - */
-	PGM_AUDIO_BIOS
-	ROM_LOAD( "m0100.rom",    0x400000, 0x200000, CRC(e5c36c83) SHA1(50c6f66770e8faa3df349f7d68c407a7ad021716) )
-ROM_END
+	ROM_REGION( 0x600000, "ics", 0 ) /* Samples - (8 bit mono 11025Hz) - */
+	PGM_AUDIO_BIOS
+	ROM_LOAD( "m0100.rom",    0x400000, 0x200000, CRC(e5c36c83) SHA1(50c6f66770e8faa3df349f7d68c407a7ad021716) )
+ROM_END
 
 ROM_START( orlegende )
 	ROM_REGION( 0x600000, "maincpu", 0 ) /* 68000 Code  */
@@ -3296,9 +2524,9 @@
 	ROM_LOAD16_WORD_SWAP( "v102.u8", 0x100000, 0x200000, CRC(5a9ea040) SHA1(51eaec46c368f7cfc5245e64896092f52b1193e0) )
 
 	ROM_REGION( 0x4000, "prot", 0 ) /* ARM protection ASIC - internal rom */
-	ROM_LOAD( "ddp2_igs027a.bin", 0x000000, 0x04000, NO_DUMP )
+	ROM_LOAD( "ddp2_igs027a_japan.bin", 0x000000, 0x04000, CRC(742d34d2) SHA1(4491c08f3cefef2933ad5a741f4bb05cc2f3e1a0) )
 
-	ROM_REGION32_LE( 0x400000, "user1", 0 ) /* Protection Data (encrypted external ARM data, internal missing) */
+	ROM_REGION32_LE( 0x400000, "user1", 0 ) /* Protection Data (encrypted external ARM data) */
 	ROM_LOAD( "v100.u23", 0x000000, 0x20000, CRC(06c3dd29) SHA1(20c9479f158467fc2037dcf162b6c6be18c91d46) )
 
 	ROM_REGION( 0xc00000, "tiles", 0 ) /* 8x8 Text Tiles + 32x32 BG Tiles */
@@ -3323,9 +2551,9 @@
 	ROM_LOAD16_WORD_SWAP( "v101_16m.u8", 0x100000, 0x200000, CRC(5e5786fd) SHA1(c6fc2956b5dc6a97c0d7d808a8c58aa21fa023b9) )
 
 	ROM_REGION( 0x4000, "prot", 0 ) /* ARM protection ASIC - internal rom */
-	ROM_LOAD( "ddp2_igs027a.bin", 0x000000, 0x04000, NO_DUMP )
+	ROM_LOAD( "ddp2_igs027a_japan.bin", 0x000000, 0x04000, CRC(742d34d2) SHA1(4491c08f3cefef2933ad5a741f4bb05cc2f3e1a0) )
 
-	ROM_REGION32_LE( 0x400000, "user1", 0 ) /* Protection Data (encrypted external ARM data, internal missing) */
+	ROM_REGION32_LE( 0x400000, "user1", 0 ) /* Protection Data (encrypted external ARM data) */
 	ROM_LOAD( "v100.u23", 0x000000, 0x20000, CRC(06c3dd29) SHA1(20c9479f158467fc2037dcf162b6c6be18c91d46) )
 
 	ROM_REGION( 0xc00000, "tiles", 0 ) /* 8x8 Text Tiles + 32x32 BG Tiles */
@@ -3350,9 +2578,9 @@
 	ROM_LOAD16_WORD_SWAP( "v100.u8", 0x100000, 0x200000, CRC(0c8aa8ea) SHA1(57e33224622607a1df8daabf26ba063cf8a6d3fc) )
 
 	ROM_REGION( 0x4000, "prot", 0 ) /* ARM protection ASIC - internal rom */
-	ROM_LOAD( "ddp2_igs027a.bin", 0x000000, 0x04000, NO_DUMP )
+	ROM_LOAD( "ddp2_igs027a_japan.bin", 0x000000, 0x04000, CRC(742d34d2) SHA1(4491c08f3cefef2933ad5a741f4bb05cc2f3e1a0) )
 
-	ROM_REGION32_LE( 0x400000, "user1", 0 ) /* Protection Data (encrypted external ARM data, internal missing) */
+	ROM_REGION32_LE( 0x400000, "user1", 0 ) /* Protection Data (encrypted external ARM data) */
 	ROM_LOAD( "v100.u23", 0x000000, 0x20000, CRC(06c3dd29) SHA1(20c9479f158467fc2037dcf162b6c6be18c91d46) )
 
 	ROM_REGION( 0xc00000, "tiles", 0 ) /* 8x8 Text Tiles + 32x32 BG Tiles */
@@ -3406,7 +2634,7 @@
 
 	ROM_REGION( 0x600000, "tiles", 0 ) /* 8x8 Text Tiles + 32x32 BG Tiles */
 	PGM_VIDEO_BIOS
-	ROM_LOAD( "2001.u11",    0x180000, 0x200000, CRC(1dd8d1e9) SHA1(13dc5d8e541bbd6eef9f477aa288978bccf7ebb3) )
+	ROM_LOAD( "2001.u11",    0x180000, 0x200000, CRC(b27cf093) SHA1(7c5736a3d72b89742da1c92b2604d66e48b95e56) )
 
 	ROM_REGION( 0x400000, "sprcol", 0 ) /* Sprite Colour Data */
 	ROM_LOAD( "2001.u2",    0x000000, 0x200000, CRC(d11c733c) SHA1(8faad32e8e215631a2263bdd51a9ae434540d028) )
@@ -3482,9 +2710,6 @@
 	ROM_REGION( 0x4000, "prot", ROMREGION_ERASEFF ) /* ARM protection ASIC - internal rom */
 	ROM_LOAD( "puzzli2_igs027a.bin", 0x000000, 0x04000, NO_DUMP )
 
-	ROM_REGION32_LE( 0x4000000, "user1", ROMREGION_ERASEFF )
-	/* not on this PCB */
-
 	ROM_REGION( 0x600000, "tiles", 0 ) /* 8x8 Text Tiles + 32x32 BG Tiles */
 	PGM_VIDEO_BIOS
 	ROM_LOAD( "t0900.u9",    0x180000, 0x200000, CRC(70615611) SHA1(a46d4aa71396947b427f9ba4ba0e636876c09d6b) )
@@ -3708,16 +2933,19 @@
 
 */
 
+
 ROM_START( dmnfrnt )
 	ROM_REGION( 0x600000, "maincpu", 0 ) /* 68000 Code */
 	PGM_68K_BIOS
-	ROM_LOAD16_WORD_SWAP( "v102_16m.u5",    0x100000, 0x200000, CRC(3d4d481a) SHA1(95953b8f31343389405cc722b4177ff5adf67b62) )
+	ROM_LOAD16_WORD_SWAP( "v105_16m.u5",    0x100000, 0x200000, CRC(bda083bd) SHA1(58d6438737a2c43aa8bbcb7f34fb51375b781b1c) )
 
 	ROM_REGION( 0x4000, "prot", 0 ) /* ARM protection ASIC - internal rom */
 	ROM_LOAD( "dmnfrnt_igs027a.bin", 0x000000, 0x04000, NO_DUMP )
 
 	ROM_REGION( 0x800000, "user1", 0 ) /* Protection Data (encrypted external ARM data, internal missing) */
-	ROM_LOAD( "v101_32m.u26", 0x000000, 0x400000,  CRC(93965281) SHA1(89da198aaa7ca759cb96b5f18859a477e55fd590) )
+	/* one of these is probably a bad dump, it should be obvious once progress is made because the external rom is checksummed by the internal one */
+	ROM_LOAD( "v105_32m.u26",     0x000000, 0x400000,  CRC(d200ee63) SHA1(3128c27c5f5a4361d31e7b4bb006de631b3a228c) )
+	ROM_LOAD( "chinese-v105.u62", 0x000000, 0x400000,  CRC(c798c2ef) SHA1(91e364c33b935293fa765ca521cdb67ac45ec70f) )
 
 	ROM_REGION( 0xc00000, "tiles", 0 ) /* 8x8 Text Tiles + 32x32 BG Tiles */
 	PGM_VIDEO_BIOS
@@ -3740,15 +2968,42 @@
 ROM_START( dmnfrnta )
 	ROM_REGION( 0x600000, "maincpu", 0 ) /* 68000 Code */
 	PGM_68K_BIOS
-	ROM_LOAD16_WORD_SWAP( "v105_16m.u5",    0x100000, 0x200000, CRC(bda083bd) SHA1(58d6438737a2c43aa8bbcb7f34fb51375b781b1c) )
+	ROM_LOAD16_WORD_SWAP( "v102_16m.u5",    0x100000, 0x200000, CRC(3d4d481a) SHA1(95953b8f31343389405cc722b4177ff5adf67b62) )
 
 	ROM_REGION( 0x4000, "prot", 0 ) /* ARM protection ASIC - internal rom */
 	ROM_LOAD( "dmnfrnt_igs027a.bin", 0x000000, 0x04000, NO_DUMP )
 
 	ROM_REGION( 0x800000, "user1", 0 ) /* Protection Data (encrypted external ARM data, internal missing) */
-	/* one of these is probably a bad dump, it should be obvious once progress is made because the external rom is checksummed by the internal one */
-	ROM_LOAD( "v105_32m.u26",     0x000000, 0x400000,  CRC(d200ee63) SHA1(3128c27c5f5a4361d31e7b4bb006de631b3a228c) )
-	ROM_LOAD( "chinese-v105.u62", 0x000000, 0x400000,  CRC(c798c2ef) SHA1(91e364c33b935293fa765ca521cdb67ac45ec70f) )
+	ROM_LOAD( "v101_32m.u26", 0x000000, 0x400000,  CRC(93965281) SHA1(89da198aaa7ca759cb96b5f18859a477e55fd590) )
+
+	ROM_REGION( 0xc00000, "tiles", 0 ) /* 8x8 Text Tiles + 32x32 BG Tiles */
+	PGM_VIDEO_BIOS
+	ROM_LOAD( "t04501.u29",    0x180000, 0x800000, CRC(900eaaac) SHA1(4033cb7b28fcadb92d5af3ea7fdd1c22747618fd) )
+
+	ROM_REGION( 0x1800000, "sprcol", 0 ) /* Sprite Colour Data */
+	ROM_LOAD( "a04501.u3",    0x0000000, 0x0800000, CRC(9741bea6) SHA1(e3e904249be228628c8c2bd3495cda23586dc048) )
+	ROM_LOAD( "a04502.u4",    0x0800000, 0x0800000, CRC(e104f405) SHA1(124b3deed3e838f8bae6c7d78bdd788859597585) )
+	ROM_LOAD( "a04503.u6",    0x1000000, 0x0800000, CRC(bfd5cfe3) SHA1(fbe4c0a2987c2036df707b86597d78124ee2e665) )
+
+	ROM_REGION( 0x1000000, "sprmask", 0 ) /* Sprite Masks + Colour Indexes */
+	ROM_LOAD( "b04501.u9",    0x0000000, 0x0800000,  CRC(29320b7d) SHA1(59c78805e666f912df201c34616744f46057937b) )
+	ROM_LOAD( "b04502.u11",   0x0800000, 0x0200000,  CRC(578c00e9) SHA1(14235cc8b0f8c7dd659512f017a2d4aacd91d89d) )
+
+	ROM_REGION( 0x1000000, "ics", 0 ) /* Samples - (8 bit mono 11025Hz) - */
+	PGM_AUDIO_BIOS
+	ROM_LOAD( "w04501.u5",    0x400000, 0x800000, CRC(3ab58137) SHA1(b221f7e551ff0bfa3fd97b6ebedbac69442a66e9) )
+ROM_END
+
+ROM_START( dmnfrntpcb )
+	ROM_REGION( 0x600000, "maincpu", 0 ) /* 68000 Code */
+	ROM_LOAD16_WORD_SWAP( "pgm_p02s.u42",    0x00000, 0x020000, CRC(78c15fa2) SHA1(885a6558e022602cc6f482ac9667ba9f61e75092) ) /* IGS PGM P02S 1A3708A1A0 S002838  (uses standard PGM v2 bios) */
+	ROM_LOAD16_WORD_SWAP( "demonfront_v107-u43.bin",    0x100000, 0x200000,  CRC(671d8a31) SHA1(a0c2af67d7c56b4b355883892a47640fc72408a1) )
+
+	ROM_REGION( 0x4000, "prot", 0 ) /* ARM protection ASIC - internal rom */
+	ROM_LOAD( "dmnfrnt_igs027a.bin", 0x000000, 0x04000, NO_DUMP )
+
+	ROM_REGION( 0x800000, "user1", 0 ) /* Protection Data (encrypted external ARM data, internal missing) */
+	ROM_LOAD( "demonfront_v107-u62.bin",     0x000000, 0x400000, CRC(cb94772e) SHA1(4213600be41fd9ea295dd308920b1d89b635724f) )
 
 	ROM_REGION( 0xc00000, "tiles", 0 ) /* 8x8 Text Tiles + 32x32 BG Tiles */
 	PGM_VIDEO_BIOS
@@ -3759,7 +3014,7 @@
 	ROM_LOAD( "a04502.u4",    0x0800000, 0x0800000, CRC(e104f405) SHA1(124b3deed3e838f8bae6c7d78bdd788859597585) )
 	ROM_LOAD( "a04503.u6",    0x1000000, 0x0800000, CRC(bfd5cfe3) SHA1(fbe4c0a2987c2036df707b86597d78124ee2e665) )
 
-	ROM_REGION( 0xc00000, "sprmask", 0 ) /* Sprite Masks + Colour Indexes */
+	ROM_REGION( 0x1000000, "sprmask", 0 ) /* Sprite Masks + Colour Indexes */
 	ROM_LOAD( "b04501.u9",    0x0000000, 0x0800000,  CRC(29320b7d) SHA1(59c78805e666f912df201c34616744f46057937b) )
 	ROM_LOAD( "b04502.u11",   0x0800000, 0x0200000,  CRC(578c00e9) SHA1(14235cc8b0f8c7dd659512f017a2d4aacd91d89d) )
 
@@ -3771,13 +3026,13 @@
 ROM_START( theglad )
 	ROM_REGION( 0x600000, "maincpu", 0 ) /* 68000 Code */
 	PGM_68K_BIOS
-	ROM_LOAD16_WORD_SWAP( "u6.rom",       0x100000, 0x080000, CRC(14c85212) SHA1(8d2489708e176a2c460498a13173be01f645b79e) )
+	ROM_LOAD16_WORD_SWAP( "v101.u6",      0x100000, 0x080000, CRC(f799e866) SHA1(dccc3c903357c40c3cf85ac0ae8fc12fb0f853a6) )
 
 	ROM_REGION( 0x4000, "prot", 0 ) /* ARM protection ASIC - internal rom */
 	ROM_LOAD( "theglad_igs027a.bin", 0x000000, 0x04000, NO_DUMP )
 
 	ROM_REGION( 0x800000, "user1", 0 ) /* Protection Data (encrypted external ARM data, internal missing) */
-	ROM_LOAD( "u2.rom", 0x000000, 0x200000,  CRC(c7bcf2ae) SHA1(10bc012c83987f594d5375a51bc4be2e17568a81) )
+	ROM_LOAD( "v107.u26", 0x000000, 0x200000,  CRC(f7c61357) SHA1(52d31c464dfc83c5371b078cb6b73c0d0e0d57e3) )
 
 	ROM_REGION( 0xc00000, "tiles", 0 ) /* 8x8 Text Tiles + 32x32 BG Tiles */
 	PGM_VIDEO_BIOS
@@ -3800,13 +3055,42 @@
 ROM_START( theglada )
 	ROM_REGION( 0x600000, "maincpu", 0 ) /* 68000 Code */
 	PGM_68K_BIOS
-	ROM_LOAD16_WORD_SWAP( "v101.u6",      0x100000, 0x080000, CRC(f799e866) SHA1(dccc3c903357c40c3cf85ac0ae8fc12fb0f853a6) )
+	ROM_LOAD16_WORD_SWAP( "u6.rom",       0x100000, 0x080000, CRC(14c85212) SHA1(8d2489708e176a2c460498a13173be01f645b79e) )
 
 	ROM_REGION( 0x4000, "prot", 0 ) /* ARM protection ASIC - internal rom */
 	ROM_LOAD( "theglad_igs027a.bin", 0x000000, 0x04000, NO_DUMP )
 
 	ROM_REGION( 0x800000, "user1", 0 ) /* Protection Data (encrypted external ARM data, internal missing) */
-	ROM_LOAD( "v107.u26", 0x000000, 0x200000,  CRC(f7c61357) SHA1(52d31c464dfc83c5371b078cb6b73c0d0e0d57e3) )
+	ROM_LOAD( "u2.rom", 0x000000, 0x200000,  CRC(c7bcf2ae) SHA1(10bc012c83987f594d5375a51bc4be2e17568a81) )
+
+	ROM_REGION( 0xc00000, "tiles", 0 ) /* 8x8 Text Tiles + 32x32 BG Tiles */
+	PGM_VIDEO_BIOS
+	ROM_LOAD( "t04601.u33",   0x180000, 0x800000, CRC(e5dab371) SHA1(2e3c93958eb0326b6b84b95c2168626f26bbac76) )
+
+	ROM_REGION( 0x1800000, "sprcol", 0 ) /* Sprite Colour Data */
+	ROM_LOAD( "a04601.u2",    0x0000000, 0x0800000,  CRC(d9b2e004) SHA1(8e1882b800fe9f12d7d49303e7417ba5b6f8ef85) )
+	ROM_LOAD( "a04602.u4",    0x0800000, 0x0800000,  CRC(14f22308) SHA1(7fad54704e8c97eab723f53dfb50fb3e7bb606d2) )
+	ROM_LOAD( "a04603.u6",    0x1000000, 0x0800000,  CRC(8f621e17) SHA1(b0f87f378e0115d0c95017ca0f1b0d508827a7c6) )
+
+	ROM_REGION( 0x1000000, "sprmask", 0 ) /* Sprite Masks + Colour Indexes */
+	ROM_LOAD( "b04601.u11",   0x0000000, 0x0800000, CRC(ee72bccf) SHA1(73c25fe659f6c903447066e4ef83d2f580449d76) )
+	ROM_LOAD( "b04602.u12",   0x0800000, 0x0400000, CRC(7dba9c38) SHA1(a03d509274e8f6a500a7ebe2da5aab8bed4e7f2f) )
+
+	ROM_REGION( 0x1000000, "ics", 0 ) /* Samples - (8 bit mono 11025Hz) - */
+	PGM_AUDIO_BIOS
+	ROM_LOAD( "w04601.u1",    0x400000, 0x800000, CRC(5f15ddb3) SHA1(c38dcef8e06802a84e42a7fc9fa505475fc3ac65) )
+ROM_END
+
+ROM_START( thegladpcb )
+	ROM_REGION( 0x600000, "maincpu", 0 ) /* 68000 Code */
+	ROM_LOAD16_WORD_SWAP( "bios.42",    0x000000, 0x020000, CRC(517cf7a2) SHA1(f5720b29e3be6ec22be03a768618cb2a1aa4ade7) )
+	ROM_LOAD16_WORD_SWAP( "glad_v100.43",  0x100000, 0x080000, CRC(bcf3b172) SHA1(df7e2808c0341be0a59eefa852c857a3a919223e) )
+
+	ROM_REGION( 0x4000, "prot", 0 ) /* ARM protection ASIC - internal rom */
+	ROM_LOAD( "theglad_igs027a.bin", 0x000000, 0x04000, NO_DUMP )
+
+	ROM_REGION( 0x800000, "user1", 0 ) /* Protection Data (encrypted external ARM data, internal missing) */
+	ROM_LOAD( "igs.62", 0x000000, 0x200000, CRC(0f3f511e) SHA1(28dd8d27495cec86e968a3ea549c5b30513dbb6e) )
 
 	ROM_REGION( 0xc00000, "tiles", 0 ) /* 8x8 Text Tiles + 32x32 BG Tiles */
 	PGM_VIDEO_BIOS
@@ -3944,6 +3228,40 @@
 	ROM_LOAD( "w05602b032.bin",  0xc00000, 0x400000, CRC(0685166d) SHA1(64dac49abd2a46d5fb58c678027aa5e23d672dc4) )
 ROM_END
 
+
+ROM_START( svgpcb )
+	ROM_REGION( 0x600000, "maincpu", 0 ) /* 68000 Code */
+	ROM_LOAD16_WORD_SWAP( "svg_bios.u49",    0x000000, 0x020000, CRC(3346401f) SHA1(28bd730b6026c1e521c95072d33c7bdcd19c1460) )
+	ROM_LOAD16_WORD_SWAP( "svg_v100jp.u50",  0x100000, 0x080000, CRC(8d0405e4) SHA1(b6175c9ffeaac531d28e7845cb34c673476e286a) )
+
+	ROM_REGION( 0x4000, "prot", 0 ) /* ARM protection ASIC - internal rom */
+	ROM_LOAD( "svg_igs027a.bin", 0x000000, 0x04000, NO_DUMP )
+
+	ROM_REGION( 0x800000, "user1", 0 ) /* Protection Data (encrypted external ARM data) */
+	ROM_LOAD( "svg_v100jp.u64", 0x000000, 0x400000, CRC(399d4a8b) SHA1(b120e8386a259e6fd7941acf3c33cf288eda616c) )
+	ROM_LOAD( "svg_v100jp.u65", 0x400000, 0x400000, CRC(6e1c33b1) SHA1(66f26b2f4c0b3dcf6d1bb1df48e2ddbcc9d9432d) )
+
+	ROM_REGION( 0xc00000, "tiles", 0 ) /* 8x8 Text Tiles + 32x32 BG Tiles */
+	PGM_VIDEO_BIOS // IGS PGM T01S 1B8558A1 M002146
+	ROM_LOAD( "t05601w016.bin",0x180000, 0x200000, CRC(03e110dc) SHA1(41c8f286e9303b24ba6235b341371c298226fb6a) ) // IGS T05601W016 2C35 B270 2L464103 B050924
+
+	ROM_REGION( 0x1c00000, "sprcol", 0 ) /* Sprite Colour Data */
+	ROM_LOAD( "a05601w064.bin",  0x0000000, 0x0800000, CRC(ea6453e4) SHA1(b5c82edafa8008ad59b5f2219511947d078d446e) ) // IGS A05601W064 44BF 2ECD 2E153602A1 S050914
+	ROM_LOAD( "a05602w064.bin",  0x0800000, 0x0800000, CRC(6d00621b) SHA1(55a4bc357e14b975b0234a9cd49e2224f509dad9) ) // IGS A05602W064 85C1 8A1F 2E153602A2 S050914
+	ROM_LOAD( "a05603w064.bin",  0x1000000, 0x0800000, CRC(7b71c64f) SHA1(bec7c7edf0634cf8351a54abb867c56af08ad2c3) ) // IGS A05603W064 8EC7 329A 2E153602A3 S050914
+	ROM_LOAD( "a05604w032.bin",  0x1800000, 0x0400000, CRC(9452a567) SHA1(01fdb8e1f131603843ef4c49ab76d7a56b2d6414) ) // IGS A05604W032 55F5 4CDB SL529808 S050912
+
+	ROM_REGION( 0x1000000, "sprmask", 0 ) /* Sprite Masks + Colour Indexes */
+	ROM_LOAD( "b05601w064.bin",  0x0000000, 0x0800000, CRC(35c0a489) SHA1(a7d5527da01f8eaa7499fb6785b57094521bce97) ) // IGS B05601W064 EED5 E656 2E350003A1 S050914
+	ROM_LOAD( "b05602w064.bin",  0x0800000, 0x0800000, CRC(8aad3f85) SHA1(da6996d901d42b3a2ba7019ad014bb938a5e328b) ) // IGS B05602W064 DD65 3D89 2E350004A2 S050914
+
+	ROM_REGION( 0x1000000, "ics", 0 ) /* Samples - (8 bit mono 11025Hz) - */
+	PGM_AUDIO_BIOS // IGS PGM M01S 1BB278A1 E002146
+	ROM_LOAD( "w05601b064.bin",  0x400000, 0x800000, CRC(bfe61a71) SHA1(e682ca8d57ca51c4d72f64fc091161f3dbdce871) ) // IGS W05601B064 2530 FBF6 2E350004A3 S050914
+	ROM_LOAD( "w05602b032.bin",  0xc00000, 0x400000, CRC(0685166d) SHA1(64dac49abd2a46d5fb58c678027aa5e23d672dc4) ) // IGS w05602B032 1BC2 90D3 2K453504 S050912
+ROM_END
+
+
 ROM_START( happy6 )
 	ROM_REGION( 0x600000, "maincpu", 0 ) /* 68000 Code */
 	PGM_68K_BIOS
@@ -3984,9 +3302,6 @@
 	ROM_REGION( 0x4000, "prot", 0 ) /* ARM protection ASIC - internal rom */
 	ROM_LOAD( "ket_igs027a.bin", 0x000000, 0x04000, NO_DUMP )
 
-	ROM_REGION32_LE( 0x400000, "user1", ROMREGION_ERASE00 )
-	/* no external protection rom */
-
 	ROM_REGION( 0xc00000, "tiles", 0 ) /* 8x8 Text Tiles + 32x32 BG Tiles */
 	ROM_LOAD( "pgm_t01s.rom", 0x000000, 0x200000, CRC(1a7123a0) SHA1(cc567f577bfbf45427b54d6695b11b74f2578af3) ) // same as standard PGM text bios - surface scratched to remove details
 	ROM_LOAD( "t04701w064.u19",   0x180000, 0x800000, CRC(2665b041) SHA1(fb1107778b66f2af0de77ac82e1ee2902f53a959) ) //text-1
@@ -4014,9 +3329,6 @@
 	ROM_REGION( 0x4000, "prot", 0 ) /* ARM protection ASIC - internal rom */
 	ROM_LOAD( "ket_igs027a.bin", 0x000000, 0x04000, NO_DUMP )
 
-	ROM_REGION32_LE( 0x400000, "user1", ROMREGION_ERASE00 )
-	/* no external protection rom */
-
 	ROM_REGION( 0xc00000, "tiles", 0 ) /* 8x8 Text Tiles + 32x32 BG Tiles */
 	ROM_LOAD( "pgm_t01s.rom", 0x000000, 0x200000, CRC(1a7123a0) SHA1(cc567f577bfbf45427b54d6695b11b74f2578af3) ) // same as standard PGM text bios - surface scratched to remove details
 	ROM_LOAD( "t04701w064.u19",   0x180000, 0x800000, CRC(2665b041) SHA1(fb1107778b66f2af0de77ac82e1ee2902f53a959) ) //text-1
@@ -4044,9 +3356,6 @@
 	ROM_REGION( 0x4000, "prot", 0 ) /* ARM protection ASIC - internal rom */
 	ROM_LOAD( "ket_igs027a.bin", 0x000000, 0x04000, NO_DUMP )
 
-	ROM_REGION32_LE( 0x400000, "user1", ROMREGION_ERASE00 )
-	/* no external protection rom */
-
 	ROM_REGION( 0xc00000, "tiles", 0 ) /* 8x8 Text Tiles + 32x32 BG Tiles */
 	ROM_LOAD( "pgm_t01s.rom", 0x000000, 0x200000, CRC(1a7123a0) SHA1(cc567f577bfbf45427b54d6695b11b74f2578af3) ) // same as standard PGM text bios - surface scratched to remove details
 	ROM_LOAD( "t04701w064.u19",   0x180000, 0x800000, CRC(2665b041) SHA1(fb1107778b66f2af0de77ac82e1ee2902f53a959) ) //text-1
@@ -4074,9 +3383,6 @@
 	ROM_REGION( 0x4000, "prot", 0 ) /* ARM protection ASIC - internal rom */
 	ROM_LOAD( "espgal_igs027a.bin", 0x000000, 0x04000, NO_DUMP )
 
-	ROM_REGION32_LE( 0x400000, "user1", ROMREGION_ERASE00 )
-	/* no external protection rom */
-
 	ROM_REGION( 0xc00000, "tiles", 0 ) /* 8x8 Text Tiles + 32x32 BG Tiles */
 	ROM_LOAD( "t01s.u18", 0x000000, 0x200000, CRC(1a7123a0) SHA1(cc567f577bfbf45427b54d6695b11b74f2578af3) ) // same as standard PGM text bios - surface scratched to remove details
 	ROM_LOAD( "t04801w064.u19",   0x180000, 0x800000, CRC(6021c79e) SHA1(fbc340dafb18aa3094de29b881318a5a9794e4bc) ) //text-1
@@ -4101,9 +3407,6 @@
 	ROM_REGION( 0x4000, "prot", 0 ) /* ARM protection ASIC - internal rom */
 	ROM_LOAD( "ddp3_igs027a.bin", 0x000000, 0x04000, NO_DUMP )
 
-	ROM_REGION32_LE( 0x400000, "user1", ROMREGION_ERASE00 )
-	/* no external protection rom */
-
 	ROM_REGION( 0xc00000, "tiles", 0 ) /* 8x8 Text Tiles + 32x32 BG Tiles */
 	ROM_LOAD( "pgm_t01s.rom", 0x000000, 0x200000, CRC(1a7123a0) SHA1(cc567f577bfbf45427b54d6695b11b74f2578af3) ) // same as standard PGM bios
 	ROM_LOAD( "t04401w064.u19",0x180000, 0x800000, CRC(3a95f19c) SHA1(fd3c47cf0b8b1e20c6bec4be68a089fc8bbf4dbe) ) //text-1
@@ -4132,9 +3435,6 @@
 	ROM_REGION( 0x4000, "prot", 0 ) /* ARM protection ASIC - internal rom */
 	ROM_LOAD( "ddp3_igs027a.bin", 0x000000, 0x04000, NO_DUMP )
 
-	ROM_REGION32_LE( 0x400000, "user1", ROMREGION_ERASE00 )
-	/* no external protection rom */
-
 	ROM_REGION( 0xc00000, "tiles", 0 ) /* 8x8 Text Tiles + 32x32 BG Tiles */
 	ROM_LOAD( "pgm_t01s.rom", 0x000000, 0x200000, CRC(1a7123a0) SHA1(cc567f577bfbf45427b54d6695b11b74f2578af3) ) // same as standard PGM bios
 	ROM_LOAD( "t04401w064.u19",0x180000, 0x800000, CRC(3a95f19c) SHA1(fd3c47cf0b8b1e20c6bec4be68a089fc8bbf4dbe) ) //text-1
@@ -4162,9 +3462,6 @@
 	ROM_REGION( 0x4000, "prot", 0 ) /* ARM protection ASIC - internal rom */
 	ROM_LOAD( "ddp3_igs027a.bin", 0x000000, 0x04000, NO_DUMP )
 
-	ROM_REGION32_LE( 0x400000, "user1", ROMREGION_ERASE00 )
-	/* no external protection rom */
-
 	ROM_REGION( 0xc00000, "tiles", 0 ) /* 8x8 Text Tiles + 32x32 BG Tiles */
 	ROM_LOAD( "pgm_t01s.rom", 0x000000, 0x200000, CRC(1a7123a0) SHA1(cc567f577bfbf45427b54d6695b11b74f2578af3) ) // same as standard PGM bios
 	ROM_LOAD( "t04401w064.u19",0x180000, 0x800000, CRC(3a95f19c) SHA1(fd3c47cf0b8b1e20c6bec4be68a089fc8bbf4dbe) ) //text-1
@@ -4193,9 +3490,6 @@
 	ROM_REGION( 0x4000, "prot", 0 ) /* ARM protection ASIC - internal rom */
 	ROM_LOAD( "ddp3_igs027a.bin", 0x000000, 0x04000, NO_DUMP )
 
-	ROM_REGION32_LE( 0x400000, "user1", ROMREGION_ERASE00 )
-	/* no external protection rom */
-
 	ROM_REGION( 0xc00000, "tiles", 0 ) /* 8x8 Text Tiles + 32x32 BG Tiles */
 	ROM_LOAD( "pgm_t01s.rom", 0x000000, 0x200000, CRC(1a7123a0) SHA1(cc567f577bfbf45427b54d6695b11b74f2578af3) ) // same as standard PGM bios
 	ROM_LOAD( "t04401w064.u19",0x180000, 0x800000, CRC(3a95f19c) SHA1(fd3c47cf0b8b1e20c6bec4be68a089fc8bbf4dbe) ) //text-1
@@ -4294,7 +3588,7 @@
 
 
 
-static void pgm_basic_init( running_machine &machine, bool set_bank = true )
+void pgm_basic_init( running_machine &machine, bool set_bank)
 {
 	pgm_state *state = machine.driver_data<pgm_state>();
 
@@ -4314,1570 +3608,91 @@
 	pgm_basic_init(machine);
 }
 
-/* Oriental Legend INIT */
 
-static DRIVER_INIT( orlegend )
-{
-	pgm_state *state = machine.driver_data<pgm_state>();
-	pgm_basic_init(machine);
 
-	machine.device("maincpu")->memory().space(AS_PROGRAM)->install_legacy_readwrite_handler(0xC0400e, 0xC0400f, FUNC(pgm_asic3_r), FUNC(pgm_asic3_w));
-	machine.device("maincpu")->memory().space(AS_PROGRAM)->install_legacy_write_handler(0xC04000, 0xC04001, FUNC(pgm_asic3_reg_w));
 
-	state->m_asic3_reg = 0;
-	state->m_asic3_latch[0] = 0;
-	state->m_asic3_latch[1] = 0;
-	state->m_asic3_latch[2] = 0;
-	state->m_asic3_x = 0;
-	state->m_asic3_y = 0;
-	state->m_asic3_z = 0;
-	state->m_asic3_h1 = 0;
-	state->m_asic3_h2 = 0;
-	state->m_asic3_hold = 0;
-
-	state->save_item(NAME(state->m_asic3_reg));
-	state->save_item(NAME(state->m_asic3_latch));
-	state->save_item(NAME(state->m_asic3_x));
-	state->save_item(NAME(state->m_asic3_y));
-	state->save_item(NAME(state->m_asic3_z));
-	state->save_item(NAME(state->m_asic3_h1));
-	state->save_item(NAME(state->m_asic3_h2));
-	state->save_item(NAME(state->m_asic3_hold));
-}
 
-static void drgwld2_common_init(running_machine &machine)
-{
-	pgm_basic_init(machine);
-	pgm_dw2_decrypt(machine);
-	/*
-    Info from Elsemi
-    Here is how to "bypass" the dw2 hang protection, it fixes the mode
-    select and after failing in the 2nd stage (probably there are other checks
-    out there).
-    */
-	machine.device("maincpu")->memory().space(AS_PROGRAM)->install_legacy_read_handler(0xd80000, 0xd80003, FUNC(dw2_d80000_r));
-}
 
-static DRIVER_INIT( drgw2 )
-{	/* incomplete? */
-	UINT16 *mem16 = (UINT16 *)machine.region("maincpu")->base();
-	drgwld2_common_init(machine);
-	/* These ROM patches are not hacks, the protection device
-       overlays the normal ROM code, this has been confirmed on a real PCB
-       although some addresses may be missing */
-	mem16[0x131098 / 2] = 0x4e93;
-	mem16[0x13113e / 2] = 0x4e93;
-	mem16[0x1311ce / 2] = 0x4e93;
-}
 
-static DRIVER_INIT( dw2v100x )
-{
-	UINT16 *mem16 = (UINT16 *)machine.region("maincpu")->base();
-	drgwld2_common_init(machine);
 
-	mem16[0x131084 / 2] = 0x4e93;
-	mem16[(0x131084+0xa6) / 2] = 0x4e93;
-	mem16[(0x131084+0x136) / 2] = 0x4e93;
-}
+/*** GAME ********************************************************************/
 
-static DRIVER_INIT( drgw2c )
-{
-	UINT16 *mem16 = (UINT16 *)machine.region("maincpu")->base();
-	drgwld2_common_init(machine);
-	/* These ROM patches are not hacks, the protection device
-       overlays the normal ROM code, this has been confirmed on a real PCB
-       although some addresses may be missing */
-	mem16[0x1303bc / 2] = 0x4e93;
-	mem16[0x130462 / 2] = 0x4e93;
-	mem16[0x1304f2 / 2] = 0x4e93;
-}
+GAME( 1997, pgm,          0,         pgm,     pgm,      pgm,        ROT0,   "IGS", "PGM (Polygame Master) System BIOS", GAME_IS_BIOS_ROOT )
 
-static DRIVER_INIT( drgw2j )
-{
-	UINT16 *mem16 = (UINT16 *)machine.region("maincpu")->base();
-	drgwld2_common_init(machine);
-	/* These ROM patches are not hacks, the protection device
-       overlays the normal ROM code, this has been confirmed on a real PCB
-       although some addresses may be missing */
-	mem16[0x1302c0 / 2] = 0x4e93;
-	mem16[0x130366 / 2] = 0x4e93;
-	mem16[0x1303f6 / 2] = 0x4e93;
-}
+/* -----------------------------------------------------------------------------------------------------------------------
+   Working (at least one set of the game is fully working)
+   -----------------------------------------------------------------------------------------------------------------------*/
 
-static void kovsh_latch_init( running_machine &machine )
-{
-	pgm_state *state = machine.driver_data<pgm_state>();
+// the version numbering on these is a mess... date srings from ROM (and in some cases even those are missing..)
+GAME( 1997, orlegend,     pgm,       pgm,     orlegend, orlegend,   ROT0,   "IGS", "Oriental Legend / Xi You Shi E Zhuan (ver. 126)", GAME_IMPERFECT_SOUND | GAME_SUPPORTS_SAVE )                // V0001 01/14/98 18:16:38 - runs as World
+GAME( 1997, orlegende,    orlegend,  pgm,     orlegend, orlegend,   ROT0,   "IGS", "Oriental Legend / Xi You Shi E Zhuan (ver. 112)", GAME_IMPERFECT_SOUND | GAME_SUPPORTS_SAVE )                // V0001 07/14/97 11:19:45 - runs as World
+GAME( 1997, orlegendc,    orlegend,  pgm,     orlegend, orlegend,   ROT0,   "IGS", "Oriental Legend / Xi You Shi E Zhuan (ver. 112, Chinese Board)", GAME_IMPERFECT_SOUND | GAME_SUPPORTS_SAVE ) // V0001 05/05/97 10:08:21 - runs as World, Korea, China
+GAME( 1997, orlegendca,   orlegend,  pgm,     orlegend, orlegend,   ROT0,   "IGS", "Oriental Legend / Xi You Shi E Zhuan (ver. ???, Chinese Board)", GAME_IMPERFECT_SOUND | GAME_SUPPORTS_SAVE ) // V0001 04/02/97 13:35:43 - runs as HongKong, China, China
+GAME( 1997, orlegend111c, orlegend,  pgm,     orlegend, orlegend,   ROT0,   "IGS", "Oriental Legend / Xi You Shi E Zhuan (ver. 111, Chinese Board)", GAME_IMPERFECT_SOUND | GAME_SUPPORTS_SAVE ) // V0001 no date!          - runs as HongKong, China, China
+GAME( 1997, orlegend105k, orlegend,  pgm,     orld105k, orlegend,   ROT0,   "IGS", "Oriental Legend / Xi You Shi E Zhuan (ver. 105, Korean Board)", GAME_IMPERFECT_SOUND | GAME_SUPPORTS_SAVE )  // V0000 no date!          - runs as Korea
 
-	state->m_kovsh_highlatch_arm_w = 0;
-	state->m_kovsh_lowlatch_arm_w = 0;
-	state->m_kovsh_highlatch_68k_w = 0;
-	state->m_kovsh_lowlatch_68k_w = 0;
-	state->m_kovsh_counter = 1;
-
-	state->save_item(NAME(state->m_kovsh_highlatch_arm_w));
-	state->save_item(NAME(state->m_kovsh_lowlatch_arm_w));
-	state->save_item(NAME(state->m_kovsh_highlatch_68k_w));
-	state->save_item(NAME(state->m_kovsh_lowlatch_68k_w));
-	state->save_item(NAME(state->m_kovsh_counter));
-}
+GAME( 1997, drgw2,        pgm,       pgm,     pgm,      drgw2,      ROT0,   "IGS", "Dragon World II (ver. 110X, Export)", GAME_IMPERFECT_SOUND | GAME_UNEMULATED_PROTECTION | GAME_NOT_WORKING | GAME_SUPPORTS_SAVE ) // This set still has protection issues!
+GAME( 1997, dw2v100x,     drgw2,     pgm,     pgm,      dw2v100x,   ROT0,   "IGS", "Dragon World II (ver. 100X, Export)", GAME_IMPERFECT_SOUND | GAME_UNEMULATED_PROTECTION | GAME_NOT_WORKING | GAME_SUPPORTS_SAVE ) // This set still has protection issues!
+GAME( 1997, drgw2j,       drgw2,     pgm,     pgm,      drgw2j,     ROT0,   "IGS", "Chuugokuryuu II (ver. 100J, Japan)", GAME_IMPERFECT_SOUND | GAME_UNEMULATED_PROTECTION | GAME_NOT_WORKING | GAME_SUPPORTS_SAVE ) // This set still has protection issues!
+GAME( 1997, drgw2c,       drgw2,     pgm,     pgm,      drgw2c,     ROT0,   "IGS", "Zhong Guo Long II (ver. 100C, China)", GAME_IMPERFECT_SOUND | GAME_SUPPORTS_SAVE )
 
-static DRIVER_INIT( kov )
-{
-	pgm_basic_init(machine);
-	pgm_kov_decrypt(machine);
-	kovsh_latch_init(machine);
-	install_protection_asic_sim_kov(machine);
-}
+// region provided by internal ARM rom
+GAME( 1999, photoy2k,     pgm,       kov,     photoy2k, photoy2k,   ROT0,   "IGS", "Photo Y2K (ver. 105)", GAME_IMPERFECT_SOUND | GAME_SUPPORTS_SAVE ) /* region provided by protection device */
+GAME( 1999, photoy2k104,  photoy2k,  kov,     photoy2k, photoy2k,   ROT0,   "IGS", "Photo Y2K (ver. 104)", GAME_IMPERFECT_SOUND | GAME_SUPPORTS_SAVE ) /* region provided by protection device */
+GAME( 1999, photoy2k102,  photoy2k,  kov,     photoy2k, photoy2k,   ROT0,   "IGS", "Photo Y2K (ver. 102, Japanese Board)", GAME_IMPERFECT_SOUND | GAME_SUPPORTS_SAVE ) /* region provided by protection device */
 
-static DRIVER_INIT( kovboot )
-{
-	pgm_basic_init(machine);
-//  pgm_kov_decrypt(machine);
-	kovsh_latch_init(machine);
-	install_protection_asic_sim_kov(machine);
-}
+// region provided by internal ARM rom
+GAME( 1999, kovsh,        pgm,       kov,     kovsh,    kovsh,      ROT0,   "IGS", "Knights of Valour Super Heroes / Sangoku Senki Super Heroes (ver. 104, CN)", GAME_IMPERFECT_SOUND | GAME_SUPPORTS_SAVE ) // 68k V104, China internal ROM
+GAME( 1999, kovsh103,     kovsh,     kov,     kovsh,    kovsh,      ROT0,   "IGS", "Knights of Valour Super Heroes / Sangoku Senki Super Heroes (ver. 103, CN)", GAME_IMPERFECT_SOUND | GAME_SUPPORTS_SAVE ) // 68k V103, China internal ROM
+// nasty modern asian bootleg of Knights of Valour Super Heroes with characters ripped from SNK's The King of Fighters series!
+GAME( 1999, kovqhsgs,     kovsh,     kov,     kovsh,	kovqhsgs,   ROT0,   "bootleg", "Knights of Valour: Quan Huang San Guo Special / Sangoku Senki: Quan Huang San Guo Special (ver. 303CN)", GAME_IMPERFECT_SOUND | GAME_SUPPORTS_SAVE )
 
-static DRIVER_INIT( pstar )
-{
-	pgm_state *state = machine.driver_data<pgm_state>();
+// region provided by internal ARM rom
+GAME( 2000, kov2,         pgm,       kov2,    kov2,    kov2,       ROT0,   "IGS", "Knights of Valour 2 / Sangoku Senki 2 (ver. 107, 102, 100HK)", GAME_IMPERFECT_SOUND | GAME_SUPPORTS_SAVE ) // 05/10/01 14:24:08 V107 (Ext. Arm V102, Int. Arm V100HK)
+GAME( 2000, kov2106,      kov2,      kov2,    kov2,    kov2,       ROT0,   "IGS", "Knights of Valour 2 / Sangoku Senki 2 (ver. 106, 102, 100KH)", GAME_IMPERFECT_SOUND | GAME_SUPPORTS_SAVE ) // 02/27/01 13:26:46 V106 (Ext. Arm V102, Int. Arm V100HK)
+GAME( 2000, kov2103,      kov2,      kov2,    kov2,    kov2,       ROT0,   "IGS", "Knights of Valour 2 / Sangoku Senki 2 (ver. 103, 101, 100HK)", GAME_IMPERFECT_SOUND | GAME_SUPPORTS_SAVE ) // 12/28/00 15:09:31 V103 (Ext. Arm V101, Int. Arm V100HK)
+GAME( 2000, kov2102,      kov2,      kov2,    kov2,    kov2,       ROT0,   "IGS", "Knights of Valour 2 / Sangoku Senki 2 (ver. 102, 101, 100HK)", GAME_IMPERFECT_SOUND | GAME_SUPPORTS_SAVE ) // 12/14/00 10:33:36 V102 (Ext. Arm V101, Int. Arm V100HK)
+GAME( 2000, kov2101,      kov2,      kov2,    kov2,    kov2,       ROT0,   "IGS", "Knights of Valour 2 / Sangoku Senki 2 (ver. 101, 101, 100HK)", GAME_IMPERFECT_SOUND | GAME_SUPPORTS_SAVE ) // 11/29/00 11:03:08 V100 (Ext. Arm V100, Int. Arm V100HK)
+GAME( 2000, kov2100,      kov2,      kov2,    kov2,    kov2,       ROT0,   "IGS", "Knights of Valour 2 / Sangoku Senki 2 (ver. 100, 100, 100HK)", GAME_IMPERFECT_SOUND | GAME_SUPPORTS_SAVE ) // 11/29/00 11:03:08 V100 (Ext. Arm V100, Int. Arm V100HK)
+
+// region provided by internal ARM rom
+GAME( 2001, kov2p,        pgm,       kov2,    kov2,    kov2p,      ROT0,   "IGS", "Knights of Valour 2 Plus - Nine Dragons / Sangoku Senki 2 Plus - Nine Dragons (ver. M204XX)", GAME_IMPERFECT_SOUND | GAME_UNEMULATED_PROTECTION | GAME_NOT_WORKING | GAME_SUPPORTS_SAVE ) /* need internal rom of IGS027A */
+GAME( 2001, kov2p205,     kov2p,     kov2,    kov2,    kov2p,      ROT0,   "IGS", "Knights of Valour 2 Plus - Nine Dragons / Sangoku Senki 2 Plus - Nine Dragons (ver. M205XX)", GAME_IMPERFECT_SOUND | GAME_UNEMULATED_PROTECTION | GAME_NOT_WORKING | GAME_SUPPORTS_SAVE ) /* need internal rom of IGS027A */
+
+// region provided by internal ARM rom
+GAME( 2001, martmast,     pgm,       kov2,    martmast,  martmast,   ROT0,   "IGS", "Martial Masters (ver. 104, 102, 102US)", GAME_IMPERFECT_SOUND | GAME_SUPPORTS_SAVE ) // 68k V104, Ext Arm 102, Int Arm 102US
+GAME( 2001, martmastc,    martmast,  kov2,    martmast,  martmast,   ROT0,   "IGS", "Martial Masters (ver. 104, 102, 101CN)", GAME_IMPERFECT_SOUND | GAME_SUPPORTS_SAVE ) // 68k V104, Ext Arm 102, Int Arm 101CN
+GAME( 2001, martmastc102, martmast,  kov2,    martmast,  martmast,   ROT0,   "IGS", "Martial Masters (ver. 102, 101, 101CN)", GAME_IMPERFECT_SOUND | GAME_SUPPORTS_SAVE ) // 68k V102, Ext Arm 101, Int Arm 101CN
+
+// region provided by internal ARM rom
+GAME( 2001, ddp2,         pgm,       kov2,    ddp2,     ddp2,       ROT270, "IGS", "DoDonPachi II - Bee Storm (Japan, ver. 102)", GAME_IMPERFECT_SOUND | GAME_SUPPORTS_SAVE )
+GAME( 2001, ddp2101,      ddp2,      kov2,    ddp2,     ddp2,       ROT270, "IGS", "DoDonPachi II - Bee Storm (Japan, ver. 101)", GAME_IMPERFECT_SOUND | GAME_SUPPORTS_SAVE )
+GAME( 2001, ddp2100,      ddp2,      kov2,    ddp2,     ddp2,       ROT270, "IGS", "DoDonPachi II - Bee Storm (Japan, ver. 100)", GAME_IMPERFECT_SOUND | GAME_SUPPORTS_SAVE )
+
+// we bypass the internal ARM rom on these, ideally it should still be dumped tho!
+// ARM version strings don't match 100% with labels... for 68k ROMs I'm using the build time / date stamp from near the start of the rom, there are some slightly different time stamps later
+GAME( 2002, dmnfrnt,      pgm,       svg,     pgm,    dmnfrnt,    ROT0,   "IGS", "Demon Front (68k label V105, ROM M105XX 08/05/02) (ARM label V105, ROM 08/05/02 S105XX)", GAME_IMPERFECT_SOUND | GAME_SUPPORTS_SAVE ) // 68k time: 10:24:11 ARM time: 10:33:23
+GAME( 2002, dmnfrnta,     dmnfrnt,   svg,     pgm,    dmnfrnt,    ROT0,   "IGS", "Demon Front (68k label V102, ROM M102XX 06/19/02) (ARM label V102, ROM 05/24/02 S101XX)", GAME_IMPERFECT_SOUND | GAME_SUPPORTS_SAVE ) // 68k time: 13:44:08 ARM time: 13:04:31
+GAME( 2002, dmnfrntpcb,   dmnfrnt,   svg,     pgm,    dmnfrnt,    ROT0,   "IGS", "Demon Front (68k label V107KR, ROM M107KR 11/03/03) (ARM label V107KR, ROM 10/16/03 S106KR) (JAMMA PCB)", GAME_IMPERFECT_SOUND | GAME_UNEMULATED_PROTECTION | GAME_NOT_WORKING | GAME_SUPPORTS_SAVE ) // works but reports version mismatch (wants internal rom version and region to match external?)
 
-	pgm_basic_init(machine);
-	pgm_pstar_decrypt(machine);
-	kovsh_latch_init(machine);
 
-	state->m_pstars_key = 0;
-	state->m_pstars_int[0] = 0;
-	state->m_pstars_int[1] = 0;
-	state->m_pstars_val = 0;
-	state->m_pstar_e7 = 0;
-	state->m_pstar_b1 = 0;
-	state->m_pstar_ce = 0;
-	state->m_pstar_ram[0] = 0;
-	state->m_pstar_ram[1] = 0;
-	state->m_pstar_ram[2] = 0;
-	memset(state->m_pstars_regs, 0, 16);
-
-	state->save_item(NAME(state->m_pstars_key));
-	state->save_item(NAME(state->m_pstars_int));
-	state->save_item(NAME(state->m_pstars_regs));
-	state->save_item(NAME(state->m_pstars_val));
-	state->save_item(NAME(state->m_pstar_e7));
-	state->save_item(NAME(state->m_pstar_b1));
-	state->save_item(NAME(state->m_pstar_ce));
-	state->save_item(NAME(state->m_pstar_ram));
 
-}
-
-static DRIVER_INIT( photoy2k )
-{
-	pgm_basic_init(machine);
-	pgm_photoy2k_decrypt(machine);
-	kovsh_latch_init(machine);
-}
-
-static DRIVER_INIT( py2k2 )
-{
-	pgm_basic_init(machine);
-	pgm_py2k2_decrypt(machine);
-	kovsh_latch_init(machine);
-}
-
-
-static DRIVER_INIT( kovsh )
-{
-	pgm_basic_init(machine);
-	pgm_kovsh_decrypt(machine);
-	kovsh_latch_init(machine);
-}
-
-static DRIVER_INIT( kovshp )
-{
-	pgm_basic_init(machine);
-	pgm_kovshp_decrypt(machine);
-	kovsh_latch_init(machine);
-}
-
-
-static void kov2_latch_init( running_machine &machine )
-{
-	pgm_state *state = machine.driver_data<pgm_state>();
-
-	state->m_kov2_latchdata_68k_w = 0;
-	state->m_kov2_latchdata_arm_w = 0;
-
-	state->save_item(NAME(state->m_kov2_latchdata_68k_w));
-	state->save_item(NAME(state->m_kov2_latchdata_arm_w));
-}
-
-static DRIVER_INIT( kov2 )
-{
-	pgm_basic_init(machine);
-	pgm_kov2_decrypt(machine);
-	kov2_latch_init(machine);
-}
-
-
-static DRIVER_INIT( martmast )
-{
-	pgm_basic_init(machine);
-	pgm_mm_decrypt(machine);
-	kov2_latch_init(machine);
-}
-
-
-static UINT16 *ddp2_protram;
-static int ddp2_asic27_0xd10000 = 0;
-
-// ARM comms latch
-static WRITE16_HANDLER ( ddp2_asic27_0xd10000_w )
-{
-	//int pc = cpu_get_pc(&space->device());
-
-	//logerror("%06x: ddp2_asic27_0xd10000_w %04x, %04x\n", pc, offset*2,data);
-
-	ddp2_asic27_0xd10000=data;
-}
-
-// ARM comms latch
-static READ16_HANDLER ( ddp2_asic27_0xd10000_r )
-{
-	//int pc = cpu_get_pc(&space->device());
-
-	//logerror("%06x: d100000_prot_r %04x, %04x\n", pc, offset*2,ddp2_asic27_0xd10000);
-
-	ddp2_asic27_0xd10000++;
-	ddp2_asic27_0xd10000&=0x7f;
-	return ddp2_asic27_0xd10000;
-}
-
-// Shared with ARM
-static READ16_HANDLER(ddp2_protram_r)
-{
-	//int pc = cpu_get_pc(&space->device());
-
-	//logerror("%06x prot_r %04x, %04x\n", pc, offset*2,ddp2_protram[offset]);
-
-	if (offset == 0x02/2) return input_port_read(space->machine(), "Region");
-
-	if (offset == 0x1f00/2) return 0;
-
-	return ddp2_protram[offset];
-}
-
-// Shared with ARM
-static WRITE16_HANDLER(ddp2_protram_w)
-{
-	//int pc = cpu_get_pc(&space->device());
-
-	//logerror("%06x: prot_w %04x, %02x\n", pc, offset*2,data);
-
-	COMBINE_DATA(&ddp2_protram[offset]);
-
-	ddp2_protram[0x10/2] = 0;
-	ddp2_protram[0x20/2] = 1;
-}
-
-static DRIVER_INIT( ddp2 )
-{
-	pgm_basic_init(machine);
-	pgm_ddp2_decrypt(machine);
-	//kov2_latch_init(machine);
-
-	// should actually be kov2-like, but keep this simulation for now just to demonstrate it.  It will need the internal ARM rom to work properly.
-	ddp2_protram = auto_alloc_array(machine, UINT16, 0x10000);
-	machine.device("maincpu")->memory().space(AS_PROGRAM)->install_legacy_readwrite_handler(0xd00000, 0xd0ffff, FUNC(ddp2_protram_r), FUNC(ddp2_protram_w));
-	machine.device("maincpu")->memory().space(AS_PROGRAM)->install_legacy_readwrite_handler(0xd10000, 0xd10001, FUNC(ddp2_asic27_0xd10000_r), FUNC(ddp2_asic27_0xd10000_w));
-
-}
-
-static void svg_basic_init(running_machine &machine)
-{
-	pgm_state *state = machine.driver_data<pgm_state>();
-
-	pgm_basic_init(machine);
-	state->m_svg_shareram[0] = auto_alloc_array(machine, UINT32, 0x10000 / 4);
-	state->m_svg_shareram[1] = auto_alloc_array(machine, UINT32, 0x10000 / 4);
-	state->m_svg_ram_sel = 0;
-
-	state->save_pointer(NAME(state->m_svg_shareram[0]), 0x10000 / 4);
-	state->save_pointer(NAME(state->m_svg_shareram[1]), 0x10000 / 4);
-	state->save_item(NAME(state->m_svg_ram_sel));
-}
-
-static DRIVER_INIT( theglad )
-{
-	svg_basic_init(machine);
-	pgm_theglad_decrypt(machine);
-	kov2_latch_init(machine);
-}
-
-static DRIVER_INIT( svg )
-{
-	svg_basic_init(machine);
-	pgm_svg_decrypt(machine);
-	kov2_latch_init(machine);
-}
-
-static DRIVER_INIT( killbldp )
-{
-	svg_basic_init(machine);
-	pgm_killbldp_decrypt(machine);
-	kov2_latch_init(machine);
-}
-
-static DRIVER_INIT( dmnfrnt )
-{
-	svg_basic_init(machine);
-	pgm_dfront_decrypt(machine);
-	kov2_latch_init(machine);
-}
-
-
-/* The IGS022 is an MCU which performs encrypted DMA used by
- - The Killing Blade
- - Dragon World 3
-
- There is also an automatic transfer which happens on startup using params stored in the data ROM.
- This has been verified on real hardware running without any 68k game program.
-
-*/
-
-
-static void IGS022_do_dma(running_machine& machine, UINT16 src, UINT16 dst, UINT16 size, UINT16 mode)
-{
-	pgm_state *state = machine.driver_data<pgm_state>();
-	UINT16 param;
-	/*
-    P_SRC =0x300290 (offset from prot rom base)
-    P_DST =0x300292 (words from 0x300000)
-    P_SIZE=0x300294 (words)
-    P_MODE=0x300296
-
-    Mode 5 direct
-    Mode 6 swap nibbles and bytes
-
-    1,2,3 table based ops
-    */
-
-	//mame_printf_debug("src %04x dst %04x size %04x mode %04x\n", src, dst, size, mode);
-
-	//if (src&1) mame_printf_debug("odd offset\n");
-
-	param = mode >> 8;
-	mode &=0xf;  // what are the other bits?
-
-
-	if ((mode == 0) || (mode == 1) || (mode == 2) || (mode == 3))
-	{
-		/* mode3 applies a xor from a 0x100 byte table to the data being
-           transferred
-
-           the table is stored at the start of the protection rom.
-
-           the param used with the mode gives a start offset into the table
-
-           odd offsets seem to change the table slightly (see rawDataOdd)
-
-       */
-
-		/*
-        unsigned char rawDataOdd[256] = {
-            0xB6, 0xA8, 0xB1, 0x5D, 0x2C, 0x5D, 0x4F, 0xC1,
-            0xCF, 0x39, 0x3A, 0xB7, 0x65, 0x85, 0xD9, 0xEE,
-            0xDB, 0x7B, 0x5F, 0x81, 0x03, 0x6D, 0xEB, 0x07,
-            0x0F, 0xB5, 0x61, 0x59, 0xCD, 0x60, 0x06, 0x21,
-            0xA0, 0x99, 0xDD, 0x27, 0x42, 0xD7, 0xC5, 0x5B,
-            0x3B, 0xC6, 0x4F, 0xA2, 0x20, 0xF6, 0x61, 0x61,
-            0x8C, 0x46, 0x8C, 0xCA, 0xE0, 0x0E, 0x2C, 0xE9,
-            0xBA, 0x0F, 0x45, 0x6D, 0x36, 0x1C, 0x18, 0x37,
-            0xE7, 0x85, 0x89, 0xA4, 0x94, 0x46, 0x30, 0x9B,
-            0xB2, 0xF4, 0x41, 0x55, 0xA5, 0x63, 0x1C, 0xEF,
-            0xB7, 0x18, 0xB3, 0xB1, 0xD4, 0x72, 0xA0, 0x1C,
-            0x0B, 0x97, 0x02, 0xB6, 0xC5, 0x1F, 0x1B, 0x94,
-            0xC3, 0x83, 0xAA, 0xAC, 0xD9, 0x44, 0x09, 0xD7,
-            0x6C, 0xDB, 0x07, 0xA9, 0xAD, 0x64, 0x83, 0xF1,
-            0x92, 0x09, 0xCD, 0x0E, 0x99, 0x2F, 0xBC, 0xF8,
-            0x3C, 0x63, 0x8F, 0x0A, 0x33, 0x03, 0x84, 0x91,
-            0x6C, 0xAC, 0x3A, 0x15, 0xCB, 0x67, 0xC7, 0x69,
-            0xA1, 0x92, 0x99, 0x74, 0xEE, 0x90, 0x0D, 0xBE,
-            0x57, 0x30, 0xD1, 0xBA, 0xE5, 0xDE, 0xFA, 0xD6,
-            0x83, 0x8C, 0xE4, 0x43, 0x36, 0x5E, 0xCD, 0x84,
-            0x1A, 0x18, 0x31, 0xB9, 0x20, 0x48, 0xE3, 0xA8,
-            0x89, 0x32, 0xF0, 0x90, 0x21, 0x80, 0x33, 0xAE,
-            0x3C, 0xA6, 0xB8, 0x8C, 0x72, 0x17, 0xD1, 0x0C,
-            0x1A, 0x29, 0xFA, 0x38, 0x87, 0xC9, 0x6E, 0xC7,
-            0x05, 0xDE, 0x85, 0x6E, 0x92, 0x7E, 0xD4, 0xED,
-            0x5C, 0xD3, 0x03, 0xD4, 0xFE, 0xCB, 0x6C, 0x19,
-            0x7A, 0x83, 0x79, 0x5B, 0xF6, 0x71, 0xBA, 0xF4,
-            0x37, 0x53, 0xC9, 0xC1, 0xDE, 0xDB, 0xDE, 0xB1,
-            0x64, 0x17, 0x31, 0x0E, 0xD7, 0xA2, 0x13, 0x8E,
-            0x52, 0x8D, 0xCB, 0x19, 0x3D, 0x0B, 0x31, 0x58,
-            0x4A, 0xDE, 0x0C, 0x01, 0x2B, 0x85, 0x2D, 0xE5,
-            0x13, 0x22, 0x48, 0xB6, 0xF3, 0x2D, 0x00, 0x9A
-        };
-        */
-		int x;
-		UINT16 *PROTROM = (UINT16*)machine.region("igs022data")->base();
-
-		for (x = 0; x < size; x++)
-		{
-			//UINT16 *RAMDUMP = (UINT16*)space->machine().region("user2")->base();
-			//UINT16 dat = RAMDUMP[dst + x];
-
-			UINT16 dat2 = PROTROM[src + x];
-
-			UINT8 extraoffset = param&0xfe; // the lowest bit changed the table addressing in tests, see 'rawDataOdd' table instead.. it's still related to the main one, not identical
-			UINT8* dectable = (UINT8*)machine.region("igs022data")->base();//rawDataEven; // the basic decryption table is at the start of the mcu data rom! at least in killbld
-			UINT16 extraxor = ((dectable[((x*2)+0+extraoffset)&0xff]) << 8) | (dectable[((x*2)+1+extraoffset)&0xff] << 0);
-
-			dat2 = ((dat2 & 0x00ff)<<8) | ((dat2 & 0xff00)>>8);
-
-			//  mode==0 plain
-			if (mode==3) dat2 ^= extraxor;
-			if (mode==2) dat2 += extraxor;
-			if (mode==1) dat2 -= extraxor;
-
-			//if (dat!=dat2)
-			//  printf("Mode %04x Param %04x Mismatch %04x %04x\n", mode, param, dat, dat2);
-
-			state->m_sharedprotram[dst + x] = dat2;
-		}
-
-		/* Killing Blade: hack, patches out some additional security checks... we need to emulate them instead! */
-		// different region IGS025 devices supply different sequences - we currently only have the china sequence for Killing Blade
-		//if ((mode==3) && (param==0x54) && (src*2==0x2120) && (dst*2==0x2600)) state->m_sharedprotram[0x2600 / 2] = 0x4e75;
-
-	}
-	if (mode == 4)
-	{
-		mame_printf_debug("unhandled copy mode %04x!\n", mode);
-		// not used by killing blade
-		/* looks almost like a fixed value xor, but isn't */
-	}
-	else if (mode == 5)
-	{
-		/* mode 5 seems to be a straight copy */
-		int x;
-		UINT16 *PROTROM = (UINT16*)machine.region("igs022data")->base();
-		for (x = 0; x < size; x++)
-		{
-			UINT16 dat = PROTROM[src + x];
-
-
-			state->m_sharedprotram[dst + x] = dat;
-		}
-	}
-	else if (mode == 6)
-	{
-		/* mode 6 seems to swap bytes and nibbles */
-		int x;
-		UINT16 *PROTROM = (UINT16*)machine.region("igs022data")->base();
-		for (x = 0; x < size; x++)
-		{
-			UINT16 dat = PROTROM[src + x];
-
-			dat = ((dat & 0xf000) >> 12)|
-				  ((dat & 0x0f00) >> 4)|
-				  ((dat & 0x00f0) << 4)|
-				  ((dat & 0x000f) << 12);
-
-			state->m_sharedprotram[dst + x] = dat;
-		}
-	}
-	else if (mode == 7)
-	{
-		mame_printf_debug("unhandled copy mode %04x!\n", mode);
-		// not used by killing blade
-		/* weird mode, the params get left in memory? - maybe it's a NOP? */
-	}
-	else
-	{
-		mame_printf_debug("unhandled copy mode %04x!\n", mode);
-		// not used by killing blade
-		/* invalid? */
-
-	}
-}
-
-// the internal MCU boot code automatically does this DMA
-// and puts the version # of the data rom in ram
-static void IGS022_reset(running_machine& machine)
-{
-	int i;
-	UINT16 *PROTROM = (UINT16*)machine.region("igs022data")->base();
-	pgm_state *state = machine.driver_data<pgm_state>();
-	UINT16 tmp;
-
-	// fill ram with A5 patern
-	for (i = 0; i < 0x4000/2; i++)
-		state->m_sharedprotram[i] = 0xa55a;
-
-	// the auto-dma
-	UINT16 src = PROTROM[0x100 / 2];
-	UINT32 dst = PROTROM[0x102 / 2];
-	UINT16 size = PROTROM[0x104/ 2];
-	UINT16 mode = PROTROM[0x106 / 2];
-
-	src = ((src & 0xff00) >> 8) | ((src & 0x00ff) << 8);
-	dst = ((dst & 0xff00) >> 8) | ((dst & 0x00ff) << 8);
-	size = ((size & 0xff00) >> 8) | ((size & 0x00ff) << 8);
-	mode &= 0xff;
-
-	src >>= 1;
-
-	printf("Auto-DMA %04x %04x %04x %04x\n",src,dst,size,mode);
-
-	IGS022_do_dma(machine,src,dst,size,mode);
-
-	// there is also a version ID? (or is it some kind of checksum) that is stored in the data rom, and gets copied..
-	// Dragon World 3 checks it
-	tmp = PROTROM[0x114/2];
-	tmp = ((tmp & 0xff00) >> 8) | ((tmp & 0x00ff) << 8);
-	state->m_sharedprotram[0x2a2/2] = tmp;
-}
-
-static void IGS022_handle_command(running_machine& machine)
-{
-	pgm_state *state = machine.driver_data<pgm_state>();
-	UINT16 cmd = state->m_sharedprotram[0x200/2];
-	//mame_printf_debug("command %04x\n", cmd);
-	if (cmd == 0x6d)	//Store values to asic ram
-	{
-		UINT32 p1 = (state->m_sharedprotram[0x298/2] << 16) | state->m_sharedprotram[0x29a/2];
-		UINT32 p2 = (state->m_sharedprotram[0x29c/2] << 16) | state->m_sharedprotram[0x29e/2];
-
-		if ((p2 & 0xffff) == 0x9)	//Set value
-		{
-			int reg = (p2 >> 16) & 0xffff;
-			if (reg & 0x200)
-				state->m_kb_regs[reg & 0xff] = p1;
-		}
-		if ((p2 & 0xffff) == 0x6)	//Add value
-		{
-			int src1 = (p1 >> 16) & 0xff;
-			int src2 = (p1 >> 0) & 0xff;
-			int dst = (p2 >> 16) & 0xff;
-			state->m_kb_regs[dst] = state->m_kb_regs[src2] - state->m_kb_regs[src1];
-		}
-		if ((p2 & 0xffff) == 0x1)	//Add Imm?
-		{
-			int reg = (p2 >> 16) & 0xff;
-			int imm = (p1 >> 0) & 0xffff;
-			state->m_kb_regs[reg] += imm;
-		}
-		if ((p2 & 0xffff) == 0xa)	//Get value
-		{
-			int reg = (p1 >> 16) & 0xFF;
-			state->m_sharedprotram[0x29c/2] = (state->m_kb_regs[reg] >> 16) & 0xffff;
-			state->m_sharedprotram[0x29e/2] = state->m_kb_regs[reg] & 0xffff;
-		}
-	}
-	if(cmd == 0x4f)	//memcpy with encryption / scrambling
-	{
-		UINT16 src = state->m_sharedprotram[0x290 / 2] >> 1; // ?
-		UINT32 dst = state->m_sharedprotram[0x292 / 2];
-		UINT16 size = state->m_sharedprotram[0x294 / 2];
-		UINT16 mode = state->m_sharedprotram[0x296 / 2];
-
-		IGS022_do_dma(machine, src,dst,size,mode);
-	}
-
-}
-
-
-static WRITE16_HANDLER( killbld_igs025_prot_w )
-{
-//  mame_printf_debug("killbrd prot r\n");
-//  return 0;
-	pgm_state *state = space->machine().driver_data<pgm_state>();
-	offset &= 0xf;
-
-	if (offset == 0)
-		state->m_kb_cmd = data;
-	else //offset==2
-	{
-		logerror("%06X: ASIC25 W CMD %X  VAL %X\n", cpu_get_pc(&space->device()), state->m_kb_cmd, data);
-		if (state->m_kb_cmd == 0)
-			state->m_kb_reg = data;
-		else if (state->m_kb_cmd == 2)
-		{
-			if (data == 1)	//Execute cmd
-			{
-				IGS022_handle_command(space->machine());
-				state->m_kb_reg++;
-			}
-		}
-		else if (state->m_kb_cmd == 4)
-			state->m_kb_ptr = data;
-		else if (state->m_kb_cmd == 0x20)
-			state->m_kb_ptr++;
-	}
-}
-
-static READ16_HANDLER( killbld_igs025_prot_r )
-{
-//  mame_printf_debug("killbld prot w\n");
-	pgm_state *state = space->machine().driver_data<pgm_state>();
-	UINT16 res ;
-
-	offset &= 0xf;
-	res = 0;
-
-	if (offset == 1)
-	{
-		if (state->m_kb_cmd == 1)
-		{
-			res = state->m_kb_reg & 0x7f;
-		}
-		else if (state->m_kb_cmd == 5)
-		{
-
-			UINT8 kb_region_sequence[11] = {0x17, 0x14, 0x91, 0x89, 0x21, 0xD5, 0x7C, 0x65, 0x8F, 0x8E, 0xE1};
-			UINT8 ret;
-
-			// this isn't properly understood.. should be some kind of bitswap / xor / shift..based on values written to 0x22/0x23 etc.?
-			// return hardcoded china sequence results for now, avoids rom patch
-			if (state->m_kb_region_sequence_position < 11)
-			{
-				ret = kb_region_sequence[state->m_kb_region_sequence_position];
-				state->m_kb_region_sequence_position++;
-			}
-			else
-			{
-				UINT32 protvalue = 0x89911400 | input_port_read(space->machine(), "Region");
-				ret = (protvalue >> (8 * (state->m_kb_ptr - 1))) & 0xff;
-			}
-
-			res = 0x3f00 | ret;  // always 0x3fxx in logged behavior...
-
-		}
-	}
-	logerror("%06X: ASIC25 R CMD %X  VAL %X\n", cpu_get_pc(&space->device()), state->m_kb_cmd, res);
-	return res;
-}
-
-
-
-
-static MACHINE_RESET( killbld )
-{
-	pgm_state *state = machine.driver_data<pgm_state>();
-
-	MACHINE_RESET_CALL(pgm);
-	/* fill the protection ram with a5 + auto dma */
-	IGS022_reset(machine);
-
-	// Reset IGS025 stuff
-	state->m_kb_cmd = 0;
-	state->m_kb_reg = 0;
-	state->m_kb_ptr = 0;
-	state->m_kb_region_sequence_position = 0;
-	memset(state->m_kb_regs, 0, 0x10);
-
-}
-
-
-
-
-/* ASIC025/ASIC022 don't provide rom patches like the DW2 protection does, the previous dump was bad :-) */
-static DRIVER_INIT( killbld )
-{
-	pgm_state *state = machine.driver_data<pgm_state>();
-
-	pgm_basic_init(machine);
-	pgm_killbld_decrypt(machine);
-
-	machine.device("maincpu")->memory().space(AS_PROGRAM)->install_legacy_readwrite_handler(0xd40000, 0xd40003, FUNC(killbld_igs025_prot_r), FUNC(killbld_igs025_prot_w));
-
-	state->m_kb_cmd = 0;
-	state->m_kb_reg = 0;
-	state->m_kb_ptr = 0;
-	state->m_kb_region_sequence_position = 0;
-	memset(state->m_kb_regs, 0, 0x10);
-
-	state->save_item(NAME(state->m_kb_region_sequence_position));
-	state->save_item(NAME(state->m_kb_cmd));
-	state->save_item(NAME(state->m_kb_reg));
-	state->save_item(NAME(state->m_kb_ptr));
-	state->save_item(NAME(state->m_kb_regs));
-}
-
-static MACHINE_RESET( dw3 )
-{
-	pgm_state *state = machine.driver_data<pgm_state>();
-
-
-	MACHINE_RESET_CALL(pgm);
-	/* fill the protection ram with a5 + auto dma */
-	IGS022_reset(machine);
-
-	/* game won't boot unless various values are in protection RAM
-     - these should almost certainly end up there as the result of executing the protection
-       commands are startup, but which, and how? */
-
-//  state->m_sharedprotram[0x200/2] = 0x006d;
-	state->m_sharedprotram[0x202/2] = 0x007c; // it cares about this, operation status flag?
-
-//  state->m_sharedprotram[0x20c/2] = 0x0000;
-//  state->m_sharedprotram[0x20e/2] = 0x0007;
-//  state->m_sharedprotram[0x210/2] = 0x0000;
-//  state->m_sharedprotram[0x212/2] = 0x0004;
-//  state->m_sharedprotram[0x214/2] = 0x0000;
-//  state->m_sharedprotram[0x216/2] = 0x0007;
-//  state->m_sharedprotram[0x218/2] = 0x0000;
-//  state->m_sharedprotram[0x21a/2] = 0x0004;
-
-//  state->m_sharedprotram[0x288/2] = 0x0000;
-//  state->m_sharedprotram[0x28a/2] = 0x00c2;
-//  state->m_sharedprotram[0x28c/2] = 0x0000;
-//  state->m_sharedprotram[0x28e/2] = 0x00c2;
-//  state->m_sharedprotram[0x290/2] = 0x0500;
-//  state->m_sharedprotram[0x292/2] = 0x1000;
-//  state->m_sharedprotram[0x294/2] = 0x00c3;
-//  state->m_sharedprotram[0x296/2] = 0x7104;
-//  state->m_sharedprotram[0x298/2] = 0x0000;
-//  state->m_sharedprotram[0x29a/2] = 0x0003;
-//  state->m_sharedprotram[0x29c/2] = 0x0108;
-//  state->m_sharedprotram[0x29e/2] = 0x0009;
-
-//  state->m_sharedprotram[0x2a2/2] = 0x84f6; // it cares about this, it's the version number of the data rom, copied automatically!
-
-//  state->m_sharedprotram[0x2ac/2] = 0x006d;
-//  state->m_sharedprotram[0x2ae/2] = 0x0000;
-
-//  state->m_sharedprotram[0x2b0/2] = 0xaf56;
-
-
-	// Reset IGS025 stuff
-	state->m_kb_cmd = 0;
-	state->m_kb_reg = 0;
-	state->m_kb_ptr = 0;
-	state->m_kb_region_sequence_position = 0;
-	memset(state->m_kb_regs, 0, 0x10);
-
-}
-
-
-
-static int reg;
-static int ptr=0;
-
-#define DW3BITSWAP(s,d,bs,bd)  d=((d&(~(1<<bd)))|(((s>>bs)&1)<<bd))
-static UINT8 dw3_swap;
-static WRITE16_HANDLER( drgw3_igs025_prot_w )
-{
-	pgm_state *state = space->machine().driver_data<pgm_state>();
-
-	offset&=0xf;
-
-	if(offset==0)
-		state->m_kb_cmd=data;
-	else //offset==2
-	{
-		printf("%06X: ASIC25 W CMD %X  VAL %X\n",cpu_get_pc(&space->device()),state->m_kb_cmd,data);
-		if(state->m_kb_cmd==0)
-			reg=data;
-		else if(state->m_kb_cmd==3)	//??????????
-		{
-			dw3_swap = data;
-
-			printf("SWAP %02x\n",dw3_swap);
-		}
-		//else if(kb_cmd==4)
-		//  ptr=data;
-		else if(state->m_kb_cmd==0x20)
-			ptr++;
-	}
-}
-
-static READ16_HANDLER( drgw3_igs025_prot_r )
-{
-//  mame_printf_debug("killbld prot w\n");
-	pgm_state *state = space->machine().driver_data<pgm_state>();
-
-	UINT16 res ;
-
-	offset&=0xf;
-	res=0;
-
-	if(offset==1)
-	{
-		if(state->m_kb_cmd==0)	//swap
-		{
-				UINT8 v1=(dw3_swap+1)&0x7F;
-				UINT8 v2=0;
-				DW3BITSWAP(v1,v2,7,0);
-				DW3BITSWAP(v1,v2,6,1);
-				DW3BITSWAP(v1,v2,5,2);
-				DW3BITSWAP(v1,v2,4,3);
-				DW3BITSWAP(v1,v2,3,4);
-				DW3BITSWAP(v1,v2,2,5);
-				DW3BITSWAP(v1,v2,1,6);
-				DW3BITSWAP(v1,v2,0,7);
-
-				res=v2;
-
-		}
-		else if(state->m_kb_cmd==1)
-		{
-			res=reg&0x7f;
-		}
-		else if(state->m_kb_cmd==5)
-		{
-			UINT32 protvalue;
-			protvalue = 0x60000|input_port_read(space->machine(), "Region");
-			res=(protvalue>>(8*(ptr-1)))&0xff;
-
-
-		}
-	}
-	logerror("%06X: ASIC25 R CMD %X  VAL %X\n",cpu_get_pc(&space->device()),state->m_kb_cmd,res);
-	return res;
-}
-
-
-static DRIVER_INIT( drgw3 )
-{
-	pgm_basic_init(machine);
-
-/*
-    pgm_state *state = machine.driver_data<pgm_state>();
-
-    {
-        int x;
-        UINT16 *RAMDUMP = (UINT16*)machine.region("user2")->base();
-        for (x=0;x<(0x4000/2);x++)
-        {
-            state->m_sharedprotram[x] = RAMDUMP[x];
-            if((x>=0x100)&&(x<0x110)) printf("data 0x%4x, offset:%x\n",state->m_sharedprotram[x],x);
-        }
-    }
-*/
-	machine.device("maincpu")->memory().space(AS_PROGRAM)->install_legacy_readwrite_handler(0xDA5610, 0xDA5613, FUNC(drgw3_igs025_prot_r), FUNC(drgw3_igs025_prot_w));
-
-	pgm_dw3_decrypt(machine);
-}
-
-static INT32 puzzli_54_trigger = 0;
-
-// Preliminary
-static WRITE16_HANDLER( puzzli2_asic_w )
-{
-	cavepgm_state *state = space->machine().driver_data<cavepgm_state>();
-
-	switch (offset & 0x03)
-	{
-		case 0: state->m_value0 = data; return;
-
-		case 1:
-		{
-			if ((data >> 8) == 0xff) state->m_valuekey = 0xffff;
-
-			state->m_value0 ^= state->m_valuekey;
-
-			switch ((data ^ state->m_valuekey) & 0xff)
-			{
-				case 0x13: // ASIC status?
-					state->m_valueresponse = 0x74<<16; // 2d or 74! (based on?)
-				break;
-
-				case 0x31:
-				{
-					// how is this selected? command 54?
-
-					// just a wild guess
-					if (puzzli_54_trigger) {
-						// pc == 1387de
-						state->m_valueresponse = 0x63<<16; // ?
-					} else {
-						// pc == 14cf58
-						state->m_valueresponse = 0xd2<<16;
-					}
-
-					puzzli_54_trigger = 0;
-				}
-				break;
-
-				case 0x38: // Reset
-					state->m_valueresponse = 0x78<<16;
-					state->m_valuekey = 0;
-					puzzli_54_trigger = 0;
-				break;
-
-				case 0x41: // ASIC status?
-					state->m_valueresponse = 0x74<<16;
-				break;
-
-				case 0x47: // ASIC status?
-					state->m_valueresponse = 0x74<<16;
-				break;
-
-				case 0x52: // ASIC status?
-				{
-					// how is this selected?
-
-					//if (state->m_value0 == 6) {
-						state->m_valueresponse = (0x74<<16)|1; // |1?
-					//} else {
-					//  state->m_valueresponse = 0x74<<16;
-					//}
-				}
-				break;
-
-				case 0x54: // ??
-					puzzli_54_trigger = 1;
-					state->m_valueresponse = 0x36<<16;
-				break;
-
-				case 0x61: // ??
-					state->m_valueresponse = 0x36<<16;
-				break;
-
-				case 0x63: // probably read from a data table?
-					state->m_valueresponse = 0; // wrong...
-				break;
-
-				case 0x67: // probably read from a data table?
-					state->m_valueresponse = 0; // wrong...
-				break;
-
-				default:
-					state->m_valueresponse = 0x74<<16;
-				break;
-			}
-
-			state->m_valuekey = (state->m_valuekey + 0x0100) & 0xff00;
-			if (state->m_valuekey == 0xff00) state->m_valuekey = 0x0100;
-			state->m_valuekey |= state->m_valuekey >> 8;
-		}
-		return;
-
-		case 2: return;
-	}
-}
-
-
-static DRIVER_INIT( dw2001 )
-{
-	//pgm_state *state = machine.driver_data<pgm_state>();
-	UINT16 *mem16 = (UINT16 *)machine.region("maincpu")->base();
-
-	pgm_basic_init(machine);
-	kovsh_latch_init(machine);
-	pgm_mm_decrypt(machine); // encryption is the same as martial masters
-
-	mem16[0x11e90c / 2] = 0x4e71;
-	mem16[0x11e90e / 2] = 0x4e71;
-
-	mem16[0x11e91a / 2] = 0x4e71;
-
-	mem16[0x11eaf6 / 2] = 0x4e71;
-	mem16[0x11eaf8 / 2] = 0x4e71;
-
-	mem16[0x11eb04 / 2] = 0x4e71;
-
-}
-
-static UINT32 olds_prot_addr( UINT16 addr )
-{
-	UINT32 mode = addr & 0xff;
-	UINT32 offset = addr >> 8;
-	UINT32 realaddr;
-
-	switch(mode)
-	{
-		case 0x0:
-		case 0x5:
-		case 0xa:
-			realaddr = 0x402a00 + (offset << 2);
-			break;
-
-		case 0x2:
-		case 0x8:
-			realaddr = 0x402e00 + (offset << 2);
-			break;
-
-		case 0x1:
-			realaddr = 0x40307e;
-			break;
-
-		case 0x3:
-			realaddr = 0x403090;
-			break;
-
-		case 0x4:
-			realaddr = 0x40309a;
-			break;
-
-		case 0x6:
-			realaddr = 0x4030a4;
-			break;
-
-		case 0x7:
-			realaddr = 0x403000;
-			break;
-
-		case 0x9:
-			realaddr = 0x40306e;
-			break;
-
-		default:
-			realaddr = 0;
-	}
-	return realaddr;
-}
-
-static UINT32 olds_read_reg( running_machine &machine, UINT16 addr )
-{
-	pgm_state *state = machine.driver_data<pgm_state>();
-	UINT32 protaddr = (olds_prot_addr(addr) - 0x400000) / 2;
-	return state->m_sharedprotram[protaddr] << 16 | state->m_sharedprotram[protaddr + 1];
-}
-
-static void olds_write_reg( running_machine &machine, UINT16 addr, UINT32 val )
-{
-	pgm_state *state = machine.driver_data<pgm_state>();
-	state->m_sharedprotram[(olds_prot_addr(addr) - 0x400000) / 2]     = val >> 16;
-	state->m_sharedprotram[(olds_prot_addr(addr) - 0x400000) / 2 + 1] = val & 0xffff;
-}
-
-static MACHINE_RESET( olds )
-{
-	pgm_state *state = machine.driver_data<pgm_state>();
-	UINT16 *mem16 = (UINT16 *)machine.region("user2")->base();
-	int i;
-
-	MACHINE_RESET_CALL(pgm);
-
-	/* populate shared protection ram with data read from pcb .. */
-	for (i = 0; i < 0x4000 / 2; i++)
-	{
-		state->m_sharedprotram[i] = mem16[i];
-	}
-
-	//ROM:004008B4                 .word 0xFBA5
-	for(i = 0; i < 0x4000 / 2; i++)
-	{
-		if (state->m_sharedprotram[i] == (0xffff - i))
-			state->m_sharedprotram[i] = 0x4e75;
-	}
-}
-
-static READ16_HANDLER( olds_r )
-{
-	pgm_state *state = space->machine().driver_data<pgm_state>();
-	UINT16 res = 0;
-
-	if (offset == 1)
-	{
-		if (state->m_kb_cmd == 1)
-			res = state->m_kb_reg & 0x7f;
-		if (state->m_kb_cmd == 2)
-			res = state->m_olds_bs | 0x80;
-		if (state->m_kb_cmd == 3)
-			res = state->m_olds_cmd3;
-		else if (state->m_kb_cmd == 5)
-		{
-			UINT32 protvalue = 0x900000 | input_port_read(space->machine(), "Region"); // region from protection device.
-			res = (protvalue >> (8 * (state->m_kb_ptr - 1))) & 0xff; // includes region 1 = taiwan , 2 = china, 3 = japan (title = orlegend special), 4 = korea, 5 = hongkong, 6 = world
-
-		}
-	}
-	logerror("%06X: ASIC25 R CMD %X  VAL %X\n", cpu_get_pc(&space->device()), state->m_kb_cmd, res);
-	return res;
-}
-
-static WRITE16_HANDLER( olds_w )
-{
-	pgm_state *state = space->machine().driver_data<pgm_state>();
-	if (offset == 0)
-		state->m_kb_cmd = data;
-	else //offset==2
-	{
-		logerror("%06X: ASIC25 W CMD %X  VAL %X\n",cpu_get_pc(&space->device()), state->m_kb_cmd, data);
-		if (state->m_kb_cmd == 0)
-			state->m_kb_reg = data;
-		else if(state->m_kb_cmd == 2)	//a bitswap=
-		{
-			int reg = 0;
-			if (data & 0x01)
-				reg |= 0x40;
-			if (data & 0x02)
-				reg |= 0x80;
-			if (data & 0x04)
-				reg |= 0x20;
-			if (data & 0x08)
-				reg |= 0x10;
-			state->m_olds_bs = reg;
-		}
-		else if (state->m_kb_cmd == 3)
-		{
-			UINT16 cmd = state->m_sharedprotram[0x3026 / 2];
-			switch (cmd)
-			{
-				case 0x11:
-				case 0x12:
-						break;
-				case 0x64:
-					{
-						UINT16 cmd0 = state->m_sharedprotram[0x3082 / 2];
-						UINT16 val0 = state->m_sharedprotram[0x3050 / 2];	//CMD_FORMAT
-						{
-							if ((cmd0 & 0xff) == 0x2)
-								olds_write_reg(space->machine(), val0, olds_read_reg(space->machine(), val0) + 0x10000);
-						}
-						break;
-					}
-
-				default:
-						break;
-			}
-			state->m_olds_cmd3 = ((data >> 4) + 1) & 0x3;
-		}
-		else if (state->m_kb_cmd == 4)
-			state->m_kb_ptr = data;
-		else if(state->m_kb_cmd == 0x20)
-		  state->m_kb_ptr++;
-	}
-}
-
-static READ16_HANDLER( olds_prot_swap_r )
-{
-	if (cpu_get_pc(&space->device()) < 0x100000)		//bios
-		return pgm_mainram[0x178f4 / 2];
-	else						//game
-		return pgm_mainram[0x178d8 / 2];
-
-}
-
-static DRIVER_INIT( olds )
-{
-	pgm_state *state = machine.driver_data<pgm_state>();
-	pgm_basic_init(machine);
-
-	machine.device("maincpu")->memory().space(AS_PROGRAM)->install_legacy_readwrite_handler(0xdcb400, 0xdcb403, FUNC(olds_r), FUNC(olds_w));
-	machine.device("maincpu")->memory().space(AS_PROGRAM)->install_legacy_read_handler(0x8178f4, 0x8178f5, FUNC(olds_prot_swap_r));
-
-	state->m_kb_cmd = 0;
-	state->m_kb_reg = 0;
-	state->m_kb_ptr = 0;
-	state->m_olds_bs = 0;
-	state->m_olds_cmd3 = 0;
-
-	state->save_item(NAME(state->m_kb_cmd));
-	state->save_item(NAME(state->m_kb_reg));
-	state->save_item(NAME(state->m_kb_ptr));
-	state->save_item(NAME(state->m_olds_bs));
-	state->save_item(NAME(state->m_olds_cmd3));
-}
-
-
-
-static void pgm_decode_kovlsqh2_tiles( running_machine &machine )
-{
-	int i, j;
-	UINT16 *src = (UINT16 *)(machine.region("tiles")->base() + 0x180000);
-	UINT16 *dst = auto_alloc_array(machine, UINT16, 0x800000);
-
-	for (i = 0; i < 0x800000 / 2; i++)
-	{
-		j = BITSWAP24(i, 23, 22, 9, 8, 21, 18, 0, 1, 2, 3, 16, 15, 14, 13, 12, 11, 10, 19, 20, 17, 7, 6, 5, 4);
-
-		dst[j] = BITSWAP16(src[i], 1, 14, 8, 7, 0, 15, 6, 9, 13, 2, 5, 10, 12, 3, 4, 11);
-	}
-
-	memcpy( src, dst, 0x800000 );
-
-	auto_free( machine, dst );
-}
-
-static void pgm_decode_kovlsqh2_sprites( running_machine &machine, UINT8 *src )
-{
-	int i, j;
-	UINT8 *dst = auto_alloc_array(machine, UINT8, 0x800000);
-
-	for (i = 0; i < 0x800000; i++)
-	{
-		j = BITSWAP24(i, 23, 10, 9, 22, 19, 18, 20, 21, 17, 16, 15, 14, 13, 12, 11, 8, 7, 6, 5, 4, 3, 2, 1, 0);
-
-		dst[j] = src[i];
-	}
-
-	memcpy( src, dst, 0x800000 );
-
-	auto_free( machine, dst );
-}
-
-static void pgm_decode_kovlsqh2_samples( running_machine &machine )
-{
-	int i;
-	UINT8 *src = (UINT8 *)(machine.region("ics")->base() + 0x400000);
-
-	for (i = 0; i < 0x400000; i+=2) {
-		src[i + 0x000001] = src[i + 0x400001];
-	}
-
-	memcpy( src + 0x400000, src, 0x400000 );
-}
-
-static void pgm_decode_kovqhsgs_program( running_machine &machine )
-{
-	int i;
-	UINT16 *src = (UINT16 *)(machine.region("maincpu")->base() + 0x100000);
-	UINT16 *dst = auto_alloc_array(machine, UINT16, 0x400000);
-
-	for (i = 0; i < 0x400000 / 2; i++)
-	{
-		int j = BITSWAP24(i, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 6, 7, 5, 4, 3, 2, 1, 0);
-
-		dst[j] = BITSWAP16(src[i], 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 4, 5, 3, 2, 1, 0);
-	}
-
-	memcpy( src, dst, 0x400000 );
-
-	auto_free( machine, dst );
-}
-
-static void pgm_decode_kovqhsgs2_program( running_machine &machine )
-{
-	int i;
-	UINT16 *src = (UINT16 *)(machine.region("maincpu")->base() + 0x100000);
-	UINT16 *dst = auto_alloc_array(machine, UINT16, 0x400000);
-
-	for (i = 0; i < 0x400000 / 2; i++)
-	{
-		int j = BITSWAP24(i, 23, 22, 21, 20, 19, 16, 15, 14, 13, 12, 11, 10, 9, 8, 0, 1, 2, 3, 4, 5, 6, 18, 17, 7);
-
-		dst[j] = src[i];
-	}
-
-	memcpy( src, dst, 0x400000 );
-
-	auto_free( machine, dst );
-}
-
-
-static DRIVER_INIT( kovlsqh2 )
-{
-	pgm_decode_kovqhsgs2_program(machine);
-	pgm_decode_kovlsqh2_tiles(machine);
-
-	pgm_decode_kovlsqh2_sprites(machine, machine.region("sprcol")->base() + 0x0000000);
-	pgm_decode_kovlsqh2_sprites(machine, machine.region("sprcol")->base() + 0x0800000);
-	pgm_decode_kovlsqh2_sprites(machine, machine.region("sprcol")->base() + 0x1000000);
-	pgm_decode_kovlsqh2_sprites(machine, machine.region("sprcol")->base() + 0x1800000);
-	pgm_decode_kovlsqh2_sprites(machine, machine.region("sprcol")->base() + 0x2000000);
-	pgm_decode_kovlsqh2_sprites(machine, machine.region("sprcol")->base() + 0x2800000);
-	pgm_decode_kovlsqh2_sprites(machine, machine.region("sprmask")->base() + 0x0000000);
-	pgm_decode_kovlsqh2_sprites(machine, machine.region("sprmask")->base() + 0x0800000);
-
-	pgm_decode_kovlsqh2_samples(machine);
-	pgm_basic_init(machine);
-	kovsh_latch_init(machine);
-}
-
-static DRIVER_INIT( kovqhsgs )
-{
-	pgm_decode_kovqhsgs_program(machine);
-	pgm_decode_kovlsqh2_tiles(machine);
-
-	pgm_decode_kovlsqh2_sprites(machine, machine.region("sprcol")->base() + 0x0000000);
-	pgm_decode_kovlsqh2_sprites(machine, machine.region("sprcol")->base() + 0x0800000);
-	pgm_decode_kovlsqh2_sprites(machine, machine.region("sprcol")->base() + 0x1000000);
-	pgm_decode_kovlsqh2_sprites(machine, machine.region("sprcol")->base() + 0x1800000);
-	pgm_decode_kovlsqh2_sprites(machine, machine.region("sprcol")->base() + 0x2000000);
-	pgm_decode_kovlsqh2_sprites(machine, machine.region("sprcol")->base() + 0x2800000);
-	pgm_decode_kovlsqh2_sprites(machine, machine.region("sprmask")->base() + 0x0000000);
-	pgm_decode_kovlsqh2_sprites(machine, machine.region("sprmask")->base() + 0x0800000);
-
-	pgm_decode_kovlsqh2_samples(machine);
-
-	pgm_basic_init(machine);
-	kovsh_latch_init(machine);
-}
-
-/*
- in Ketsui (ket) @ 000A719C (move.w)
-
- if you change D0 to 0x12
- the game will runs to "Asic27 Test" mode
-
- bp A71A0,1,{d0=0x12;g}
-*/
-
-static WRITE16_HANDLER( ddp3_asic_w )
-{
-	cavepgm_state *state = space->machine().driver_data<cavepgm_state>();
-
-	if (offset == 0)
-	{
-		state->m_value0 = data;
-		return;
-	}
-	else if (offset == 1)
-	{
-		UINT16 realkey;
-		if ((data >> 8) == 0xff)
-			state->m_valuekey = 0xff00;
-		realkey = state->m_valuekey >> 8;
-		realkey |= state->m_valuekey;
-		{
-			state->m_valuekey += 0x0100;
-			state->m_valuekey &= 0xff00;
-			if (state->m_valuekey == 0xff00)
-				state->m_valuekey =  0x0100;
-		}
-		data ^= realkey;
-		state->m_value1 = data;
-		state->m_value0 ^= realkey;
-
-		state->m_ddp3lastcommand = state->m_value1 & 0xff;
-
-		/* typical frame (ddp3) (all 3 games use only these commands? for the most part of levels espgal just issues 8e)
-            vbl
-            145f28 command 67
-            145f70 command e5
-            145f28 command 67
-            145f70 command e5
-            1460c6 command 40
-            145ec0 command 8e
-            */
-
-		switch (state->m_ddp3lastcommand)
-		{
-			default:
-				printf("%06x command %02x | %04x\n", cpu_get_pc(&space->device()), state->m_ddp3lastcommand, state->m_value0);
-				state->m_valueresponse = 0x880000;
-				break;
-
-			case 0x40:
-				state->m_valueresponse = 0x880000;
-			    state->m_ddp3slots[(state->m_value0>>10)&0x1F]=
-					(state->m_ddp3slots[(state->m_value0>>5)&0x1F]+
-					 state->m_ddp3slots[(state->m_value0>>0)&0x1F])&0xffffff;
-				break;
-
-			case 0x67: // set high bits
-		//      printf("%06x command %02x | %04x\n", cpu_get_pc(&space->device()), state->m_ddp3lastcommand, state->m_value0);
-				state->m_valueresponse = 0x880000;
-				state->m_ddp3internal_slot = (state->m_value0 & 0xff00)>>8;
-				state->m_ddp3slots[state->m_ddp3internal_slot] = (state->m_value0 & 0x00ff) << 16;
-				break;
-
-			case 0xe5: // set low bits for operation?
-			//  printf("%06x command %02x | %04x\n", cpu_get_pc(&space->device()), state->m_ddp3lastcommand, state->m_value0);
-				state->m_valueresponse = 0x880000;
-				state->m_ddp3slots[state->m_ddp3internal_slot] |= (state->m_value0 & 0xffff);
-				break;
-
-
-			case 0x8e: // read back result of operations
-		//      printf("%06x command %02x | %04x\n", cpu_get_pc(&space->device()), state->m_ddp3lastcommand, state->m_value0);
-				state->m_valueresponse = state->m_ddp3slots[state->m_value0&0xff];
-				break;
-
-
-			case 0x99: // reset?
-				state->m_valuekey = 0x100;
-				state->m_valueresponse = 0x00880000;
-				break;
-
-		}
-	}
-	else if (offset==2)
-	{
-
-	}
-
-}
-
-static READ16_HANDLER( ddp3_asic_r )
-{
-	cavepgm_state *state = space->machine().driver_data<cavepgm_state>();
-
-	if (offset == 0)
-	{
-		UINT16 d = state->m_valueresponse & 0xffff;
-		UINT16 realkey = state->m_valuekey >> 8;
-		realkey |= state->m_valuekey;
-		d ^= realkey;
-
-		return d;
-
-	}
-	else if (offset == 1)
-	{
-		UINT16 d = state->m_valueresponse >> 16;
-		UINT16 realkey = state->m_valuekey >> 8;
-		realkey |= state->m_valuekey;
-		d ^= realkey;
-		return d;
-
-	}
-	return 0xffff;
-}
-
-
-void install_asic27a_ddp3(running_machine& machine)
-{
-	machine.device("maincpu")->memory().space(AS_PROGRAM)->install_legacy_readwrite_handler(0x500000, 0x500005, FUNC(ddp3_asic_r), FUNC(ddp3_asic_w));
-}
-
-void install_asic27a_ket(running_machine& machine)
-{
-	machine.device("maincpu")->memory().space(AS_PROGRAM)->install_legacy_readwrite_handler(0x400000, 0x400005, FUNC(ddp3_asic_r), FUNC(ddp3_asic_w));
-}
-
-void install_asic27a_espgal(running_machine& machine)
-{
-	machine.device("maincpu")->memory().space(AS_PROGRAM)->install_legacy_readwrite_handler(0x400000, 0x400005, FUNC(ddp3_asic_r), FUNC(ddp3_asic_w));
-}
-
-static DRIVER_INIT( ddp3 )
-{
-	pgm_basic_init(machine, false);
-	pgm_py2k2_decrypt(machine); // yes, it's the same as photo y2k2
-	install_asic27a_ddp3(machine);
-}
-
-static DRIVER_INIT( ket )
-{
-	pgm_basic_init(machine, false);
-	pgm_ket_decrypt(machine);
-	install_asic27a_ket(machine);
-}
-
-static DRIVER_INIT( espgal )
-{
-	pgm_basic_init(machine, false);
-	pgm_espgal_decrypt(machine);
-	install_asic27a_espgal(machine);
-}
-
-static DRIVER_INIT( puzzli2 )
-{
-	cavepgm_state *state = machine.driver_data<cavepgm_state>();
-
-	pgm_basic_init(machine);
-
-	pgm_puzzli2_decrypt(machine);
-
-	machine.device("maincpu")->memory().space(AS_PROGRAM)->install_legacy_readwrite_handler(0x500000, 0x500005, FUNC(ddp3_asic_r), FUNC(puzzli2_asic_w));
-	machine.device("maincpu")->memory().space(AS_PROGRAM)->install_legacy_read_handler(0x4f0000, 0x4fffff, FUNC(sango_protram_r));
-
-	// doesn't like this irq??
-	state->m_irq4_disabled = 1;
-}
-
-static void oldsplus_latch_init( running_machine &machine )
-{
-	pgm_state *state = machine.driver_data<pgm_state>();
-
-	state->m_oldsplus_key = 0;
-	state->m_oldsplus_int[0] = 0;
-	state->m_oldsplus_int[1] = 0;
-	state->m_oldsplus_val = 0;
-	memset(state->m_oldsplus_ram, 0, 0x100);
-	memset(state->m_oldsplus_regs, 0, 0x100);
-
-	state_save_register_global(machine, state->m_oldsplus_key);
-	state_save_register_global(machine, state->m_oldsplus_val);
-	state_save_register_global_array(machine, state->m_oldsplus_int);
-	state_save_register_global_array(machine, state->m_oldsplus_ram);
-	state_save_register_global_array(machine, state->m_oldsplus_regs);
-}
-
-#if 0
-static DRIVER_INIT( oldsplus )
-{
-	pgm_basic_init(machine);
-	pgm_oldsplus_decrypt(machine);
-	kovsh_latch_init(machine);
-}
-#endif
-
-static DRIVER_INIT( oldsplus )
-{
-	pgm_basic_init(machine);
-	pgm_oldsplus_decrypt(machine);
-	oldsplus_latch_init(machine);
-
-	machine.device("maincpu")->memory().space(AS_PROGRAM)->install_legacy_readwrite_handler(0x500000, 0x500003, FUNC(oldsplus_r), FUNC(oldsplus_w));
-	machine.device("maincpu")->memory().space(AS_PROGRAM)->install_legacy_read_handler(0x4f0000, 0x4fffff, FUNC(oldsplus_protram_r));
-}
-
-static DRIVER_INIT( kov2p )
-{
-	// this hacks the identification of the kov2 rom to return the string required for kov2p
-	// this isn't guaranteed to work properly (and definitely wouldn't on real hardware due to the internal
-	// ROM uploading the encryption table)  The internal ROM should be dumped properly.
-	UINT8 *mem8 = (UINT8 *)machine.region("user1")->base();
-	pgm_basic_init(machine);
-	pgm_kov2p_decrypt(machine);
-	kov2_latch_init(machine);
-	mem8[0xDE] = 0xC0;
-	mem8[0xDF] = 0x46;
-	mem8[0x4ED8] = 0xA8;// B0
-	mem8[0x4EDC] = 0x9C;// A4
-	mem8[0x4EE0] = 0x5C;// 64
-	mem8[0x4EE4] = 0x94;// 9C
-	mem8[0x4EE8] = 0xE8;// F0
-	mem8[0x4EEC] = 0x6C;// 74
-	mem8[0x4EF0] = 0xD4;// DC
-	mem8[0x4EF4] = 0x50;// 58
-	mem8[0x4EF8] = 0x80;// 88
-	mem8[0x4EFC] = 0x9C;// A4
-	mem8[0x4F00] = 0x28;// 30
-	mem8[0x4F04] = 0x30;// 38
-	mem8[0x4F08] = 0x34;// 3C
-	mem8[0x4F0C] = 0x1C;// 24
-	mem8[0x1FFFFC] = 0x33;
-	mem8[0x1FFFFD] = 0x99;
-}
-
-/*** GAME ********************************************************************/
-
-GAME( 1997, pgm,          0,         pgm,     pgm,      pgm,        ROT0,   "IGS", "PGM (Polygame Master) System BIOS", GAME_IS_BIOS_ROOT )
+/* these don't use an External ARM rom, and don't have any weak internal functions which would allow the internal ROM to be read out */
 
-/* -----------------------------------------------------------------------------------------------------------------------
-   Working (at least one set of the game is fully working)
-   -----------------------------------------------------------------------------------------------------------------------*/
+GAME( 2002, ddpdoj,       0,         cavepgm,    pgm,     ddp3,      ROT270, "Cave", "DoDonPachi Dai-Ou-Jou V101 (2002.04.05.Master Ver)", GAME_IMPERFECT_SOUND | GAME_SUPPORTS_SAVE ) // is there a v101 without the . after 05?
+GAME( 2002, ddpdoja,    ddpdoj,      cavepgm,    pgm,     ddp3,      ROT270, "Cave", "DoDonPachi Dai-Ou-Jou V100 (2002.04.05.Master Ver)", GAME_IMPERFECT_SOUND | GAME_SUPPORTS_SAVE )
+GAME( 2002, ddpdojb,    ddpdoj,      cavepgm,    pgm,     ddp3,      ROT270, "Cave", "DoDonPachi Dai-Ou-Jou (2002.04.05 Master Ver)",      GAME_IMPERFECT_SOUND | GAME_SUPPORTS_SAVE )
+GAME( 2002, ddpdojblk,  ddpdoj,      cavepgm,    pgm,     ddp3,      ROT270, "Cave", "DoDonPachi Dai-Ou-Jou (Black Label)",                GAME_IMPERFECT_SOUND | GAME_SUPPORTS_SAVE ) // Displays "2002.04.05.Master Ver" (old) or "2002.10.07 Black Ver" (new)
 
-// the version numbering on these is a mess... date srings from ROM (and in some cases even those are missing..)
-GAME( 1997, orlegend,     pgm,       pgm,     orlegend, orlegend,   ROT0,   "IGS", "Oriental Legend / Xi You Shi E Zhuan (ver. 126)", GAME_IMPERFECT_SOUND | GAME_SUPPORTS_SAVE )                // V0001 01/14/98 18:16:38 - runs as World
-GAME( 1997, orlegende,    orlegend,  pgm,     orlegend, orlegend,   ROT0,   "IGS", "Oriental Legend / Xi You Shi E Zhuan (ver. 112)", GAME_IMPERFECT_SOUND | GAME_SUPPORTS_SAVE )                // V0001 07/14/97 11:19:45 - runs as World
-GAME( 1997, orlegendc,    orlegend,  pgm,     orlegend, orlegend,   ROT0,   "IGS", "Oriental Legend / Xi You Shi E Zhuan (ver. 112, Chinese Board)", GAME_IMPERFECT_SOUND | GAME_SUPPORTS_SAVE ) // V0001 05/05/97 10:08:21 - runs as World, Korea, China
-GAME( 1997, orlegendca,   orlegend,  pgm,     orlegend, orlegend,   ROT0,   "IGS", "Oriental Legend / Xi You Shi E Zhuan (ver. ???, Chinese Board)", GAME_IMPERFECT_SOUND | GAME_SUPPORTS_SAVE ) // V0001 04/02/97 13:35:43 - runs as HongKong, China, China
-GAME( 1997, orlegend111c, orlegend,  pgm,     orlegend, orlegend,   ROT0,   "IGS", "Oriental Legend / Xi You Shi E Zhuan (ver. 111, Chinese Board)", GAME_IMPERFECT_SOUND | GAME_SUPPORTS_SAVE ) // V0001 no date!          - runs as HongKong, China, China
-GAME( 1997, orlegend105k, orlegend,  pgm,     orld105k, orlegend,   ROT0,   "IGS", "Oriental Legend / Xi You Shi E Zhuan (ver. 105, Korean Board)", GAME_IMPERFECT_SOUND | GAME_SUPPORTS_SAVE )  // V0000 no date!          - runs as Korea
+// the exact text of the 'version' shows which revision of the game it is; the newest has 2 '.' symbols in the string, the oldest, none.
+GAME( 2002, ket,          0,         cavepgm,    pgm,     ket,       ROT270, "Cave", "Ketsui: Kizuna Jigoku Tachi (2003/01/01. Master Ver.)", GAME_IMPERFECT_SOUND | GAME_SUPPORTS_SAVE )
+GAME( 2002, keta,         ket,       cavepgm,    pgm,     ket,       ROT270, "Cave", "Ketsui: Kizuna Jigoku Tachi (2003/01/01 Master Ver.)",  GAME_IMPERFECT_SOUND | GAME_SUPPORTS_SAVE )
+GAME( 2002, ketb,         ket,       cavepgm,    pgm,     ket,       ROT270, "Cave", "Ketsui: Kizuna Jigoku Tachi (2003/01/01 Master Ver)",   GAME_IMPERFECT_SOUND | GAME_SUPPORTS_SAVE )
 
-GAME( 1997, drgw2,        pgm,       pgm,     pgm,      drgw2,      ROT0,   "IGS", "Dragon World II (ver. 110X, Export)", GAME_IMPERFECT_SOUND | GAME_UNEMULATED_PROTECTION | GAME_NOT_WORKING | GAME_SUPPORTS_SAVE ) // This set still has protection issues!
-GAME( 1997, dw2v100x,     drgw2,     pgm,     pgm,      dw2v100x,   ROT0,   "IGS", "Dragon World II (ver. 100X, Export)", GAME_IMPERFECT_SOUND | GAME_UNEMULATED_PROTECTION | GAME_NOT_WORKING | GAME_SUPPORTS_SAVE ) // This set still has protection issues!
-GAME( 1997, drgw2j,       drgw2,     pgm,     pgm,      drgw2j,     ROT0,   "IGS", "Chuugokuryuu II (ver. 100J, Japan)", GAME_IMPERFECT_SOUND | GAME_UNEMULATED_PROTECTION | GAME_NOT_WORKING | GAME_SUPPORTS_SAVE ) // This set still has protection issues!
-GAME( 1997, drgw2c,       drgw2,     pgm,     pgm,      drgw2c,     ROT0,   "IGS", "Zhong Guo Long II (ver. 100C, China)", GAME_IMPERFECT_SOUND | GAME_SUPPORTS_SAVE )
+GAME( 2003, espgal,       0,         cavepgm,    pgm,     espgal,    ROT270, "Cave", "Espgaluda (2003/10/15 Master Ver)", GAME_IMPERFECT_SOUND | GAME_SUPPORTS_SAVE )
 
-GAME( 1999, photoy2k,     pgm,       kov,     photoy2k, photoy2k,   ROT0,   "IGS", "Photo Y2K (ver. 105)", GAME_IMPERFECT_SOUND | GAME_SUPPORTS_SAVE ) /* region provided by protection device */
-GAME( 1999, photoy2k104,  photoy2k,  kov,     photoy2k, photoy2k,   ROT0,   "IGS", "Photo Y2K (ver. 104)", GAME_IMPERFECT_SOUND | GAME_SUPPORTS_SAVE ) /* region provided by protection device */
-GAME( 1999, photoy2k102,  photoy2k,  kov,     photoy2k, photoy2k,   ROT0,   "IGS", "Photo Y2K (ver. 102, Japanese Board)", GAME_IMPERFECT_SOUND | GAME_SUPPORTS_SAVE ) /* region provided by protection device */
 
-GAME( 1999, kovsh,        pgm,       kov,     sango,    kovsh,      ROT0,   "IGS", "Knights of Valour Super Heroes / Sangoku Senki Super Heroes (ver. 104, CN)", GAME_IMPERFECT_SOUND | GAME_SUPPORTS_SAVE ) // 68k V104, China internal ROM
-GAME( 1999, kovsh103,     kovsh,     kov,     sango,    kovsh,      ROT0,   "IGS", "Knights of Valour Super Heroes / Sangoku Senki Super Heroes (ver. 103, CN)", GAME_IMPERFECT_SOUND | GAME_SUPPORTS_SAVE ) // 68k V103, China internal ROM
-// nasty modern asian bootleg of Knights of Valour Super Heroes with characters ripped from SNK's The King of Fighters series!
-GAME( 1999, kovqhsgs,     kovsh,     kov,     sango,	kovqhsgs,   ROT0,   "bootleg", "Knights of Valour: Quan Huang San Guo Special / Sangoku Senki: Quan Huang San Guo Special (ver. 303CN)", GAME_IMPERFECT_SOUND | GAME_SUPPORTS_SAVE )
 
-GAME( 2000, kov2,         pgm,       kov2,    sango,    kov2,       ROT0,   "IGS", "Knights of Valour 2 / Sangoku Senki 2 (ver. 107, 102, 100HK)", GAME_IMPERFECT_SOUND | GAME_SUPPORTS_SAVE ) // 05/10/01 14:24:08 V107 (Ext. Arm V102, Int. Arm V100HK)
-GAME( 2000, kov2106,      kov2,      kov2,    sango,    kov2,       ROT0,   "IGS", "Knights of Valour 2 / Sangoku Senki 2 (ver. 106, 102, 100KH)", GAME_IMPERFECT_SOUND | GAME_SUPPORTS_SAVE ) // 02/27/01 13:26:46 V106 (Ext. Arm V102, Int. Arm V100HK)
-GAME( 2000, kov2103,      kov2,      kov2,    sango,    kov2,       ROT0,   "IGS", "Knights of Valour 2 / Sangoku Senki 2 (ver. 103, 101, 100HK)", GAME_IMPERFECT_SOUND | GAME_SUPPORTS_SAVE ) // 12/28/00 15:09:31 V103 (Ext. Arm V101, Int. Arm V100HK)
-GAME( 2000, kov2102,      kov2,      kov2,    sango,    kov2,       ROT0,   "IGS", "Knights of Valour 2 / Sangoku Senki 2 (ver. 102, 101, 100HK)", GAME_IMPERFECT_SOUND | GAME_SUPPORTS_SAVE ) // 12/14/00 10:33:36 V102 (Ext. Arm V101, Int. Arm V100HK)
-GAME( 2000, kov2101,      kov2,      kov2,    sango,    kov2,       ROT0,   "IGS", "Knights of Valour 2 / Sangoku Senki 2 (ver. 101, 101, 100HK)", GAME_IMPERFECT_SOUND | GAME_SUPPORTS_SAVE ) // 11/29/00 11:03:08 V100 (Ext. Arm V100, Int. Arm V100HK)
-GAME( 2000, kov2100,      kov2,      kov2,    sango,    kov2,       ROT0,   "IGS", "Knights of Valour 2 / Sangoku Senki 2 (ver. 100, 100, 100HK)", GAME_IMPERFECT_SOUND | GAME_SUPPORTS_SAVE ) // 11/29/00 11:03:08 V100 (Ext. Arm V100, Int. Arm V100HK)
-
-GAME( 2001, kov2p,        pgm,       kov2,    sango,    kov2p,      ROT0,   "IGS", "Knights of Valour 2 Plus - Nine Dragons / Sangoku Senki 2 Plus - Nine Dragons (ver. M204XX)", GAME_IMPERFECT_SOUND | GAME_UNEMULATED_PROTECTION | GAME_NOT_WORKING | GAME_SUPPORTS_SAVE ) /* need internal rom of IGS027A */
-GAME( 2001, kov2p205,     kov2p,     kov2,    sango,    kov2p,      ROT0,   "IGS", "Knights of Valour 2 Plus - Nine Dragons / Sangoku Senki 2 Plus - Nine Dragons (ver. M205XX)", GAME_IMPERFECT_SOUND | GAME_UNEMULATED_PROTECTION | GAME_NOT_WORKING | GAME_SUPPORTS_SAVE ) /* need internal rom of IGS027A */
-
-GAME( 2001, martmast,     pgm,       kov2,    sango,    martmast,   ROT0,   "IGS", "Martial Masters (ver. 104, 102, 102US)", GAME_IMPERFECT_SOUND | GAME_SUPPORTS_SAVE ) // 68k V104, Ext Arm 102, Int Arm 102US
-GAME( 2001, martmastc,    martmast,  kov2,    sango,    martmast,   ROT0,   "IGS", "Martial Masters (ver. 104, 102, 101CN)", GAME_IMPERFECT_SOUND | GAME_SUPPORTS_SAVE ) // 68k V104, Ext Arm 102, Int Arm 101CN
-GAME( 2001, martmastc102, martmast,  kov2,    sango,    martmast,   ROT0,   "IGS", "Martial Masters (ver. 102, 101, 101CN)", GAME_IMPERFECT_SOUND | GAME_SUPPORTS_SAVE ) // 68k V102, Ext Arm 101, Int Arm 101CN
 
 /* -----------------------------------------------------------------------------------------------------------------------
    Partially Working, playable, but some imperfections
@@ -5888,15 +3703,15 @@
 GAME( 1998, killbld104,   killbld,   killbld, killbld,  killbld,    ROT0,   "IGS", "The Killing Blade (ver. 104)", GAME_IMPERFECT_SOUND | GAME_SUPPORTS_SAVE )
 
 GAME( 1998, olds,         pgm,       olds,    olds,     olds,       ROT0,   "IGS", "Oriental Legend Special / Xi You Shi E Zhuan Super (ver. 101, Korean Board)", GAME_IMPERFECT_SOUND | GAME_UNEMULATED_PROTECTION | GAME_NOT_WORKING | GAME_SUPPORTS_SAVE )
-GAME( 1998, olds100,      olds,      olds,    olds,     olds,       ROT0,   "IGS", "Oriental Legend Special / Xi You Shi E Zhuan Super (ver. 100)", GAME_IMPERFECT_SOUND | GAME_UNEMULATED_PROTECTION | GAME_NOT_WORKING | GAME_SUPPORTS_SAVE )
-GAME( 1998, olds100a,     olds,      olds,    olds,     olds,       ROT0,   "IGS", "Oriental Legend Special / Xi You Shi E Zhuan Super (alt ver. 100)", GAME_IMPERFECT_SOUND | GAME_UNEMULATED_PROTECTION | GAME_NOT_WORKING | GAME_SUPPORTS_SAVE ) // crashes on some bosses, high score table etc.
+GAME( 1998, olds100,      olds,      olds,    olds,     olds,       ROT0,   "IGS", "Oriental Legend Special / Xi You Shi E Zhuan Super (ver. 100, set 1)", GAME_IMPERFECT_SOUND | GAME_UNEMULATED_PROTECTION | GAME_NOT_WORKING | GAME_SUPPORTS_SAVE )
+GAME( 1998, olds100a,     olds,      olds,    olds,     olds,       ROT0,   "IGS", "Oriental Legend Special / Xi You Shi E Zhuan Super (ver. 100, set 2)", GAME_IMPERFECT_SOUND | GAME_UNEMULATED_PROTECTION | GAME_NOT_WORKING | GAME_SUPPORTS_SAVE ) // crashes on some bosses, high score table etc.
 
 GAME( 1999, kov,          pgm,       kov_simulated_arm,     sango,    kov,        ROT0,   "IGS", "Knights of Valour / Sangoku Senki (ver. 117)", GAME_IMPERFECT_SOUND | GAME_UNEMULATED_PROTECTION | GAME_SUPPORTS_SAVE ) /* need internal rom of IGS027A */                 // V0008 04/27/99 10:33:33
 GAME( 1999, kov115,       kov,       kov_simulated_arm,     sango,    kov,        ROT0,   "IGS", "Knights of Valour / Sangoku Senki (ver. 115)", GAME_IMPERFECT_SOUND | GAME_UNEMULATED_PROTECTION | GAME_SUPPORTS_SAVE ) /* need internal rom of IGS027A */                 // V0006 02/22/99 11:53:18
 GAME( 1999, kov100,       kov,       kov_simulated_arm,     sango,    kov,        ROT0,   "IGS", "Knights of Valour / Sangoku Senki (ver. 100, Japanese Board)", GAME_IMPERFECT_SOUND | GAME_UNEMULATED_PROTECTION | GAME_SUPPORTS_SAVE ) /* need internal rom of IGS027A */ // V0002 01/31/99 01:54:16
 
-GAME( 1999, kovplus,      pgm,       kov_simulated_arm,     sango,    kov,        ROT0,   "IGS", "Knights of Valour Plus / Sangoku Senki Plus (ver. 119)", GAME_IMPERFECT_SOUND | GAME_UNEMULATED_PROTECTION | GAME_SUPPORTS_SAVE ) /* need internal rom of IGS027A */
-GAME( 1999, kovplusa,     kovplus,   kov_simulated_arm,     sango,    kov,        ROT0,   "IGS", "Knights of Valour Plus / Sangoku Senki Plus (alt ver. 119)", GAME_IMPERFECT_SOUND | GAME_UNEMULATED_PROTECTION | GAME_SUPPORTS_SAVE ) /* need internal rom of IGS027A */
+GAME( 1999, kovplus,      pgm,       kov_simulated_arm,     sango,    kov,        ROT0,   "IGS", "Knights of Valour Plus / Sangoku Senki Plus (ver. 119, set 1)", GAME_IMPERFECT_SOUND | GAME_UNEMULATED_PROTECTION | GAME_SUPPORTS_SAVE ) /* need internal rom of IGS027A */
+GAME( 1999, kovplusa,     kovplus,   kov_simulated_arm,     sango,    kov,        ROT0,   "IGS", "Knights of Valour Plus / Sangoku Senki Plus (ver. 119, set 2)", GAME_IMPERFECT_SOUND | GAME_UNEMULATED_PROTECTION | GAME_SUPPORTS_SAVE ) /* need internal rom of IGS027A */
 
 // modified title screen is only visible for china region, so use that by default.  Character select portraits don't seem quite right (different protection?)
 GAME( 1999, kovsgqyz,     kovplus,   kov_simulated_arm,     sango_ch,    kovboot,    ROT0,   "bootleg", "Knights of Valour: SanGuo QunYingZhuan / Sangoku Senki: SanGuo QunYingZhuan (bootleg, set 1)", GAME_IMPERFECT_SOUND | GAME_UNEMULATED_PROTECTION | GAME_SUPPORTS_SAVE ) /* need internal rom of IGS027A */
@@ -5917,52 +3732,41 @@
 
 GAME( 1998, dwex,         pgm,       dw3,     dw3,      drgw3,      ROT0,   "IGS", "Dragon World 3 EX (ver. 100)", GAME_IMPERFECT_SOUND | GAME_UNEMULATED_PROTECTION | GAME_NOT_WORKING | GAME_SUPPORTS_SAVE )
 
-GAME( 1999, puzlstar,     pgm,       kov_disabled_arm,     sango,    pstar,      ROT0,   "IGS", "Puzzle Star (ver. 100MG)", GAME_IMPERFECT_SOUND | GAME_UNEMULATED_PROTECTION | GAME_NOT_WORKING | GAME_SUPPORTS_SAVE ) /* need internal rom of IGS027A */
+GAME( 2001, dw2001,       pgm,       kov2,     dw2001,   dw2001,    ROT0,   "IGS", "Dragon World 2001", GAME_IMPERFECT_SOUND | GAME_UNEMULATED_PROTECTION | GAME_NOT_WORKING | GAME_SUPPORTS_SAVE ) // V0000 02/21/01 16:05:16
 
-GAME( 2001, py2k2,        pgm,       kov_disabled_arm,     photoy2k, py2k2,      ROT0,   "IGS", "Photo Y2K 2", GAME_NOT_WORKING )  /* need internal rom of IGS027A */
+GAME( 1999, puzlstar,     pgm,       kov_simulated_arm,    pstar,    pstar,      ROT0,   "IGS", "Puzzle Star (ver. 100MG)", GAME_IMPERFECT_SOUND | GAME_UNEMULATED_PROTECTION | GAME_NOT_WORKING | GAME_SUPPORTS_SAVE ) /* need internal rom of IGS027A */
 
-GAME( 2001, ddp2,         pgm,       kov2_disabled_arm,    ddp2,     ddp2,       ROT270, "IGS", "Bee Storm - DoDonPachi II (ver. 102)", GAME_IMPERFECT_SOUND | GAME_UNEMULATED_PROTECTION | GAME_NOT_WORKING | GAME_SUPPORTS_SAVE ) /* need internal rom of IGS027A */
-GAME( 2001, ddp2101,      ddp2,      kov2_disabled_arm,    ddp2,     ddp2,       ROT270, "IGS", "Bee Storm - DoDonPachi II (ver. 101)", GAME_IMPERFECT_SOUND | GAME_UNEMULATED_PROTECTION | GAME_NOT_WORKING | GAME_SUPPORTS_SAVE ) /* need internal rom of IGS027A */
-GAME( 2001, ddp2100,      ddp2,      kov2_disabled_arm,    ddp2,     ddp2,       ROT270, "IGS", "Bee Storm - DoDonPachi II (ver. 100)", GAME_IMPERFECT_SOUND | GAME_UNEMULATED_PROTECTION | GAME_NOT_WORKING | GAME_SUPPORTS_SAVE ) /* need internal rom of IGS027A */
+GAME( 2001, py2k2,        pgm,       kov_simulated_arm,    py2k2,    py2k2,      ROT0,   "IGS", "Photo Y2K 2", GAME_NOT_WORKING )  /* need internal rom of IGS027A */
 
-GAME( 2001, dw2001,       pgm,       kov2_disabled_arm,     sango,    dw2001,    ROT0,   "IGS", "Dragon World 2001", GAME_IMPERFECT_SOUND | GAME_UNEMULATED_PROTECTION | GAME_NOT_WORKING | GAME_SUPPORTS_SAVE ) // V0000 02/21/01 16:05:16
+GAME( 2001, puzzli2,      pgm,       kov_simulated_arm,  puzzli2,    puzzli2,    ROT0,   "IGS", "Puzzli 2 Super (ver. 200)", GAME_IMPERFECT_SOUND | GAME_UNEMULATED_PROTECTION | GAME_NOT_WORKING | GAME_SUPPORTS_SAVE )
 
-GAME( 2001, puzzli2,      pgm,       puzzli2_disabled_arm,  sango,    puzzli2,    ROT0,   "IGS", "Puzzli 2 Super (ver. 200)", GAME_IMPERFECT_SOUND | GAME_UNEMULATED_PROTECTION | GAME_NOT_WORKING | GAME_SUPPORTS_SAVE )
 
-GAME( 2002, dmnfrnt,      pgm,       svg,     sango,    dmnfrnt,    ROT0,   "IGS", "Demon Front (ver. 102)", GAME_IMPERFECT_SOUND | GAME_UNEMULATED_PROTECTION | GAME_NOT_WORKING | GAME_SUPPORTS_SAVE ) /* need internal rom of IGS027A */
-GAME( 2002, dmnfrnta,     dmnfrnt,   svg,     sango,    dmnfrnt,    ROT0,   "IGS", "Demon Front (ver. 105)", GAME_IMPERFECT_SOUND | GAME_UNEMULATED_PROTECTION | GAME_NOT_WORKING | GAME_SUPPORTS_SAVE ) /* need internal rom of IGS027A */
 
 /* Games below this point are known to have an 'execute only' internal ROM area covering an area at the start of the internal ROM.  This can't be read when running code from either internal or external ROM space. */
 
-GAME( 2003, theglad,      pgm,       svg,     sango,    theglad,    ROT0,   "IGS", "The Gladiator (ver. 100)", GAME_IMPERFECT_SOUND | GAME_UNEMULATED_PROTECTION | GAME_NOT_WORKING | GAME_SUPPORTS_SAVE ) /* need internal rom of IGS027A */
-GAME( 2003, theglada,     theglad,   svg,     sango,    theglad,    ROT0,   "IGS", "The Gladiator (ver. 101)", GAME_IMPERFECT_SOUND | GAME_UNEMULATED_PROTECTION | GAME_NOT_WORKING | GAME_SUPPORTS_SAVE ) /* need internal rom of IGS027A */
 
-GAME( 2004, oldsplus,     pgm,       svg_disabled_arm,     oldsplus,     oldsplus,   ROT0,   "IGS", "Oriental Legend Special Plus / Xi You Shi E Zhuan Super Plus", GAME_IMPERFECT_SOUND | GAME_UNEMULATED_PROTECTION | GAME_NOT_WORKING | GAME_SUPPORTS_SAVE ) /* need internal rom of IGS027A */
+// all 3 68k roms still have V100 strings, but are clearly different builds, there don't appear to be build string dates in them.  Two of the external ARM roms are marked V100 but are different builds, it's possible the single PCB version 100 is based on a later main revision
+GAME( 2003, theglad,      pgm,       svg,     pgm,    theglad,    ROT0,   "IGS", "The Gladiator - Road of the Sword / Shen Jian (M68k label V100) (ARM label V100, ROM 01/16/03 SHEN JIAN)", GAME_IMPERFECT_SOUND | GAME_UNEMULATED_PROTECTION | GAME_NOT_WORKING | GAME_SUPPORTS_SAVE ) /* need internal rom of IGS027A */ // ARM time: 10:39:25
+GAME( 2003, theglada,     theglad,   svg,     pgm,    theglad,    ROT0,   "IGS", "The Gladiator - Road of the Sword / Shen Jian (M68k label V101) (ARM label V107, ROM 06/06/03 SHEN JIAN V107)", GAME_IMPERFECT_SOUND | GAME_UNEMULATED_PROTECTION | GAME_NOT_WORKING | GAME_SUPPORTS_SAVE ) /* need internal rom of IGS027A */ // ARM time: 16:17:27
+GAME( 2003, thegladpcb,   theglad,   svg,     pgm,    theglad,    ROT0,   "IGS", "The Gladiator - Road of the Sword / Shen Jian (M68k label V100) (ARM label V100, ROM 02/25/03 SHEN JIAN) (JAMMA PCB)", GAME_IMPERFECT_SOUND | GAME_UNEMULATED_PROTECTION | GAME_NOT_WORKING | GAME_SUPPORTS_SAVE ) /* need internal rom of IGS027A */ // ARM time: 16:32:21
 
-GAME( 2004, kovshp,       pgm,       kov,     sango,    kovshp,     ROT0,   "IGS", "Knights of Valour Super Heroes Plus / Sangoku Senki Super Heroes Plus (ver. 100)", GAME_IMPERFECT_SOUND | GAME_UNEMULATED_PROTECTION | GAME_NOT_WORKING | GAME_SUPPORTS_SAVE ) /* need internal rom of IGS027A */
-// these bootlegs are clones of this instead
-GAME( 2004, kovlsqh,      kovshp,     kov,     sango,	kovlsqh2,   ROT0,   "bootleg", "Knights of Valour: Luan Shi Quan Huang / Sangoku Senki: Luan Shi Quan Huang (ver. 200CN)", GAME_IMPERFECT_SOUND | GAME_UNEMULATED_PROTECTION | GAME_NOT_WORKING | GAME_SUPPORTS_SAVE ) /* need internal rom of IGS027A */
-GAME( 2004, kovlsqh2,     kovshp,     kov,     sango,	kovlsqh2,   ROT0,   "bootleg", "Knights of Valour: Luan Shi Quan Huang 2 / Sangoku Senki: Luan Shi Quan Huang 2 (ver. 200CN)", GAME_IMPERFECT_SOUND | GAME_UNEMULATED_PROTECTION | GAME_NOT_WORKING | GAME_SUPPORTS_SAVE ) /* need internal rom of IGS027A */
-GAME( 2004, kovlsjb,      kovshp,     kov,     sango,	kovlsqh2,   ROT0,   "bootleg", "Knights of Valour: Luan Shi Jie Ba / Sangoku Senki: Luan Shi Jie Ba (ver. 200CN)", GAME_IMPERFECT_SOUND | GAME_UNEMULATED_PROTECTION | GAME_NOT_WORKING | GAME_SUPPORTS_SAVE ) /* need internal rom of IGS027A */
-GAME( 2004, kovlsjba,     kovshp,     kov,     sango,	kovlsqh2,   ROT0,   "bootleg", "Knights of Valour: Luan Shi Jie Ba / Sangoku Senki: Luan Shi Jie Ba (alt ver. 200CN)", GAME_IMPERFECT_SOUND | GAME_UNEMULATED_PROTECTION | GAME_NOT_WORKING | GAME_SUPPORTS_SAVE ) /* need internal rom of IGS027A */
 
-GAME( 2005, killbldp,     pgm,       svg,     sango,    killbldp,   ROT0,   "IGS", "The Killing Blade Plus (ver. 300)", GAME_IMPERFECT_SOUND | GAME_UNEMULATED_PROTECTION | GAME_NOT_WORKING | GAME_SUPPORTS_SAVE ) /* need internal rom of IGS027A */
 
-GAME( 2004, happy6,       pgm,       svg,     sango,    svg,        ROT0,   "IGS", "Happy 6-in-1 (ver. 101CN)", GAME_IMPERFECT_SOUND | GAME_UNEMULATED_PROTECTION | GAME_NOT_WORKING | GAME_SUPPORTS_SAVE ) /* need internal rom of IGS027A */
+GAME( 2004, oldsplus,     pgm,       kov_simulated_arm, oldsplus,     oldsplus,   ROT0,   "IGS", "Oriental Legend Special Plus / Xi You Shi E Zhuan Super Plus", GAME_IMPERFECT_SOUND | GAME_UNEMULATED_PROTECTION | GAME_NOT_WORKING | GAME_SUPPORTS_SAVE ) /* need internal rom of IGS027A */
 
-GAME( 2005, svg,          pgm,       svg,     sango,    svg,        ROT0,   "IGS", "S.V.G. - Spectral vs Generation (ver. 200)", GAME_IMPERFECT_SOUND | GAME_UNEMULATED_PROTECTION | GAME_NOT_WORKING | GAME_SUPPORTS_SAVE ) /* need internal rom of IGS027A */
+GAME( 2004, kovshp,       pgm,       kov,     kovsh,    kovshp,     ROT0,   "IGS", "Knights of Valour Super Heroes Plus / Sangoku Senki Super Heroes Plus (ver. 100)", GAME_IMPERFECT_SOUND | GAME_UNEMULATED_PROTECTION | GAME_NOT_WORKING | GAME_SUPPORTS_SAVE ) /* need internal rom of IGS027A */
+// these bootlegs are clones of this instead
+GAME( 2004, kovlsqh,      kovshp,     kov,     kovsh,	kovlsqh2,   ROT0,   "bootleg", "Knights of Valour: Luan Shi Quan Huang / Sangoku Senki: Luan Shi Quan Huang (ver. 200CN)", GAME_IMPERFECT_SOUND | GAME_UNEMULATED_PROTECTION | GAME_NOT_WORKING | GAME_SUPPORTS_SAVE ) /* need internal rom of IGS027A */
+GAME( 2004, kovlsqh2,     kovshp,     kov,     kovsh,	kovlsqh2,   ROT0,   "bootleg", "Knights of Valour: Luan Shi Quan Huang 2 / Sangoku Senki: Luan Shi Quan Huang 2 (ver. 200CN)", GAME_IMPERFECT_SOUND | GAME_UNEMULATED_PROTECTION | GAME_NOT_WORKING | GAME_SUPPORTS_SAVE ) /* need internal rom of IGS027A */
+GAME( 2004, kovlsjb,      kovshp,     kov,     kovsh,	kovlsqh2,   ROT0,   "bootleg", "Knights of Valour: Luan Shi Jie Ba / Sangoku Senki: Luan Shi Jie Ba (ver. 200CN, set 1)", GAME_IMPERFECT_SOUND | GAME_UNEMULATED_PROTECTION | GAME_NOT_WORKING | GAME_SUPPORTS_SAVE ) /* need internal rom of IGS027A */
+GAME( 2004, kovlsjba,     kovshp,     kov,     kovsh,	kovlsqh2,   ROT0,   "bootleg", "Knights of Valour: Luan Shi Jie Ba / Sangoku Senki: Luan Shi Jie Ba (ver. 200CN, set 2)", GAME_IMPERFECT_SOUND | GAME_UNEMULATED_PROTECTION | GAME_NOT_WORKING | GAME_SUPPORTS_SAVE ) /* need internal rom of IGS027A */
 
-/* these don't use an External ARM rom, and don't have any weak internal functions which would allow the internal ROM to be read out */
+GAME( 2005, killbldp,     pgm,       svg,     pgm,    killbldp,   ROT0,   "IGS", "The Killing Blade Plus (ver. 300)", GAME_IMPERFECT_SOUND | GAME_UNEMULATED_PROTECTION | GAME_NOT_WORKING | GAME_SUPPORTS_SAVE ) /* need internal rom of IGS027A */
 
-GAME( 2002, ddpdoj,       0,         cavepgm,    pgm,     ddp3,      ROT270, "Cave", "DoDonPachi Dai-Ou-Jou V101 (2002.04.05.Master Ver)", GAME_IMPERFECT_SOUND | GAME_SUPPORTS_SAVE ) // is there a v101 without the . after 05?
-GAME( 2002, ddpdoja,    ddpdoj,      cavepgm,    pgm,     ddp3,      ROT270, "Cave", "DoDonPachi Dai-Ou-Jou V100 (2002.04.05.Master Ver)", GAME_IMPERFECT_SOUND | GAME_SUPPORTS_SAVE )
-GAME( 2002, ddpdojb,    ddpdoj,      cavepgm,    pgm,     ddp3,      ROT270, "Cave", "DoDonPachi Dai-Ou-Jou (2002.04.05 Master Ver)",      GAME_IMPERFECT_SOUND | GAME_SUPPORTS_SAVE )
-GAME( 2002, ddpdojblk,  ddpdoj,      cavepgm,    pgm,     ddp3,      ROT270, "Cave", "DoDonPachi Dai-Ou-Jou (Black Label)",                GAME_IMPERFECT_SOUND | GAME_SUPPORTS_SAVE ) // Displays "2002.04.05.Master Ver" (old) or "2002.10.07 Black Ver" (new)
+GAME( 2004, happy6,       pgm,       svg,     pgm,    happy6,     ROT0,   "IGS", "Happy 6-in-1 (ver. 101CN)", GAME_IMPERFECT_SOUND | GAME_UNEMULATED_PROTECTION | GAME_NOT_WORKING | GAME_SUPPORTS_SAVE ) /* need internal rom of IGS027A */
+
+GAME( 2005, svg,          pgm,       svg,     pgm,    svg,        ROT0,   "IGS / Idea Factory", "S.V.G. - Spectral vs Generation (M68k label V200) (ARM label V200, ROM 10/11/05 S.V.G V201)", GAME_IMPERFECT_SOUND | GAME_UNEMULATED_PROTECTION | GAME_NOT_WORKING | GAME_SUPPORTS_SAVE ) /* need internal rom of IGS027A */ // label was 200, but it's code rev 201? // ARM time: 10:07:20
+GAME( 2005, svgpcb,       svg,       svg,     pgm,    svgpcb,     ROT0,   "IGS / Idea Factory", "S.V.G. - Spectral vs Generation (M68k label V100JP) (ARM label V100JP ROM 05/12/05  S.V.G V100) (JAMMA PCB)", GAME_IMPERFECT_SOUND | GAME_UNEMULATED_PROTECTION | GAME_NOT_WORKING | GAME_SUPPORTS_SAVE ) /* need internal rom of IGS027A */ // ARM time: 15:31:35
 
-// the exact text of the 'version' shows which revision of the game it is; the newest has 2 '.' symbols in the string, the oldest, none.
-GAME( 2002, ket,          0,         cavepgm,    pgm,     ket,       ROT270, "Cave", "Ketsui: Kizuna Jigoku Tachi (2003/01/01. Master Ver.)", GAME_IMPERFECT_SOUND | GAME_SUPPORTS_SAVE )
-GAME( 2002, keta,         ket,       cavepgm,    pgm,     ket,       ROT270, "Cave", "Ketsui: Kizuna Jigoku Tachi (2003/01/01 Master Ver.)",  GAME_IMPERFECT_SOUND | GAME_SUPPORTS_SAVE )
-GAME( 2002, ketb,         ket,       cavepgm,    pgm,     ket,       ROT270, "Cave", "Ketsui: Kizuna Jigoku Tachi (2003/01/01 Master Ver)",   GAME_IMPERFECT_SOUND | GAME_SUPPORTS_SAVE )
 
-GAME( 2003, espgal,       0,         cavepgm,    pgm,     espgal,    ROT270, "Cave", "Espgaluda (2003/10/15 Master Ver)", GAME_IMPERFECT_SOUND | GAME_SUPPORTS_SAVE )
 
diff -Nru src-old/mame/drivers/play_2.c src/mame/drivers/play_2.c
--- src-old/mame/drivers/play_2.c	2011-12-23 19:29:55.000000000 +0100
+++ src/mame/drivers/play_2.c	2012-03-15 07:40:01.000000000 +0100
@@ -243,10 +243,10 @@
 // ??/87 Skill Flight
 
 
-GAME(1979,  antar,     0,      play_2,  play_2,  play_2,  ROT0,  "Playmatic",    "Antar",		GAME_IS_SKELETON_MECHANICAL)
-GAME(1979,  antar2,    antar,  play_2,  play_2,  play_2,  ROT0,  "Playmatic",    "Antar (alternate set)",		GAME_IS_SKELETON_MECHANICAL)
-GAME(1980,  evlfight,  0,      play_2,  play_2,  play_2,  ROT0,  "Playmatic",    "Evil Fight",	GAME_IS_SKELETON_MECHANICAL)
-GAME(1980,  attack,    0,      play_2,  play_2,  play_2,  ROT0,  "Playmatic",    "Attack",	GAME_IS_SKELETON_MECHANICAL)
-GAME(1980,  blkfever,  0,      play_2,  play_2,  play_2,  ROT0,  "Playmatic",    "Black Fever",	GAME_IS_SKELETON_MECHANICAL)
-GAME(1982,  cerberup,  0,      play_2,  play_2,  play_2,  ROT0,  "Playmatic",    "Cerberus (Pinball)",	GAME_IS_SKELETON_MECHANICAL)
-GAME(1985,  madrace,   0,      play_2,  play_2,  play_2,  ROT0,  "Playmatic",    "Mad Race",		GAME_IS_SKELETON_MECHANICAL)
+GAME(1979,  antar,     0,      play_2,  play_2,  play_2,  ROT0,  "Playmatic",    "Antar (set 1)",      GAME_IS_SKELETON_MECHANICAL)
+GAME(1979,  antar2,    antar,  play_2,  play_2,  play_2,  ROT0,  "Playmatic",    "Antar (set 2)",      GAME_IS_SKELETON_MECHANICAL)
+GAME(1980,  evlfight,  0,      play_2,  play_2,  play_2,  ROT0,  "Playmatic",    "Evil Fight",         GAME_IS_SKELETON_MECHANICAL)
+GAME(1980,  attack,    0,      play_2,  play_2,  play_2,  ROT0,  "Playmatic",    "Attack",             GAME_IS_SKELETON_MECHANICAL)
+GAME(1980,  blkfever,  0,      play_2,  play_2,  play_2,  ROT0,  "Playmatic",    "Black Fever",        GAME_IS_SKELETON_MECHANICAL)
+GAME(1982,  cerberup,  0,      play_2,  play_2,  play_2,  ROT0,  "Playmatic",    "Cerberus (Pinball)", GAME_IS_SKELETON_MECHANICAL)
+GAME(1985,  madrace,   0,      play_2,  play_2,  play_2,  ROT0,  "Playmatic",    "Mad Race",           GAME_IS_SKELETON_MECHANICAL)
diff -Nru src-old/mame/drivers/progolf.c src/mame/drivers/progolf.c
--- src-old/mame/drivers/progolf.c	2012-01-27 09:53:25.000000000 +0100
+++ src/mame/drivers/progolf.c	2012-03-16 20:52:48.000000000 +0100
@@ -266,123 +266,85 @@
 	AM_RANGE(0xf000, 0xffff) AM_ROM
 ADDRESS_MAP_END
 
+
 static INPUT_CHANGED( coin_inserted )
 {
 	cputag_set_input_line(field.machine(), "maincpu", INPUT_LINE_NMI, newval ? CLEAR_LINE : ASSERT_LINE);
 }
 
+/* verified from M6502 code */
 static INPUT_PORTS_START( progolf )
 	PORT_START("IN0")
-	PORT_DIPNAME( 0x01, 0x01, "IN0" )
-	PORT_DIPSETTING(    0x01, DEF_STR( Off ) )
-	PORT_DIPSETTING(    0x00, DEF_STR( On ) )
-	PORT_DIPNAME( 0x02, 0x02, DEF_STR( Unknown ) )
-	PORT_DIPSETTING(    0x02, DEF_STR( Off ) )
-	PORT_DIPSETTING(    0x00, DEF_STR( On ) )
-	PORT_DIPNAME( 0x04, 0x04, DEF_STR( Unknown ) )
-	PORT_DIPSETTING(    0x04, DEF_STR( Off ) )
-	PORT_DIPSETTING(    0x00, DEF_STR( On ) )
-	PORT_DIPNAME( 0x08, 0x08, DEF_STR( Unknown ) )
-	PORT_DIPSETTING(    0x08, DEF_STR( Off ) )
-	PORT_DIPSETTING(    0x00, DEF_STR( On ) )
-	PORT_DIPNAME( 0x10, 0x10, DEF_STR( Unknown ) )
-	PORT_DIPSETTING(    0x10, DEF_STR( Off ) )
-	PORT_DIPSETTING(    0x00, DEF_STR( On ) )
-	PORT_DIPNAME( 0x20, 0x20, DEF_STR( Unknown ) )
-	PORT_DIPSETTING(    0x20, DEF_STR( Off ) )
-	PORT_DIPSETTING(    0x00, DEF_STR( On ) )
-	PORT_DIPNAME( 0x40, 0x40, DEF_STR( Unknown ) )
-	PORT_DIPSETTING(    0x40, DEF_STR( Off ) )
-	PORT_DIPSETTING(    0x00, DEF_STR( On ) )
+	PORT_BIT( 0x7f, IP_ACTIVE_HIGH, IPT_UNUSED )
 	PORT_BIT( 0x80, IP_ACTIVE_HIGH, IPT_VBLANK )
 
 	PORT_START("P1")
-	PORT_BIT( 0x01, IP_ACTIVE_HIGH, IPT_JOYSTICK_LEFT ) PORT_PLAYER(1)
-	PORT_BIT( 0x02, IP_ACTIVE_HIGH, IPT_JOYSTICK_RIGHT ) PORT_PLAYER(1)
-	PORT_BIT( 0x04, IP_ACTIVE_HIGH, IPT_JOYSTICK_UP ) PORT_PLAYER(1)
-	PORT_BIT( 0x08, IP_ACTIVE_HIGH, IPT_JOYSTICK_DOWN ) PORT_PLAYER(1)
-	PORT_BIT( 0x10, IP_ACTIVE_HIGH, IPT_BUTTON1 ) PORT_PLAYER(1)
-	PORT_BIT( 0x60, IP_ACTIVE_HIGH, IPT_UNUSED )
+	PORT_BIT( 0x01, IP_ACTIVE_HIGH, IPT_JOYSTICK_LEFT )
+	PORT_BIT( 0x02, IP_ACTIVE_HIGH, IPT_JOYSTICK_RIGHT )
+	PORT_BIT( 0x04, IP_ACTIVE_HIGH, IPT_JOYSTICK_UP )
+	PORT_BIT( 0x08, IP_ACTIVE_HIGH, IPT_JOYSTICK_DOWN )
+	PORT_BIT( 0x10, IP_ACTIVE_HIGH, IPT_BUTTON1 )
+	PORT_BIT( 0x20, IP_ACTIVE_HIGH, IPT_UNUSED )
+	PORT_BIT( 0x40, IP_ACTIVE_HIGH, IPT_UNUSED )
 	PORT_BIT( 0x80, IP_ACTIVE_HIGH, IPT_START1 )
 
+	PORT_START("P2")
+	PORT_BIT( 0x01, IP_ACTIVE_HIGH, IPT_JOYSTICK_RIGHT ) PORT_COCKTAIL
+	PORT_BIT( 0x02, IP_ACTIVE_HIGH, IPT_JOYSTICK_LEFT )  PORT_COCKTAIL
+	PORT_BIT( 0x04, IP_ACTIVE_HIGH, IPT_JOYSTICK_DOWN )  PORT_COCKTAIL
+	PORT_BIT( 0x08, IP_ACTIVE_HIGH, IPT_JOYSTICK_UP )    PORT_COCKTAIL
+	PORT_BIT( 0x10, IP_ACTIVE_HIGH, IPT_BUTTON1 )        PORT_COCKTAIL
+	PORT_BIT( 0x20, IP_ACTIVE_HIGH, IPT_UNUSED )
+	PORT_BIT( 0x40, IP_ACTIVE_HIGH, IPT_UNUSED )
+	PORT_BIT( 0x80, IP_ACTIVE_HIGH, IPT_START2 )
+
 	PORT_START("IN2")
-	PORT_DIPNAME( 0x01, 0x01, "IN3" )
-	PORT_DIPSETTING(    0x01, DEF_STR( Off ) )
-	PORT_DIPSETTING(    0x00, DEF_STR( On ) )
-	PORT_DIPNAME( 0x02, 0x02, DEF_STR( Unknown ) )
-	PORT_DIPSETTING(    0x02, DEF_STR( Off ) )
-	PORT_DIPSETTING(    0x00, DEF_STR( On ) )
-	PORT_DIPNAME( 0x04, 0x04, DEF_STR( Unknown ) )
-	PORT_DIPSETTING(    0x04, DEF_STR( Off ) )
-	PORT_DIPSETTING(    0x00, DEF_STR( On ) )
-	PORT_DIPNAME( 0x08, 0x08, DEF_STR( Unknown ) )
-	PORT_DIPSETTING(    0x08, DEF_STR( Off ) )
-	PORT_DIPSETTING(    0x00, DEF_STR( On ) )
-	PORT_DIPNAME( 0x10, 0x10, DEF_STR( Unknown ) )
-	PORT_DIPSETTING(    0x10, DEF_STR( Off ) )
-	PORT_DIPSETTING(    0x00, DEF_STR( On ) )
-	PORT_DIPNAME( 0x20, 0x20, DEF_STR( Unknown ) )
-	PORT_DIPSETTING(    0x20, DEF_STR( Off ) )
-	PORT_DIPSETTING(    0x00, DEF_STR( On ) )
+	PORT_BIT( 0x3f, IP_ACTIVE_HIGH, IPT_UNUSED )
 	PORT_BIT( 0x40, IP_ACTIVE_LOW,IPT_COIN1 ) PORT_CHANGED(coin_inserted, 0)
 	PORT_BIT( 0x80, IP_ACTIVE_LOW,IPT_COIN2 ) PORT_CHANGED(coin_inserted, 0)
 
-	PORT_START("P2")
-	PORT_BIT( 0x01, IP_ACTIVE_HIGH, IPT_JOYSTICK_RIGHT ) PORT_PLAYER(2)
-	PORT_BIT( 0x02, IP_ACTIVE_HIGH, IPT_JOYSTICK_LEFT ) PORT_PLAYER(2)
-	PORT_BIT( 0x04, IP_ACTIVE_HIGH, IPT_JOYSTICK_DOWN ) PORT_PLAYER(2)
-	PORT_BIT( 0x08, IP_ACTIVE_HIGH, IPT_JOYSTICK_UP ) PORT_PLAYER(2)
-	PORT_BIT( 0x10, IP_ACTIVE_HIGH, IPT_BUTTON1 ) PORT_PLAYER(2)
-	PORT_BIT( 0x60, IP_ACTIVE_HIGH, IPT_UNUSED )
-	PORT_BIT( 0x80, IP_ACTIVE_HIGH, IPT_START2 )
-
 	PORT_START("DSW1")
-	PORT_DIPNAME( 0x01, 0x00, "DSW1" )
-	PORT_DIPSETTING(    0x00, DEF_STR( Off ) )
-	PORT_DIPSETTING(    0x01, DEF_STR( On ) )
-	PORT_DIPNAME( 0x02, 0x00, DEF_STR( Unknown ) )
-	PORT_DIPSETTING(    0x00, DEF_STR( Off ) )
-	PORT_DIPSETTING(    0x02, DEF_STR( On ) )
-	PORT_DIPNAME( 0x04, 0x00, DEF_STR( Unknown ) )
-	PORT_DIPSETTING(    0x00, DEF_STR( Off ) )
-	PORT_DIPSETTING(    0x04, DEF_STR( On ) )
-	PORT_DIPNAME( 0x08, 0x00, DEF_STR( Unknown ) )
-	PORT_DIPSETTING(    0x00, DEF_STR( Off ) )
-	PORT_DIPSETTING(    0x08, DEF_STR( On ) )
-	PORT_DIPNAME( 0x10, 0x00, DEF_STR( Unknown ) )
-	PORT_DIPSETTING(    0x00, DEF_STR( Off ) )
-	PORT_DIPSETTING(    0x10, DEF_STR( On ) )
-	PORT_DIPNAME( 0x20, 0x00, DEF_STR( Unknown ) )
-	PORT_DIPSETTING(    0x00, DEF_STR( Off ) )
-	PORT_DIPSETTING(    0x20, DEF_STR( On ) )
-	PORT_BIT( 0x40, IP_ACTIVE_HIGH,IPT_SERVICE1 ) PORT_CHANGED(coin_inserted, 0)
+	PORT_DIPNAME( 0x03, 0x00, DEF_STR( Coin_B ) )
+	PORT_DIPSETTING(    0x03, DEF_STR( 2C_1C ) )
+	PORT_DIPSETTING(    0x00, DEF_STR( 1C_1C ) )
+	PORT_DIPSETTING(    0x01, DEF_STR( 1C_2C ) )
+	PORT_DIPSETTING(    0x02, DEF_STR( 1C_3C ) )  PORT_CONDITION("DSW2",0x40,PORTCOND_EQUALS,0x00)
+	PORT_DIPSETTING(    0x02, DEF_STR( 1C_6C ) )  PORT_CONDITION("DSW2",0x40,PORTCOND_EQUALS,0x40)
+	PORT_DIPNAME( 0x0c, 0x00, DEF_STR( Coin_A ) )
+	PORT_DIPSETTING(    0x0c, DEF_STR( 2C_1C ) )
+	PORT_DIPSETTING(    0x00, DEF_STR( 1C_1C ) )
+	PORT_DIPSETTING(    0x04, DEF_STR( 1C_2C ) )
+	PORT_DIPSETTING(    0x08, DEF_STR( 1C_3C ) )  PORT_CONDITION("DSW2",0x40,PORTCOND_EQUALS,0x00)
+	PORT_DIPSETTING(    0x08, DEF_STR( 1C_6C ) )  PORT_CONDITION("DSW2",0x40,PORTCOND_EQUALS,0x40)
+	PORT_DIPNAME( 0x10, 0x10, DEF_STR( Cabinet ) )
+	PORT_DIPSETTING(    0x10, DEF_STR( Upright ) )
+	PORT_DIPSETTING(    0x00, DEF_STR( Cocktail ) )
+	PORT_DIPUNUSED( 0x20, IP_ACTIVE_HIGH )
+	PORT_BIT( 0x40, IP_ACTIVE_HIGH, IPT_SERVICE1 ) PORT_CHANGED(coin_inserted, 0)    /* same coinage as COIN1 */
 	PORT_SERVICE( 0x80, IP_ACTIVE_HIGH )
 
 	PORT_START("DSW2")
-	PORT_DIPNAME( 0x01, 0x00, "DSW2" )
-	PORT_DIPSETTING(    0x00, DEF_STR( Off ) )
-	PORT_DIPSETTING(    0x01, DEF_STR( On ) )
-	PORT_DIPNAME( 0x02, 0x00, DEF_STR( Unknown ) )
-	PORT_DIPSETTING(    0x00, DEF_STR( Off ) )
-	PORT_DIPSETTING(    0x02, DEF_STR( On ) )
-	PORT_DIPNAME( 0x04, 0x00, DEF_STR( Unknown ) )
-	PORT_DIPSETTING(    0x00, DEF_STR( Off ) )
-	PORT_DIPSETTING(    0x04, DEF_STR( On ) )
-	PORT_DIPNAME( 0x08, 0x00, DEF_STR( Unknown ) )
-	PORT_DIPSETTING(    0x00, DEF_STR( Off ) )
-	PORT_DIPSETTING(    0x08, DEF_STR( On ) )
-	PORT_DIPNAME( 0x10, 0x00, DEF_STR( Unknown ) )
-	PORT_DIPSETTING(    0x00, DEF_STR( Off ) )
-	PORT_DIPSETTING(    0x10, DEF_STR( On ) )
-	PORT_DIPNAME( 0x20, 0x00, DEF_STR( Unknown ) )
-	PORT_DIPSETTING(    0x00, DEF_STR( Off ) )
-	PORT_DIPSETTING(    0x20, DEF_STR( On ) )
-	PORT_DIPNAME( 0x40, 0x00, DEF_STR( Unknown ) )
-	PORT_DIPSETTING(    0x00, DEF_STR( Off ) )
-	PORT_DIPSETTING(    0x40, DEF_STR( On ) )
-	PORT_DIPNAME( 0x80, 0x00, DEF_STR( Unknown ) )
-	PORT_DIPSETTING(    0x00, DEF_STR( Off ) )
-	PORT_DIPSETTING(    0x80, DEF_STR( On ) )
+	PORT_DIPNAME( 0x01, 0x00, DEF_STR( Lives ) )
+	PORT_DIPSETTING(    0x00, "1" )
+	PORT_DIPSETTING(    0x01, "2" )
+	PORT_DIPNAME( 0x06, 0x00, DEF_STR( Bonus_Life ) )       /* table at 0xd16e (4 * 3 bytes, LSB first) - no multiple bonus lives */
+	PORT_DIPSETTING(    0x00, "10000" )
+	PORT_DIPSETTING(    0x02, "30000" )
+	PORT_DIPSETTING(    0x04, "50000" )
+	PORT_DIPSETTING(    0x06, DEF_STR( None ) )
+	PORT_DIPNAME( 0x08, 0x00, DEF_STR( Difficulty ) )       /* code at 0xd188 */
+	PORT_DIPSETTING(    0x00, DEF_STR( Easy ) )
+	PORT_DIPSETTING(    0x08, DEF_STR( Hard ) )
+	PORT_DIPNAME( 0x10, 0x00, "Display Strength and Position" )
+	PORT_DIPSETTING(    0x10, DEF_STR( No ) )
+	PORT_DIPSETTING(    0x00, DEF_STR( Yes ) )
+	PORT_DIPNAME( 0x20, 0x00, "Force Coinage = A 1C/3C - B 1C/8C" )   /* SERVICE1 = 2C/1C */
+	PORT_DIPSETTING(    0x00, DEF_STR( No ) )
+	PORT_DIPSETTING(    0x20, DEF_STR( Yes ) )
+	PORT_DIPNAME( 0x40, 0x00, "Coin Mode" )
+	PORT_DIPSETTING(    0x00, "Mode 1" )
+	PORT_DIPSETTING(    0x40, "Mode 2" )
+	PORT_DIPUNUSED( 0x80, IP_ACTIVE_HIGH )
 INPUT_PORTS_END
 
 static const gfx_layout progolf_charlayout =
@@ -566,5 +528,5 @@
 }
 
 /* Maybe progolf is a bootleg? progolfa uses DECO CPU-6 as custom module CPU (the same as Zoar) */
-GAME( 1981, progolf,  0,       progolf, progolf, progolf,  ROT270, "Data East Corporation", "18 Holes Pro Golf (set 1)", GAME_NO_COCKTAIL | GAME_IMPERFECT_GRAPHICS )
+GAME( 1981, progolf,  0,       progolf, progolf, progolf,  ROT270, "Data East Corporation", "18 Holes Pro Golf (set 1)", GAME_NO_COCKTAIL | GAME_IMPERFECT_GRAPHICS | GAME_NO_COCKTAIL )
 GAME( 1981, progolfa, progolf, progolf, progolf, progolfa, ROT270, "Data East Corporation", "18 Holes Pro Golf (set 2)", GAME_NOT_WORKING | GAME_IMPERFECT_GRAPHICS | GAME_NO_COCKTAIL )
diff -Nru src-old/mame/drivers/pyson.c src/mame/drivers/pyson.c
--- src-old/mame/drivers/pyson.c	2012-03-11 19:17:00.000000000 +0100
+++ src/mame/drivers/pyson.c	2012-03-19 20:16:18.000000000 +0100
@@ -256,6 +256,6 @@
 ROM_END
 
 
-GAME(2002, pyson,          0,   pyson,   pyson,       0, ROT0, "Konami", "Konami Psyon BIOS", GAME_IS_SKELETON|GAME_IS_BIOS_ROOT)
+GAME(2002, pyson,          0,   pyson,   pyson,       0, ROT0, "Konami", "Konami Pyson BIOS", GAME_IS_SKELETON|GAME_IS_BIOS_ROOT)
 GAME(2002, wswe,       pyson,   pyson,   pyson,       0, ROT0, "Konami", "World Soccer Winning Eleven Arcade Game Style", GAME_IS_SKELETON)
 GAME(2003, wswe2k3,    pyson,   pyson,   pyson,       0, ROT0, "Konami", "World Soccer Winning Eleven Arcade Game 2003", GAME_IS_SKELETON)
diff -Nru src-old/mame/drivers/quasar.c src/mame/drivers/quasar.c
--- src-old/mame/drivers/quasar.c	2012-01-12 23:19:49.000000000 +0100
+++ src/mame/drivers/quasar.c	2012-03-24 19:25:52.000000000 +0100
@@ -32,7 +32,7 @@
 #include "cpu/mcs48/mcs48.h"
 #include "sound/dac.h"
 #include "video/s2636.h"
-#include "includes/cvs.h"
+#include "includes/quasar.h"
 
 /************************************************************************
 
@@ -432,5 +432,5 @@
 ROM_END
 
 
-GAME( 1980, quasar,        0, quasar,   quasar,   0, ROT90, "Zelco / Zaccaria", "Quasar",             GAME_IMPERFECT_GRAPHICS | GAME_IMPERFECT_SOUND | GAME_SUPPORTS_SAVE )
-GAME( 1980, quasara,  quasar, quasar,   quasar,   0, ROT90, "Zelco / Zaccaria", "Quasar (Alternate)", GAME_IMPERFECT_GRAPHICS | GAME_IMPERFECT_SOUND | GAME_SUPPORTS_SAVE )
+GAME( 1980, quasar,   0,      quasar,   quasar,   0, ROT90, "Zaccaria / Zelco", "Quasar (set 1)", GAME_IMPERFECT_GRAPHICS | GAME_IMPERFECT_SOUND | GAME_SUPPORTS_SAVE )
+GAME( 1980, quasara,  quasar, quasar,   quasar,   0, ROT90, "Zaccaria / Zelco", "Quasar (set 2)", GAME_IMPERFECT_GRAPHICS | GAME_IMPERFECT_SOUND | GAME_SUPPORTS_SAVE )
diff -Nru src-old/mame/drivers/rastan.c src/mame/drivers/rastan.c
--- src-old/mame/drivers/rastan.c	2012-02-22 01:51:07.000000000 +0100
+++ src/mame/drivers/rastan.c	2012-03-25 15:56:49.000000000 +0200
@@ -490,6 +490,36 @@
 	ROM_LOAD( "b04-20.76", 0x0000, 0x10000, CRC(fd1a34cc) SHA1(b1682959521fa295769207b75cf7d839e9ec95fd) ) /* samples are 4bit ADPCM */
 ROM_END
 
+/* this is an official Taito PCB and mostly matches rastanu, but the copyright message is TAITO JAPAN so I assume it's a World version */
+ROM_START( rastan2 )
+	ROM_REGION( 0x60000, "maincpu", 0 )	/* 6*64k for 68000 code */
+    ROM_LOAD16_BYTE( "b04-38.19",    0x00000, 0x10000, CRC(1c91dbb1) SHA1(17fc55e8546cc0b847aebd67fb4570a1e9f128f3) )
+    ROM_LOAD16_BYTE( "b04-37.7",     0x00001, 0x10000, CRC(ecf20bdd) SHA1(92e46b1edef40a19be17091c09daba598d77bca8) )
+    ROM_LOAD16_BYTE( "b04-40.20",    0x20000, 0x10000, CRC(0930d4b3) SHA1(c269b3856040ed9409de99cca48f22a2f355fc4c) )
+    ROM_LOAD16_BYTE( "b04-39.8",     0x20001, 0x10000, CRC(d95ade5e) SHA1(f47557dcfa9d3137e2a3838e45858fc21471cc91) )
+    ROM_LOAD16_BYTE( "b04-42.21",    0x40000, 0x10000, CRC(1857a7cb) SHA1(7d967d04ade648c6ddb19aad9e184b6e272856da) )
+    ROM_LOAD16_BYTE( "b04-43-1.9",   0x40001, 0x10000, CRC(ca4702ff) SHA1(0f8c2d7d332c4e35884c48d87ba9fd26924d1692) )
+
+	ROM_REGION( 0x1c000, "audiocpu", 0 )
+	ROM_LOAD( "b04-19.49", 0x00000, 0x4000, CRC(ee81fdd8) SHA1(fa59dac2583a7d2979550dffc6f9c6c2bd67bfd5) )
+	ROM_CONTINUE(            0x10000, 0xc000 )
+
+	ROM_REGION( 0x080000, "gfx1", 0 )
+	ROM_LOAD( "b04-01.40",  0x00000, 0x20000, CRC(cd30de19) SHA1(f8d158d38cd07a24cb5ddefd4ce90beec706924d) )
+	ROM_LOAD( "b04-03.39",  0x20000, 0x20000, CRC(ab67e064) SHA1(5c49f0ff9221cba9f2bb8da86eb4448c73012410) )
+	ROM_LOAD( "b04-02.67",  0x40000, 0x20000, CRC(54040fec) SHA1(a2bea2ce1cebd25b33be41723299ca0512d95f9e) )
+	ROM_LOAD( "b04-04.66",  0x60000, 0x20000, CRC(94737e93) SHA1(3df7f085fe6468bda11fab2e86252df6f74f7a99) )
+
+	ROM_REGION( 0x080000, "gfx2", 0 )
+	ROM_LOAD( "b04-05.15",  0x00000, 0x20000, CRC(c22d94ac) SHA1(04f69f9af7ac4242e95dba32988afa3616d75a92) )
+	ROM_LOAD( "b04-07.14",  0x20000, 0x20000, CRC(b5632a51) SHA1(da6ebe6afe245443a76b33714213549356c0c5c3) )
+	ROM_LOAD( "b04-06.28",  0x40000, 0x20000, CRC(002ccf39) SHA1(fdc29f39198f9b488e298ee89b0eeb3417527733) )
+	ROM_LOAD( "b04-08.27",  0x60000, 0x20000, CRC(feafca05) SHA1(9de9ff1fcf037e5ab25c181b678245041238d6ae) )
+
+	ROM_REGION( 0x10000, "adpcm", 0 )	/* MSM5205 samples */
+	ROM_LOAD( "b04-20.76", 0x0000, 0x10000, CRC(fd1a34cc) SHA1(b1682959521fa295769207b75cf7d839e9ec95fd) )
+ROM_END
+
 ROM_START( rastanu )
 	ROM_REGION( 0x60000, "maincpu", 0 )	/* 6*64k for 68000 code */
 	ROM_LOAD16_BYTE( "b04-35.19", 0x00000, 0x10000, CRC(1c91dbb1) SHA1(17fc55e8546cc0b847aebd67fb4570a1e9f128f3) )
@@ -607,7 +637,8 @@
 ROM_END
 
 
-GAME( 1987, rastan,    0,      rastan, rastan,   0, ROT0, "Taito Corporation Japan",   "Rastan (World)", GAME_SUPPORTS_SAVE )
+GAME( 1987, rastan,    0,      rastan, rastan,   0, ROT0, "Taito Corporation Japan",   "Rastan (World, set 1)", GAME_SUPPORTS_SAVE )
+GAME( 1987, rastan2,   rastan, rastan, rastsaga, 0, ROT0, "Taito Corporation Japan",   "Rastan (World, set 2)", GAME_SUPPORTS_SAVE )
 GAME( 1987, rastanu,   rastan, rastan, rastsaga, 0, ROT0, "Taito America Corporation", "Rastan (US, set 1)", GAME_SUPPORTS_SAVE )
 GAME( 1987, rastanu2,  rastan, rastan, rastsaga, 0, ROT0, "Taito America Corporation", "Rastan (US, set 2)", GAME_SUPPORTS_SAVE )
 GAME( 1987, rastsaga,  rastan, rastan, rastsaga, 0, ROT0, "Taito Corporation",         "Rastan Saga (Japan)", GAME_SUPPORTS_SAVE )
diff -Nru src-old/mame/drivers/sderby.c src/mame/drivers/sderby.c
--- src-old/mame/drivers/sderby.c	2012-02-22 01:51:07.000000000 +0100
+++ src/mame/drivers/sderby.c	2012-03-25 15:56:49.000000000 +0200
@@ -292,6 +292,25 @@
 	AM_RANGE(0xffc000, 0xffffff) AM_RAM
 ADDRESS_MAP_END
 
+
+static ADDRESS_MAP_START( luckboom_map, AS_PROGRAM, 16 )
+	AM_RANGE(0x000000, 0x07ffff) AM_ROM
+	AM_RANGE(0x100000, 0x100fff) AM_RAM_WRITE(sderby_videoram_w) AM_BASE_MEMBER(sderby_state,m_videoram)		/* bg */
+	AM_RANGE(0x101000, 0x101fff) AM_RAM_WRITE(sderby_md_videoram_w) AM_BASE_MEMBER(sderby_state,m_md_videoram)	/* mid */
+	AM_RANGE(0x102000, 0x103fff) AM_RAM_WRITE(sderby_fg_videoram_w) AM_BASE_MEMBER(sderby_state,m_fg_videoram)	/* fg */
+	AM_RANGE(0x104000, 0x10400b) AM_WRITE(sderby_scroll_w)
+	AM_RANGE(0x10400c, 0x10400d) AM_WRITENOP	/* ??? - check code at 0x000456 (executed once at startup) */
+	AM_RANGE(0x10400e, 0x10400f) AM_WRITENOP	/* ??? - check code at 0x000524 (executed once at startup) */
+	AM_RANGE(0x200000, 0x200fff) AM_RAM AM_BASE_MEMBER(sderby_state,m_spriteram) AM_SIZE_MEMBER(sderby_state,m_spriteram_size)
+	AM_RANGE(0x308000, 0x30800d) AM_READ(sderby_input_r)
+	AM_RANGE(0x308008, 0x308009) AM_WRITE(sderby_out_w)	/* output port */
+	AM_RANGE(0x30800e, 0x30800f) AM_DEVREADWRITE8_MODERN("oki", okim6295_device, read, write, 0x00ff)
+	AM_RANGE(0x380000, 0x380fff) AM_WRITE(paletteram16_RRRRRGGGGGBBBBBx_word_w) AM_BASE_GENERIC(paletteram)
+	AM_RANGE(0x500000, 0x500001) AM_WRITENOP	/* unknown... write 0x01 in game, and 0x00 on reset */
+	AM_RANGE(0xe00000, 0xe007ff) AM_RAM AM_SHARE("nvram")
+	AM_RANGE(0xff0000, 0xffffff) AM_RAM
+ADDRESS_MAP_END
+
 static ADDRESS_MAP_START( spacewin_map, AS_PROGRAM, 16 )
 	AM_RANGE(0x000000, 0x03ffff) AM_ROM
 	AM_RANGE(0x100000, 0x100fff) AM_RAM_WRITE(sderby_videoram_w) AM_BASE_MEMBER(sderby_state,m_videoram)		/* bg */
@@ -359,6 +378,26 @@
 	PORT_BIT( 0x8000, IP_ACTIVE_LOW, IPT_UNKNOWN )
 INPUT_PORTS_END
 
+static INPUT_PORTS_START( luckboom )
+	PORT_START("IN0")	/* 0x308000.w */
+	PORT_BIT( 0x0001, IP_ACTIVE_LOW, IPT_JOYSTICK_RIGHT )
+	PORT_BIT( 0x0002, IP_ACTIVE_LOW, IPT_JOYSTICK_LEFT  )
+	PORT_BIT( 0x0004, IP_ACTIVE_LOW, IPT_JOYSTICK_UP    )
+	PORT_BIT( 0x0008, IP_ACTIVE_LOW, IPT_JOYSTICK_DOWN  )
+	PORT_BIT( 0x0010, IP_ACTIVE_LOW, IPT_BUTTON1 )
+	PORT_BIT( 0x0020, IP_ACTIVE_LOW, IPT_BUTTON2 )
+	PORT_BIT( 0x0040, IP_ACTIVE_LOW, IPT_UNKNOWN )
+	PORT_BIT( 0x0080, IP_ACTIVE_LOW, IPT_UNKNOWN )
+	PORT_BIT( 0x0100, IP_ACTIVE_LOW, IPT_COIN1 )
+	PORT_BIT( 0x0200, IP_ACTIVE_LOW, IPT_UNKNOWN )
+	PORT_BIT( 0x0400, IP_ACTIVE_LOW, IPT_UNKNOWN )
+	PORT_BIT( 0x0800, IP_ACTIVE_LOW, IPT_START1 )
+	PORT_SERVICE_NO_TOGGLE(0x1000, IP_ACTIVE_LOW)
+	PORT_BIT( 0x2000, IP_ACTIVE_LOW, IPT_UNKNOWN )
+	PORT_BIT( 0x4000, IP_ACTIVE_LOW, IPT_UNKNOWN )
+	PORT_BIT( 0x8000, IP_ACTIVE_LOW, IPT_UNKNOWN )
+INPUT_PORTS_END
+
 static INPUT_PORTS_START( spacewin )
 	PORT_START("IN0")	/* 0x308000.w */
 	PORT_BIT( 0x0001, IP_ACTIVE_LOW, IPT_POKER_HOLD1 )
@@ -478,6 +517,30 @@
 	MCFG_SOUND_ROUTE(ALL_OUTPUTS, "mono", 1.0)
 MACHINE_CONFIG_END
 
+static MACHINE_CONFIG_START( luckboom, sderby_state )
+
+	MCFG_CPU_ADD("maincpu", M68000, 12000000)
+	MCFG_CPU_PROGRAM_MAP(luckboom_map)
+	MCFG_CPU_VBLANK_INT("screen", irq4_line_hold)
+
+	MCFG_NVRAM_ADD_0FILL("nvram")
+
+	MCFG_SCREEN_ADD("screen", RASTER)
+	MCFG_SCREEN_REFRESH_RATE(60)
+	MCFG_SCREEN_VBLANK_TIME(ATTOSECONDS_IN_USEC(0))
+	MCFG_SCREEN_SIZE(64*8, 64*8)
+	MCFG_SCREEN_VISIBLE_AREA(4*8, 44*8-1, 3*8, 33*8-1)
+	MCFG_SCREEN_UPDATE_STATIC(sderby)
+
+	MCFG_GFXDECODE(sderby)
+	MCFG_PALETTE_LENGTH(0x1000)
+	MCFG_VIDEO_START(sderby)
+
+	MCFG_SPEAKER_STANDARD_MONO("mono")
+	MCFG_OKIM6295_ADD("oki", 1056000, OKIM6295_PIN7_HIGH) /* clock frequency & pin 7 not verified */
+	MCFG_SOUND_ROUTE(ALL_OUTPUTS, "mono", 1.0)
+MACHINE_CONFIG_END
+
 static MACHINE_CONFIG_START( spacewin, sderby_state )
 
 	MCFG_CPU_ADD("maincpu", M68000, 12000000)
@@ -718,6 +781,53 @@
 	ROM_LOAD( "8.bin", 0x200000, 0x80000, CRC(d4c2b7da) SHA1(515be861443acc5b911241dbaafa42e02f79985a))
 ROM_END
 
+/*
+Lucky Boom (c)1996 Playmark
+
+QTY     Type                    clock           position    function
+1x      MC68000P12                              u24         16/32-bit Microprocessor - main
+1x      M6295                                   u146        4-Channel Mixing ADCPM Voice Synthesis LSI - sound
+1x      KA358                                   u155        Dual Operational Amplifier - sound
+1x      TDA2003                                 TD1         Audio Amplifier - sound
+1x      oscillator              24.000000MHz    XL1
+1x      oscillator              28.000000MHz    XL2
+1x      blu resonator   1000J                   Y1
+
+ROMs
+QTY     Type        position    status
+1x      TMS27C020   1           dumped
+2x      AM27C010    2,3         dumped
+5x      TMS27C010   4-8         dumped
+
+RAMs
+QTY     Type            position
+8x      HM3-65728BK-5   u42,u73,u74,u75,u80,u81,u124,u125
+2x      HY62256ALP-10   u2,u6
+2x      KM6264BL-7L     u36,u37
+PLDs
+QTY     Type                position            status
+2x      A1020B-PL84C        u110,u137           read protected
+4x      TIBPAL22V10ACNT     u1,u77,u111,u112    read protected
+*/
+
+
+
+ROM_START( luckboom )
+	ROM_REGION( 0x80000, "maincpu", 0 ) /* 68000 Code */
+	ROM_LOAD16_BYTE( "2.u16", 0x00000, 0x20000, CRC(0a20eaca) SHA1(edd325b60b3a3ce84e89f8be91b9e19f82d15317) )
+	ROM_LOAD16_BYTE( "3.u15", 0x00001, 0x20000, CRC(0d3bb24c) SHA1(31826ec29650aa8b70e1b713678401113e008832) )
+
+	ROM_REGION( 0x080000, "oki", 0 ) /* Samples */
+	ROM_LOAD( "1.u147", 0x00000, 0x40000, CRC(0d42c0a3) SHA1(1b1d4c7dcbb063e8bf133063770b753947d1a017) )
+
+	ROM_REGION( 0xa0000, "gfx1", 0 ) /* Sprites */
+	ROM_LOAD( "4.u141", 0x000000, 0x20000, CRC(3aeccad7) SHA1(4104dd3ae928c1a876ac9b460fe18b58ce1206f7) )
+	ROM_LOAD( "5.u142", 0x020000, 0x20000, CRC(4e4f9ac6) SHA1(e9b0c48195d8b21cdab16d66423ff43e6292ef2c) )
+	ROM_LOAD( "6.u143", 0x040000, 0x20000, CRC(d1b4910e) SHA1(cfcb14bcd992bceaa634b20eb2d446caa62b6d82) )
+	ROM_LOAD( "7.u144", 0x060000, 0x20000, CRC(00334bad) SHA1(2d8af2a4b517ceb1ae5504b15086c8faaf934b53) )
+	ROM_LOAD( "8.u145", 0x080000, 0x20000, CRC(dc12df50) SHA1(0796d6428dc3a032ea55e06e8e07245a256ed036) )
+ROM_END
+
 
 /******************************
 *        Game Drivers         *
@@ -728,3 +838,4 @@
 GAMEL( 1996, spacewin,  0,        spacewin, spacewin, 0,     ROT0, "Playmark", "Scacco Matto / Space Win",             0,                                             layout_spacewin )
 GAMEL( 1997, croupier,  0,        pmroulet, pmroulet, 0,     ROT0, "Playmark", "Croupier (Playmark Roulette v.20.05)", GAME_UNEMULATED_PROTECTION | GAME_NOT_WORKING, layout_pmroulet )
 GAMEL( 1997, croupiera, croupier, pmroulet, pmroulet, 0,     ROT0, "Playmark", "Croupier (Playmark Roulette v.09.04)", GAME_UNEMULATED_PROTECTION | GAME_NOT_WORKING, layout_pmroulet )
+GAME ( 1996, luckboom,  0,        luckboom, luckboom, 0,     ROT0, "Playmark", "Lucky Boom", 0 )
diff -Nru src-old/mame/drivers/segas18.c src/mame/drivers/segas18.c
--- src-old/mame/drivers/segas18.c	2012-03-07 05:56:39.000000000 +0100
+++ src/mame/drivers/segas18.c	2012-03-23 05:07:28.000000000 +0100
@@ -1461,6 +1461,9 @@
     Clutch Hitter, Sega System 18
     CPU: FD1094 (317-0176)
     ROM Board: 171-5873B
+
+    game No. 833-7916-01 CLUTCH HITTER
+    rom  No. 834-7917-01
 */
 ROM_START( cltchitr )
 	ROM_REGION( 0x300000, "maincpu", 0 ) /* 68000 code */
diff -Nru src-old/mame/drivers/seibuspi.c src/mame/drivers/seibuspi.c
--- src-old/mame/drivers/seibuspi.c	2012-03-11 19:17:00.000000000 +0100
+++ src/mame/drivers/seibuspi.c	2012-03-15 07:40:01.000000000 +0100
@@ -3683,7 +3683,7 @@
 GAME( 1997, rdft2,     0,       spi,      spi_2button, rdft2,  ROT270, "Seibu Kaihatsu (Tuning license)", "Raiden Fighters 2",  GAME_IMPERFECT_GRAPHICS|GAME_IMPERFECT_SOUND )
 GAME( 1997, rdft2a2,   rdft2,   spi,      spi_2button, rdft2,  ROT270, "Seibu Kaihatsu (Dream Island license)", "Raiden Fighters 2 (Asia, Dream Island Co., LTD. license, SPI)",  GAME_IMPERFECT_GRAPHICS|GAME_IMPERFECT_SOUND )
 GAME( 1997, rdft2a,    rdft2,   spi,      spi_2button, rdft2,  ROT270, "Seibu Kaihatsu (Metrotainment license)", "Raiden Fighters 2 (Asia, Metrotainment Network license, SPI)",  GAME_IMPERFECT_GRAPHICS|GAME_IMPERFECT_SOUND )
-GAME( 1997, rdft2j,    rdft2,   spi,      spi_2button, rdft2,  ROT270, "Seibu Kaihatsu", "Raiden Fighters 2 (Japan, SPI)",  GAME_IMPERFECT_GRAPHICS|GAME_IMPERFECT_SOUND )
+GAME( 1997, rdft2j,    rdft2,   spi,      spi_2button, rdft2,  ROT270, "Seibu Kaihatsu", "Raiden Fighters 2 (Japan set 1, SPI)",  GAME_IMPERFECT_GRAPHICS|GAME_IMPERFECT_SOUND )
 GAME( 1997, rdft2j2,   rdft2,   spi,      spi_2button, rdft2,  ROT270, "Seibu Kaihatsu", "Raiden Fighters 2 (Japan set 2, SPI)",  GAME_IMPERFECT_GRAPHICS|GAME_IMPERFECT_SOUND )
 GAME( 1997, rdft2t,    rdft2,   spi,      spi_2button, rdft2,  ROT270, "Seibu Kaihatsu", "Raiden Fighters 2 (Taiwan, SPI)",  GAME_IMPERFECT_GRAPHICS|GAME_IMPERFECT_SOUND )
 GAME( 1997, rdft2u,    rdft2,   spi,      spi_2button, rdft2,  ROT270, "Seibu Kaihatsu (Fabtek license)", "Raiden Fighters 2 (USA, SPI)",  GAME_IMPERFECT_GRAPHICS|GAME_IMPERFECT_SOUND )
diff -Nru src-old/mame/drivers/senjyo.c src/mame/drivers/senjyo.c
--- src-old/mame/drivers/senjyo.c	2012-02-27 21:52:09.000000000 +0100
+++ src/mame/drivers/senjyo.c	2012-03-15 07:40:01.000000000 +0100
@@ -944,7 +944,7 @@
 
 GAME( 1983, senjyo,   0,        senjyo,  senjyo,   senjyo,   ROT90, "Tehkan", "Senjyo", 0 )
 GAME( 1984, starforc, 0,        senjyo,  starforc, starforc, ROT90, "Tehkan", "Star Force", 0 )
-GAME( 1984, starforce,starforc, senjyo,  starforc, starfore, ROT90, "Tehkan", "Star Force (encrypted)", 0 )
+GAME( 1984, starforce,starforc, senjyo,  starforc, starfore, ROT90, "Tehkan", "Star Force (encrypted, set 1)", 0 )
 GAME( 1984, starforcb,starforc, starforb,starforc, starfore, ROT90, "bootleg", "Star Force (encrypted, bootleg)", 0 )
 GAME( 1984, starforca,starforc, senjyo,  starforc, starfora, ROT90, "Tehkan", "Star Force (encrypted, set 2)", 0 )
 GAME( 1985, megaforc, starforc, senjyo,  starforc, starforc, ROT90, "Tehkan (Video Ware license)", "Mega Force", 0 )
diff -Nru src-old/mame/drivers/sfcbox.c src/mame/drivers/sfcbox.c
--- src-old/mame/drivers/sfcbox.c	2012-01-12 23:19:49.000000000 +0100
+++ src/mame/drivers/sfcbox.c	2012-03-25 15:56:49.000000000 +0200
@@ -4,55 +4,112 @@
   Preliminary driver file to handle emulation of the
   Nintendo Super Famicom Box.
 
-The Super Famicom Box was used in hotels in Japan, with it's installed Coin
+The Super Famicom Box was used in hotels in Japan, with its installed Coin
 Box, makes it a pay-for-play system.  It accepted 100 yen coins and gave 5
 minutes of playtime.  The interesting part of this system is that it used
 special multicarts that contained two or three games as part of a larger Cart,
 for which the system holds two at once.
 
+The "To Do" list:
+-----------------
+-Consider moving the 3 cartridges of the slot 2 in a sowtware list since they are interchangable
+-Hook the z180 clone, the DSP 1A/1B and the Super FX
+-Add the missing GROM4-1
+-Add the possibly alternate revision of the attract ROM, with Kirby holding a coin
+ (unless it is unlocked with some DIP switch)
 
 Specific Model Number information
 ---------------------------------
 
 Hardware:
+                                    _
+                                   | |--------------------------------------| GS 0871-102
+                                   | |--------------------------------------| GS 0871-102
+                       GD 0871-103 ||
+                                   ||   |-----------------------------------| PU 0871-101
+                                   ||     |_|
+ |---------------------------------||-----|_|-------------------------------| MAIN 0871-100A
+    __________________________________________
+   |------------------------------------------|    GS 0871-102
+   |------------------------------------------|    GS 0871-102
+  ___|__________________________            |
+ |------------------------------|           |      PU 0871-101
+ _|______________________|__________________|____
+|------------------------------------------------| MAIN 0871-100A
+
 
 PSS-001 - SUPER FAMICOM BOX - Main Unit
+This unit contains the three boards:
+the main board, the BIOS board and a passive board.
 
+1. The main board (MAIN 0871-100A) contains the Super Famicom core hardware as follow:
 CPU: S-CPU B (5A22-02 3MB 83)
-Video Controller: S-PPU1 (5C77-01 4AU 9J)
+Video Controller: S-PPU1 (5C77-01 4AU 9L)
 Video Controller: S-PPU2 C (5C78-03 3MB 9V)
-Working CPU RAM: S-WRAM A (9441 T90F)
-Sound CPU: S-SMP (SONY Nintendo'89)
-Sound DSP: S-DSP A (SONY'89 348AC8VZ)
+Working CPU RAM: S-WRAM A (9442 T94 F)
+Sound CPU: S-SMP (SONY Nintendo'89 JAPAN 3WK4V)
+Sound DSP: S-DSP A (SONY'89 347AB7VZ)
 D/A converter: NEC D6376 - PDIF output model can be modified
-RTC: S3520CF2 (Seiko)
-SRAM: SRM20257LM12 (S-MOS Systems) - SRAM accounting and control circuits are
+Slave (?) CPU: Hitachi 3M3R1 HD64180RF6X (Z180 clone)
+S-ENC A (9504 BA)
+MB90082 001 (9351 M02)
+
+2. The BIOS board (PU 0871-101) must be inserted into the main board.
+BIOS ROM: KROM 1, 512Kibit
+SRAM: SRM20257LM12 F27K 256 (S-MOS Systems) - SRAM accounting and control circuits are
       self-diagnostic features that set time and operational status of the
       game(s) that are installed.
+Battery: C2032
+Decoders: 74HC139A, 74HC237D, 74LS641, RTC S-3520CF (Seiko S3520CF2 C4446 J18)
+          and two other unreadable chips
+MB3790 (9413 M32)
+
+3. The passive board (GD 0871-103) to be inserted into the main board, has two cartridge slots.
 
-PSS-002 - SUPER FAMICOM BOX CASSETTE ?
+PSS-002 - SUPER FAMICOM BOX - Cartridge
 
 PSS-003 - SUPER FAMICOM BOX - Coin Box
 
 Software/Cartridge:
+The PSS-61 cartridge is required on the slot 1 for the machine to operate.
+The slot 2 may be free or contain PSS-62, PSS-63 or PSS-64 interchangably.
 
 PSS-61  - SUPER FAMICOM BOX Commercial Regular Cart
-This cartridge is required for the machine to operate
-- Star Fox (Nintendo)
-- Super Mario Kart (Nintendo)
-- Super Mario Collection (Nintendo)
+WARNING: This cartridge is required for the machine to operate.
+This game board (GS 0871-102) contains various chips in addition to the game ROMs:
+Attraction ROM: ATROM-4S-0, 4Mibit (is called Slave ProgramROM in BIOS menu ?)
+                Menu to select one of the 3 games (or 5, if a cartridge is inserted in slot 2)
+GameData ROM: GROM1-1, 256Kibit, most likely contains the graphics used by the attract menu
+              May also contain the extra text layers added to the game graphics
+Upper ROM: Super Mario Kart ROM (Nintendo), SHVC-MK-0, 4Mibit
+Upper ROM: Super Mario Collection ROM (Nintendo), SHVC-4M-1, 16Mibit
+Upper ROM: Star Fox ROM (Nintendo), SHVC-FO-1, 8Mibit
+DSP 1 B coprocessor: (DSP 1 A in earlier SFBOX units) it is needed to operate Super Mario Kart
+MARIO CHIP 1 coprocessor: Also known as "Super FX", it is needed to operate Star Fox
+Static RAM: 1Mibit
+Static RAM: 256 Kibit
 
 PSS-62  - SUPER FAMICOM BOX Commercial Optional Cart
-- New Super 3D Golf Simulation - Waialae No Kiseki (Waialae Golf) (T&E SOFT)
-- Super Mahjong 2 (I'MAX)
+GameData ROM: GROM2-1, 256Kibit
+Lower ROM: New Super 3D Golf Simulation - Waialae No Kiseki (Waialae Golf) (T&E SOFT), SHVC-GC-0, 4Mibit
+Lower ROM: Super Mahjong 2 (I'MAX), SHVC-2A-1, 8Mibit
 
 PSS-63  - SUPER FAMICOM BOX Commercial Optional Cart
-- Super Tetris 2 + Bombliss (BPS)
-- Super Donkey Kong (Nintendo)
+GameData ROM: GROM3-1, 256Kibit
+Lower ROM: Super Donkey Kong (Nintendo), SHVC-8X-1, 32Mibit
+Lower ROM: Super Tetris 2 + Bombliss (BPS), SHVC-T2-1, 8Mibit
 
 PSS-64  - SUPER FAMICOM BOX Commercial Optional Cart
-- Super Donkey Kong (Nintendo)
-- Super Bomberman 2 (Hudson Soft)
+GameData ROM: GROM4-1, undumped
+Lower ROM: Super Donkey Kong (Nintendo), SHVC-8X-1, 32Mibit
+Lower ROM: Super Bomberman 2 (Hudson Soft), SHVC-M4-0, 8Mibit
+
+How does the Super Famicom Box operates
+---------------------------------------
+-Operate with a key, goes into BIOS, does automated checks, PSS-61 must be inserted for system to operate.
+-Goes into the attraction ROM, there is a graphical menu to select a game.
+ Apparently the menu graphics are imported from the GROMs.
+-Goes into selected game, can go back to attraction ROM menu.
 
 ***************************************************************************/
 
@@ -250,12 +307,14 @@
 	ROM_REGION( 0x1000000, "maincpu", ROMREGION_ERASE00 )
 
 //  ROM_REGION( 0x80000, "atrom", 0 )
-	ROM_REGION( 0x100000, "user3", 0 )
-	ROM_LOAD( "atrom-4s-0.rom5", 0x00000, 0x80000, CRC(ad3ec05c) SHA1(a3d336db585fe02a37c323422d9db6a33fd489a6) )
+//  ROM_REGION( 0x10000, "user3", 0 )
 
 	ROM_REGION( 0x100, "user5", 0 )		/* IPL ROM */
 	ROM_LOAD( "spc700.rom", 0x00, 0x40, CRC(44bb3a40) SHA1(97e352553e94242ae823547cd853eecda55c20f0) )	/* boot rom */
 
+	ROM_REGION( 0x10000, "krom", 0 )
+	ROM_LOAD( "krom1.ic1", 0x00000, 0x10000, CRC(c9010002) SHA1(f4c74086a83b728b1c1af3a021a60efa80eff5a4) )
+
 //  ROM_REGION( 0x1000, "addons", ROMREGION_ERASE00 )       /* add-on chip ROMs (DSP, SFX, etc) */
 //  ROM_REGION( MAX_SNES_CART_SIZE, "cart", ROMREGION_ERASE00 )
 ROM_END
@@ -263,12 +322,15 @@
 ROM_START( pss61 )
 	ROM_REGION( 0x1000000, "maincpu", ROMREGION_ERASE00 )
 
+	ROM_REGION( 0x100000, "atrom", 0 )
+	ROM_LOAD( "atrom-4s-0.rom5", 0x00000, 0x80000, CRC(ad3ec05c) SHA1(a3d336db585fe02a37c323422d9db6a33fd489a6) )
+
 	ROM_REGION( 0x10000, "grom", 0 )
 	ROM_LOAD( "grom1-1.ic1", 0x0000, 0x8000, CRC(333bf9a7) SHA1(5d0cd9ca29e5580c3eebe9f136839987c879f979) )
 
 	ROM_REGION( 0x380000, "user3", 0 )
-	ROM_LOAD( "shvc-4m-1.rom3", 0x000000, 0x200000, CRC(91b28d56) SHA1(b83dd73d3d6049450bb8092d73c3af879804f58c) )
-	ROM_LOAD( "shvc-mk-0.rom6", 0x200000, 0x080000, CRC(c8002453) SHA1(cbb853bf911255c1d8eb27cd34fc7855a0dda218) )
+  ROM_LOAD( "shvc-mk-0.rom6", 0x000000, 0x080000, CRC(c8002453) SHA1(cbb853bf911255c1d8eb27cd34fc7855a0dda218) )
+  ROM_LOAD( "shvc-4m-1.rom3", 0x080000, 0x200000, CRC(91b28d56) SHA1(b83dd73d3d6049450bb8092d73c3af879804f58c) )
 	ROM_LOAD( "shvc-fo-1.ic20", 0x280000, 0x100000, CRC(ad668a41) SHA1(39ff7354a7fa02295c899b7a7ec3556998ac2636) ) /* Super FX hook needed for Star Fox */
 
 	ROM_REGION( 0x100, "user5", 0 )		/* IPL ROM */
@@ -333,8 +395,8 @@
 ROM_END
 
 
-GAME( 199?, sfcbox,      0,     sfcbox,      snes,    snes,    ROT0, "Nintendo",                   "Super Famicom Box BIOS", GAME_IS_BIOS_ROOT | GAME_NOT_WORKING )
-GAME( 199?, pss61, sfcbox, sfcbox, snes, snes, ROT0, "Nintendo", "Super Mario Kart / Super Mario Collection / Star Fox (Super Famicom Box)", GAME_NOT_WORKING )
-GAME( 199?, pss62, sfcbox, sfcbox, snes, snes, ROT0, "T&E Soft / I'Max", "New Super 3D Golf Simulation - Waialae No Kiseki / Super Mahjong 2 (Super Famicom Box)", GAME_NOT_WORKING )
-GAME( 199?, pss63, sfcbox, sfcbox, snes, snes, ROT0, "Nintendo / BPS", "Super Donkey Kong / Super Tetris 2 + Bombliss (Super Famicom Box)", GAME_NOT_WORKING )
+GAME( 1994, sfcbox,      0,     sfcbox,      snes,    snes,    ROT0, "Nintendo",                   "Super Famicom Box BIOS", GAME_IS_BIOS_ROOT | GAME_NOT_WORKING )
+GAME( 1994, pss61, sfcbox, sfcbox, snes, snes, ROT0, "Nintendo", "Super Mario Kart / Super Mario Collection / Star Fox (Super Famicom Box)", GAME_NOT_WORKING )
+GAME( 1994, pss62, sfcbox, sfcbox, snes, snes, ROT0, "T&E Soft / I'Max", "New Super 3D Golf Simulation - Waialae No Kiseki / Super Mahjong 2 (Super Famicom Box)", GAME_NOT_WORKING )
+GAME( 1994, pss63, sfcbox, sfcbox, snes, snes, ROT0, "Nintendo / BPS", "Super Donkey Kong / Super Tetris 2 + Bombliss (Super Famicom Box)", GAME_NOT_WORKING )
 GAME( 199?, pss64, sfcbox, sfcbox, snes, snes, ROT0, "Nintendo / Hudson Soft", "Super Donkey Kong / Super Bomberman 2 (Super Famicom Box)", GAME_NOT_WORKING )
diff -Nru src-old/mame/drivers/sidepckt.c src/mame/drivers/sidepckt.c
--- src-old/mame/drivers/sidepckt.c	2012-03-07 20:42:58.000000000 +0100
+++ src/mame/drivers/sidepckt.c	2012-03-25 15:56:49.000000000 +0200
@@ -11,6 +11,116 @@
 
 i8751 protection simluation and other fixes by Bryan McPhail, 15/10/00.
 
+
+ToDo:
+ support screen flipping for sprites
+
+
+Stephh's notes (based on the games M6809 code and some tests) :
+
+1) 'sidepckt'
+
+  - World version.
+  - Credits are BCD coded on 1 byte (range 0x00-0x99) at location 0x0007.
+  - Bonus lives settings don't match the Dip Switches page : even if the table at 0x40af (4 * 2 words) is good,
+    there's a ingame bug in code at 0x4062 :
+
+      4062: CE 40 AF         LDU   #$40AF         U = 40AF
+      4065: F6 30 03         LDB   $3003
+      4068: 53               COMB
+      4069: 54               LSRB
+      406A: 54               LSRB
+      406B: C4 0C            ANDB  #$0C
+      406D: EC C5            LDD   B,U            U still = 40AF
+      406F: 33 42            LEAU  $2,U           U ALWAYS = 40B1
+
+    So 2nd and next extra lives are ALWAYS set to 50k+ regardless of the Dip Switches settings !
+  - Player 2 controls are never used ingame for player 2 due to extra code at 0x5a35 :
+
+      5A2E: 96 1A            LDA   $1A
+      5A30: 84 01            ANDA  #$01           A = 00 for player 1 and 01 for player 2
+      5A32: 8E 30 00         LDX   #$3000
+      5A35: D6 CA            LDB   $CA            B ALWAYS = 01 due to initialisation of $CA at 0x43f4
+      5A37: C5 01            BITB  #$01
+      5A39: 26 02            BNE   $5A3D          always jumps to 0x53ad
+      5A3B: 30 86            LEAX  A,X            this instruction is NEVER executed
+      5A3D: A6 84            LDA   ,X
+
+  - Player 2 controls are also never used for player 2 when entering initials due to extra code at 0x8baf :
+
+      8BAF: 96 1A            LDA   $1A
+      8BB1: 84 01            ANDA  #$01           A = 00 for player 1 and 01 for player 2
+      8BB3: D6 CA            LDB   $CA            B ALWAYS = 01 due to initialisation of $CA at 0x43f4
+      8BB5: 27 02            BEQ   $8BB9          never jumps to 0x8bb9
+      8BB7: 86 00            LDA   #$00
+      8BB9: 8E 30 00         LDX   #$3000
+      8BBC: A6 86            LDA   A,X
+
+  - Screen never flips ingame or in "continue" screen for player 2 due to code at 0x662f :
+
+      662F: 0F 0A            CLR   $0A            $CA = 0
+      6631: D6 1A            LDB   $1A
+      6633: 27 00            BEQ   $6635          continue regardless of player
+      6635: CC 00 00         LDD   #$0000
+
+      75DF: D6 0A            LDB   $0A
+      75E1: F7 30 0C         STB   $300C
+
+    Surprinsingly, the screen might flip for player 2 after GAME OVER due to original code at 0x4de8 :
+
+      4DE8: D6 1A            LDB   $1A            A = 00 for player 1 and 01 for player 2
+      4DEA: 27 03            BEQ   $4DEF
+      4DEC: F7 30 0C         STB   $300C
+      4DEF: C6 20            LDB   #$20
+
+
+2) 'sidepcktj'
+
+  - Japan version.
+  - Credits are coded on 1 byte (range 0x00-0xff) at location 0x0007, but their display is limited to 9.
+  - Same bonus lives ingame bug as in 'sidepckt'.
+  - Player 2 controls are always used ingame for player 2 due to code at 0x58ab :
+
+      58AB: 96 1A            LDA   $1A
+      58AD: 84 01            ANDA  #$01           A = 00 for player 1 and 01 for player 2
+      58AF: 8E 30 00         LDX   #$3000
+      58B2: A6 86            LDA   A,X
+
+  - Player 2 controls are also always used for player 2 when entering initials due to extra code at 0x8b9f :
+
+      8B9F: 96 1A            LDA   $1A
+      8BA1: 84 01            ANDA  #$01           A = 00 for player 1 and 01 for player 2
+      8BA3: 8E 30 00         LDX   #$3000
+      8BA6: A6 86            LDA   A,X
+
+  - Screen always flips ingame or in "continue" screen for player 2 due to code at 0x662f :
+
+      6473: 0F 0A            CLR   $0A            $CA = 0
+      6475: D6 1A            LDB   $1A            A = 00 for player 1 and 01 for player 2
+      6477: 27 04            BEQ   $647D          jumps if player 1
+      6479: 86 20            LDA   #$20
+      647B: 97 0A            STA   $0A            $CA = 0x20
+      647D: CC 00 00         LDD   #$0000
+
+      75A0: D6 0A            LDB   $0A
+      75A2: F7 30 0C         STB   $300C
+
+    After GAME OVER, code at 0x4d16 is slightly different than in 'sidepckt' :
+
+      4D16: D6 1A            LDB   $1A            A = 00 for player 1 and 01 for player 2
+      4D18: 27 07            BEQ   $4D21          jumps if player 1
+      4D1A: C6 20            LDB   #$20
+      4D1C: D7 0A            STB   $0A            $CA = 0x20
+      4D1E: F7 30 0C         STB   $300C          flip screen
+      4D21: C6 20            LDB   #$20
+
+3) 'sidepcktb'
+
+  - Bootleg heavily based on the World version, so ingame bugs about bonus lives, player 2 inputs and screen flipping are still there.
+  - 2 little differences :
+      * Lives settings (table at 0x4696) : 06 03 02 instead of 06 03 09
+      * Timer settings (table at 0x9d99) : 30 20 18 instead of 40 30 20, so the timer is faster
+
 ***************************************************************************/
 
 #include "emu.h"
@@ -96,7 +206,7 @@
 		case 1: /* ID Check */
 			state->m_current_table=1; state->m_current_ptr=0; state->m_i8751_return=table_1[state->m_current_ptr++]; break;
 
-		case 2: /* Protection data */
+		case 2: /* Protection data (executable code) */
 			state->m_current_table=2; state->m_current_ptr=0; state->m_i8751_return=table_2[state->m_current_ptr++]; break;
 
 		case 3: /* Protection data (executable code) */
@@ -147,23 +257,23 @@
 
 /******************************************************************************/
 
+/* verified from M6809 code */
 static INPUT_PORTS_START( sidepckt )
 	PORT_START("P1")
 	PORT_BIT( 0x01, IP_ACTIVE_LOW, IPT_JOYSTICK_RIGHT ) PORT_8WAY
-	PORT_BIT( 0x02, IP_ACTIVE_LOW, IPT_JOYSTICK_LEFT ) PORT_8WAY
-	PORT_BIT( 0x04, IP_ACTIVE_LOW, IPT_JOYSTICK_UP ) PORT_8WAY
-	PORT_BIT( 0x08, IP_ACTIVE_LOW, IPT_JOYSTICK_DOWN ) PORT_8WAY
+	PORT_BIT( 0x02, IP_ACTIVE_LOW, IPT_JOYSTICK_LEFT )  PORT_8WAY
+	PORT_BIT( 0x04, IP_ACTIVE_LOW, IPT_JOYSTICK_UP )    PORT_8WAY
+	PORT_BIT( 0x08, IP_ACTIVE_LOW, IPT_JOYSTICK_DOWN )  PORT_8WAY
 	PORT_BIT( 0x10, IP_ACTIVE_LOW, IPT_BUTTON1 )
 	PORT_BIT( 0x20, IP_ACTIVE_LOW, IPT_BUTTON2 )
 	PORT_BIT( 0x40, IP_ACTIVE_LOW, IPT_START1 )
 	PORT_BIT( 0x80, IP_ACTIVE_LOW, IPT_START2 )
 
-	PORT_START("P2")
-	/* I haven't found a way to make the game use the 2p controls */
+	PORT_START("P2")     /* see notes */
 	PORT_BIT( 0x01, IP_ACTIVE_LOW, IPT_JOYSTICK_RIGHT ) PORT_8WAY PORT_COCKTAIL
-	PORT_BIT( 0x02, IP_ACTIVE_LOW, IPT_JOYSTICK_LEFT ) PORT_8WAY PORT_COCKTAIL
-	PORT_BIT( 0x04, IP_ACTIVE_LOW, IPT_JOYSTICK_UP ) PORT_8WAY PORT_COCKTAIL
-	PORT_BIT( 0x08, IP_ACTIVE_LOW, IPT_JOYSTICK_DOWN ) PORT_8WAY PORT_COCKTAIL
+	PORT_BIT( 0x02, IP_ACTIVE_LOW, IPT_JOYSTICK_LEFT )  PORT_8WAY PORT_COCKTAIL
+	PORT_BIT( 0x04, IP_ACTIVE_LOW, IPT_JOYSTICK_UP )    PORT_8WAY PORT_COCKTAIL
+	PORT_BIT( 0x08, IP_ACTIVE_LOW, IPT_JOYSTICK_DOWN )  PORT_8WAY PORT_COCKTAIL
 	PORT_BIT( 0x10, IP_ACTIVE_LOW, IPT_BUTTON1 ) PORT_COCKTAIL
 	PORT_BIT( 0x20, IP_ACTIVE_LOW, IPT_BUTTON2 ) PORT_COCKTAIL
 	PORT_BIT( 0x40, IP_ACTIVE_LOW, IPT_COIN2 )
@@ -180,39 +290,65 @@
 	PORT_DIPSETTING(    0x04, DEF_STR( 3C_1C ) )
 	PORT_DIPSETTING(    0x08, DEF_STR( 2C_1C ) )
 	PORT_DIPSETTING(    0x0c, DEF_STR( 1C_1C ) )
-	PORT_DIPNAME( 0x10, 0x10, "Unused?" )
-	PORT_DIPSETTING(    0x10, DEF_STR( Off ) )
-	PORT_DIPSETTING(    0x00, DEF_STR( On ) )
-	PORT_DIPNAME( 0x20, 0x20, "Unused?" )
-	PORT_DIPSETTING(    0x20, DEF_STR( Off ) )
-	PORT_DIPSETTING(    0x00, DEF_STR( On ) )
+	PORT_DIPUNUSED( 0x10, IP_ACTIVE_LOW )
+	PORT_DIPUNUSED( 0x20, IP_ACTIVE_LOW )
 	PORT_DIPNAME( 0x40, 0x40, DEF_STR( Demo_Sounds ) )
 	PORT_DIPSETTING(    0x00, DEF_STR( Off ) )
 	PORT_DIPSETTING(    0x40, DEF_STR( On ) )
-	PORT_DIPNAME( 0x80, 0x80, "Unused?" )
-	PORT_DIPSETTING(    0x80, DEF_STR( Off ) )
-	PORT_DIPSETTING(    0x00, DEF_STR( On ) )
+	PORT_DIPUNUSED( 0x80, IP_ACTIVE_LOW )
 
 	PORT_START("DSW2")
+	PORT_DIPNAME( 0x03, 0x03, "Timer Speed" )               /* table at 0x9d99 */
+	PORT_DIPSETTING(    0x00, "Stopped (Cheat)")
+	PORT_DIPSETTING(    0x03, "Slow" )                      /* 0x40 - "Normal" in the Dip Switches page */
+	PORT_DIPSETTING(    0x02, DEF_STR( Medium ) )           /* 0x30 - "Bit fast" in the Dip Switches page */
+	PORT_DIPSETTING(    0x01, "Fast" )                      /* 0x20 - "Fast" in the Dip Switches page */
+	PORT_DIPNAME( 0x0c, 0x08, DEF_STR( Lives ) )
+	PORT_DIPSETTING(    0x08, "3" )
+	PORT_DIPSETTING(    0x0c, "6" )
+	PORT_DIPSETTING(    0x04, "9" )
+	PORT_DIPSETTING(    0x00, "Infinite (Cheat)")           /* always gives 6 balls */
+	PORT_DIPNAME( 0x30, 0x30, DEF_STR( Bonus_Life ) )       /* table at 0x40af (4 * 2 words) - see notes */
+	PORT_DIPSETTING(    0x30, "10k 60k 50k+" )              /* "10000, after each 50000" in the Dip Switches page */
+	PORT_DIPSETTING(    0x20, "20k 70k 50k+" )              /* "20000, after each 70000" in the Dip Switches page */
+	PORT_DIPSETTING(    0x10, "30k 80k 50k+" )              /* "30000, after each 100000" in the Dip Switches page */
+//  PORT_DIPSETTING(    0x00, "20k 70k 50k+" )              /* "20000" in the Dip Switches page */
+	PORT_BIT( 0x40, IP_ACTIVE_LOW, IPT_SERVICE1 )
+	PORT_DIPUNUSED( 0x80, IP_ACTIVE_LOW )
+INPUT_PORTS_END
+
+/* verified from M6809 code */
+static INPUT_PORTS_START( sidepcktj )
+	PORT_INCLUDE(sidepckt)
+
+	PORT_MODIFY("DSW1")
+	PORT_DIPNAME( 0x03, 0x03, DEF_STR( Coin_B ) )
+	PORT_DIPSETTING(    0x00, DEF_STR( 2C_1C ) )
+	PORT_DIPSETTING(    0x03, DEF_STR( 1C_1C ) )
+	PORT_DIPSETTING(    0x02, DEF_STR( 1C_2C ) )
+	PORT_DIPSETTING(    0x01, DEF_STR( 1C_3C ) )
+	PORT_DIPNAME( 0x0c, 0x0c, DEF_STR( Coin_A ) )
+	PORT_DIPSETTING(    0x00, DEF_STR( 2C_1C ) )
+	PORT_DIPSETTING(    0x0c, DEF_STR( 1C_1C ) )
+	PORT_DIPSETTING(    0x08, DEF_STR( 1C_2C ) )
+	PORT_DIPSETTING(    0x04, DEF_STR( 1C_3C ) )
+INPUT_PORTS_END
+
+/* verified from M6809 code */
+static INPUT_PORTS_START( sidepcktb )
+	PORT_INCLUDE(sidepckt)
+
+	PORT_MODIFY("DSW2")
 	PORT_DIPNAME( 0x03, 0x03, "Timer Speed" )
 	PORT_DIPSETTING(    0x00, "Stopped (Cheat)")
-	PORT_DIPSETTING(    0x03, "Slow" )
-	PORT_DIPSETTING(    0x02, DEF_STR( Medium ) )
-	PORT_DIPSETTING(    0x01, "Fast" )
+	PORT_DIPSETTING(    0x03, DEF_STR( Medium ) )           /* 0x30 */
+	PORT_DIPSETTING(    0x02, "Fast" )                      /* 0x20 */
+	PORT_DIPSETTING(    0x01, "Fastest" )                   /* 0x18 */
 	PORT_DIPNAME( 0x0c, 0x08, DEF_STR( Lives ) )
 	PORT_DIPSETTING(    0x04, "2" )
 	PORT_DIPSETTING(    0x08, "3" )
 	PORT_DIPSETTING(    0x0c, "6" )
-	PORT_DIPSETTING(    0x00, "Infinite (Cheat)")
-	PORT_DIPNAME( 0x30, 0x00, DEF_STR( Unknown ) )
-	PORT_DIPSETTING(    0x00, "0" )
-	PORT_DIPSETTING(    0x10, "1" )
-	PORT_DIPSETTING(    0x20, "2" )
-	PORT_DIPSETTING(    0x30, "3" )
-	PORT_BIT( 0x40, IP_ACTIVE_LOW, IPT_COIN3 )
-	PORT_DIPNAME( 0x80, 0x80, "Unused?" )
-	PORT_DIPSETTING(    0x80, DEF_STR( Off ) )
-	PORT_DIPSETTING(    0x00, DEF_STR( On ) )
+	PORT_DIPSETTING(    0x00, "Infinite (Cheat)")           /* always gives 6 balls */
 INPUT_PORTS_END
 
 
@@ -382,6 +518,6 @@
 }
 
 
-GAME( 1986, sidepckt, 0,        sidepckt, sidepckt, sidepckt, ROT0, "Data East Corporation", "Side Pocket (World)", 0 )
-GAME( 1986, sidepcktj,sidepckt, sidepckt, sidepckt, sidepctj, ROT0, "Data East Corporation", "Side Pocket (Japan)", 0 )
-GAME( 1986, sidepcktb,sidepckt, sidepckt, sidepckt, 0,        ROT0, "bootleg", "Side Pocket (bootleg)", 0 )
+GAME( 1986, sidepckt,  0,        sidepckt, sidepckt,  sidepckt, ROT0, "Data East Corporation", "Side Pocket (World)", GAME_NO_COCKTAIL )
+GAME( 1986, sidepcktj, sidepckt, sidepckt, sidepcktj, sidepctj, ROT0, "Data East Corporation", "Side Pocket (Japan)", GAME_NO_COCKTAIL )
+GAME( 1986, sidepcktb, sidepckt, sidepckt, sidepcktb, 0,        ROT0, "bootleg", "Side Pocket (bootleg)", GAME_NO_COCKTAIL )
diff -Nru src-old/mame/drivers/snk.c src/mame/drivers/snk.c
--- src-old/mame/drivers/snk.c	2012-03-07 20:42:58.000000000 +0100
+++ src/mame/drivers/snk.c	2012-03-25 15:56:49.000000000 +0200
@@ -6117,6 +6117,42 @@
 	ROM_LOAD( "fs4.bin",  0x00000, 0x10000, CRC(435c3716) SHA1(42053741f60594e7ae8516b3ba600f5badb3620f) )
 ROM_END
 
+ROM_START( fsoccerba )
+	ROM_REGION( 0x10000, "maincpu", 0 )
+    ROM_LOAD( "fs3.c6", 0x00000, 0x10000, CRC(e644d207) SHA1(efd5a6cf99461a0dc6cec6c8e2c16d82c6630132) )
+
+	ROM_REGION( 0x10000, "sub", 0 )
+	ROM_LOAD( "fs1_ver4.bin",  0x00000, 0x10000, CRC(97830108) SHA1(dab241baf8d889c768e1fbe25f1e5059b3cbbab6) )
+
+	ROM_REGION( 0x10000, "audiocpu", 0 )
+	ROM_LOAD( "fs2.3j",  0x00000, 0x10000, CRC(9ee54ea1) SHA1(4e3bbacaa0e247eb8c4043f394e763817a4f9a28) )
+
+	ROM_REGION( 0x0c00, "proms", 0 )
+	ROM_LOAD( "2.8e", 0x000, 0x400, CRC(bf4ac706) SHA1(b5015563d88dbd93ba2838f01b189812958f142b) ) /* red */
+	ROM_LOAD( "1.8d", 0x400, 0x400, CRC(1bac8010) SHA1(16854b1b6f3d1be48a247796d65aeb90547099b6) ) /* green */
+	ROM_LOAD( "3.9e", 0x800, 0x400, CRC(dbeddb14) SHA1(6053b587a3c8272aefe728a7198a15aa7fb9b2fa) ) /* blue */
+
+	ROM_REGION( 0x8000, "tx_tiles", 0 )
+	ROM_LOAD( "fs13.4n",  0x0000, 0x08000, CRC(0de7b7ad) SHA1(4fa54b2acf83f03d09d16fc054ad6623cafe0f4a) )
+
+	ROM_REGION( 0x50000, "bg_tiles", 0 )
+	ROM_LOAD( "fs14.8d",  0x00000, 0x10000, CRC(38c38b40) SHA1(c4580add0946720441f5ef751d0d4a944cd92ad5) )
+	ROM_LOAD( "fs15.8e",  0x10000, 0x10000, CRC(a614834f) SHA1(d73930e4bd780915e1b0d7f3fe7cbeaad19c233f) )
+
+	ROM_REGION( 0x80000, "sp32_tiles", 0 )
+	ROM_LOAD( "fs12.2t", 0x00000, 0x10000, CRC(b2442c30) SHA1(ba9331810659726389494ddc7c94c5a02ba80747) )
+	ROM_LOAD( "fs11.2s", 0x10000, 0x10000, CRC(022f3e96) SHA1(57aa423b8f62015566bc3021300ac7e9682ed500) )
+	ROM_LOAD( "fs10.2r", 0x20000, 0x10000, CRC(e42864d8) SHA1(fe18f58e5507676780fe181e2fb0e0e9d72e276e) )
+	ROM_LOAD( "fs9.2p",  0x30000, 0x10000, CRC(d8112aa6) SHA1(575dd6dff2f00901603768f2c121eb0ea5afa444) )
+	ROM_LOAD( "fs8.2n",  0x40000, 0x10000, CRC(11156a7d) SHA1(f298a54fa4c118bf8e7c7cccb6c95a4b97daf4d4) )
+	ROM_LOAD( "fs7.2l",  0x50000, 0x10000, CRC(d584964b) SHA1(7c806fc40dcce700ed0c268abbd2704938b65ff2) )
+	ROM_LOAD( "fs6.2k",  0x60000, 0x10000, CRC(588d14b3) SHA1(c0489b061503677a38e4c5800ea8be17aabf4039) )
+	ROM_LOAD( "fs5.2j",  0x70000, 0x10000, CRC(def2f1d8) SHA1(b72e4dec3306d8afe461ac812b2de67ee85f9dd9) )
+
+	ROM_REGION( 0x10000, "ym2", 0 )
+	ROM_LOAD( "fs4.7p",  0x00000, 0x10000, CRC(435c3716) SHA1(42053741f60594e7ae8516b3ba600f5badb3620f) )
+ROM_END
+
 /***********************************************************************/
 
 ROM_START( tdfever )
@@ -6302,3 +6338,4 @@
 GAME( 1988, fsoccer,  0,        tdfever2, fsoccer,  0,        ROT0,   "SNK", "Fighting Soccer (version 4)", 0 )
 GAME( 1988, fsoccerj, fsoccer,  tdfever2, fsoccer,  0,        ROT0,   "SNK", "Fighting Soccer (Japan)", 0 )
 GAME( 1988, fsoccerb, fsoccer,  tdfever2, fsoccerb, 0,        ROT0,   "bootleg", "Fighting Soccer (Joystick hack bootleg)", 0 )
+GAME( 1988, fsoccerba,fsoccer,  tdfever2, fsoccerb, 0,        ROT0,   "bootleg", "Fighting Soccer (Joystick hack bootleg, alt)", 0 )
diff -Nru src-old/mame/drivers/snowbros.c src/mame/drivers/snowbros.c
--- src-old/mame/drivers/snowbros.c	2012-01-25 18:08:33.000000000 +0100
+++ src/mame/drivers/snowbros.c	2012-03-18 22:28:34.000000000 +0100
@@ -38,6 +38,7 @@
   Hyper Pacman addition by David Haywood
    + some bits by Nicola Salmoria
 
+ !!DO NOT TRUST THE SERVICE MODES FOR DIPSWITCH SETTINGS!!
 
 Stephh's notes (hyperpac):
 
@@ -1111,6 +1112,75 @@
 	PORT_BIT( 0x8000, IP_ACTIVE_LOW, IPT_UNKNOWN )
 INPUT_PORTS_END
 
+static INPUT_PORTS_START( twinkle )
+	PORT_START("DSW1")	/* 500000.w */
+	PORT_DIPNAME( 0x0001, 0x0000, DEF_STR( Demo_Sounds ) )	PORT_DIPLOCATION("SW1:1")
+	PORT_DIPSETTING(      0x0001, DEF_STR( Off ) )
+	PORT_DIPSETTING(      0x0000, DEF_STR( On ) )
+	PORT_DIPNAME( 0x000e, 0x000e, DEF_STR( Coinage ) )	PORT_DIPLOCATION("SW1:2,3,4")
+	PORT_DIPSETTING(      0x0000, DEF_STR( 5C_1C ) )
+	PORT_DIPSETTING(      0x0002, DEF_STR( 4C_1C ) )
+	PORT_DIPSETTING(      0x0004, DEF_STR( 3C_1C ) )
+	PORT_DIPSETTING(      0x0006, DEF_STR( 2C_1C ) )
+	PORT_DIPSETTING(      0x000e, DEF_STR( 1C_1C ) )
+	PORT_DIPSETTING(      0x000a, DEF_STR( 2C_3C ) )
+	PORT_DIPSETTING(      0x000c, DEF_STR( 1C_2C ) )
+	PORT_DIPSETTING(      0x0008, DEF_STR( 1C_3C ) )
+	PORT_DIPNAME( 0x0070, 0x0070, DEF_STR( Difficulty ) )	PORT_DIPLOCATION("SW1:5,6,7") // this is what service mode lists, but I don't trust it.
+	PORT_DIPSETTING(      0x0020, "Level 1" )
+	PORT_DIPSETTING(      0x0010, "Level 2" )
+	PORT_DIPSETTING(      0x0000, "Level 3" )
+	PORT_DIPSETTING(      0x0070, "Level 4" )
+	PORT_DIPSETTING(      0x0060, "Level 5" )
+	PORT_DIPSETTING(      0x0050, "Level 6" )
+	PORT_DIPSETTING(      0x0040, "Level 7" )
+	PORT_DIPSETTING(      0x0030, "Level 8" )
+	PORT_SERVICE_DIPLOC(  0x0080, IP_ACTIVE_LOW, "SW1:8" )
+	PORT_BIT( 0x0100, IP_ACTIVE_HIGH, IPT_JOYSTICK_UP ) PORT_8WAY PORT_PLAYER(1)
+	PORT_BIT( 0x0200, IP_ACTIVE_HIGH, IPT_JOYSTICK_DOWN ) PORT_8WAY PORT_PLAYER(1)
+	PORT_BIT( 0x0400, IP_ACTIVE_HIGH, IPT_JOYSTICK_LEFT ) PORT_8WAY PORT_PLAYER(1)
+	PORT_BIT( 0x0800, IP_ACTIVE_HIGH, IPT_JOYSTICK_RIGHT ) PORT_8WAY PORT_PLAYER(1)
+	PORT_BIT( 0x1000, IP_ACTIVE_HIGH, IPT_BUTTON1 ) PORT_PLAYER(1)	// jump
+	PORT_BIT( 0x2000, IP_ACTIVE_HIGH, IPT_BUTTON2 ) PORT_PLAYER(1)	// fire
+	PORT_BIT( 0x4000, IP_ACTIVE_HIGH, IPT_BUTTON3 ) PORT_PLAYER(1)	// test mode only?
+	PORT_BIT( 0x8000, IP_ACTIVE_HIGH, IPT_UNKNOWN )
+
+	PORT_START("DSW2")	/* 500002.w */
+	PORT_DIPNAME( 0x0003, 0x0002, DEF_STR( Lives ) )	PORT_DIPLOCATION("SW2:1,2") // unlisted in service mode
+	PORT_DIPSETTING(      0x0000, "1" )
+	PORT_DIPSETTING(      0x0003, "2" )
+	PORT_DIPSETTING(      0x0002, "3" )
+	PORT_DIPSETTING(      0x0001, "4" )
+	PORT_DIPUNKNOWN_DIPLOC( 0x0004, 0x0000, "SW2:3" )
+	PORT_DIPUNKNOWN_DIPLOC( 0x0008, 0x0000, "SW2:4" )
+	PORT_DIPNAME( 0x0010, 0x0010, "Pellet Animations" )		PORT_DIPLOCATION("SW2:5") // unlisted in service mode
+	PORT_DIPSETTING(      0x0000, DEF_STR( Off ) )
+	PORT_DIPSETTING(      0x0010, DEF_STR( On ) )
+	PORT_DIPUNKNOWN_DIPLOC( 0x0020, 0x0000, "SW2:6" )
+	PORT_DIPUNKNOWN_DIPLOC( 0x0040, 0x0000, "SW2:7" )
+	PORT_DIPNAME( 0x0080, 0x0080, DEF_STR( Free_Play ) )	PORT_DIPLOCATION("SW2:8")
+	PORT_DIPSETTING(      0x0080, DEF_STR( Off ) )
+	PORT_DIPSETTING(      0x0000, DEF_STR( On ) )
+	PORT_BIT( 0x0100, IP_ACTIVE_HIGH, IPT_JOYSTICK_UP ) PORT_8WAY PORT_PLAYER(2)
+	PORT_BIT( 0x0200, IP_ACTIVE_HIGH, IPT_JOYSTICK_DOWN ) PORT_8WAY PORT_PLAYER(2)
+	PORT_BIT( 0x0400, IP_ACTIVE_HIGH, IPT_JOYSTICK_LEFT ) PORT_8WAY PORT_PLAYER(2)
+	PORT_BIT( 0x0800, IP_ACTIVE_HIGH, IPT_JOYSTICK_RIGHT ) PORT_8WAY PORT_PLAYER(2)
+	PORT_BIT( 0x1000, IP_ACTIVE_HIGH, IPT_BUTTON1 ) PORT_PLAYER(2)	// jump
+	PORT_BIT( 0x2000, IP_ACTIVE_HIGH, IPT_BUTTON2 ) PORT_PLAYER(2)	// fire
+	PORT_BIT( 0x4000, IP_ACTIVE_HIGH, IPT_BUTTON3 ) PORT_PLAYER(2)	// test mode only?
+	PORT_BIT( 0x8000, IP_ACTIVE_HIGH, IPT_UNKNOWN )
+
+	PORT_START("SYSTEM")	/* 500004.w */
+	PORT_BIT( 0x0100, IP_ACTIVE_HIGH, IPT_START1 )
+	PORT_BIT( 0x0200, IP_ACTIVE_HIGH, IPT_START2 )
+	PORT_BIT( 0x0400, IP_ACTIVE_HIGH, IPT_COIN1 )
+	PORT_BIT( 0x0800, IP_ACTIVE_HIGH, IPT_COIN2 )
+	PORT_BIT( 0x1000, IP_ACTIVE_LOW, IPT_UNKNOWN )
+	PORT_BIT( 0x2000, IP_ACTIVE_LOW, IPT_UNKNOWN )
+	PORT_BIT( 0x4000, IP_ACTIVE_LOW, IPT_UNKNOWN )
+	PORT_BIT( 0x8000, IP_ACTIVE_LOW, IPT_UNKNOWN )
+INPUT_PORTS_END
+
 // don't trust the test mode! <-- Verified via actual game play: Demo Sounds, Coinage & Free Play
 static INPUT_PORTS_START( pzlbreak )
 	PORT_START("DSW1")	/* 500000.w */
@@ -2740,7 +2810,7 @@
 GAME( 1996, toppyrap, 0,        semiprot, toppyrap, 0,        ROT0, "SemiCom", "Toppy & Rappy", 0 )
 GAME( 1997, cookbib3, 0,        semiprot, cookbib3, cookbib3, ROT0, "SemiCom", "Cookie & Bibi 3", 0 )
 GAME( 1997, 3in1semi, 0,        semiprot, moremore, 3in1semi, ROT0, "SemiCom", "XESS - The New Revolution (SemiCom 3-in-1)", 0 )
-GAME( 1997, twinkle,  0,        semiprot, moremore, 0,        ROT0, "SemiCom", "Twinkle", 0 )
+GAME( 1997, twinkle,  0,        semiprot, twinkle,  0,        ROT0, "SemiCom", "Twinkle", 0 )
 GAME( 1997, pzlbreak, 0,        semiprot, pzlbreak, pzlbreak, ROT0, "SemiCom", "Puzzle Break", 0 )
 GAME( 1999, moremore, 0,        semiprot, moremore, moremorp, ROT0, "SemiCom / Exit", "More More", 0 )
 GAME( 1999, moremorp, 0,        semiprot, moremore, moremorp, ROT0, "SemiCom / Exit", "More More Plus", 0 )
diff -Nru src-old/mame/drivers/spinb.c src/mame/drivers/spinb.c
--- src-old/mame/drivers/spinb.c	2011-12-23 19:12:19.000000000 +0100
+++ src/mame/drivers/spinb.c	2012-03-15 07:40:01.000000000 +0100
@@ -128,7 +128,7 @@
 / Verne's World (1996)
 /-------------------------------------------------------------------*/
 
-GAME(1993,  bushido,   0,       spinb,  spinb,  spinb,  ROT0,  "Inder/Spinball",    "Bushido",					GAME_IS_SKELETON_MECHANICAL)
-GAME(1993,  bushidoa,  bushido, spinb,  spinb,  spinb,  ROT0,  "Inder/Spinball",    "Bushido (alternate set)",	GAME_IS_SKELETON_MECHANICAL)
+GAME(1993,  bushido,   0,       spinb,  spinb,  spinb,  ROT0,  "Inder/Spinball",    "Bushido (set 1)",			GAME_IS_SKELETON_MECHANICAL)
+GAME(1993,  bushidoa,  bushido, spinb,  spinb,  spinb,  ROT0,  "Inder/Spinball",    "Bushido (set 2)",			GAME_IS_SKELETON_MECHANICAL)
 GAME(1996,  jolypark,  0,       spinb,  spinb,  spinb,  ROT0,  "Spinball",          "Jolly Park",				GAME_IS_SKELETON_MECHANICAL)
 GAME(1995,  mach2,     0,       spinb,  spinb,  spinb,  ROT0,  "Spinball",          "Mach 2",					GAME_IS_SKELETON_MECHANICAL)
diff -Nru src-old/mame/drivers/system1.c src/mame/drivers/system1.c
--- src-old/mame/drivers/system1.c	2012-02-22 01:51:07.000000000 +0100
+++ src/mame/drivers/system1.c	2012-03-25 15:56:49.000000000 +0200
@@ -3854,6 +3854,33 @@
 	ROM_LOAD( "pr-5317.76",		0x0000, 0x0100, CRC(648350b8) SHA1(c7986aa9127ef5b50b845434cb4e81dff9861cd2) )
 ROM_END
 
+ROM_START( wboy5 )
+    ROM_REGION( 0x10000, "maincpu", 0 )
+    ROM_LOAD( "wb1.ic116",0x0000, 0x4000, CRC(6c67407c) SHA1(58d567ee46470cfdf7f1a539fabeb9f0e3c9e6ff) ) /* encrypted */
+    ROM_LOAD( "wb_2"     ,0x4000, 0x4000, CRC(4081b624) SHA1(892fd347638ec900a7afc3d338b68e9d0a14f2b4) ) /* encrypted */
+    ROM_LOAD( "wb_3"         ,0x8000, 0x4000, CRC(c48a0e36) SHA1(c9b9e51334e8b698be2195dda7701bb51760e502) )
+
+    ROM_REGION( 0x10000, "soundcpu", 0 )
+    ROM_LOAD( "epr-7498.120",0x0000, 0x2000, CRC(78ae1e7b) SHA1(86032f443359b0bb2766e33024ed2e320aa9bc84) )
+
+    ROM_REGION( 0xc000, "tiles", 0 )
+    ROM_LOAD( "epr-7497.62",0x0000, 0x2000, CRC(08d609ca) SHA1(11799e9ef7e6942b304f132b404bff3ed44d524b) )
+    ROM_LOAD( "epr-7496.61",0x2000, 0x2000, CRC(6f61fdf1) SHA1(21826aebf5835b9f3d9c467c8647809c1bc0d01f) )
+    ROM_LOAD( "epr-7495.64",0x4000, 0x2000, CRC(6a0d2c2d) SHA1(8c21d7f0768e8dda2b7185f3c510cae4229a4a2e) )
+    ROM_LOAD( "epr-7494.63",0x6000, 0x2000, CRC(a8e281c7) SHA1(a88b80a7b94ab1401bbf28d7707fdf28a5505127) )
+    ROM_LOAD( "epr-7493.66",0x8000, 0x2000, CRC(89305df4) SHA1(7a5098624769a31e7512f56831e818bce6a18871) )
+    ROM_LOAD( "epr-7492.65",0xa000, 0x2000, CRC(60f806b1) SHA1(f91e5868a455dff2bce3c2891a7cfd648957cd73) )
+
+    ROM_REGION( 0x10000, "sprites", 0 )
+    ROM_LOAD( "epr-7485.117",0x0000, 0x4000, CRC(c2891722) SHA1(e4e11c0e9bd0dc121c25349493f2b13d2ff8c807) )
+    ROM_LOAD( "epr-7487.04",0x4000, 0x4000, CRC(2d3a421b) SHA1(d70440a8703ccface3212cd9544c950b36263e8c) )
+    ROM_LOAD( "epr-7486.110",0x8000, 0x4000, CRC(8d622c50) SHA1(9a76a50204c618347d3e8eee6cda841becd906eb) )
+    ROM_LOAD( "epr-7488.05",0xc000, 0x4000, CRC(007c2f1b) SHA1(c2f1376144a49d20cb35384648e06d06978474c1) )
+
+    ROM_REGION( 0x0100, "proms", 0 )
+    ROM_LOAD( "pr-5317.76",0x0000, 0x0100, CRC(648350b8) SHA1(c7986aa9127ef5b50b845434cb4e81dff9861cd2) )
+ROM_END
+
 ROM_START( wboyu )
 	ROM_REGION( 0x10000, "maincpu", 0 )
 	ROM_LOAD( "ic116_89.bin",	0x0000, 0x4000, CRC(73d8cef0) SHA1(a6f1f8de44a88f995836ce03b5a073306c56aaeb) )
@@ -3881,6 +3908,36 @@
 	ROM_LOAD( "pr-5317.76",		0x0000, 0x0100, CRC(648350b8) SHA1(c7986aa9127ef5b50b845434cb4e81dff9861cd2) )
 ROM_END
 
+ROM_START( wboyub )
+    ROM_REGION( 0x10000, "maincpu", 0 )
+    /* this has way more code than the parent sets, I have no idea what to do with it */
+    ROM_LOAD( "1.bin",        0x0000, 0x8000, CRC(07066b6f) SHA1(1ead373907fd5bd5f4cc003a97218aa582758a00) )
+    ROM_LOAD( "4.bin",        0x4000, 0x8000, CRC(8b3124e6) SHA1(e90deaa687128c1f0b7e9e6b6d767bd484c7fc61) )
+    ROM_LOAD( "5.bin",        0x8000, 0x8000, CRC(b75278e7) SHA1(5b7c519f32eac40dc46ca5bba03cec1e893b6fcd) )
+    ROM_LOAD( "epr-7491.96",  0x8000, 0x4000, CRC(1f7d0efe) SHA1(a1b4f8faf1614f4808df1292209c340f1490adbd) )
+    ROM_LOAD( "0cpu.bin",     0xc000, 0x2000, CRC(a962e6af) SHA1(f46b01db38cdc9c8485d7fe0a344e9f6ed918925) ) /* supposedly the encryption key */
+
+	ROM_REGION( 0x10000, "soundcpu", 0 )
+	ROM_LOAD( "epr7498a.3",		0x0000, 0x2000, CRC(c198205c) SHA1(d2d5cd154ce6a5a3c6a099b4ab2ea7cc045ab0a1) )
+
+	ROM_REGION( 0xc000, "tiles", 0 )
+	ROM_LOAD( "epr-7497.62",	0x0000, 0x2000, CRC(08d609ca) SHA1(11799e9ef7e6942b304f132b404bff3ed44d524b) )
+	ROM_LOAD( "epr-7496.61",	0x2000, 0x2000, CRC(6f61fdf1) SHA1(21826aebf5835b9f3d9c467c8647809c1bc0d01f) )
+	ROM_LOAD( "epr-7495.64",	0x4000, 0x2000, CRC(6a0d2c2d) SHA1(8c21d7f0768e8dda2b7185f3c510cae4229a4a2e) )
+	ROM_LOAD( "epr-7494.63",	0x6000, 0x2000, CRC(a8e281c7) SHA1(a88b80a7b94ab1401bbf28d7707fdf28a5505127) )
+	ROM_LOAD( "epr-7493.66",	0x8000, 0x2000, CRC(89305df4) SHA1(7a5098624769a31e7512f56831e818bce6a18871) )
+	ROM_LOAD( "epr-7492.65",	0xa000, 0x2000, CRC(60f806b1) SHA1(f91e5868a455dff2bce3c2891a7cfd648957cd73) )
+
+	ROM_REGION( 0x10000, "sprites", 0 )
+	ROM_LOAD( "epr-7485.117",	0x0000, 0x4000, CRC(c2891722) SHA1(e4e11c0e9bd0dc121c25349493f2b13d2ff8c807) )
+	ROM_LOAD( "epr-7487.04",	0x4000, 0x4000, CRC(2d3a421b) SHA1(d70440a8703ccface3212cd9544c950b36263e8c) )
+	ROM_LOAD( "epr-7486.110",	0x8000, 0x4000, CRC(8d622c50) SHA1(9a76a50204c618347d3e8eee6cda841becd906eb) )
+	ROM_LOAD( "epr-7488.05",	0xc000, 0x4000, CRC(007c2f1b) SHA1(c2f1376144a49d20cb35384648e06d06978474c1) )
+
+	ROM_REGION( 0x0100, "proms", 0 )
+	ROM_LOAD( "pr-5317.76",		0x0000, 0x0100, CRC(648350b8) SHA1(c7986aa9127ef5b50b845434cb4e81dff9861cd2) )
+ROM_END
+
 ROM_START( wboysys2 )
 	ROM_REGION( 0x20000, "maincpu", 0 )
 	ROM_LOAD( "7580.90",  0x0000, 0x8000, CRC(d69927a5) SHA1(b633177146a83953131d4e03fa987416f222199a) ) /* encrypted */
@@ -4793,7 +4850,9 @@
 GAME( 1986, wboyo,      wboy,     sys1pio,  wboy,      wboyo,    ROT0,   "Escape (Sega license)", "Wonder Boy (set 1, 315-5135)", GAME_SUPPORTS_SAVE )
 GAME( 1986, wboy3,      wboy,     sys1pio,  wboy3,     wboyo,    ROT0,   "Escape (Sega license)", "Wonder Boy (set 3, 315-5135)", GAME_SUPPORTS_SAVE )
 GAME( 1986, wboy4,      wboy,     sys1pio,  wboy,      4dwarrio, ROT0,   "Escape (Sega license)", "Wonder Boy (315-5162, 4-D Warriors Conversion)", GAME_SUPPORTS_SAVE )
+GAME( 1986, wboy5,      wboy,     sys1pio,  wboy3,     wboyo,    ROT0,   "Escape (Sega license)", "Wonder Boy (set 5, bootleg)", GAME_SUPPORTS_SAVE )
 GAME( 1986, wboyu,      wboy,     sys1pio,  wboyu,     bank00,   ROT0,   "Escape (Sega license)", "Wonder Boy (prototype?)", GAME_SUPPORTS_SAVE ) // appears to be a very early / unfinished version.
+GAME( 1986, wboyub,     wboy,     sys1pio,  wboy,      wboyo,    ROT0,   "bootleg", "Wonder Boy (US bootleg)", GAME_SUPPORTS_SAVE | GAME_NOT_WORKING )
 GAME( 1987, blockgal,   0,        sys1pio,  blockgal,  blockgal, ROT90,  "Sega / Vic Tokai", "Block Gal (MC-8123B, 317-0029)", GAME_SUPPORTS_SAVE)
 
 /* PIO-based System 1 with ROM banking */
diff -Nru src-old/mame/drivers/thepit.c src/mame/drivers/thepit.c
--- src-old/mame/drivers/thepit.c	2012-02-22 01:51:07.000000000 +0100
+++ src/mame/drivers/thepit.c	2012-03-12 02:38:52.000000000 +0100
@@ -885,6 +885,26 @@
 	ROM_LOAD( "ic3.prm",      0x0000, 0x0020, CRC(927ff40a) SHA1(3d699d981851989e9190505b0dede5202d688f2b) )
 ROM_END
 
+ROM_START( intrepidb )
+    ROM_REGION( 0x10000, "maincpu", 0 )
+    ROM_LOAD( "ic38.bin",       0x0000, 0x1000, CRC(b23e632a) SHA1(c0ccc958a99f35f25a1853f618f3e008ce0247a7) )
+    ROM_LOAD( "ic39.bin",       0x1000, 0x1000, CRC(fd75b90e) SHA1(33d2a3c10be2266760a8341a4238a8734fc9c4c8) )
+    ROM_LOAD( "ic40.bin",       0x2000, 0x1000, CRC(86a9b6de) SHA1(458f8019ac0ca192e74bbc908c8d326d561a0b30) )
+    ROM_LOAD( "ic41.bin",       0x3000, 0x1000, CRC(fb6373c2) SHA1(235b7735cc68ec89b6f32b37d01d7ead21d13f64) )
+    ROM_LOAD( "ic33.bin",       0x4000, 0x1000, CRC(7c868725) SHA1(dca370c835fdd0564d42ecca69b9ad2600b1ce31) )
+
+    ROM_REGION( 0x10000, "audiocpu", 0 )
+    ROM_LOAD( "ic22.bin",       0x0000, 0x0800, CRC(f85ead07) SHA1(72479a9b49dd9c629480a2ce72bdd09fbb12b25d) )
+    ROM_LOAD( "ic23.bin",       0x0800, 0x0800, CRC(9eb6c61b) SHA1(a168fa634b6909c2ea484c2bbaa5afee2a5fe616) )
+
+    ROM_REGION( 0x2000, "gfx1", 0 ) /* chars and sprites */
+    ROM_LOAD( "ic9.9",        0x0000, 0x1000, CRC(8c70d18d) SHA1(785099c947ee1fe19196dfb02752cc849640fe21) )
+    ROM_LOAD( "ic8.8",        0x1000, 0x1000, CRC(04d067d3) SHA1(aeb763e658cd3d0bd849cdae6af55cb1008b2143) )
+
+    ROM_REGION( 0x0020, "proms", 0 )
+    ROM_LOAD( "82s123.ic4",      0x0000, 0x0020, CRC(aa1f7f5e) SHA1(311dd17aa11490a1173c76223e4ccccf8ea29850) )
+ROM_END
+
 ROM_START( zaryavos )
 	ROM_REGION( 0x10000, "maincpu", 0 )
 	ROM_LOAD( "zv1.rom",      0x0000, 0x1000, CRC(b7eec75d) SHA1(cf7ab3a411cf126f01b8ed96c3bd4dfb3d76886a) )
@@ -1095,5 +1115,6 @@
 GAME( 1982, machomou, 0,        suprmous, suprmous, 0,     ROT90, "Techstar", "Macho Mouse", 0 )
 GAME( 1983, intrepid, 0,        intrepid, intrepid, 0,     ROT90, "Nova Games Ltd.", "Intrepid (set 1)", 0 )
 GAME( 1983, intrepid2,intrepid, intrepid, intrepid, 0,     ROT90, "Nova Games Ltd.", "Intrepid (set 2)", 0 )
+GAME( 1984, intrepidb,intrepid, intrepid, intrepid, 0,     ROT90, "bootleg (Elsys)", "Intrepid (bootleg)", 0 )
 GAME( 1984, zaryavos, 0,        intrepid, intrepid, 0,     ROT90, "Nova Games of Canada", "Zarya Vostoka", GAME_NOT_WORKING )
 GAME( 198?, rtriv,    0,        intrepid, rtriv,    rtriv, ROT90, "Romar", "Romar Triv", GAME_WRONG_COLORS )
diff -Nru src-old/mame/drivers/toaplan2.c src/mame/drivers/toaplan2.c
--- src-old/mame/drivers/toaplan2.c	2012-01-14 02:39:13.000000000 +0100
+++ src/mame/drivers/toaplan2.c	2012-03-19 23:29:51.000000000 +0100
@@ -4696,6 +4696,26 @@
 	ROM_LOAD( "rom5.bin", 0x040000, 0x100000, CRC(f6d49863) SHA1(3a3c354852adad06e8a051511abfab7606bce382) )
 ROM_END
 
+
+ROM_START( bgareggabl )
+	ROM_REGION( 0x100000, "maincpu", 0 )			/* Main 68K code */
+	ROM_LOAD16_WORD_SWAP( "xt-8m.bin", 0x000000, 0x100000, CRC(4a6657cb) SHA1(1838956e7597eaa78ea5ee58d0ccc79cbbd7ded5) )
+
+	ROM_REGION( 0x20000, "audiocpu", 0 )			/* Sound Z80 code + bank */
+	ROM_LOAD( "snd.bin", 0x00000, 0x20000, CRC(68632952) SHA1(fb834db83157948e2b420b6051102a9c6ac3969b) )
+
+	ROM_REGION( 0x800000, "gfx1", 0 )
+	ROM_LOAD( "6#-322",  0x000000, 0x400000, CRC(37fe48ed) SHA1(ded5d13c33b4582310cdfb3dd52c052f741c00c5) ) /* == rom4.bin+rom3.bin */
+	ROM_LOAD( "5#-322",  0x400000, 0x400000, CRC(5a06c031) SHA1(ee241ff90117cec1f33ab163601a9d5c75609739) ) /* == rom2.bin+rom1.bin */
+
+	ROM_REGION( 0x010000, "gfx2", 0 )
+	ROM_LOAD( "1#-256", 0x00000, 0x08000, CRC(760dcd14) SHA1(e151e5d7ca5557277f306b9484ec021f4edf1e07) )
+	ROM_LOAD( "2#-256", 0x08000, 0x08000, CRC(456dd16e) SHA1(84779ee64d3ea33ba1ba4dee39b504a81c6811a1) )
+
+	ROM_REGION( 0x140000, "oki", 0 )		/* ADPCM Samples */
+	ROM_LOAD( "rom5.bin", 0x040000, 0x100000, CRC(f6d49863) SHA1(3a3c354852adad06e8a051511abfab7606bce382) )
+ROM_END
+
 /*
    The region of Batrider is controlled by the first byte of rom prg0.u22
    only sets which have been dumped from original PCBs are supported
@@ -5128,6 +5148,7 @@
 GAME( 1996, bgaregganv, bgaregga, bgaregga, bgareggahk, bgaregga, ROT270, "Raizing / Eighting", "Battle Garegga - New Version (Austria / Hong Kong) (Sat Mar 2 1996)" , GAME_SUPPORTS_SAVE ) // displays New Version only when set to HK
 GAME( 1996, bgareggat2, bgaregga, bgaregga, bgaregga,   bgaregga, ROT270, "Raizing / Eighting", "Battle Garegga - Type 2 (Europe / USA / Japan / Asia) (Sat Mar 2 1996)" , GAME_SUPPORTS_SAVE ) // displays Type 2 only when set to Europe
 GAME( 1996, bgareggacn, bgaregga, bgaregga, bgareggacn, bgaregga, ROT270, "Raizing / Eighting", "Battle Garegga - Type 2 (Denmark / China) (Tue Apr 2 1996)", GAME_SUPPORTS_SAVE ) // displays Type 2 only when set to Denmark
+GAME( 1996, bgareggabl, bgaregga, bgaregga, bgareggacn, bgaregga, ROT270, "hack", "1945 2 - Battle Garegga Chinese hack", GAME_SUPPORTS_SAVE )
 
 // these are all based on Version B, even if only the Japan version states 'version B'
 GAME( 1998, batrider,   0,        batrider, batrider,  batrider, ROT270, "Raizing / Eighting", "Armed Police Batrider (Europe) (Fri Feb 13 1998)", GAME_SUPPORTS_SAVE )
diff -Nru src-old/mame/drivers/triforce.c src/mame/drivers/triforce.c
--- src-old/mame/drivers/triforce.c	2012-01-29 04:59:41.000000000 +0100
+++ src/mame/drivers/triforce.c	2012-03-25 03:49:32.000000000 +0200
@@ -466,7 +466,7 @@
 	TRIFORCE_BIOS
 
 	DISK_REGION( "gdrom" )
-	DISK_IMAGE_READONLY( "gdt-0001", 0, SHA1(1b4b16b0715fa5717904f0b3141cc48cca99b7a4) )
+	DISK_IMAGE_READONLY( "gdt-0001", 0, BAD_DUMP SHA1(1b4b16b0715fa5717904f0b3141cc48cca99b7a4) )
 
 	ROM_REGION( 0x50, "picreturn", ROMREGION_ERASE)
 	ROM_LOAD("gdt-0001.data", 0x00, 0x50, CRC(4a1fca38) SHA1(3bc6dca4f8faba44bf5c5a8012cffc69dbb6aea2) )
@@ -493,7 +493,7 @@
 	TRIFORCE_BIOS
 
 	DISK_REGION( "gdrom" )
-	DISK_IMAGE_READONLY( "gdt-0002", 0, SHA1(471e896d43167c93cc229cfc94ff7ac6de7cf9a4) )
+	DISK_IMAGE_READONLY( "gdt-0002", 0, BAD_DUMP SHA1(471e896d43167c93cc229cfc94ff7ac6de7cf9a4) )
 
 	ROM_REGION( 0x50, "picreturn", ROMREGION_ERASE)
 	ROM_LOAD("317-0337-exp.data", 0x00, 0x50, CRC(aa6be604) SHA1(fabc43ecfb7ddf1d5a87f10884852027d6f4773b) )
@@ -504,7 +504,7 @@
 	TRIFORCE_BIOS
 
 	DISK_REGION( "gdrom" )
-	DISK_IMAGE_READONLY( "gdt-0005c", 0, SHA1(9edb3d9ff492d2207d57bfdb6859e796f76c5e0c) )
+	DISK_IMAGE_READONLY( "gdt-0005c", 0, BAD_DUMP SHA1(9edb3d9ff492d2207d57bfdb6859e796f76c5e0c) )
 
 	ROM_REGION( 0x50, "picreturn", ROMREGION_ERASE)
 	ROM_LOAD("gdt-0005.data", 0x00, 0x50, CRC(6c51e5d6) SHA1(84afef983f1f855fe8722f55baa8ea5121da9369) )
@@ -515,7 +515,7 @@
 	TRIFORCE_BIOS
 
 	DISK_REGION( "gdrom" )
-	DISK_IMAGE_READONLY( "gdt-0008c", 0, SHA1(2c1bdb8324efc216edd771fe45c680ac726111a0) )
+	DISK_IMAGE_READONLY( "gdt-0008c", 0, BAD_DUMP SHA1(2c1bdb8324efc216edd771fe45c680ac726111a0) )
 
 	ROM_REGION( 0x50, "picreturn", ROMREGION_ERASE)
 	ROM_LOAD("317-0371-jpn.data", 0x00, 0x50, CRC(08434e5e) SHA1(2121999e851f6f62ab845e6de40849d850ac9d1c) )
@@ -526,7 +526,7 @@
 	TRIFORCE_BIOS
 
 	DISK_REGION( "gdrom" )
-	DISK_IMAGE_READONLY( "gdt-0011", 0, SHA1(71bfa8f53d211085c020d54f55eeeabf85212a0b) )
+	DISK_IMAGE_READONLY( "gdt-0011", 0, BAD_DUMP SHA1(71bfa8f53d211085c020d54f55eeeabf85212a0b) )
 
 	ROM_REGION( 0x50, "picreturn", ROMREGION_ERASE)
 	ROM_LOAD("gdt-0011.data", 0x00, 0x50, CRC(08434e5e) SHA1(2121999e851f6f62ab845e6de40849d850ac9d1c) )
@@ -561,7 +561,7 @@
 	TRIFORCE_BIOS
 
 	DISK_REGION( "gdrom" )
-	DISK_IMAGE_READONLY( "gdt-0015", 0, SHA1(1f83712b2b170d6edf4a27c15b6f763cc3cc4b71) )
+	DISK_IMAGE_READONLY( "gdt-0015", 0, BAD_DUMP SHA1(1f83712b2b170d6edf4a27c15b6f763cc3cc4b71) )
 
 	ROM_REGION( 0x50, "picreturn", ROMREGION_ERASE)
 	ROM_LOAD("317-0393-exp.data", 0x00, 0x50, CRC(2dcfecd7) SHA1(d805168e1564051ae5c47876ade2c9843253c6b4) )
@@ -590,7 +590,7 @@
 	TRIFORCE_BIOS
 
 	DISK_REGION( "gdrom" )
-	DISK_IMAGE_READONLY( "gdt-0013e", 0, SHA1(b69cc5cab889114eda5c6e9ddcca42de9bc235b3) )
+	DISK_IMAGE_READONLY( "gdt-0013e", 0, BAD_DUMP SHA1(b69cc5cab889114eda5c6e9ddcca42de9bc235b3) )
 
 	ROM_REGION( 0x50, "picreturn", ROMREGION_ERASE)
 	ROM_LOAD("317-0391-jpn.data", 0x00, 0x50, CRC(0f2dbb73) SHA1(7b9d66abe85303b3e26b442a3a63feca1a0edbdb) )
@@ -620,7 +620,7 @@
 	TRIFORCE_BIOS
 
 	DISK_REGION( "gdrom" )
-	DISK_IMAGE_READONLY( "gdt-0010c", 0, SHA1(716c441d8dc9036a13c66ef0048cd6d32ac63c4e) )
+	DISK_IMAGE_READONLY( "gdt-0010c", 0, BAD_DUMP SHA1(716c441d8dc9036a13c66ef0048cd6d32ac63c4e) )
 
 	ROM_REGION( 0x50, "picreturn", ROMREGION_ERASE)
 	ROM_LOAD("gdt-0010c.data", 0x00, 0x50, CRC(6c51e5d6) SHA1(84afef983f1f855fe8722f55baa8ea5121da9369) )
@@ -651,7 +651,7 @@
 	TRIFORCE_BIOS
 
 	DISK_REGION( "gdrom" )
-	DISK_IMAGE_READONLY( "gdt-0017b", 0, SHA1(e2dd32c322ffcaf38b82275d2721b71bb3dfc1f2) )
+	DISK_IMAGE_READONLY( "gdt-0017b", 0, BAD_DUMP SHA1(e2dd32c322ffcaf38b82275d2721b71bb3dfc1f2) )
 
 	ROM_REGION( 0x50, "picreturn", ROMREGION_ERASE)
 	ROM_LOAD("gdt-0017b.data", 0x00, 0x50, CRC(32cb46d4) SHA1(a58b9e03d57b317133d9b6c29e42852af8e77559) )
@@ -662,7 +662,7 @@
 	TRIFORCE_BIOS
 
 	DISK_REGION( "gdrom" )
-	DISK_IMAGE_READONLY( "gdt-0020d", 0, SHA1(db256d094b9754d452d7a2b8a370699d21141c1f) )
+	DISK_IMAGE_READONLY( "gdt-0020d", 0, BAD_DUMP SHA1(db256d094b9754d452d7a2b8a370699d21141c1f) )
 
 	ROM_REGION( 0x50, "picreturn", ROMREGION_ERASE)
 	ROM_LOAD("gdt-0020.data", 0x00, 0x50, CRC(e3d13191) SHA1(4255c09aad06eb38c16bdec881897404a3a68b37) )
diff -Nru src-old/mame/drivers/wiz.c src/mame/drivers/wiz.c
--- src-old/mame/drivers/wiz.c	2012-01-12 23:19:49.000000000 +0100
+++ src/mame/drivers/wiz.c	2012-03-15 07:40:01.000000000 +0100
@@ -1124,8 +1124,8 @@
 GAME( 1983, stinger2, stinger, stinger, stinger2, stinger, ROT90,  "Seibu Denshi", "Stinger (prototype?)", GAME_IMPERFECT_SOUND )
 GAME( 1984, scion,    0,       scion,   scion,    scion,   ROT0,   "Seibu Denshi", "Scion", GAME_IMPERFECT_SOUND | GAME_IMPERFECT_COLORS )
 GAME( 1984, scionc,   scion,   scion,   scion,    scion,   ROT0,   "Seibu Denshi (Cinematronics license)", "Scion (Cinematronics)", GAME_IMPERFECT_SOUND | GAME_IMPERFECT_COLORS )
-GAME( 1984, kungfut,  0,       kungfut, kungfut,  0,       ROT0,   "Seibu Kaihatsu", "Kung-Fu Taikun", 0 )
-GAME( 1984, kungfuta, kungfut, kungfut, kungfut,  0,       ROT0,   "Seibu Kaihatsu", "Kung-Fu Taikun (alt)" , 0) /* board was a bootleg but set might still be original */
+GAME( 1984, kungfut,  0,       kungfut, kungfut,  0,       ROT0,   "Seibu Kaihatsu", "Kung-Fu Taikun (set 1)", 0 )
+GAME( 1984, kungfuta, kungfut, kungfut, kungfut,  0,       ROT0,   "Seibu Kaihatsu", "Kung-Fu Taikun (set 2)" , 0) /* board was a bootleg but set might still be original */
 GAME( 1985, wiz,      0,       wiz,     wiz,      wiz,     ROT270, "Seibu Kaihatsu", "Wiz", 0 )
 GAME( 1985, wizt,     wiz,     wiz,     wiz,      wiz,     ROT270, "Seibu Kaihatsu (Taito license)", "Wiz (Taito, set 1)", 0 )
 GAME( 1985, wizta,    wiz,     wiz,     wiz,      wiz,     ROT270, "Seibu Kaihatsu (Taito license)", "Wiz (Taito, set 2)", 0 )
diff -Nru src-old/mame/drivers/zac2650.c src/mame/drivers/zac2650.c
--- src-old/mame/drivers/zac2650.c	2012-01-12 23:19:49.000000000 +0100
+++ src/mame/drivers/zac2650.c	2012-03-24 19:25:52.000000000 +0100
@@ -311,6 +311,6 @@
 ROM_END
 
 
-GAME( 1978, sia2650,  0,       tinvader, sinvader, 0, ROT270, "Zelco / Zaccaria", "Super Invader Attack", 0 )
-GAMEL(1978, tinv2650, sia2650, tinvader, tinvader, 0, ROT270, "Zelco / Zaccaria", "The Invaders",         0, layout_tinv2650 )
+GAME( 1978, sia2650,  0,       tinvader, sinvader, 0, ROT270, "Zaccaria / Zelco", "Super Invader Attack", 0 )
+GAMEL(1978, tinv2650, sia2650, tinvader, tinvader, 0, ROT270, "Zaccaria / Zelco", "The Invaders",         0, layout_tinv2650 )
 GAME( 1979, dodgem,   0,       tinvader, dodgem,   0, ROT0,   "Zaccaria",         "Dodgem",               0 )
diff -Nru src-old/mame/drivers/zn.c src/mame/drivers/zn.c
--- src-old/mame/drivers/zn.c	2012-02-09 12:27:12.000000000 +0100
+++ src/mame/drivers/zn.c	2012-03-12 01:16:37.000000000 +0100
@@ -174,6 +174,7 @@
 	{ "sfex2p",   cp10, cp12 }, /* OK */
 	{ "sfex2pa",  cp10, cp12 }, /* OK */
 	{ "sfex2pj",  cp10, cp12 }, /* OK */
+	{ "sfex2ph",  cp10, cp12 }, /* OK */
 	{ "strider2", cp10, cp13 }, /* OK ( random crashes on bosses ) */
 	{ "strider2a",cp10, cp13 }, /* OK ( random crashes on bosses ) */
 	{ "shiryu2",  cp10, cp13 }, /* OK ( random crashes on bosses ) */
@@ -3526,6 +3527,30 @@
 ROM_END
 
 /* 97695-1 */
+ROM_START( sfex2ph )
+	CPZN2_BIOS
+
+	ROM_REGION32_LE( 0x80000, "user3", 0 )
+	ROM_LOAD( "x2ph_04.2h", 0x0000000, 0x080000, CRC(a4f07439) SHA1(630be537062134da2d01866b9587e5c119c198bb) )
+
+	ROM_REGION32_LE( 0x3000000, "user2", 0 )
+	ROM_LOAD( "x2p-05m.3h", 0x0000000, 0x800000, CRC(4ee3110f) SHA1(704f8dca7d0b698659af9e3271ea5072dfd42b8b) )
+	ROM_LOAD( "x2p-06m.4h", 0x0800000, 0x800000, CRC(4cd53a45) SHA1(39499ea6c9aa51c71f4fe44cc02f93d5a39e14ec) )
+	ROM_LOAD( "x2p-07m.5h", 0x1000000, 0x800000, CRC(11207c2a) SHA1(0182652819f1c3a36e7b42e34ef86d2455a2dd90) )
+	ROM_LOAD( "x2p-08m.2k", 0x1800000, 0x800000, CRC(3560c2cc) SHA1(8b0ce22d954387f7bb032b5220d1014ef68741e8) )
+	ROM_LOAD( "x2p-09m.3k", 0x2000000, 0x800000, CRC(344aa227) SHA1(69dc6f511939bf7fa25c2531ecf307a7565fe7a8) )
+	ROM_LOAD( "x2p-10m.4k", 0x2800000, 0x800000, CRC(2eef5931) SHA1(e5227529fb68eeb1b2f25813694173a75d906b52) )
+
+	ROM_REGION( 0x50000, "audiocpu", 0 ) /* 64k for the audio CPU (+banks) */
+	ROM_LOAD( "x2p_02.2e",  0x00000, 0x08000, CRC(3705de5e) SHA1(847007ca271da64bf13ffbf496d4291429eee27a) )
+	ROM_CONTINUE(           0x10000, 0x18000 )
+	ROM_LOAD( "x2p_03.3e",  0x28000, 0x20000, CRC(6ae828f6) SHA1(41c54165e87b846a845da581f408b96979288158) )
+
+	ROM_REGION( 0x400000, "qsound", 0 ) /* Q Sound Samples */
+	ROM_LOAD16_WORD_SWAP( "x2p-01m.3a", 0x0000000, 0x400000, CRC(14a5bb0e) SHA1(dfe3c3a53bd4c58743d8039b5344d3afbe2a9c24) )
+ROM_END
+
+/* 97695-1 */
 ROM_START( sfex2pj )
 	CPZN2_BIOS
 
@@ -4646,6 +4671,7 @@
 GAME( 1998, kikaioh,   techromn, coh3002c, zn6b, coh3002c, ROT0, "Capcom", "Choukou Senki Kikaioh (Japan 980914)", GAME_IMPERFECT_GRAPHICS | GAME_IMPERFECT_SOUND )
 GAME( 1999, sfex2p,    cpzn2,    coh3002c, zn6b, coh3002c, ROT0, "Capcom / Arika", "Street Fighter EX2 Plus (USA 990611)", GAME_IMPERFECT_GRAPHICS | GAME_IMPERFECT_SOUND )
 GAME( 1999, sfex2pa,   sfex2p,   coh3002c, zn6b, coh3002c, ROT0, "Capcom / Arika", "Street Fighter EX2 Plus (Asia 990611)", GAME_IMPERFECT_GRAPHICS | GAME_IMPERFECT_SOUND )
+GAME( 1999, sfex2ph,   sfex2p,   coh3002c, zn6b, coh3002c, ROT0, "Capcom / Arika", "Street Fighter EX2 Plus (Hispanic 990611)", GAME_IMPERFECT_GRAPHICS | GAME_IMPERFECT_SOUND )
 GAME( 1999, sfex2pj,   sfex2p,   coh3002c, zn6b, coh3002c, ROT0, "Capcom / Arika", "Street Fighter EX2 Plus (Japan 990611)", GAME_IMPERFECT_GRAPHICS | GAME_IMPERFECT_SOUND )
 GAME( 1999, strider2,  cpzn2,    coh3002c, zn,   coh3002c, ROT0, "Capcom", "Strider 2 (USA 991213)", GAME_IMPERFECT_GRAPHICS | GAME_IMPERFECT_SOUND )
 GAME( 1999, strider2a, strider2, coh3002c, zn,   coh3002c, ROT0, "Capcom", "Strider 2 (Asia 991213)", GAME_IMPERFECT_GRAPHICS | GAME_IMPERFECT_SOUND )
diff -Nru src-old/mame/includes/cvs.h src/mame/includes/cvs.h
--- src-old/mame/includes/cvs.h	2012-01-12 23:19:49.000000000 +0100
+++ src/mame/includes/cvs.h	2012-03-23 18:35:11.000000000 +0100
@@ -2,8 +2,6 @@
 
     Century CVS System
 
-    (and Quasar)
-
 ****************************************************************************/
 
 
@@ -67,18 +65,6 @@
                                                we can use the same gfx_layout */
 };
 
-class quasar_state : public cvs_state
-{
-public:
-	quasar_state(const machine_config &mconfig, device_type type, const char *tag)
-		: cvs_state(mconfig, type, tag) { }
-
-	UINT8 *    m_effectram;
-	UINT8      m_effectcontrol;
-	UINT8      m_page;
-	UINT8      m_io_page;
-};
-
 
 /*----------- defined in drivers/cvs.c -----------*/
 
@@ -111,9 +97,3 @@
 PALETTE_INIT( cvs );
 SCREEN_UPDATE_IND16( cvs );
 VIDEO_START( cvs );
-
-/*----------- defined in video/quasar.c -----------*/
-
-PALETTE_INIT( quasar );
-SCREEN_UPDATE_IND16( quasar );
-VIDEO_START( quasar );
diff -Nru src-old/mame/includes/galaxian.h src/mame/includes/galaxian.h
--- src-old/mame/includes/galaxian.h	2012-03-08 11:54:00.000000000 +0100
+++ src/mame/includes/galaxian.h	2012-03-17 19:21:28.000000000 +0100
@@ -40,6 +40,8 @@
 		  m_spriteram(*this, "spriteram") { }
 
 	UINT8 *m_videoram;
+	int m_bullets_base;
+	int m_numspritegens;
 	int m_counter_74ls161[2];
 	int m_direction[2];
 	UINT8 m_gmgalax_selected_game;
@@ -87,7 +89,6 @@
 
 VIDEO_START( galaxian );
 SCREEN_UPDATE_RGB32( galaxian );
-SCREEN_UPDATE_RGB32( zigzag );
 
 WRITE8_HANDLER( galaxian_videoram_w );
 WRITE8_HANDLER( galaxian_objram_w );
diff -Nru src-old/mame/includes/pgm.h src/mame/includes/pgm.h
--- src-old/mame/includes/pgm.h	2012-01-30 16:13:49.000000000 +0100
+++ src/mame/includes/pgm.h	2012-03-25 15:19:50.000000000 +0200
@@ -1,4 +1,14 @@
 
+#include "machine/v3021.h"
+#include "cpu/z80/z80.h"
+#include "cpu/m68000/m68000.h"
+#include "cpu/arm7/arm7.h"
+#include "sound/ics2115.h"
+#include "cpu/arm7/arm7core.h"
+#include "machine/nvram.h"
+
+#define PGMARM7LOGERROR 0
+
 class pgm_state : public driver_device
 {
 public:
@@ -72,15 +82,6 @@
 	UINT32        m_kb_regs[0x10];
 	UINT16        m_olds_bs;
 	UINT16        m_olds_cmd3;
-	// pstars
-	UINT16        m_pstars_key;
-	UINT16        m_pstars_int[2];
-	UINT32        m_pstars_regs[16];
-	UINT32        m_pstars_val;
-	UINT16        m_pstar_e7;
-	UINT16        m_pstar_b1;
-	UINT16        m_pstar_ce;
-	UINT16        m_pstar_ram[3];
 	// ASIC 3 (oriental legends protection)
 	UINT8         m_asic3_reg;
 	UINT8         m_asic3_latch[3];
@@ -90,28 +91,68 @@
 	UINT8         m_asic3_h1;
 	UINT8         m_asic3_h2;
 	UINT16        m_asic3_hold;
-	// ASIC28
-	UINT16        m_asic28_key;
-	UINT16        m_asic28_regs[10];
-	UINT16        m_asic_params[256];
-	UINT16        m_asic28_rcnt;
-	UINT32        m_eoregs[16];
-	// Oldsplus simulation
-	UINT16        m_oldsplus_key;
-	UINT16        m_oldsplus_int[2];
-	UINT32        m_oldsplus_val;
-	UINT16        m_oldsplus_ram[0x100];
-	UINT32        m_oldsplus_regs[0x100];
 
+	UINT32*       m_arm_ram;
 
 };
 
+/* for machine/pgmprot1.c type games */
+class pgm_kovarmsim_state : public pgm_state
+{
+public:
+	pgm_kovarmsim_state(const machine_config &mconfig, device_type type, const char *tag)
+		: pgm_state(mconfig, type, tag) {
+
+		m_ddp3internal_slot = 0;
+	}
 
+	UINT16 m_value0;
+	UINT16 m_value1;
+	UINT16 m_valuekey;
+	UINT16 m_ddp3lastcommand;
+	UINT32 m_valueresponse;
+	int m_ddp3internal_slot;
+	UINT32 m_ddp3slots[0x100];
+
+	// pstars / oldsplus
+	UINT16        m_pstar_e7;
+	UINT16        m_pstar_b1;
+	UINT16        m_pstar_ce;
+	UINT16        m_extra_ram[0x100];
+
+	typedef void (*pgm_arm_sim_command_handler)(pgm_kovarmsim_state *state, int pc);
+
+	pgm_arm_sim_command_handler arm_sim_handler;
+};
 
 
 
 extern UINT16 *pgm_mainram;	// used by nvram handler, we cannot move it to driver data struct
 
+/*----------- defined in drivers/pgm.c -----------*/
+
+void pgm_basic_init( running_machine &machine, bool set_bank  = true );
+
+INPUT_PORTS_EXTERN( pgm );
+
+/* we only need half of these because CavePGM has it's own MACHINE DRIVER in pgmprot1.c - refactor */
+TIMER_DEVICE_CALLBACK( pgm_interrupt );
+
+GFXDECODE_EXTERN( pgm );
+
+MACHINE_CONFIG_EXTERN( pgm );
+
+ADDRESS_MAP_EXTERN( pgm_z80_mem, 8 );
+ADDRESS_MAP_EXTERN( pgm_z80_io, 8 );
+void pgm_sound_irq( device_t *device, int level );
+
+ADDRESS_MAP_EXTERN( pgm_mem, 16 );
+ADDRESS_MAP_EXTERN( pgm_basic_mem, 16 );
+ADDRESS_MAP_EXTERN( pgm_base_mem, 16 );
+
+MACHINE_START( pgm );
+MACHINE_RESET( pgm );
+
 /*----------- defined in machine/pgmcrypt.c -----------*/
 
 void pgm_kov_decrypt(running_machine &machine);
@@ -133,32 +174,108 @@
 void pgm_kovshp_decrypt(running_machine &machine);
 void pgm_killbldp_decrypt(running_machine &machine);
 void pgm_svg_decrypt(running_machine &machine);
+void pgm_svgpcb_decrypt(running_machine &machine);
 void pgm_ket_decrypt(running_machine &machine);
 void pgm_espgal_decrypt(running_machine &machine);
+void pgm_happy6_decrypt(running_machine &machine);
 
 /*----------- defined in machine/pgmprot.c -----------*/
 
-READ16_HANDLER( pstars_protram_r );
-READ16_HANDLER( pstars_r );
-WRITE16_HANDLER( pstars_w );
+DRIVER_INIT( orlegend );
+
+INPUT_PORTS_EXTERN( orlegend );
+INPUT_PORTS_EXTERN( orld105k );
+
+/*----------- defined in machine/pgmprot1.c -----------*/
+
+/* emulations */
+DRIVER_INIT( photoy2k );
+DRIVER_INIT( kovsh );
+DRIVER_INIT( kovshp );
+DRIVER_INIT( kovlsqh2 );
+DRIVER_INIT( kovqhsgs );
+
+MACHINE_CONFIG_EXTERN( kov );
+
+/* simulations */
+DRIVER_INIT( ddp3 );
+DRIVER_INIT( ket );
+DRIVER_INIT( espgal );
+DRIVER_INIT( puzzli2 );
+DRIVER_INIT( py2k2 );
+DRIVER_INIT( pstar );
+DRIVER_INIT( kov );
+DRIVER_INIT( kovboot );
+DRIVER_INIT( oldsplus );
+
+MACHINE_CONFIG_EXTERN( kov_simulated_arm );
+MACHINE_CONFIG_EXTERN( cavepgm );
+
+INPUT_PORTS_EXTERN( sango );
+INPUT_PORTS_EXTERN( sango_ch );
+INPUT_PORTS_EXTERN( photoy2k );
+INPUT_PORTS_EXTERN( oldsplus );
+INPUT_PORTS_EXTERN( pstar );
+INPUT_PORTS_EXTERN( py2k2 );
+INPUT_PORTS_EXTERN( puzzli2 );
+INPUT_PORTS_EXTERN( kovsh );
+
+/*----------- defined in machine/pgmprot2.c -----------*/
+
+/* emulations */
+MACHINE_CONFIG_EXTERN( kov2 );
+
+DRIVER_INIT( kov2 );
+DRIVER_INIT( kov2p );
+DRIVER_INIT( martmast );
+DRIVER_INIT( ddp2 );
+
+/* simulations (or missing) */
+
+DRIVER_INIT( dw2001 );
+
+INPUT_PORTS_EXTERN( ddp2 );
+INPUT_PORTS_EXTERN( kov2 );
+INPUT_PORTS_EXTERN( martmast );
+INPUT_PORTS_EXTERN( dw2001 );
+
+/*----------- defined in machine/pgmprot3.c -----------*/
+
+MACHINE_CONFIG_EXTERN( svg );
+
+DRIVER_INIT( theglad );
+DRIVER_INIT( svg );
+DRIVER_INIT( svgpcb );
+DRIVER_INIT( killbldp );
+DRIVER_INIT( dmnfrnt );
+DRIVER_INIT( happy6 );
+
+/*----------- defined in machine/pgmprot4.c -----------*/
+
+MACHINE_CONFIG_EXTERN( killbld );
+MACHINE_CONFIG_EXTERN( dw3 );
+
+DRIVER_INIT( killbld );
+DRIVER_INIT( drgw3 );
+
+INPUT_PORTS_EXTERN( killbld );
+INPUT_PORTS_EXTERN( dw3 );
+
+/*----------- defined in machine/pgmprot5.c -----------*/
 
-READ16_HANDLER( pgm_asic3_r );
-WRITE16_HANDLER( pgm_asic3_w );
-WRITE16_HANDLER( pgm_asic3_reg_w );
+DRIVER_INIT( drgw2 );
+DRIVER_INIT( dw2v100x );
+DRIVER_INIT( drgw2c );
+DRIVER_INIT( drgw2j );
 
-READ16_HANDLER( sango_protram_r );
-READ16_HANDLER( asic28_r );
-WRITE16_HANDLER( asic28_w );
+/*----------- defined in machine/pgmprot6.c -----------*/
 
-READ16_HANDLER( dw2_d80000_r );
+MACHINE_CONFIG_EXTERN( olds );
 
+DRIVER_INIT( olds );
 
-READ16_HANDLER( oldsplus_protram_r );
-READ16_HANDLER( oldsplus_r );
-WRITE16_HANDLER( oldsplus_w );
+INPUT_PORTS_EXTERN( olds );
 
-MACHINE_RESET( kov );
-void install_protection_asic_sim_kov(running_machine &machine);
 
 /*----------- defined in video/pgm.c -----------*/
 
diff -Nru src-old/mame/includes/quasar.h src/mame/includes/quasar.h
--- src-old/mame/includes/quasar.h	1970-01-01 01:00:00.000000000 +0100
+++ src/mame/includes/quasar.h	2012-03-23 18:35:11.000000000 +0100
@@ -0,0 +1,26 @@
+/***************************************************************************
+
+    Zaccaria Quasar
+
+****************************************************************************/
+
+#include "includes/cvs.h"
+
+class quasar_state : public cvs_state
+{
+public:
+	quasar_state(const machine_config &mconfig, device_type type, const char *tag)
+		: cvs_state(mconfig, type, tag) { }
+
+	UINT8 *    m_effectram;
+	UINT8      m_effectcontrol;
+	UINT8      m_page;
+	UINT8      m_io_page;
+};
+
+
+/*----------- defined in video/quasar.c -----------*/
+
+PALETTE_INIT( quasar );
+SCREEN_UPDATE_IND16( quasar );
+VIDEO_START( quasar );
diff -Nru src-old/mame/layout/jankenmn.lay src/mame/layout/jankenmn.lay
--- src-old/mame/layout/jankenmn.lay	1970-01-01 01:00:00.000000000 +0100
+++ src/mame/layout/jankenmn.lay	2012-03-20 16:42:23.000000000 +0100
@@ -0,0 +1,690 @@
+<?xml version="1.0"?>
+<mamelayout version="2">
+
+<!-- define basic elements -->
+
+	<element name="rect_backdrop">
+		<rect>
+			<color red="0.5" green="0.05" blue="0.0" />
+		</rect>
+	</element>
+
+	<element name="circle_black">
+		<disk>
+			<color red="0.0" green="0.0" blue="0.0" />
+		</disk>
+	</element>
+	<element name="circle_yellow">
+		<disk>
+			<color red="0.85" green="0.75" blue="0.0" />
+		</disk>
+	</element>
+	<element name="circle_red">
+		<disk>
+			<color red="0.85" green="0.15" blue="0.10" />
+		</disk>
+	</element>
+	<element name="circle_lightblue">
+		<disk>
+			<color red="0.65" green="0.80" blue="0.85" />
+		</disk>
+	</element>
+
+	<element name="digit" defstate="0">
+		<led7seg>
+			<color red="1.0" green="0.1" blue="0.1" />
+		</led7seg>
+	</element>
+
+	<element name="rect_black">
+		<rect>
+			<color red="0.0" green="0.0" blue="0.0" />
+		</rect>
+	</element>
+
+
+<!-- define multipliers lamps -->
+
+	<element name="x1" defstate="0">
+		<disk state="1">
+			<color red="0.2" green="1.0" blue="0.3" />
+		</disk>
+		<disk state="1">
+			<color red="1.0" green="1.0" blue="1.0" />
+			<bounds x="0.1" y="0.1" width="0.8" height="0.8" />
+		</disk>
+		<text state="1" string="1">
+			<color red="1.0" green="0.1" blue="0.1" />
+			<bounds x="0" y="0.15" width="1" height="0.7" />
+		</text>
+		<disk state="0">
+			<color red="0.0" green="0.7" blue="0.1" />
+		</disk>
+		<disk state="0">
+			<color red="0.7" green="0.7" blue="0.7" />
+			<bounds x="0.1" y="0.1" width="0.8" height="0.8" />
+		</disk>
+		<text state="0" string="1">
+			<color red="0.8" green="0.0" blue="0.0" />
+			<bounds x="0" y="0.15" width="1" height="0.7" />
+		</text>
+	</element>
+
+	<element name="x2" defstate="0">
+		<disk state="1">
+			<color red="0.2" green="1.0" blue="0.3" />
+		</disk>
+		<disk state="1">
+			<color red="1.0" green="1.0" blue="1.0" />
+			<bounds x="0.1" y="0.1" width="0.8" height="0.8" />
+		</disk>
+		<text state="1" string="2">
+			<color red="1.0" green="0.1" blue="0.1" />
+			<bounds x="0" y="0.15" width="1" height="0.7" />
+		</text>
+		<disk state="0">
+			<color red="0.0" green="0.7" blue="0.1" />
+		</disk>
+		<disk state="0">
+			<color red="0.7" green="0.7" blue="0.7" />
+			<bounds x="0.1" y="0.1" width="0.8" height="0.8" />
+		</disk>
+		<text state="0" string="2">
+			<color red="0.8" green="0.0" blue="0.0" />
+			<bounds x="0" y="0.15" width="1" height="0.7" />
+		</text>
+	</element>
+
+
+<!-- define WIN-DRAW-LOSE lamps -->
+
+	<element name="win" defstate="0">
+		<rect state="1">
+			<color red="0.2" green="1.0" blue="0.3" />
+		</rect>
+		<rect state="1">
+			<color red="1.0" green="0.95" blue="0.15" />
+			<bounds x="0.05" y="0.1" width="0.9" height="0.8" />
+		</rect>
+		<text state="1" string="WIN">
+			<color red="1.0" green="0.1" blue="0.1" />
+			<bounds x="0" y="0.15" width="1" height="0.7" />
+		</text>
+		<rect state="0">
+			<color red="0.0" green="0.7" blue="0.1" />
+		</rect>
+		<rect state="0">
+			<color red="0.85" green="0.75" blue="0.0" />
+			<bounds x="0.05" y="0.1" width="0.9" height="0.8" />
+		</rect>
+		<text state="0" string="WIN">
+			<color red="0.8" green="0.0" blue="0.0" />
+			<bounds x="0" y="0.15" width="1" height="0.7" />
+		</text>
+	</element>
+
+	<element name="draw" defstate="0">
+		<rect state="1">
+			<color red="0.2" green="1.0" blue="0.3" />
+		</rect>
+		<rect state="1">
+			<color red="1.0" green="0.95" blue="0.15" />
+			<bounds x="0.05" y="0.1" width="0.9" height="0.8" />
+		</rect>
+		<text state="1" string="DRAW">
+			<color red="1.0" green="0.1" blue="0.1" />
+			<bounds x="0" y="0.15" width="1" height="0.7" />
+		</text>
+		<rect state="0">
+			<color red="0.0" green="0.7" blue="0.1" />
+		</rect>
+		<rect state="0">
+			<color red="0.85" green="0.75" blue="0.0" />
+			<bounds x="0.05" y="0.1" width="0.9" height="0.8" />
+		</rect>
+		<text state="0" string="DRAW">
+			<color red="0.8" green="0.0" blue="0.0" />
+			<bounds x="0" y="0.15" width="1" height="0.7" />
+		</text>
+	</element>
+
+	<element name="lose" defstate="0">
+		<rect state="1">
+			<color red="0.2" green="1.0" blue="0.3" />
+		</rect>
+		<rect state="1">
+			<color red="1.0" green="0.95" blue="0.15" />
+			<bounds x="0.05" y="0.1" width="0.9" height="0.8" />
+		</rect>
+		<text state="1" string="LOSE">
+			<color red="1.0" green="0.1" blue="0.1" />
+			<bounds x="0" y="0.15" width="1" height="0.7" />
+		</text>
+		<rect state="0">
+			<color red="0.0" green="0.7" blue="0.1" />
+		</rect>
+		<rect state="0">
+			<color red="0.85" green="0.75" blue="0.0" />
+			<bounds x="0.05" y="0.1" width="0.9" height="0.8" />
+		</rect>
+		<text state="0" string="LOSE">
+			<color red="0.8" green="0.0" blue="0.0" />
+			<bounds x="0" y="0.15" width="1" height="0.7" />
+		</text>
+	</element>
+
+
+<!-- define LEDs -->
+
+	<element name="led" defstate="0">
+		<disk state="1">
+			<color red="1.0" green="0.05" blue="0.0" />
+		</disk>
+		<disk state="0">
+			<color red="0.15" green="0.0" blue="0.0" />
+		</disk>
+	</element>
+
+
+<!-- define background -->
+
+	<view name="Internal Layout">
+		<bounds left="0" right="100" top="0" bottom="100" />
+
+		<bezel element="rect_backdrop">
+			<bounds left="0" right="100" top="0" bottom="100" />
+		</bezel>
+
+		<bezel element="circle_lightblue">
+			<bounds x="7" y="2" width="86" height="86" />
+		</bezel>
+		<bezel element="circle_red">
+			<bounds x="13" y="8" width="74" height="74" />
+		</bezel>
+		<bezel element="circle_yellow">
+			<bounds x="15.5" y="10.5" width="69" height="69" />
+		</bezel>
+		<bezel element="circle_black">
+			<bounds x="16" y="11" width="68" height="68" />
+		</bezel>
+
+
+<!-- placing multipliers lamps -->
+
+		<bezel name="lamp0" element="x1">
+			<bounds x="1" y="9" width="24" height="24" />
+		</bezel>
+		<bezel name="lamp1" element="x2">
+			<bounds x="75" y="9" width="24" height="24" />
+		</bezel>
+
+
+<!-- placing WIN-DRAW-LOSE lamps -->
+
+		<bezel name="lamp7" element="win">
+			<bounds x="1" y="71" width="30" height="15" />
+		</bezel>
+		<bezel name="lamp6" element="draw">
+			<bounds x="35" y="81" width="30" height="15" />
+		</bezel>
+		<bezel name="lamp5" element="lose">
+			<bounds x="69" y="71" width="30" height="15" />
+		</bezel>
+
+
+<!-- placing digits -->
+
+		<bezel element="rect_black">
+			<bounds x="1" y="88" width="12" height="9" />
+		</bezel>
+
+		<bezel name="digit0" element="digit">
+			<bounds x="2" y="89" width="5" height="7" />
+		</bezel>
+		<bezel name="digit1" element="digit">
+			<bounds x="7" y="89" width="5" height="7" />
+		</bezel>
+
+
+<!-- placing control panel LEDs -->
+
+		<bezel name="lamp14" element="led">
+			<bounds x="96" y="96" width="1.5" height="1.5" />
+		</bezel>
+
+		<bezel name="lamp2" element="led">
+			<bounds x="88" y="96" width="1.5" height="1.5" />
+		</bezel>
+		<bezel name="lamp3" element="led">
+			<bounds x="90" y="96" width="1.5" height="1.5" />
+		</bezel>
+		<bezel name="lamp4" element="led">
+			<bounds x="92" y="96" width="1.5" height="1.5" />
+		</bezel>
+
+
+<!-- placing hands LEDs -->
+
+<!-- lamp8 for ROCK or SCISSORS or PAPER -->
+
+<!-- base-->
+
+		<bezel name="lamp8" element="led">
+			<bounds x="29.75" y="53.875" width="1.5" height="1.5" />
+		</bezel>
+		<bezel name="lamp8" element="led">
+			<bounds x="31.75" y="55.5" width="1.5" height="1.5" />
+		</bezel>
+		<bezel name="lamp8" element="led">
+			<bounds x="34.125" y="57" width="1.5" height="1.5" />
+		</bezel>
+		<bezel name="lamp8" element="led">
+			<bounds x="36.5" y="58.375" width="1.5" height="1.5" />
+		</bezel>
+		<bezel name="lamp8" element="led">
+			<bounds x="39" y="59.75" width="1.5" height="1.5" />
+		</bezel>
+
+		<bezel name="lamp8" element="led">
+			<bounds x="36.75" y="61.75" width="1.5" height="1.5" />
+		</bezel>
+		<bezel name="lamp8" element="led">
+			<bounds x="34.75" y="63.5" width="1.5" height="1.5" />
+		</bezel>
+		<bezel name="lamp8" element="led">
+			<bounds x="35" y="66.25" width="1.5" height="1.5" />
+		</bezel>
+		<bezel name="lamp8" element="led">
+			<bounds x="37.125" y="68.25" width="1.5" height="1.5" />
+		</bezel>
+		<bezel name="lamp8" element="led">
+			<bounds x="39.875" y="68.5" width="1.5" height="1.5" />
+		</bezel>
+		<bezel name="lamp8" element="led">
+			<bounds x="42.5" y="68.875" width="1.5" height="1.5" />
+		</bezel>
+		<bezel name="lamp8" element="led">
+			<bounds x="45.25" y="69.25" width="1.5" height="1.5" />
+		</bezel>
+		<bezel name="lamp8" element="led">
+			<bounds x="47.625" y="69.375" width="1.5" height="1.5" />
+		</bezel>
+		<bezel name="lamp8" element="led">
+			<bounds x="50.375" y="70" width="1.5" height="1.5" />
+		</bezel>
+		<bezel name="lamp8" element="led">
+			<bounds x="53.25" y="69.75" width="1.5" height="1.5" />
+		</bezel>
+		<bezel name="lamp8" element="led">
+			<bounds x="56.5" y="69.5" width="1.5" height="1.5" />
+		</bezel>
+		<bezel name="lamp8" element="led">
+			<bounds x="59.375" y="68.75" width="1.5" height="1.5" />
+		</bezel>
+		<bezel name="lamp8" element="led">
+			<bounds x="61.875" y="68.125" width="1.5" height="1.5" />
+		</bezel>
+		<bezel name="lamp8" element="led">
+			<bounds x="63.5" y="66.25" width="1.5" height="1.5" />
+		</bezel>
+		<bezel name="lamp8" element="led">
+			<bounds x="63" y="63.5" width="1.5" height="1.5" />
+		</bezel>
+		<bezel name="lamp8" element="led">
+			<bounds x="60.75" y="61.5" width="1.5" height="1.5" />
+		</bezel>
+		<bezel name="lamp8" element="led">
+			<bounds x="63.375" y="59.75" width="1.5" height="1.5" />
+		</bezel>
+		<bezel name="lamp8" element="led">
+			<bounds x="65.625" y="58.375" width="1.5" height="1.5" />
+		</bezel>
+		<bezel name="lamp8" element="led">
+			<bounds x="67.5" y="55.75" width="1.5" height="1.5" />
+		</bezel>
+		<bezel name="lamp8" element="led">
+			<bounds x="69" y="53.375" width="1.5" height="1.5" />
+		</bezel>
+		<bezel name="lamp8" element="led">
+			<bounds x="70.5" y="51" width="1.5" height="1.5" />
+		</bezel>
+		<bezel name="lamp8" element="led">
+			<bounds x="71.375" y="48.375" width="1.5" height="1.5" />
+		</bezel>
+		<bezel name="lamp8" element="led">
+			<bounds x="72.5" y="45.75" width="1.5" height="1.5" />
+		</bezel>
+
+<!-- palm stripes-->
+
+		<bezel name="lamp8" element="led">
+			<bounds x="45.625" y="41" width="1.5" height="1.5" />
+		</bezel>
+		<bezel name="lamp8" element="led">
+			<bounds x="46.25" y="44.25" width="1.5" height="1.5" />
+		</bezel>
+		<bezel name="lamp8" element="led">
+			<bounds x="46.75" y="47" width="1.5" height="1.5" />
+		</bezel>
+		<bezel name="lamp8" element="led">
+			<bounds x="47.5" y="50" width="1.5" height="1.5" />
+		</bezel>
+		<bezel name="lamp8" element="led">
+			<bounds x="47.875" y="52.75" width="1.5" height="1.5" />
+		</bezel>
+
+		<bezel name="lamp8" element="led">
+			<bounds x="56.625" y="41.125" width="1.5" height="1.5" />
+		</bezel>
+		<bezel name="lamp8" element="led">
+			<bounds x="56.25" y="44" width="1.5" height="1.5" />
+		</bezel>
+		<bezel name="lamp8" element="led">
+			<bounds x="55.5" y="47" width="1.5" height="1.5" />
+		</bezel>
+		<bezel name="lamp8" element="led">
+			<bounds x="54.625" y="50" width="1.5" height="1.5" />
+		</bezel>
+		<bezel name="lamp8" element="led">
+			<bounds x="54.125" y="52.75" width="1.5" height="1.5" />
+		</bezel>
+
+<!-- wrist-->
+
+		<bezel name="lamp8" element="led">
+			<bounds x="44.2" y="72" width="1.5" height="1.5" />
+		</bezel>
+		<bezel name="lamp8" element="led">
+			<bounds x="44.2" y="74.7" width="1.5" height="1.5" />
+		</bezel>
+
+		<bezel name="lamp8" element="led">
+			<bounds x="55.3" y="72.3" width="1.5" height="1.5" />
+		</bezel>
+		<bezel name="lamp8" element="led">
+			<bounds x="55.4" y="74.8" width="1.5" height="1.5" />
+		</bezel>
+
+<!-- webbing-->
+
+		<bezel name="lamp8" element="led">
+			<bounds x="27.625" y="41.375" width="1.5" height="1.5" />
+		</bezel>
+		<bezel name="lamp8" element="led">
+			<bounds x="30.125" y="40.375" width="1.5" height="1.5" />
+		</bezel>
+		<bezel name="lamp8" element="led">
+			<bounds x="31.875" y="38.25" width="1.5" height="1.5" />
+		</bezel>
+		<bezel name="lamp8" element="led">
+			<bounds x="32.25" y="35.875" width="1.5" height="1.5" />
+		</bezel>
+
+
+<!-- lamp9 for PAPER -->
+
+<!-- thumb -->
+
+		<bezel name="lamp9" element="led">
+			<bounds x="26.75" y="54.125" width="1.5" height="1.5" />
+		</bezel>
+		<bezel name="lamp9" element="led">
+			<bounds x="24.375" y="53.25" width="1.5" height="1.5" />
+		</bezel>
+		<bezel name="lamp9" element="led">
+			<bounds x="22.125" y="51.75" width="1.5" height="1.5" />
+		</bezel>
+		<bezel name="lamp9" element="led">
+			<bounds x="20" y="49.875" width="1.5" height="1.5" />
+		</bezel>
+		<bezel name="lamp9" element="led">
+			<bounds x="19.25" y="47.75" width="1.5" height="1.5" />
+		</bezel>
+		<bezel name="lamp9" element="led">
+			<bounds x="18.125" y="45.125" width="1.5" height="1.5" />
+		</bezel>
+		<bezel name="lamp9" element="led">
+			<bounds x="19.75" y="42.75" width="1.5" height="1.5" />
+		</bezel>
+		<bezel name="lamp9" element="led">
+			<bounds x="22.375" y="42" width="1.5" height="1.5" />
+		</bezel>
+		<bezel name="lamp9" element="led">
+			<bounds x="25.25" y="41.625" width="1.5" height="1.5" />
+		</bezel>
+
+<!-- ring finger -->
+
+		<bezel name="lamp9" element="led">
+			<bounds x="58.875" y="29" width="1.5" height="1.5" />
+		</bezel>
+		<bezel name="lamp9" element="led">
+			<bounds x="61.375" y="27.25" width="1.5" height="1.5" />
+		</bezel>
+		<bezel name="lamp9" element="led">
+			<bounds x="63.125" y="25.125" width="1.5" height="1.5" />
+		</bezel>
+		<bezel name="lamp9" element="led">
+			<bounds x="65.125" y="23" width="1.5" height="1.5" />
+		</bezel>
+		<bezel name="lamp9" element="led">
+			<bounds x="67.75" y="21.625" width="1.5" height="1.5" />
+		</bezel>
+		<bezel name="lamp9" element="led">
+			<bounds x="70.375" y="22.875" width="1.5" height="1.5" />
+		</bezel>
+		<bezel name="lamp9" element="led">
+			<bounds x="71.125" y="25.5" width="1.5" height="1.5" />
+		</bezel>
+		<bezel name="lamp9" element="led">
+			<bounds x="70.75" y="27.875" width="1.5" height="1.5" />
+		</bezel>
+		<bezel name="lamp9" element="led">
+			<bounds x="70" y="30.75" width="1.5" height="1.5" />
+		</bezel>
+		<bezel name="lamp9" element="led">
+			<bounds x="69.375" y="33.75" width="1.5" height="1.5" />
+		</bezel>
+
+<!-- little finger -->
+
+		<bezel name="lamp9" element="led">
+			<bounds x="71.75" y="35.625" width="1.5" height="1.5" />
+		</bezel>
+		<bezel name="lamp9" element="led">
+			<bounds x="74.25" y="34.25" width="1.5" height="1.5" />
+		</bezel>
+		<bezel name="lamp9" element="led">
+			<bounds x="77.25" y="33.25" width="1.5" height="1.5" />
+		</bezel>
+		<bezel name="lamp9" element="led">
+			<bounds x="79.625" y="34.875" width="1.5" height="1.5" />
+		</bezel>
+		<bezel name="lamp9" element="led">
+			<bounds x="79.625" y="37.625" width="1.5" height="1.5" />
+		</bezel>
+		<bezel name="lamp9" element="led">
+			<bounds x="78.5" y="40.375" width="1.5" height="1.5" />
+		</bezel>
+		<bezel name="lamp9" element="led">
+			<bounds x="76.5" y="42.25" width="1.5" height="1.5" />
+		</bezel>
+		<bezel name="lamp9" element="led">
+			<bounds x="75" y="44.5" width="1.5" height="1.5" />
+		</bezel>
+
+
+<!-- lamp10 for SCISSORS or PAPER -->
+
+<!-- index finger -->
+
+		<bezel name="lamp10" element="led">
+			<bounds x="31.125" y="32.875" width="1.5" height="1.5" />
+		</bezel>
+		<bezel name="lamp10" element="led">
+			<bounds x="30.875" y="30.375" width="1.5" height="1.5" />
+		</bezel>
+		<bezel name="lamp10" element="led">
+			<bounds x="30.875" y="27.375" width="1.5" height="1.5" />
+		</bezel>
+		<bezel name="lamp10" element="led">
+			<bounds x="30.5" y="24.625" width="1.5" height="1.5" />
+		</bezel>
+		<bezel name="lamp10" element="led">
+			<bounds x="30.75" y="21.625" width="1.5" height="1.5" />
+		</bezel>
+		<bezel name="lamp10" element="led">
+			<bounds x="31.875" y="18.875" width="1.5" height="1.5" />
+		</bezel>
+		<bezel name="lamp10" element="led">
+			<bounds x="33.875" y="17" width="1.5" height="1.5" />
+		</bezel>
+		<bezel name="lamp10" element="led">
+			<bounds x="36.125" y="16.5" width="1.5" height="1.5" />
+		</bezel>
+		<bezel name="lamp10" element="led">
+			<bounds x="38.875" y="17.375" width="1.5" height="1.5" />
+		</bezel>
+		<bezel name="lamp10" element="led">
+			<bounds x="40.25" y="19.375" width="1.5" height="1.5" />
+		</bezel>
+		<bezel name="lamp10" element="led">
+			<bounds x="41.375" y="22.25" width="1.5" height="1.5" />
+		</bezel>
+		<bezel name="lamp10" element="led">
+			<bounds x="42.125" y="25.25" width="1.5" height="1.5" />
+		</bezel>
+		<bezel name="lamp10" element="led">
+			<bounds x="42.75" y="28.75" width="1.5" height="1.5" />
+		</bezel>
+
+<!-- middle finger -->
+
+		<bezel name="lamp10" element="led">
+			<bounds x="45.625" y="27.5" width="1.5" height="1.5" />
+		</bezel>
+		<bezel name="lamp10" element="led">
+			<bounds x="46.625" y="24.75" width="1.5" height="1.5" />
+		</bezel>
+		<bezel name="lamp10" element="led">
+			<bounds x="47.875" y="22" width="1.5" height="1.5" />
+		</bezel>
+		<bezel name="lamp10" element="led">
+			<bounds x="49" y="19.25" width="1.5" height="1.5" />
+		</bezel>
+		<bezel name="lamp10" element="led">
+			<bounds x="50.75" y="16.875" width="1.5" height="1.5" />
+		</bezel>
+		<bezel name="lamp10" element="led">
+			<bounds x="53.5" y="16" width="1.5" height="1.5" />
+		</bezel>
+		<bezel name="lamp10" element="led">
+			<bounds x="55.875" y="16.875" width="1.5" height="1.5" />
+		</bezel>
+		<bezel name="lamp10" element="led">
+			<bounds x="57.125" y="19.25" width="1.5" height="1.5" />
+		</bezel>
+		<bezel name="lamp10" element="led">
+			<bounds x="57.25" y="22" width="1.5" height="1.5" />
+		</bezel>
+		<bezel name="lamp10" element="led">
+			<bounds x="57" y="25.25" width="1.5" height="1.5" />
+		</bezel>
+		<bezel name="lamp10" element="led">
+			<bounds x="56.625" y="28.125" width="1.5" height="1.5" />
+		</bezel>
+
+
+<!-- lamp11 for ROCK -->
+
+<!-- index finger and middle finger hidden -->
+
+		<bezel name="lamp11" element="led">
+			<bounds x="33.6" y="33.9" width="1.5" height="1.5" />
+		</bezel>
+		<bezel name="lamp11" element="led">
+			<bounds x="35.9" y="31.6" width="1.5" height="1.5" />
+		</bezel>
+		<bezel name="lamp11" element="led">
+			<bounds x="38.1" y="30.7" width="1.5" height="1.5" />
+		</bezel>
+		<bezel name="lamp11" element="led">
+			<bounds x="41.2" y="31.3" width="1.5" height="1.5" />
+		</bezel>
+		<bezel name="lamp11" element="led">
+			<bounds x="43.8" y="32.5" width="1.5" height="1.5" />
+		</bezel>
+		<bezel name="lamp11" element="led">
+			<bounds x="46.2" y="31.1" width="1.5" height="1.5" />
+		</bezel>
+		<bezel name="lamp11" element="led">
+			<bounds x="48.8" y="30" width="1.5" height="1.5" />
+		</bezel>
+		<bezel name="lamp11" element="led">
+			<bounds x="51.6" y="30.7" width="1.5" height="1.5" />
+		</bezel>
+		<bezel name="lamp11" element="led">
+			<bounds x="53.6" y="32.5" width="1.5" height="1.5" />
+		</bezel>
+
+
+<!-- lamp12 for SCISSORS -->
+
+<!-- middle finger -->
+
+		<bezel name="lamp12" element="led">
+			<bounds x="55.875" y="30.875" width="1.5" height="1.5" />
+		</bezel>
+
+
+<!-- lamp13 for SCISSORS or ROCK -->
+
+<!-- thumb hidden -->
+
+		<bezel name="lamp13" element="led">
+			<bounds x="26.8" y="44.3" width="1.5" height="1.5" />
+		</bezel>
+		<bezel name="lamp13" element="led">
+			<bounds x="26.6" y="47.2" width="1.5" height="1.5" />
+		</bezel>
+		<bezel name="lamp13" element="led">
+			<bounds x="27.3" y="49.7" width="1.5" height="1.5" />
+		</bezel>
+		<bezel name="lamp13" element="led">
+			<bounds x="28.6" y="52.1" width="1.5" height="1.5" />
+		</bezel>
+
+<!-- ring finger and little finger hidden -->
+
+		<bezel name="lamp13" element="led">
+			<bounds x="55.5" y="34.2" width="1.5" height="1.5" />
+		</bezel>
+		<bezel name="lamp13" element="led">
+			<bounds x="58.5" y="33.6" width="1.5" height="1.5" />
+		</bezel>
+		<bezel name="lamp13" element="led">
+			<bounds x="61.2" y="33.1" width="1.5" height="1.5" />
+		</bezel>
+		<bezel name="lamp13" element="led">
+			<bounds x="64.1" y="34.3" width="1.5" height="1.5" />
+		</bezel>
+		<bezel name="lamp13" element="led">
+			<bounds x="65.2" y="36.6" width="1.5" height="1.5" />
+		</bezel>
+		<bezel name="lamp13" element="led">
+			<bounds x="66.5" y="39.1" width="1.5" height="1.5" />
+		</bezel>
+
+		<bezel name="lamp13" element="led">
+			<bounds x="69.4" y="39.2" width="1.5" height="1.5" />
+		</bezel>
+		<bezel name="lamp13" element="led">
+			<bounds x="71.7" y="40.4" width="1.5" height="1.5" />
+		</bezel>
+		<bezel name="lamp13" element="led">
+			<bounds x="72.6" y="42.9" width="1.5" height="1.5" />
+		</bezel>
+
+
+	</view>
+</mamelayout>
diff -Nru src-old/mame/layout/upndown.lay src/mame/layout/upndown.lay
--- src-old/mame/layout/upndown.lay	1970-01-01 01:00:00.000000000 +0100
+++ src/mame/layout/upndown.lay	2012-03-13 08:01:19.000000000 +0100
@@ -0,0 +1,102 @@
+<?xml version="1.0"?>
+<mamelayout version="2">
+	<element name="BET" defstate="1">
+		<rect state="1">
+			<color red="1.0" green="1.0" blue="0.0" />
+		</rect>
+		<rect state="0">
+			<color red="0.2" green="0.2" blue="0.0" />
+		</rect>
+		<text string="BET">
+			<color red="0.0" green="0.0" blue="0.0" />
+			<bounds x="0" y="0.2" width="1" height="0.6" />
+		</text>
+	</element>
+
+	<element name="DEAL" defstate="1">
+		<rect state="1">
+			<color red="0.0" green="1.0" blue="0.0" />
+		</rect>
+		<rect state="0">
+			<color red="0.0" green="0.2" blue="0.0" />
+		</rect>
+		<text string="DEAL">
+			<color red="0.0" green="0.0" blue="0.0" />
+			<bounds x="0" y="0.2" width="1" height="0.6" />
+		</text>
+	</element>
+
+	<element name="HOLD" defstate="1">
+		<rect state="1">
+			<color red="1.0" green="0.5" blue="0.0" />
+		</rect>
+		<rect state="0">
+			<color red="0.3" green="0.1" blue="0.0" />
+		</rect>
+		<text string="HOLD">
+			<color red="0.0" green="0.0" blue="0.0" />
+			<bounds x="0" y="0.2" width="1" height="0.6" />
+		</text>
+	</element>
+
+	<element name="TAKE" defstate="1">
+		<rect state="1">
+			<color red="1.0" green="1.0" blue="1.0" />
+		</rect>
+		<rect state="0">
+			<color red="0.2" green="0.2" blue="0.2" />
+		</rect>
+		<text string="TAKE">
+			<color red="0.0" green="0.0" blue="0.0" />
+			<bounds x="0" y="0.2" width="1" height="0.6" />
+		</text>
+	</element>
+
+	<element name="CANCEL" defstate="1">
+		<rect state="1">
+			<color red="1.0" green="0.0" blue="0.0" />
+		</rect>
+		<rect state="0">
+			<color red="0.3" green="0.0" blue="0.0" />
+		</rect>
+		<text string="CANCEL">
+			<color red="0.0" green="0.0" blue="0.0" />
+			<bounds x="0" y="0.2" width="1" height="0.6" />
+		</text>
+	</element>
+
+	<view name="Button Lamps">
+		<screen index="0">
+			<bounds left="0" top="0" right="4" bottom="3" />
+		</screen>
+
+		<bezel name="lamp2" element="HOLD">
+			<bounds x="0.0" y="3.45" width="0.35" height="0.24" />
+		</bezel>
+		<bezel name="lamp2" element="HOLD">
+			<bounds x="0.4" y="3.45" width="0.35" height="0.24" />
+		</bezel>
+		<bezel name="lamp2" element="HOLD">
+			<bounds x="0.8" y="3.45" width="0.35" height="0.24" />
+		</bezel>
+		<bezel name="lamp2" element="HOLD">
+			<bounds x="1.2" y="3.45" width="0.35" height="0.24" />
+		</bezel>
+		<bezel name="lamp2" element="HOLD">
+			<bounds x="1.6" y="3.45" width="0.35" height="0.24" />
+		</bezel>
+		<bezel name="lamp2" element="CANCEL">
+			<bounds x="2.0" y="3.45" width="0.35" height="0.24" />
+		</bezel>
+
+		<bezel name="lamp0" element="BET">
+			<bounds x="2.85" y="3.45" width="0.35" height="0.24" />
+		</bezel>
+		<bezel name="lamp1" element="DEAL">
+			<bounds x="3.25" y="3.45" width="0.35" height="0.24" />
+		</bezel>
+		<bezel name="lamp3" element="TAKE">
+			<bounds x="3.65" y="3.45" width="0.35" height="0.24" />
+		</bezel>
+	</view>
+</mamelayout>
diff -Nru src-old/mame/machine/pgmcrypt.c src/mame/machine/pgmcrypt.c
--- src-old/mame/machine/pgmcrypt.c	2011-03-29 17:50:04.000000000 +0200
+++ src/mame/machine/pgmcrypt.c	2012-03-23 15:09:35.000000000 +0100
@@ -946,6 +946,52 @@
 	}
 }
 
+static const unsigned char svgpcb_tab[0x100] = { // not checked
+       0x49, 0x47, 0x53, 0x30, 0x30, 0x31, 0x37, 0x52, 0x44, 0x31, 0x30, 0x35, 0x30, 0x35, 0x30, 0x34,
+       0x75, 0x0B, 0xF1, 0x6B, 0x6D, 0xD7, 0xA8, 0xE7, 0x0C, 0xC5, 0x28, 0x81, 0x1F, 0xCF, 0x30, 0x15,
+       0xA8, 0x0D, 0xDA, 0x76, 0xF8, 0x7D, 0xD6, 0xE1, 0x0A, 0x11, 0xE3, 0xA4, 0x23, 0xFF, 0x8E, 0x0B,
+       0xA8, 0x44, 0x2F, 0x8B, 0x3F, 0x7A, 0x21, 0x32, 0x2A, 0xDC, 0x41, 0x4E, 0xE0, 0x97, 0xA9, 0x5D,
+       0xED, 0x53, 0xAE, 0x35, 0x0B, 0x02, 0x18, 0x74, 0x82, 0xE8, 0xA1, 0x2A, 0xBD, 0xEB, 0xB0, 0xC6,
+       0x2E, 0x1D, 0x56, 0x3E, 0x63, 0x87, 0x8A, 0x83, 0x69, 0x38, 0xA1, 0x24, 0x61, 0x8F, 0x11, 0x41,
+       0x61, 0xC5, 0x67, 0xB3, 0x8E, 0xBE, 0x85, 0x79, 0x77, 0x10, 0x21, 0x66, 0xB4, 0x54, 0x7B, 0x09,
+       0xBF, 0xAD, 0x5E, 0xDD, 0x12, 0x97, 0x5A, 0xB2, 0x82, 0xF3, 0x40, 0x5B, 0xDB, 0x4F, 0xDE, 0x99,
+       0xBD, 0x7A, 0xFC, 0x48, 0xB6, 0x48, 0x97, 0xC8, 0xA1, 0xA2, 0x5C, 0xAE, 0x3E, 0xD2, 0x68, 0xAC,
+       0x13, 0x0D, 0x3F, 0xBE, 0x82, 0x42, 0x0A, 0x97, 0x2C, 0x22, 0x16, 0x4B, 0x85, 0x70, 0x89, 0x3D,
+       0xB8, 0x8B, 0x66, 0x4C, 0xBD, 0x39, 0xC4, 0x39, 0xB9, 0xB6, 0x4B, 0x5C, 0x96, 0xFC, 0xEF, 0x87,
+       0xE3, 0x55, 0xF1, 0x3B, 0xED, 0x1F, 0x13, 0x0A, 0x1F, 0xDF, 0x1A, 0x4C, 0x97, 0x8A, 0x8A, 0x06,
+       0x0A, 0x0F, 0x9D, 0x17, 0xDA, 0x28, 0x85, 0xA4, 0x75, 0x63, 0xE4, 0xC6, 0xF1, 0x6B, 0x88, 0x73,
+       0xE6, 0x9C, 0x6B, 0xAA, 0x8B, 0xC7, 0xEA, 0xE3, 0x13, 0x42, 0x46, 0xB6, 0x4A, 0x34, 0x59, 0xCA,
+       0x6C, 0x1F, 0x99, 0x01, 0x46, 0xAE, 0x52, 0xE1, 0x90, 0xC1, 0x1F, 0x46, 0x89, 0xB7, 0xAB, 0x46,
+       0xD4, 0xFB, 0xA6, 0x65, 0x92, 0xD1, 0x0A, 0xFA, 0xC1, 0x63, 0x90, 0xE1, 0xD5, 0x07, 0x6D, 0x62
+};
+
+void pgm_svgpcb_decrypt(running_machine &machine)
+{
+	int i;
+	UINT16 *src = (UINT16 *)(machine.region("user1")->base());
+
+	int rom_size = 0x800000;
+
+	for (i = 0; i < rom_size/2; i++) {
+		UINT16 x = src[i];
+
+		// preliminary!
+		if ((i & 0x040080) != 0x000080) x ^= 0x0001; // ok?
+		if ((i & 0x084008) == 0x084008) x ^= 0x0002;
+		if ((i & 0x080030) == 0x080010) x ^= 0x0004;
+		if ((i & 0x000242) != 0x000042) x ^= 0x0008; // ok?
+		if ((i & 0x048100) == 0x048000) x ^= 0x0010; //
+		if ((i & 0x022004) != 0x000004) x ^= 0x0020; // ok?
+		if ((i & 0x011800) != 0x010000) x ^= 0x0040;
+		if ((i & 0x000820) == 0x000820) x ^= 0x0080;
+
+		x ^= svgpcb_tab[(i >> 1) & 0xff] << 8;
+
+		src[i] = x;
+	}
+}
+
+
 static const UINT8 py2k2_tab[256] = {
 	0x74, 0xe8, 0xa8, 0x64, 0x26, 0x44, 0xa6, 0x9a, 0xa5, 0x69, 0xa2, 0xd3, 0x6d, 0xba, 0xff, 0xf3,
 	0xeb, 0x6e, 0xe3, 0x70, 0x72, 0x58, 0x27, 0xd9, 0xe4, 0x9f, 0x50, 0xa2, 0xdd, 0xce, 0x6e, 0xf6,
@@ -1085,3 +1131,47 @@
 
 
 
+static const UINT8 happy6in1_tab[256] = { // IGS0008RD1031215
+	0x49, 0x47, 0x53, 0x30, 0x30, 0x30, 0x38, 0x52, 0x44, 0x31, 0x30, 0x33, 0x31, 0x32, 0x31, 0x35,
+	0x14, 0xd6, 0x37, 0x5c, 0x5e, 0xc3, 0xd3, 0x62, 0x96, 0x3d, 0xfb, 0x47, 0xf0, 0xcb, 0xbf, 0xb0,
+	0x60, 0xa1, 0xc2, 0x3d, 0x90, 0xd0, 0x58, 0x56, 0x22, 0xac, 0xdd, 0x39, 0x27, 0x7e, 0x58, 0x44,
+	0xe0, 0x6b, 0x51, 0x80, 0xb4, 0xa4, 0xf0, 0x6f, 0x71, 0xd0, 0x57, 0x18, 0xc7, 0xb6, 0x41, 0x50,
+	0x02, 0x2f, 0xdb, 0x4a, 0x08, 0x4b, 0xe3, 0x62, 0x92, 0xc3, 0xff, 0x26, 0xaf, 0x9f, 0x60, 0xa5,
+	0x76, 0x28, 0x97, 0xfd, 0x0b, 0x10, 0xb7, 0x1f, 0xd5, 0xe0, 0xac, 0xe6, 0xfd, 0xa3, 0xdb, 0x58,
+	0x2a, 0xd1, 0xfc, 0x3b, 0x7c, 0x7e, 0x34, 0xdc, 0xc7, 0xc4, 0x76, 0x1b, 0x11, 0x6d, 0x1b, 0xbb,
+	0x4e, 0xe5, 0xc0, 0xe8, 0x5a, 0x60, 0x60, 0x0a, 0x38, 0x47, 0xb3, 0xc9, 0x89, 0xe9, 0xc6, 0x61,
+	0x50, 0x5f, 0xdb, 0x28, 0xe5, 0xc0, 0x83, 0x5c, 0x37, 0x86, 0xfa, 0x32, 0x46, 0x40, 0xc3, 0x1d,
+	0xdf, 0x7a, 0x85, 0x5c, 0x9a, 0xea, 0x24, 0xc7, 0x12, 0xdc, 0x23, 0xda, 0x65, 0xdf, 0x39, 0x02,
+	0xeb, 0xb1, 0x32, 0x28, 0x3a, 0x69, 0x09, 0x7c, 0x5a, 0xe3, 0x44, 0x83, 0x45, 0x71, 0x8f, 0x64,
+	0xa3, 0xbf, 0x9c, 0x6f, 0xc4, 0x07, 0x3a, 0xee, 0xdd, 0x77, 0xb4, 0x31, 0x87, 0xdf, 0x6d, 0xd4,
+	0x75, 0x9f, 0xb9, 0x53, 0x75, 0xd0, 0xfe, 0xd1, 0xaa, 0xb2, 0x0b, 0x25, 0x08, 0x56, 0xb8, 0x27,
+	0x10, 0x8c, 0xbf, 0x39, 0xce, 0x0f, 0xdb, 0x18, 0x10, 0xf0, 0x1f, 0xe5, 0xe8, 0x40, 0x98, 0x6f,
+	0x64, 0x02, 0x27, 0xc3, 0x8c, 0x4f, 0x98, 0xf6, 0x9d, 0xcb, 0x07, 0x31, 0x85, 0x48, 0x75, 0xff,
+	0x9f, 0xba, 0xa6, 0xd3, 0xb0, 0x5b, 0x3d, 0xdd, 0x22, 0x1f, 0x1b, 0x0e, 0x7f, 0x5a, 0xf4, 0x6a
+};
+
+void pgm_happy6_decrypt(running_machine &machine)
+{
+	int i;
+	UINT16 *src = (UINT16 *) (machine.region("user1")->base());
+
+	int rom_size = 0x400000;
+
+	for(i=0; i<rom_size/2; i++)
+	{
+		UINT16 x = src[i];
+
+		if ((i & 0x040480) != 0x000080) x ^= 0x0001;
+		if ((i & 0x104008) == 0x104008) x ^= 0x0002;
+		if ((i & 0x080030) == 0x080010) x ^= 0x0004;
+		if ((i & 0x000242) != 0x000042) x ^= 0x0008;
+		if ((i & 0x048100) == 0x048000) x ^= 0x0010;
+		if ((i & 0x002004) != 0x000004) x ^= 0x0020;
+		if ((i & 0x011800) != 0x010000) x ^= 0x0040;
+		if ((i & 0x000820) == 0x000820) x ^= 0x0080;
+
+		x ^= happy6in1_tab[(i >> 1) & 0xff] << 8;
+
+		src[i] = x;
+	}
+}
diff -Nru src-old/mame/machine/pgmprot.c src/mame/machine/pgmprot.c
--- src-old/mame/machine/pgmprot.c	2012-01-30 16:13:49.000000000 +0100
+++ src/mame/machine/pgmprot.c	2012-03-25 15:19:50.000000000 +0200
@@ -1,276 +1,15 @@
-#include "emu.h"
-#include "includes/pgm.h"
-
-
-
-/*** ASIC27a (Puzzle Star) -- ARM but with no external rom? behaves a bit like KOV ***/
-
-
-/*** (pstarS) ***/
-
-static const int pstar_ba[0x1E]={
-	0x02,0x00,0x00,0x01,0x00,0x03,0x00,0x00, //0
-	0x02,0x00,0x06,0x00,0x22,0x04,0x00,0x03, //8
-	0x00,0x00,0x06,0x00,0x20,0x07,0x00,0x03, //10
-	0x00,0x21,0x01,0x00,0x00,0x63
-};
-
-static const int pstar_b0[0x10]={
-	0x09,0x0A,0x0B,0x00,0x01,0x02,0x03,0x04,
-	0x05,0x06,0x07,0x08,0x00,0x00,0x00,0x00
-};
-
-static const int pstar_ae[0x10]={
-	0x5D,0x86,0x8C ,0x8B,0xE0,0x8B,0x62,0xAF,
-	0xB6,0xAF,0x10A,0xAF,0x00,0x00,0x00,0x00
-};
-
-static const int pstar_a0[0x10]={
-	0x02,0x03,0x04,0x05,0x06,0x01,0x0A,0x0B,
-	0x0C,0x0D,0x0E,0x09,0x00,0x00,0x00,0x00,
-};
-
-static const int pstar_9d[0x10]={
-	0x05,0x03,0x00,0x00,0x00,0x00,0x00,0x00,
-	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
-};
-
-static const int pstar_90[0x10]={
-	0x0C,0x10,0x0E,0x0C,0x00,0x00,0x00,0x00,
-	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
-};
-static const int pstar_8c[0x23]={
-	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
-	0x00,0x00,0x00,0x00,0x00,0x01,0x01,0x01,
-	0x01,0x01,0x01,0x01,0x02,0x02,0x02,0x02,
-	0x02,0x02,0x03,0x03,0x03,0x04,0x04,0x04,
-	0x03,0x03,0x03
-};
-
-static const int pstar_80[0x1a3]={
-	0x03,0x03,0x04,0x04,0x04,0x04,0x05,0x05,
-	0x05,0x05,0x06,0x06,0x03,0x03,0x04,0x04,
-	0x05,0x05,0x05,0x05,0x06,0x06,0x07,0x07,
-	0x03,0x03,0x04,0x04,0x05,0x05,0x05,0x05,
-	0x06,0x06,0x07,0x07,0x06,0x06,0x06,0x06,
-	0x06,0x06,0x06,0x07,0x07,0x07,0x07,0x07,
-	0x06,0x06,0x06,0x06,0x06,0x06,0x07,0x07,
-	0x07,0x07,0x08,0x08,0x05,0x05,0x05,0x05,
-	0x05,0x05,0x05,0x06,0x06,0x06,0x07,0x07,
-	0x06,0x06,0x06,0x07,0x07,0x07,0x08,0x08,
-	0x09,0x09,0x09,0x09,0x07,0x07,0x07,0x07,
-	0x07,0x08,0x08,0x08,0x08,0x09,0x09,0x09,
-	0x06,0x06,0x07,0x07,0x07,0x08,0x08,0x08,
-	0x08,0x08,0x09,0x09,0x05,0x05,0x06,0x06,
-	0x06,0x07,0x07,0x08,0x08,0x08,0x08,0x09,
-	0x07,0x07,0x07,0x07,0x07,0x08,0x08,0x08,
-	0x08,0x09,0x09,0x09,0x06,0x06,0x07,0x03,
-	0x07,0x06,0x07,0x07,0x08,0x07,0x05,0x04,
-	0x03,0x03,0x04,0x04,0x05,0x05,0x06,0x06,
-	0x06,0x06,0x06,0x06,0x03,0x04,0x04,0x04,
-	0x04,0x05,0x05,0x06,0x06,0x06,0x06,0x07,
-	0x04,0x04,0x05,0x05,0x06,0x06,0x06,0x06,
-	0x06,0x07,0x07,0x08,0x05,0x05,0x06,0x07,
-	0x07,0x08,0x08,0x08,0x08,0x08,0x08,0x08,
-	0x05,0x05,0x05,0x07,0x07,0x07,0x07,0x07,
-	0x07,0x08,0x08,0x08,0x08,0x08,0x09,0x09,
-	0x09,0x09,0x03,0x04,0x04,0x05,0x05,0x05,
-	0x06,0x06,0x07,0x07,0x07,0x07,0x08,0x08,
-	0x08,0x09,0x09,0x09,0x03,0x04,0x05,0x05,
-	0x04,0x03,0x04,0x04,0x04,0x05,0x05,0x04,
-	0x03,0x03,0x03,0x03,0x03,0x03,0x03,0x03,
-	0x03,0x03,0x03,0x04,0x04,0x04,0x04,0x04,
-	0x04,0x04,0x04,0x04,0x04,0x03,0x03,0x03,
-	0x03,0x03,0x03,0x00,0x00,0x00,0x00,0x00,
-	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
-	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
-	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
-	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
-	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
-	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
-	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
-	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
-	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
-	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
-	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
-	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
-	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
-	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
-	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
-	0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,
-	0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,
-	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
-	0x00,0x00,0x00
-};
-
-
-
+/***********************************************************************
+ PGM ASIC3 PGM protection emulation
 
-READ16_HANDLER( pstars_protram_r )
-{
-	pgm_state *state = space->machine().driver_data<pgm_state>();
+ these are simulations of the IGS 012 and 025 protection combination
+ used on the following PGM games
 
-	if (offset == 4)		//region
-		return input_port_read(space->machine(), "Region");
-	else if (offset >= 0x10)  //timer
-	{
-		logerror("PSTARS ACCESS COUNTER %6X\n", state->m_pstar_ram[offset - 0x10]);
-		return state->m_pstar_ram[offset - 0x10]--;
-	}
-	return 0x0000;
-}
+ Oriental Legend
 
-READ16_HANDLER( pstars_r )
-{
-	pgm_state *state = space->machine().driver_data<pgm_state>();
-
-	if (offset == 0)
-	{
-		UINT16 d = state->m_pstars_val & 0xffff;
-		UINT16 realkey = state->m_pstars_key >> 8;
-		realkey |= state->m_pstars_key;
-		d ^= realkey;
-//      logerror("PSTARS A27 R  %6X\n", state->m_pstars_val);
-		return d;
-	}
-	else if (offset == 1)
-	{
-		UINT16 d = state->m_pstars_val >> 16;
-		UINT16 realkey = state->m_pstars_key >> 8;
-		realkey |= state->m_pstars_key;
-		d ^= realkey;
-		return d;
+ ***********************************************************************/
 
-	}
-	return 0xff;
-}
-
-WRITE16_HANDLER( pstars_w )
-{
-	pgm_state *state = space->machine().driver_data<pgm_state>();
-
-	if (offset == 0)
-	{
-		state->m_pstars_int[0] = data;
-		return;
-	}
-
-	if (offset == 1)
-	{
-		UINT16 realkey;
-		if ((data >> 8) == 0xff)
-			state->m_pstars_key = 0xff00;
-		realkey = state->m_pstars_key >> 8;
-		realkey |= state->m_pstars_key;
-		{
-			state->m_pstars_key += 0x100;
-			state->m_pstars_key &= 0xff00;
-			if (state->m_pstars_key == 0xff00)
-				state->m_pstars_key = 0x100;
-		}
-		data ^= realkey;
-		state->m_pstars_int[1] = data;
-		state->m_pstars_int[0] ^= realkey;
-
-		switch (state->m_pstars_int[1] & 0xff)
-		{
-		case 0x99:
-			state->m_pstars_key = 0x100;
-			state->m_pstars_val = 0x880000;
-			break;
-
-		case 0xe0:
-			state->m_pstars_val = 0xa00000 + (state->m_pstars_int[0] << 6);
-			break;
-
-		case 0xdc:
-			state->m_pstars_val = 0xa00800 + (state->m_pstars_int[0] << 6);
-			break;
-
-		case 0xd0:
-			state->m_pstars_val = 0xa01000 + (state->m_pstars_int[0] << 5);
-			break;
-
-		case 0xb1:
-			state->m_pstar_b1 = state->m_pstars_int[0];
-			state->m_pstars_val = 0x890000;
-			break;
-
-		case 0xbf:
-			state->m_pstars_val = state->m_pstar_b1 * state->m_pstars_int[0];
-			break;
-
-		case 0xc1: //TODO:TIMER  0,1,2,FIX TO 0 should be OK?
-			state->m_pstars_val = 0;
-			break;
-
-		case 0xce: //TODO:TIMER  0,1,2
-			state->m_pstar_ce = state->m_pstars_int[0];
-			state->m_pstars_val=0x890000;
-			break;
-
-		case 0xcf: //TODO:TIMER  0,1,2
-			state->m_pstar_ram[state->m_pstar_ce] = state->m_pstars_int[0];
-			state->m_pstars_val = 0x890000;
-			break;
-
-		case 0xe7:
-			state->m_pstar_e7 = (state->m_pstars_int[0] >> 12) & 0xf;
-			state->m_pstars_regs[state->m_pstar_e7] &= 0xffff;
-			state->m_pstars_regs[state->m_pstar_e7] |= (state->m_pstars_int[0] & 0xff) << 16;
-			state->m_pstars_val = 0x890000;
-			break;
-
-		case 0xe5:
-			state->m_pstars_regs[state->m_pstar_e7] &= 0xff0000;
-			state->m_pstars_regs[state->m_pstar_e7] |= state->m_pstars_int[0];
-			state->m_pstars_val = 0x890000;
-			break;
-
-		case 0xf8: //@73C
-			state->m_pstars_val = state->m_pstars_regs[state->m_pstars_int[0] & 0xf] & 0xffffff;
-			break;
-
-		case 0xba:
-			state->m_pstars_val = pstar_ba[state->m_pstars_int[0]];
-			break;
-
-		case 0xb0:
-			state->m_pstars_val = pstar_b0[state->m_pstars_int[0]];
-			break;
-
-		case 0xae:
-			state->m_pstars_val = pstar_ae[state->m_pstars_int[0]];
-			break;
-
-		case 0xa0:
-			state->m_pstars_val = pstar_a0[state->m_pstars_int[0]];
-			break;
-
-		case 0x9d:
-			state->m_pstars_val = pstar_9d[state->m_pstars_int[0]];
-			break;
-
-		case 0x90:
-			state->m_pstars_val = pstar_90[state->m_pstars_int[0]];
-			break;
-
-		case 0x8c:
-			state->m_pstars_val = pstar_8c[state->m_pstars_int[0]];
-			break;
-
-		case 0x80:
-			state->m_pstars_val = pstar_80[state->m_pstars_int[0]];
-			break;
-
-		default:
-			state->m_pstars_val = 0x890000;
-			logerror("PSTARS PC(%06x) UNKNOWN %4X %4X\n", cpu_get_pc(&space->device()), state->m_pstars_int[1], state->m_pstars_int[0]);
-
-		}
-
-	}
-}
+#include "emu.h"
+#include "includes/pgm.h"
 
 /*** ASIC 3 (oriental legends protection) ****************************************/
 
@@ -399,930 +138,59 @@
 		state->m_asic3_reg = data & 0xff;
 }
 
-/*** Knights of Valour / Sango / PhotoY2k Protection (from ElSemi) (ASIC28) ***/
 
-static const UINT32 B0TABLE[16] = {2, 0, 1, 4, 3}; //maps char portraits to tables
 
-// photo2yk bonus stage
-static const UINT32 AETABLE[16]={0x00,0x0a,0x14,
-		0x01,0x0b,0x15,
-		0x02,0x0c,0x16
-};
 
-//Not sure if BATABLE is complete
-static const UINT32 BATABLE[0x40]= {
-     0x00,0x29,0x2c,0x35,0x3a,0x41,0x4a,0x4e,  //0x00
-     0x57,0x5e,0x77,0x79,0x7a,0x7b,0x7c,0x7d, //0x08
-     0x7e,0x7f,0x80,0x81,0x82,0x85,0x86,0x87, //0x10
-     0x88,0x89,0x8a,0x8b,0x8c,0x8d,0x8e,0x90,  //0x18
-     0x95,0x96,0x97,0x98,0x99,0x9a,0x9b,0x9c,
-     0x9e,0xa3,0xd4,0xa9,0xaf,0xb5,0xbb,0xc1
-};
 
+/* Oriental Legend INIT */
 
-
-READ16_HANDLER( sango_protram_r )
-{
-	// at offset == 4 is region (supplied by device)
-	// 0 = china
-	// 1 = taiwan
-	// 2 = japan
-	// 3 = korea
-	// 4 = hong kong
-	// 5 = world
-
-	if (offset == 4)
-		return input_port_read(space->machine(), "Region");
-
-	// otherwise it doesn't seem to use the ram for anything important, we return 0 to avoid test mode corruption
-	// kovplus reads from offset 000e a lot ... why?
-#ifdef MAME_DEBUG
-	popmessage ("protection ram r %04x",offset);
-#endif
-	return 0x0000;
-}
-
-#define BITSWAP10(val,B9,B8,B7,B6,B5,B4,B3,B2,B1,B0) \
-                ((BIT(val, B9) <<  9) | \
-                 (BIT(val, B8) <<  8) | \
-                 (BIT(val, B7) <<  7) | \
-                 (BIT(val, B6) <<  6) | \
-                 (BIT(val, B5) <<  5) | \
-                 (BIT(val, B4) <<  4) | \
-                 (BIT(val, B3) <<  3) | \
-                 (BIT(val, B2) <<  2) | \
-                 (BIT(val, B1) <<  1) | \
-                 (BIT(val, B0) <<  0))
-
-
-READ16_HANDLER( asic28_r )
+DRIVER_INIT( orlegend )
 {
-	pgm_state *state = space->machine().driver_data<pgm_state>();
-	UINT32 val = (state->m_asic28_regs[1] << 16) | (state->m_asic28_regs[0]);
-
-	//logerror("Asic28 Read PC = %06x Command = %02x ??\n", cpu_get_pc(&space->device()), state->m_asic28_regs[1]);
-
-	switch (state->m_asic28_regs[1] & 0xff)
-	{
-		case 0x99:
-			val = 0x880000;
-			break;
-
-		case 0x9d:	// spr palette
-			val = 0xa00000 + ((state->m_asic28_regs[0] & 0x1f) << 6);
-			break;
-
-		case 0xb0:
-			val = B0TABLE[state->m_asic28_regs[0] & 0xf];
-			break;
-
-		case 0xb4:
-			{
-				//UINT16 tmp = state->m_eoregs[v2];
-				int v2 = state->m_asic28_regs[0] & 0x0f;
-				int v1 = (state->m_asic28_regs[0] & 0x0f00) >> 8;
-				//state->m_eoregs[v2] = state->m_eoregs[v1];
-				//state->m_eoregs[v1] = tmp;
-				if (state->m_asic28_regs[0] == 0x102)
-					state->m_eoregs[1] = state->m_eoregs[0];
-				else
-					state->m_eoregs[v1] = state->m_eoregs[v2];
-
-				val = 0x880000;
-			}
-			break;
-
-		case 0xba:
-			val = BATABLE[state->m_asic28_regs[0] & 0x3f];
-			if (state->m_asic28_regs[0] > 0x2f)
-				popmessage("Unmapped BA com %02x, contact ElSemi / MameDev", state->m_asic28_regs[0]);
-			break;
-
-		case 0xc0:
-			val = 0x880000;
-			break;
-
-		case 0xc3:	//TXT tile position Uses C0 to select column
-			val = 0x904000 + (state->m_asic_params[0xc0] + state->m_asic_params[0xc3] * 64) * 4;
-			break;
-
-		case 0xcb:
-			val = 0x880000;
-			break;
-
-		case 0xcc: //BG
-			{
-			int y = state->m_asic_params[0xcc];
-			if (y & 0x400)    //y is signed (probably x too and it also applies to TXT, but I've never seen it used)
-				y -= (0x400 - (y & 0x3ff));
-			val = 0x900000 + (((state->m_asic_params[0xcb] + (y) * 64) * 4) /*&0x1fff*/);
-			}
-			break;
-
-		case 0xd0:	//txt palette
-			val = 0xa01000 + (state->m_asic28_regs[0] << 5);
-			break;
-
-		case 0xd6:	//???? check it
-			{
-				int v2 = state->m_asic28_regs[0] & 0xf;
-				//int v1 = (state->m_asic28_regs[0] & 0xf0) >> 4;
-				state->m_eoregs[0] = state->m_eoregs[v2];
-				//state->m_eoregs[v2] = 0;
-				val = 0x880000;
-			}
-			break;
-
-		case 0xdc:	//bg palette
-			val = 0xa00800 + (state->m_asic28_regs[0] << 6);
-			break;
-
-		case 0xe0:	//spr palette
-			val = 0xa00000 + ((state->m_asic28_regs[0] & 0x1f) << 6);
-			break;
-
-		case 0xe5:
-			val = 0x880000;
-			break;
-
-		case 0xe7:
-			val = 0x880000;
-			break;
-
-		case 0xf0:
-			val = 0x00C000;
-			break;
-
-		case 0xf8:
-			val = state->m_eoregs[state->m_asic28_regs[0] & 0xf] & 0xffffff;
-			break;
-
-		case 0xfc:	//Adjust damage level to char experience level
-			{
-			val = (state->m_asic_params[0xfc] * state->m_asic_params[0xfe]) >> 6;
-			break;
-			}
-
-		case 0xfe:	//todo
-			val = 0x880000;
-			break;
-
-
-		default:
-			val = 0x880000;
-	}
-
-	if(offset == 0)
-	{
-		UINT16 d = val & 0xffff;
-		UINT16 realkey = state->m_asic28_key >> 8;
-		realkey |= state->m_asic28_key;
-		d ^= realkey;
-		return d;
-	}
-	else if (offset == 1)
-	{
-		UINT16 d = val >> 16;
-		UINT16 realkey = state->m_asic28_key >> 8;
-		realkey |= state->m_asic28_key;
-		d ^= realkey;
-		state->m_asic28_rcnt++;
-		if (!(state->m_asic28_rcnt & 0xf))
-		{
-			state->m_asic28_key += 0x100;
-			state->m_asic28_key &= 0xff00;
-		}
-		return d;
-	}
-	return 0xff;
-}
-
-WRITE16_HANDLER( asic28_w )
-{
-	pgm_state *state = space->machine().driver_data<pgm_state>();
-
-	if (offset == 0)
-	{
-		UINT16 realkey =state->m_asic28_key >> 8;
-		realkey |= state->m_asic28_key;
-		data ^= realkey;
-		state->m_asic28_regs[0] = data;
-		return;
-	}
-	if (offset == 1)
-	{
-		UINT16 realkey;
-
-		state->m_asic28_key = data & 0xff00;
-
-		realkey = state->m_asic28_key >> 8;
-		realkey |= state->m_asic28_key;
-		data ^= realkey;
-		state->m_asic28_regs[1] = data;
-		logerror("ASIC28 CMD %04x  PARAM %04x\n", state->m_asic28_regs[1], state->m_asic28_regs[0]);
-
-		state->m_asic_params[state->m_asic28_regs[1] & 0xff] = state->m_asic28_regs[0];
-		if (state->m_asic28_regs[1] == 0xE7)
-		{
-			UINT32 E0R = (state->m_asic_params[0xe7] >> 12) & 0xf;
-			state->m_eoregs[E0R] &= 0xffff;
-			state->m_eoregs[E0R] |= state->m_asic28_regs[0] << 16;
-		}
-		if (state->m_asic28_regs[1]==0xE5)
-		{
-			UINT32 E0R = (state->m_asic_params[0xe7] >> 12) & 0xf;
-			state->m_eoregs[E0R] &= 0xff0000;
-			state->m_eoregs[E0R] |= state->m_asic28_regs[0];
-		}
-		state->m_asic28_rcnt = 0;
-	}
-}
-
-/* Dragon World 2 */
-
-#define DW2BITSWAP(s,d,bs,bd)  d=((d&(~(1<<bd)))|(((s>>bs)&1)<<bd))
-//Use this handler for reading from 0xd80000-0xd80002
-READ16_HANDLER( dw2_d80000_r )
-{
-// addr&=0xff;
-// if(dw2reg<0x20) //NOT SURE!!
-	{
-		//The value at 0x80EECE is computed in the routine at 0x107c18
-		UINT16 d = pgm_mainram[0xEECE/2];
-		UINT16 d2 = 0;
-		d = (d >> 8) | (d << 8);
-		DW2BITSWAP(d, d2, 7,  0);
-		DW2BITSWAP(d, d2, 4,  1);
-		DW2BITSWAP(d, d2, 5,  2);
-		DW2BITSWAP(d, d2, 2,  3);
-		DW2BITSWAP(d, d2, 15, 4);
-		DW2BITSWAP(d, d2, 1,  5);
-		DW2BITSWAP(d, d2, 10, 6);
-		DW2BITSWAP(d, d2, 13, 7);
-		// ... missing bitswaps here (8-15) there is not enough data to know them
-		// the code only checks the lowest 8 bytes
-		return d2;
-	}
-}
-
-/* Dragon World 3
-
-Dragon World 3 has 2 protection chips
-ASIC022 and ASIC025
-one of them also has an external data rom (encrypted?)
-
-code below is ElSemi's preliminary code, it doesn't work properly and isn't used, much of the protection isn't understood */
-
-#if 0
-AddWriteArea(0xda0000,0xdaffff,0,dw3_w8,dw3_w16,dw3_w32);
-AddReadArea (0xda0000,0xdaffff,0,dw3_r8,dw3_r16,dw3_r32);
-
-#define DW3BITSWAP(s,d,bs,bd)  d=((d&(~(1<<bd)))|(((s>>bs)&1)<<bd))
-
-UINT16 dw3_Rw[8];
-UINT8 *dw3_R=(UINT8 *) dw3_Rw;
-
-UINT8 dw3_r8(UINT32 addr)
-{
-	if(addr>=0xDA5610 && addr<=0xDA5613)
-		return *((UINT8 *) (dw3_R+((addr-0xDA5610)^1)));
-	return 0;
-}
-
-UINT16 dw3_r16(UINT32 addr)
-{
-	if(addr>=0xDA5610 && addr<=0xDA5613)
-		return *((UINT16 *) (dw3_R+(addr-0xDA5610)));
-	return 0;
-}
-
-UINT32 dw3_r32(UINT32 addr)
-{
-	return 0;
-}
-
-void dw3_w8(UINT32 addr,UINT8 val)
-{
-	if(addr==0xDA5610)
-		dw3_R[1]=val;
-	if(addr==0xDA5611)
-		dw3_R[0]=val;
-	if(addr==0xDA5612)
-		dw3_R[3]=val;
-	if(addr==0xDA5613)
-		dw3_R[2]=val;
-}
-
-void dw3_w16(UINT32 addr,UINT16 val)
-{
-	if(addr>=0xDA5610 && addr<=0xDA5613)
-	{
-		UINT16 *s=((UINT16 *) (dw3_R+(addr-0xDA5610)));
-		*s=val;
-		if(addr==0xDA5610)
-		{
-			if(val==1)
-			{
-				UINT16 v1=dw3_Rw[1];
-				UINT16 v2=0;
-				DW3BITSWAP(v1,v2,0,0);
-				DW3BITSWAP(v1,v2,1,1);
-				DW3BITSWAP(v1,v2,7,2);
-				DW3BITSWAP(v1,v2,6,3);
-				DW3BITSWAP(v1,v2,5,4);
-				DW3BITSWAP(v1,v2,4,5);
-				DW3BITSWAP(v1,v2,3,6);
-				DW3BITSWAP(v1,v2,2,7);
-
-				dw3_Rw[1]=v2;
-			}
-		}
-	}
-
-}
-
-
-void dw3_w32(UINT32 addr,UINT32 val)
-{
-
-}
-#endif
-
-/* Oriental Legend Super Plus ARM simulation */
-
-static const int oldsplus_80[0x5]={
-	0xbb8,0x1770,0x2328,0x2ee0,0xf4240
-};
-
-static const int oldsplus_fc[0x20]={
-	0x00,0x00,0x0a,0x3a,0x4e,0x2e,0x03,0x40,
-	0x33,0x43,0x26,0x2c,0x00,0x00,0x00,0x00,
-	0x00,0x00,0x44,0x4d,0xb,0x27,0x3d,0x0f,
-	0x37,0x2b,0x02,0x2f,0x15,0x45,0x0e,0x30
-};
-
-static const int oldsplus_a0[0x20]={
-	0x000,0x023,0x046,0x069,0x08c,0x0af,0x0d2,0x0f5,
-	0x118,0x13b,0x15e,0x181,0x1a4,0x1c7,0x1ea,0x20d,
-	0x20d,0x20d,0x20d,0x20d,0x20d,0x20d,0x20d,0x20d,
-	0x20d,0x20d,0x20d,0x20d,0x20d,0x20d,0x20d,0x20d,
-};
-
-static const int oldsplus_90[0x7]={
-	0x50,0xa0,0xc8,0xf0,0x190,0x1f4,0x258
-};
-
-static const int oldsplus_5e[0x20]={
-	0x04,0x04,0x04,0x04,0x04,0x03,0x03,0x03,
-	0x02,0x02,0x02,0x01,0x01,0x01,0x01,0x01,
-	0x01,0x01,0x01,0x01,0x01,0x00,0x00,0x00,
-	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
-};
-
-static const int oldsplus_b0[0xe0]={
-	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
-	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
-	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
-	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
-
-	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
-	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
-	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
-	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
-
-	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
-	0x00,0x00,0x00,0x00,0x01,0x02,0x03,0x04,
-	0x05,0x06,0x07,0x08,0x09,0x0a,0x0b,0x0c,
-	0x0d,0x0e,0x0f,0x10,0x11,0x12,0x13,0x14,
-
-	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
-	0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,
-	0x09,0x0a,0x0b,0x0c,0x0d,0x0e,0x0f,0x10,
-	0x11,0x12,0x13,0x14,0x15,0x16,0x17,0x18,
-
-	0x00,0x00,0x00,0x00,0x01,0x02,0x03,0x04,
-	0x05,0x06,0x07,0x08,0x09,0x0a,0x0b,0x0c,
-	0x0d,0x0e,0x0f,0x10,0x11,0x12,0x13,0x14,
-	0x15,0x16,0x17,0x18,0x19,0x1a,0x1b,0x1c,
-
-	0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,
-	0x08,0x09,0x0a,0x0b,0x0c,0x0d,0x0e,0x0f,
-	0x10,0x11,0x12,0x13,0x14,0x15,0x16,0x17,
-	0x18,0x19,0x1a,0x1b,0x1c,0x1d,0x1e,0x1f,
-
-	0x04,0x05,0x06,0x07,0x08,0x09,0x0a,0x0b,
-	0x0c,0x0d,0x0e,0x0f,0x10,0x11,0x12,0x13,
-	0x14,0x15,0x16,0x17,0x18,0x19,0x1a,0x1b,
-	0x1c,0x1d,0x1e,0x1f,0x1f,0x1f,0x1f,0x1f
-};
-
-static const int oldsplus_ae[0xe0]={
-	0x50,0x50,0x50,0x50,0x50,0x50,0x50,0x50,
-	0x50,0x50,0x50,0x50,0x50,0x50,0x50,0x50,
-	0x50,0x50,0x50,0x50,0x50,0x50,0x50,0x50,
-	0x50,0x50,0x50,0x50,0x50,0x50,0x50,0x50,
-
-	0x50,0x50,0x50,0x50,0x50,0x50,0x50,0x50,
-	0x50,0x50,0x50,0x50,0x50,0x50,0x50,0x50,
-	0x50,0x50,0x50,0x50,0x50,0x50,0x50,0x50,
-	0x50,0x50,0x50,0x50,0x50,0x50,0x50,0x50,
-
-	0x1E,0x1F,0x20,0x21,0x22,0x23,0x23,0x23,
-	0x23,0x23,0x23,0x23,0x23,0x23,0x23,0x23,
-	0x23,0x23,0x23,0x23,0x23,0x23,0x23,0x23,
-	0x23,0x23,0x23,0x23,0x23,0x23,0x23,0x23,
-
-	0x1F,0x20,0x21,0x22,0x23,0x23,0x23,0x23,
-	0x23,0x23,0x23,0x23,0x23,0x23,0x23,0x23,
-	0x23,0x23,0x23,0x23,0x23,0x23,0x23,0x23,
-	0x23,0x23,0x23,0x23,0x23,0x23,0x23,0x23,
-
-	0x20,0x21,0x22,0x23,0x23,0x23,0x23,0x23,
-	0x23,0x23,0x23,0x23,0x23,0x23,0x23,0x23,
-	0x23,0x23,0x23,0x23,0x23,0x23,0x23,0x23,
-	0x23,0x23,0x23,0x23,0x23,0x23,0x23,0x23,
-
-	0x21,0x22,0x23,0x23,0x23,0x23,0x23,0x23,
-	0x23,0x23,0x23,0x23,0x23,0x23,0x23,0x23,
-	0x23,0x23,0x23,0x23,0x23,0x23,0x23,0x23,
-	0x23,0x23,0x23,0x23,0x23,0x23,0x23,0x23,
-
-	0x23,0x23,0x23,0x23,0x23,0x23,0x23,0x23,
-	0x23,0x23,0x23,0x23,0x23,0x23,0x23,0x23,
-	0x23,0x23,0x23,0x23,0x23,0x23,0x23,0x23,
-	0x23,0x23,0x23,0x23,0x23,0x23,0x23,0x23
-};
-
-static const int oldsplus_ba[0x4]={
-	0x3138,0x2328,0x1C20,0x1518
-};
-
-static const int oldsplus_9d[0x111]={
-	0x0000,0x0064,0x00c8,0x012c,0x0190,0x01f4,0x0258,0x02bc,
-	0x02f8,0x0334,0x0370,0x03ac,0x03e8,0x0424,0x0460,0x049c,
-	0x04d8,0x0514,0x0550,0x058c,0x05c8,0x0604,0x0640,0x06bc,
-	0x06bc,0x06bc,0x06bc,0x06bc,0x06bc,0x06bc,0x06bc,0x06bc,
-	0x06bc,0x06bc,0x06bc,0x06bc,0x06bc,0x06bc,0x06bc,0x0000,
-	0x0064,0x00c8,0x012c,0x0190,0x01f4,0x0258,0x02bc,0x0302,
-	0x0348,0x038e,0x03d4,0x041a,0x0460,0x04a6,0x04ec,0x0532,
-	0x0578,0x05be,0x0604,0x064a,0x0690,0x06d6,0x06bc,0x06bc,
-	0x06bc,0x06bc,0x06bc,0x06bc,0x06bc,0x06bc,0x06bc,0x06bc,
-	0x06bc,0x06bc,0x06bc,0x06bc,0x06bc,0x06bc,0x0000,0x0064,
-	0x00c8,0x012c,0x0190,0x01f4,0x0258,0x02bc,0x0316,0x0370,
-	0x03ca,0x0424,0x047e,0x04d8,0x0532,0x058c,0x05e6,0x0640,
-	0x069a,0x06f4,0x074e,0x07a8,0x0802,0x06bc,0x06bc,0x06bc,
-	0x06bc,0x06bc,0x06bc,0x06bc,0x06bc,0x06bc,0x06bc,0x06bc,
-	0x06bc,0x06bc,0x06bc,0x06bc,0x06bc,0x0000,0x0064,0x00c8,
-	0x012c,0x0190,0x01f4,0x0258,0x02bc,0x032a,0x0398,0x0406,
-	0x0474,0x04e2,0x0550,0x05be,0x062c,0x069a,0x0708,0x0776,
-	0x07e4,0x0852,0x08c0,0x092e,0x06bc,0x06bc,0x06bc,0x06bc,
-	0x06bc,0x06bc,0x06bc,0x06bc,0x06bc,0x06bc,0x06bc,0x06bc,
-	0x06bc,0x06bc,0x06bc,0x06bc,0x0000,0x0064,0x00c8,0x012c,
-	0x0190,0x01f4,0x0258,0x02bc,0x0348,0x03d4,0x0460,0x04ec,
-	0x0578,0x0604,0x0690,0x071c,0x07a8,0x0834,0x08c0,0x094c,
-	0x09d8,0x0a64,0x0af0,0x06bc,0x06bc,0x06bc,0x06bc,0x06bc,
-	0x06bc,0x06bc,0x06bc,0x06bc,0x06bc,0x06bc,0x06bc,0x06bc,
-	0x06bc,0x06bc,0x06bc,0x0000,0x0064,0x00c8,0x012c,0x0190,
-	0x01f4,0x0258,0x02bc,0x0384,0x044c,0x0514,0x05dc,0x06a4,
-	0x076c,0x0834,0x08fc,0x09c4,0x0a8c,0x0b54,0x0c1c,0x0ce4,
-	0x0dac,0x0e74,0x06bc,0x06bc,0x06bc,0x06bc,0x06bc,0x06bc,
-	0x06bc,0x06bc,0x06bc,0x06bc,0x06bc,0x06bc,0x06bc,0x06bc,
-	0x06bc,0x06bc,0x0000,0x0064,0x00c8,0x012c,0x0190,0x01f4,
-	0x0258,0x02bc,0x030c,0x035c,0x03ac,0x03fc,0x044c,0x049c,
-	0x04ec,0x053c,0x058c,0x05dc,0x062c,0x067c,0x06cc,0x071c,
-	0x076c,0x06bc,0x06bc,0x06bc,0x06bc,0x06bc,0x06bc,0x06bc,
-	0x06bc,0x06bc,0x06bc,0x06bc,0x06bc,0x06bc,0x06bc,0x06bc,
-	0x06bc
-};
-
-static const int oldsplus_8c[0x20]={
-	0x0032,0x0032,0x0064,0x0096,0x0096,0x00fa,0x012c,0x015e,
-	0x0032,0x0064,0x0096,0x00c8,0x00c8,0x012c,0x015e,0x0190,
-	0x0064,0x0096,0x00c8,0x00fa,0x00fa,0x015e,0x0190,0x01c2,
-	0x0096,0x00c8,0x00fa,0x012c,0x012c,0x0190,0x01c2,0x01f4
-};
-
-READ16_HANDLER( oldsplus_protram_r )
-{
-	if (offset == 4)
-		return input_port_read(space->machine(), "Region");
-
-	return 0x0000;
-}
-
-READ16_HANDLER( oldsplus_r )
-{
-	pgm_state *state = space->machine().driver_data<pgm_state>();
-
-	if (offset == 0)
-	{
-		UINT16 d = state->m_oldsplus_val & 0xffff;
-		UINT16 realkey = state->m_oldsplus_key >> 8;
-		realkey |= state->m_oldsplus_key;
-		d ^= realkey;
-		return d;
-	}
-	else if (offset == 1)
-	{
-		UINT16 d = state->m_oldsplus_val >> 16;
-		UINT16 realkey = state->m_oldsplus_key >> 8;
-		realkey |= state->m_oldsplus_key;
-		d ^= realkey;
-		return d;
-
-	}
-	return 0xff;
-}
-
-WRITE16_HANDLER( oldsplus_w )
-{
-	pgm_state *state = space->machine().driver_data<pgm_state>();
-
-	if (offset == 0)
-	{
-		state->m_oldsplus_int[0] = data;
-		return;
-	}
-
-	if (offset == 1)
-	{
-		UINT16 realkey;
-		if ((data >> 8) == 0xff)
-			state->m_oldsplus_key = 0xff00;
-		realkey = state->m_oldsplus_key >> 8;
-		realkey |= state->m_oldsplus_key;
-		{
-			state->m_oldsplus_key += 0x100;
-			state->m_oldsplus_key &= 0xff00;
-			if (state->m_oldsplus_key == 0xff00)
-				state->m_oldsplus_key = 0x100;
-		}
-		data ^= realkey;
-		state->m_oldsplus_int[1] = data;
-		state->m_oldsplus_int[0] ^= realkey;
-
-		switch (state->m_oldsplus_int[1] & 0xff)
-		{
-			case 0x88:
-				state->m_oldsplus_key = 0x100;
-				state->m_oldsplus_val = 0x990000;
-				break;
-
-			case 0xd0:
-				state->m_oldsplus_val = 0xa01000 + (state->m_oldsplus_int[0] << 5);
-				break;
-
-			case 0xc0:
-				state->m_oldsplus_val = 0xa00000 + (state->m_oldsplus_int[0] << 6);
-				break;
-
-			case 0xc3:
-				state->m_oldsplus_val = 0xa00800 + (state->m_oldsplus_int[0] << 6);
-				break;
-
-			case 0x36:
-				state->m_oldsplus_ram[0x36] = state->m_oldsplus_int[0];
-				state->m_oldsplus_val = 0x990000;
-				break;
-
-			case 0x33:
-				state->m_oldsplus_ram[0x33] = state->m_oldsplus_int[0];
-				state->m_oldsplus_val = 0x990000;
-				break;
-
-			case 0x35:
-				state->m_oldsplus_ram[0x36] += state->m_oldsplus_int[0];
-				state->m_oldsplus_val = 0x990000;
-				break;
-
-			case 0x37:
-				state->m_oldsplus_ram[0x33] += state->m_oldsplus_int[0];
-				state->m_oldsplus_val = 0x990000;
-				break;
-
-			case 0x34:
-				state->m_oldsplus_val = state->m_oldsplus_ram[0x36];
-				break;
-
-			case 0x38:
-				state->m_oldsplus_val = state->m_oldsplus_ram[0x33];
-				break;
-
-			case 0x80:
-				state->m_oldsplus_val = oldsplus_80[state->m_oldsplus_int[0]];
-				break;
-
-			case 0xe7:
-				state->m_oldsplus_ram[0xe7] = state->m_oldsplus_int[0];
-				state->m_oldsplus_val = 0x990000;
-				break;
-
-			case 0xe5:
-				switch (state->m_oldsplus_ram[0xe7])
-				{
-					case 0xb000:
-						state->m_oldsplus_regs[0xb] = state->m_oldsplus_int[0];
-						state->m_oldsplus_regs[0xc] = 0;
-						break;
-
-					case 0xc000:
-						state->m_oldsplus_regs[0xc] = state->m_oldsplus_int[0];
-						break;
-
-					case 0xd000:
-						state->m_oldsplus_regs[0xd] = state->m_oldsplus_int[0];
-						break;
-
-					case 0xf000:
-						state->m_oldsplus_regs[0xf] = state->m_oldsplus_int[0];
-						break;
-				}
-				state->m_oldsplus_val = 0x990000;
-				break;
-
-			case 0xf8:
-				state->m_oldsplus_val = state->m_oldsplus_regs[state->m_oldsplus_int[0]];
-				break;
-
-			case 0xfc:
-				state->m_oldsplus_val = oldsplus_fc[state->m_oldsplus_int[0]];
-				break;
-
-			case 0xc5:
-				state->m_oldsplus_regs[0xd] --;
-				state->m_oldsplus_val = 0x990000;
-				break;
-
-			case 0xd6:
-				state->m_oldsplus_regs[0xb] ++;
-				state->m_oldsplus_val = 0x990000;
-				break;
-
-			case 0x3a:
-				state->m_oldsplus_regs[0xf] = 0;
-				state->m_oldsplus_val = 0x990000;
-				break;
-
-			case 0xf0:
-				state->m_oldsplus_ram[0xf0] = state->m_oldsplus_int[0];
-				state->m_oldsplus_val = 0x990000;
-				break;
-
-			case 0xed:
-				state->m_oldsplus_val = state->m_oldsplus_int[0] << 0x6;
-				state->m_oldsplus_val += state->m_oldsplus_ram[0xf0];
-				state->m_oldsplus_val = state->m_oldsplus_val << 0x2;
-				state->m_oldsplus_val += 0x900000;
-				break;
-
-			case 0xe0:
-				state->m_oldsplus_ram[0xe0] = state->m_oldsplus_int[0];
-				state->m_oldsplus_val = 0x990000;
-				break;
-
-			case 0xdc:
-				state->m_oldsplus_val = state->m_oldsplus_int[0] << 0x6;
-				state->m_oldsplus_val += state->m_oldsplus_ram[0xe0];
-				state->m_oldsplus_val = state->m_oldsplus_val << 0x2;
-				state->m_oldsplus_val += 0x904000;
-				break;
-
-			case 0xcb:
-				state->m_oldsplus_val =  0xc000;
-				break;
-
-			case 0xa0:
-				state->m_oldsplus_val = oldsplus_a0[state->m_oldsplus_int[0]];
-				break;
-
-			case 0xba:
-				state->m_oldsplus_val = oldsplus_ba[state->m_oldsplus_int[0]];
-				break;
-
-			case 0x5e:
-				state->m_oldsplus_val = oldsplus_5e[state->m_oldsplus_int[0]];
-				break;
-
-			case 0xb0:
-				state->m_oldsplus_val = oldsplus_b0[state->m_oldsplus_int[0]];
-				break;
-
-			case 0xae:
-				state->m_oldsplus_val = oldsplus_ae[state->m_oldsplus_int[0]];
-				break;
-
-			case 0x9d:
-				state->m_oldsplus_val = oldsplus_9d[state->m_oldsplus_int[0]];
-				break;
-
-			case 0x90:
-				state->m_oldsplus_val = oldsplus_90[state->m_oldsplus_int[0]];
-				break;
-
-			case 0x8c:
-				state->m_oldsplus_val = oldsplus_8c[state->m_oldsplus_int[0]];
-				break;
-
-			default:
-				state->m_oldsplus_val = 0x990000;
-				printf("%06X: oldsplus_UNKNOWN W CMD %X  VAL %X\n",cpu_get_pc(&space->device()),state->m_oldsplus_int[1],state->m_oldsplus_int[0]);
-				break;
-		}
-	}
-}
-
-/* Old KOV and bootlegs sim ... really these should be read out... */
-
-static const UINT8 kov_BATABLE[0x40] = {
-	0x00,0x29,0x2c,0x35,0x3a,0x41,0x4a,0x4e,0x57,0x5e,0x77,0x79,0x7a,0x7b,0x7c,0x7d,
-	0x7e,0x7f,0x80,0x81,0x82,0x85,0x86,0x87,0x88,0x89,0x8a,0x8b,0x8c,0x8d,0x8e,0x90,
-	0x95,0x96,0x97,0x98,0x99,0x9a,0x9b,0x9c,0x9e,0xa3,0xd4,0xa9,0xaf,0xb5,0xbb,0xc1
-};
-
-static const UINT8 kov_B0TABLE[16] = { 2, 0, 1, 4, 3 }; // Maps char portraits to tables
-
-static UINT32 kov_slots[16];
-static UINT16 kov_internal_slot;
-static UINT16 kov_key;
-static UINT32 kov_response;
-static UINT16 kov_value;
-
-static UINT16 kov_c0_value;
-static UINT16 kov_cb_value;
-static UINT16 kov_fe_value;
-
-WRITE16_HANDLER( kov_asic_sim_w )
-{
-	switch ((offset*2) & 0x06)
-	{
-		case 0: kov_value = data; return;
-
-		case 2:
-		{
-			if ((data >> 8) == 0xff) kov_key = 0xffff;
-
-			kov_value ^= kov_key;
-
-		//  bprintf (PRINT_NORMAL, _T("ASIC27 command: %2.2x data: %4.4x\n"), (data ^ kov_key) & 0xff, kov_value);
-
-			switch ((data ^ kov_key) & 0xff)
-			{
-				case 0x67: // unknown or status check?
-				case 0x8e:
-				case 0xa3:
-				case 0x33: // kovsgqyz (a3)
-				case 0x3a: // kovplus
-				case 0xc5: // kovplus
-					kov_response = 0x880000;
-				break;
-
-				case 0x99: // Reset
-					kov_response = 0x880000;
-					kov_key = 0;
-				break;
-
-				case 0x9d: // Sprite palette offset
-					kov_response = 0xa00000 + ((kov_value & 0x1f) * 0x40);
-				break;
-
-				case 0xb0: // Read from data table
-					kov_response = kov_B0TABLE[kov_value & 0x0f];
-				break;
-
-				case 0xb4: // Copy slot 'a' to slot 'b'
-				case 0xb7: // kovsgqyz (b4)
-				{
-					kov_response = 0x880000;
-
-					if (kov_value == 0x0102) kov_value = 0x0100; // why?
-
-					kov_slots[(kov_value >> 8) & 0x0f] = kov_slots[(kov_value >> 0) & 0x0f];
-				}
-				break;
-
-				case 0xba: // Read from data table
-					kov_response = kov_BATABLE[kov_value & 0x3f];
-				break;
-
-				case 0xc0: // Text layer 'x' select
-					kov_response = 0x880000;
-					kov_c0_value = kov_value;
-				break;
-
-				case 0xc3: // Text layer offset
-					kov_response = 0x904000 + ((kov_c0_value + (kov_value * 0x40)) * 4);
-				break;
-
-				case 0xcb: // Background layer 'x' select
-					kov_response = 0x880000;
-					kov_cb_value = kov_value;
-				break;
-
-				case 0xcc: // Background layer offset
-					if (kov_value & 0x400) kov_value = -(0x400 - (kov_value & 0x3ff));
-					kov_response = 0x900000 + ((kov_cb_value + (kov_value * 0x40)) * 4);
-				break;
-
-				case 0xd0: // Text palette offset
-				case 0xcd: // kovsgqyz (d0)
-					kov_response = 0xa01000 + (kov_value * 0x20);
-				break;
-
-				case 0xd6: // Copy slot to slot 0
-					kov_response = 0x880000;
-					kov_slots[0] = kov_slots[kov_value & 0x0f];
-				break;
-
-				case 0xdc: // Background palette offset
-				case 0x11: // kovsgqyz (dc)
-					kov_response = 0xa00800 + (kov_value * 0x40);
-				break;
-
-				case 0xe0: // Sprite palette offset
-				case 0x9e: // kovsgqyz (e0)
-					kov_response = 0xa00000 + ((kov_value & 0x1f) * 0x40);
-				break;
-
-				case 0xe5: // Write slot (low)
-				{
-					kov_response = 0x880000;
-
-					INT32 sel = (kov_internal_slot >> 12) & 0x0f;
-					kov_slots[sel] = (kov_slots[sel] & 0x00ff0000) | ((kov_value & 0xffff) <<  0);
-				}
-				break;
-
-				case 0xe7: // Write slot (and slot select) (high)
-				{
-					kov_response = 0x880000;
-					kov_internal_slot = kov_value;
-
-					INT32 sel = (kov_internal_slot >> 12) & 0x0f;
-					kov_slots[sel] = (kov_slots[sel] & 0x0000ffff) | ((kov_value & 0x00ff) << 16);
-				}
-				break;
-
-				case 0xf0: // Some sort of status read?
-					kov_response = 0x00c000;
-				break;
-
-				case 0xf8: // Read slot
-				case 0xab: // kovsgqyz (f8)
-					kov_response = kov_slots[kov_value & 0x0f] & 0x00ffffff;
-				break;
-
-				case 0xfc: // Adjust damage level to char experience level
-					kov_response = (kov_value * kov_fe_value) >> 6;
-				break;
-
-				case 0xfe: // Damage level adjust
-					kov_response = 0x880000;
-					kov_fe_value = kov_value;
-				break;
-
-				default:
-					kov_response = 0x880000;
-		//          bprintf (PRINT_NORMAL, _T("Unknown ASIC27 command: %2.2x data: %4.4x\n"), (data ^ kov_key) & 0xff, kov_value);
-				break;
-			}
-
-			kov_key = (kov_key + 0x0100) & 0xff00;
-			if (kov_key == 0xff00) kov_key = 0x0100;
-			kov_key |= kov_key >> 8;
-		}
-		return;
-
-		case 4: return;
-	}
-}
+	pgm_state *state = machine.driver_data<pgm_state>();
+	pgm_basic_init(machine);
 
-READ16_HANDLER( kov_asic_sim_r )
-{
-	switch ((offset*2) & 0x02)
-	{
-		case 0: return (kov_response >>  0) ^ kov_key;
-		case 2: return (kov_response >> 16) ^ kov_key;
-	}
+	machine.device("maincpu")->memory().space(AS_PROGRAM)->install_legacy_readwrite_handler(0xC0400e, 0xC0400f, FUNC(pgm_asic3_r), FUNC(pgm_asic3_w));
+	machine.device("maincpu")->memory().space(AS_PROGRAM)->install_legacy_write_handler(0xC04000, 0xC04001, FUNC(pgm_asic3_reg_w));
 
-	return 0;
+	state->m_asic3_reg = 0;
+	state->m_asic3_latch[0] = 0;
+	state->m_asic3_latch[1] = 0;
+	state->m_asic3_latch[2] = 0;
+	state->m_asic3_x = 0;
+	state->m_asic3_y = 0;
+	state->m_asic3_z = 0;
+	state->m_asic3_h1 = 0;
+	state->m_asic3_h2 = 0;
+	state->m_asic3_hold = 0;
+
+	state->save_item(NAME(state->m_asic3_reg));
+	state->save_item(NAME(state->m_asic3_latch));
+	state->save_item(NAME(state->m_asic3_x));
+	state->save_item(NAME(state->m_asic3_y));
+	state->save_item(NAME(state->m_asic3_z));
+	state->save_item(NAME(state->m_asic3_h1));
+	state->save_item(NAME(state->m_asic3_h2));
+	state->save_item(NAME(state->m_asic3_hold));
 }
 
-MACHINE_RESET( kov )
-{
-	kov_internal_slot = 0;
-	kov_key = 0;
-	kov_response = 0;
-	kov_value = 0;
-
-	kov_c0_value = 0;
-	kov_cb_value = 0;
-	kov_fe_value = 0;
 
-	cputag_set_input_line(machine, "soundcpu", INPUT_LINE_HALT, ASSERT_LINE);
-}
+INPUT_PORTS_START( orlegend )
+	PORT_INCLUDE ( pgm )
+
+	PORT_MODIFY("Region")
+	PORT_DIPNAME( 0x0003, 0x0000, DEF_STR( Region ) )
+	PORT_CONFSETTING(      0x0000, DEF_STR( World ) )
+    PORT_CONFSETTING(      0x0001, "World (duplicate)" ) // again?
+	PORT_CONFSETTING(      0x0002, DEF_STR( Korea ) )
+	PORT_CONFSETTING(      0x0003, DEF_STR( China ) )
+INPUT_PORTS_END
+
+INPUT_PORTS_START( orld105k )
+	PORT_INCLUDE ( pgm )
+
+	PORT_MODIFY("Region")
+	PORT_DIPNAME( 0x0003, 0x0002, DEF_STR( Unused ) )	// region switch
+	PORT_DIPSETTING(      0x0002, DEF_STR( Off ) )		// if enabled, game gives
+	PORT_DIPSETTING(      0x0000, DEF_STR( On ) )		// "incorrect version" error
+INPUT_PORTS_END
 
-void install_protection_asic_sim_kov(running_machine &machine)
-{
-	machine.device("maincpu")->memory().space(AS_PROGRAM)->install_legacy_readwrite_handler(0x500000, 0x500003, FUNC(kov_asic_sim_r), FUNC(kov_asic_sim_w));
-	machine.device("maincpu")->memory().space(AS_PROGRAM)->install_legacy_read_handler(0x4f0000, 0x4fffff, FUNC(sango_protram_r));
-}
diff -Nru src-old/mame/machine/pgmprot1.c src/mame/machine/pgmprot1.c
--- src-old/mame/machine/pgmprot1.c	1970-01-01 01:00:00.000000000 +0100
+++ src/mame/machine/pgmprot1.c	2012-03-25 15:56:49.000000000 +0200
@@ -0,0 +1,1624 @@
+/***********************************************************************
+ PGM IGA027A (55857E type) ARM protection simulations & emulation
+
+ these are simulations of the 'kov' type ARM device
+ used by
+
+ Knights of Valor (kov) + bootlegs
+ Knights of Valor Plus (kovplus)
+ Puzzli 2 Super (puzzli2)
+ Photo Y2k2 (py2k2)
+ Puzzle Star (puzlstar)
+
+ the following appear to use this scheme but are post 2001 so
+ might use a newer revision of the chip with EO area
+
+ DoDonPachi Dai-ou-jou (ddpdoj)
+ Espgaluda (espgal)
+ Ketsui (ket)
+ Oriental Legend Super Plus (oldsplus)
+ Knights of Valor Super Plus (kovshp) + bootlegs
+
+ the following also use the 55857E type and we emulate the
+ internal ROM
+
+ Photo Y2k (photoy2k)
+ Knights of Valor Superheros (kovsh) + bootlegs
+
+ ----
+
+ Many of the simulations are preliminary.  If functions to access
+ internal tables exist it is sometimes possible to extract the ROM
+ via these functions if the buffers are unchecked, however many
+ games have no table accesses.
+
+ ----
+
+ The basic protection communication is the same between all games
+ however the commands differ
+
+ None of these games have an external ARM rom, although it appears
+ the program code does check for the possibility of one existing.
+
+ 68k code is encrypted on these, decryption table is uploaded to
+ ARM space.
+
+ Game Region is supplied by internal ARM rom.
+
+
+ ***********************************************************************/
+
+#include "emu.h"
+#include "includes/pgm.h"
+
+/**************************** EMULATION *******************************/
+/* used by photoy2k, kovsh */
+
+static READ32_HANDLER( kovsh_arm7_protlatch_r )
+{
+	pgm_state *state = space->machine().driver_data<pgm_state>();
+
+	space->machine().scheduler().synchronize(); // force resync
+
+	return (state->m_kovsh_highlatch_68k_w << 16) | (state->m_kovsh_lowlatch_68k_w);
+}
+
+static WRITE32_HANDLER( kovsh_arm7_protlatch_w )
+{
+	pgm_state *state = space->machine().driver_data<pgm_state>();
+
+	space->machine().scheduler().synchronize(); // force resync
+
+	if (ACCESSING_BITS_16_31)
+	{
+		state->m_kovsh_highlatch_arm_w = data >> 16;
+		state->m_kovsh_highlatch_68k_w = 0;
+	}
+	if (ACCESSING_BITS_0_15)
+	{
+		state->m_kovsh_lowlatch_arm_w = data;
+		state->m_kovsh_lowlatch_68k_w = 0;
+	}
+}
+
+static READ16_HANDLER( kovsh_68k_protlatch_r )
+{
+	pgm_state *state = space->machine().driver_data<pgm_state>();
+
+	space->machine().scheduler().synchronize(); // force resync
+
+	switch (offset)
+	{
+		case 1: return state->m_kovsh_highlatch_arm_w;
+		case 0: return state->m_kovsh_lowlatch_arm_w;
+	}
+	return -1;
+}
+
+static WRITE16_HANDLER( kovsh_68k_protlatch_w )
+{
+	pgm_state *state = space->machine().driver_data<pgm_state>();
+
+	space->machine().scheduler().synchronize(); // force resync
+
+	switch (offset)
+	{
+		case 1:
+			state->m_kovsh_highlatch_68k_w = data;
+			break;
+
+		case 0:
+			state->m_kovsh_lowlatch_68k_w = data;
+			break;
+	}
+}
+
+static READ16_HANDLER( kovsh_arm7_ram_r )
+{
+	pgm_state *state = space->machine().driver_data<pgm_state>();
+	UINT16 *share16 = (UINT16 *)state->m_arm7_shareram;
+
+	if (PGMARM7LOGERROR)
+		logerror("M68K: ARM7 Shared RAM Read: %04x = %04x (%08x) (%06x)\n", BYTE_XOR_LE(offset), share16[BYTE_XOR_LE(offset)], mem_mask, cpu_get_pc(&space->device()));
+	return share16[BYTE_XOR_LE(offset << 1)];
+}
+
+static WRITE16_HANDLER( kovsh_arm7_ram_w )
+{
+	pgm_state *state = space->machine().driver_data<pgm_state>();
+	UINT16 *share16 = (UINT16 *)state->m_arm7_shareram;
+
+	if (PGMARM7LOGERROR)
+		logerror("M68K: ARM7 Shared RAM Write: %04x = %04x (%04x) (%06x)\n", BYTE_XOR_LE(offset), data, mem_mask, cpu_get_pc(&space->device()));
+	COMBINE_DATA(&share16[BYTE_XOR_LE(offset << 1)]);
+}
+
+
+
+
+static READ32_HANDLER( kovsh_arm7_unk_r )
+{
+	pgm_state *state = space->machine().driver_data<pgm_state>();
+	return state->m_kovsh_counter++;
+}
+
+static READ32_HANDLER( kovsh_exrom_r )
+{
+	return 0x00000000;
+}
+
+static READ32_HANDLER( arm7_shareram_r )
+{
+	pgm_state *state = space->machine().driver_data<pgm_state>();
+
+	if (PGMARM7LOGERROR)
+		logerror("ARM7: ARM7 Shared RAM Read: %04x = %08x (%08x) (%06x)\n", offset << 2, state->m_arm7_shareram[offset], mem_mask, cpu_get_pc(&space->device()));
+	return state->m_arm7_shareram[offset];
+}
+
+static WRITE32_HANDLER( arm7_shareram_w )
+{
+	pgm_state *state = space->machine().driver_data<pgm_state>();
+
+	if (PGMARM7LOGERROR)
+		logerror("ARM7: ARM7 Shared RAM Write: %04x = %08x (%08x) (%06x)\n", offset << 2, data, mem_mask, cpu_get_pc(&space->device()));
+	COMBINE_DATA(&state->m_arm7_shareram[offset]);
+}
+
+/* 55857E? */
+/* Knights of Valor, Photo Y2k */
+/*  no execute only space? */
+static ADDRESS_MAP_START( kov_map, AS_PROGRAM, 16)
+	AM_IMPORT_FROM(pgm_mem)
+	AM_RANGE(0x100000, 0x4effff) AM_ROMBANK("bank1") /* Game ROM */
+	AM_RANGE(0x4f0000, 0x4f003f) AM_READWRITE(kovsh_arm7_ram_r, kovsh_arm7_ram_w) /* ARM7 Shared RAM */
+	AM_RANGE(0x500000, 0x500005) AM_READWRITE(kovsh_68k_protlatch_r, kovsh_68k_protlatch_w) /* ARM7 Latch */
+ADDRESS_MAP_END
+
+static ADDRESS_MAP_START( 55857E_arm7_map, AS_PROGRAM, 32 )
+	AM_RANGE(0x00000000, 0x00003fff) AM_ROM
+	AM_RANGE(0x08100000, 0x083fffff) AM_READ(kovsh_exrom_r) // unpopulated, returns 0 to keep checksum happy
+	AM_RANGE(0x10000000, 0x100003ff) AM_RAM // internal ram for asic
+	AM_RANGE(0x40000000, 0x40000003) AM_READWRITE(kovsh_arm7_protlatch_r, kovsh_arm7_protlatch_w)
+	AM_RANGE(0x40000008, 0x4000000b) AM_WRITENOP // ?
+	AM_RANGE(0x4000000c, 0x4000000f) AM_READ(kovsh_arm7_unk_r)
+	AM_RANGE(0x50800000, 0x5080003f) AM_READWRITE(arm7_shareram_r, arm7_shareram_w) AM_BASE_MEMBER(pgm_state, m_arm7_shareram)
+	AM_RANGE(0x50000000, 0x500003ff) AM_RAM // uploads xor table to decrypt 68k rom here
+ADDRESS_MAP_END
+
+
+MACHINE_CONFIG_DERIVED( kov, pgm )
+	MCFG_CPU_MODIFY("maincpu")
+	MCFG_CPU_PROGRAM_MAP(kov_map)
+
+	/* protection CPU */
+	MCFG_CPU_ADD("prot", ARM7, 20000000)	// 55857E?
+	MCFG_CPU_PROGRAM_MAP(55857E_arm7_map)
+MACHINE_CONFIG_END
+
+/**************************** SIMULATIONS *****************************/
+
+static ADDRESS_MAP_START( kov_sim_map, AS_PROGRAM, 16)
+	AM_IMPORT_FROM(pgm_mem)
+	AM_RANGE(0x100000, 0x4effff) AM_ROMBANK("bank1") /* Game ROM */
+ADDRESS_MAP_END
+
+static ADDRESS_MAP_START( cavepgm_mem, AS_PROGRAM, 16)
+	AM_IMPORT_FROM(pgm_base_mem)
+	AM_RANGE(0x000000, 0x3fffff) AM_ROM
+	/* protection devices installed (simulated) later */
+ADDRESS_MAP_END
+
+
+static MACHINE_START( cavepgm )
+{
+	MACHINE_START_CALL(pgm);
+
+	pgm_kovarmsim_state *state = machine.driver_data<pgm_kovarmsim_state>();
+
+	state->save_item(NAME(state->m_value0));
+	state->save_item(NAME(state->m_value1));
+	state->save_item(NAME(state->m_valuekey));
+	state->save_item(NAME(state->m_valueresponse));
+	state->save_item(NAME(state->m_ddp3internal_slot));
+	state->save_item(NAME(state->m_ddp3slots));
+}
+
+MACHINE_CONFIG_START( cavepgm, pgm_kovarmsim_state )
+
+	/* basic machine hardware */
+	MCFG_CPU_ADD("maincpu", M68000, 20000000)
+	MCFG_CPU_PROGRAM_MAP(cavepgm_mem)
+	MCFG_TIMER_ADD_SCANLINE("scantimer", pgm_interrupt, "screen", 0, 1)
+
+	MCFG_CPU_ADD("soundcpu", Z80, 33868800/4)
+	MCFG_CPU_PROGRAM_MAP(pgm_z80_mem)
+	MCFG_CPU_IO_MAP(pgm_z80_io)
+
+	MCFG_MACHINE_START( cavepgm )
+	MCFG_MACHINE_RESET( pgm )
+	MCFG_NVRAM_ADD_0FILL("sram")
+
+	MCFG_V3021_ADD("rtc")
+
+	/* video hardware */
+	MCFG_SCREEN_ADD("screen", RASTER)
+	MCFG_SCREEN_REFRESH_RATE(59.17) // verified on pcb
+	MCFG_SCREEN_VBLANK_TIME(ATTOSECONDS_IN_USEC(0))
+	MCFG_SCREEN_SIZE(64*8, 64*8)
+	MCFG_SCREEN_VISIBLE_AREA(0*8, 56*8-1, 0*8, 28*8-1)
+	MCFG_SCREEN_UPDATE_STATIC(pgm)
+	MCFG_SCREEN_VBLANK_STATIC(pgm)
+
+	MCFG_GFXDECODE(pgm)
+	MCFG_PALETTE_LENGTH(0x1200/2)
+
+	MCFG_VIDEO_START(pgm)
+
+	/*sound hardware */
+	MCFG_SPEAKER_STANDARD_MONO("mono")
+    MCFG_ICS2115_ADD("ics", 0, pgm_sound_irq)
+	MCFG_SOUND_ROUTE(ALL_OUTPUTS, "mono", 5.0)
+MACHINE_CONFIG_END
+
+MACHINE_CONFIG_DERIVED( kov_simulated_arm, cavepgm )
+	MCFG_CPU_MODIFY("maincpu")
+	MCFG_CPU_PROGRAM_MAP(kov_sim_map)
+
+	/* protection CPU */
+	MCFG_CPU_ADD("prot", ARM7, 20000000)	// 55857E?
+	MCFG_CPU_PROGRAM_MAP(55857E_arm7_map)
+	MCFG_DEVICE_DISABLE()
+MACHINE_CONFIG_END
+
+void kovsh_latch_init( running_machine &machine )
+{
+	pgm_state *state = machine.driver_data<pgm_state>();
+
+	state->m_kovsh_highlatch_arm_w = 0;
+	state->m_kovsh_lowlatch_arm_w = 0;
+	state->m_kovsh_highlatch_68k_w = 0;
+	state->m_kovsh_lowlatch_68k_w = 0;
+	state->m_kovsh_counter = 1;
+
+	state->save_item(NAME(state->m_kovsh_highlatch_arm_w));
+	state->save_item(NAME(state->m_kovsh_lowlatch_arm_w));
+	state->save_item(NAME(state->m_kovsh_highlatch_68k_w));
+	state->save_item(NAME(state->m_kovsh_lowlatch_68k_w));
+	state->save_item(NAME(state->m_kovsh_counter));
+}
+
+static READ16_HANDLER( kovsh_fake_region_r )
+{
+	pgm_state *state = space->machine().driver_data<pgm_state>();
+	int regionhack = input_port_read(space->machine(), "RegionHack");
+	if (regionhack != 0xff) return regionhack;
+
+	offset = 0x4;
+	UINT16 *share16 = (UINT16 *)state->m_arm7_shareram;
+	return share16[BYTE_XOR_LE(offset << 1)];
+}
+
+DRIVER_INIT( photoy2k )
+{
+	pgm_basic_init(machine);
+	pgm_photoy2k_decrypt(machine);
+	kovsh_latch_init(machine);
+	/* we only have a china internal ROM dumped for now.. allow region to be changed for debugging (to ensure all alt titles / regions can be seen) */
+	machine.device("maincpu")->memory().space(AS_PROGRAM)->install_legacy_read_handler(0x4f0008, 0x4f0009, FUNC(kovsh_fake_region_r));
+}
+
+DRIVER_INIT( kovsh )
+{
+	pgm_basic_init(machine);
+	pgm_kovsh_decrypt(machine);
+	kovsh_latch_init(machine);
+	/* we only have a china internal ROM dumped for now.. allow region to be changed for debugging (to ensure all alt titles / regions can be seen) */
+	machine.device("maincpu")->memory().space(AS_PROGRAM)->install_legacy_read_handler(0x4f0008, 0x4f0009, FUNC(kovsh_fake_region_r));
+}
+
+DRIVER_INIT( kovshp )
+{
+	pgm_basic_init(machine);
+	pgm_kovshp_decrypt(machine);
+	kovsh_latch_init(machine);
+	/* we only have a china internal ROM dumped for now.. allow region to be changed for debugging (to ensure all alt titles / regions can be seen) */
+	machine.device("maincpu")->memory().space(AS_PROGRAM)->install_legacy_read_handler(0x4f0008, 0x4f0009, FUNC(kovsh_fake_region_r));
+}
+
+/* bootleg inits */
+
+static void pgm_decode_kovlsqh2_tiles( running_machine &machine )
+{
+	int i, j;
+	UINT16 *src = (UINT16 *)(machine.region("tiles")->base() + 0x180000);
+	UINT16 *dst = auto_alloc_array(machine, UINT16, 0x800000);
+
+	for (i = 0; i < 0x800000 / 2; i++)
+	{
+		j = BITSWAP24(i, 23, 22, 9, 8, 21, 18, 0, 1, 2, 3, 16, 15, 14, 13, 12, 11, 10, 19, 20, 17, 7, 6, 5, 4);
+
+		dst[j] = BITSWAP16(src[i], 1, 14, 8, 7, 0, 15, 6, 9, 13, 2, 5, 10, 12, 3, 4, 11);
+	}
+
+	memcpy( src, dst, 0x800000 );
+
+	auto_free( machine, dst );
+}
+
+static void pgm_decode_kovlsqh2_sprites( running_machine &machine, UINT8 *src )
+{
+	int i, j;
+	UINT8 *dst = auto_alloc_array(machine, UINT8, 0x800000);
+
+	for (i = 0; i < 0x800000; i++)
+	{
+		j = BITSWAP24(i, 23, 10, 9, 22, 19, 18, 20, 21, 17, 16, 15, 14, 13, 12, 11, 8, 7, 6, 5, 4, 3, 2, 1, 0);
+
+		dst[j] = src[i];
+	}
+
+	memcpy( src, dst, 0x800000 );
+
+	auto_free( machine, dst );
+}
+
+static void pgm_decode_kovlsqh2_samples( running_machine &machine )
+{
+	int i;
+	UINT8 *src = (UINT8 *)(machine.region("ics")->base() + 0x400000);
+
+	for (i = 0; i < 0x400000; i+=2) {
+		src[i + 0x000001] = src[i + 0x400001];
+	}
+
+	memcpy( src + 0x400000, src, 0x400000 );
+}
+
+static void pgm_decode_kovqhsgs_program( running_machine &machine )
+{
+	int i;
+	UINT16 *src = (UINT16 *)(machine.region("maincpu")->base() + 0x100000);
+	UINT16 *dst = auto_alloc_array(machine, UINT16, 0x400000);
+
+	for (i = 0; i < 0x400000 / 2; i++)
+	{
+		int j = BITSWAP24(i, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 6, 7, 5, 4, 3, 2, 1, 0);
+
+		dst[j] = BITSWAP16(src[i], 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 4, 5, 3, 2, 1, 0);
+	}
+
+	memcpy( src, dst, 0x400000 );
+
+	auto_free( machine, dst );
+}
+
+static void pgm_decode_kovqhsgs2_program( running_machine &machine )
+{
+	int i;
+	UINT16 *src = (UINT16 *)(machine.region("maincpu")->base() + 0x100000);
+	UINT16 *dst = auto_alloc_array(machine, UINT16, 0x400000);
+
+	for (i = 0; i < 0x400000 / 2; i++)
+	{
+		int j = BITSWAP24(i, 23, 22, 21, 20, 19, 16, 15, 14, 13, 12, 11, 10, 9, 8, 0, 1, 2, 3, 4, 5, 6, 18, 17, 7);
+
+		dst[j] = src[i];
+	}
+
+	memcpy( src, dst, 0x400000 );
+
+	auto_free( machine, dst );
+}
+
+
+DRIVER_INIT( kovlsqh2 )
+{
+	pgm_decode_kovqhsgs2_program(machine);
+	pgm_decode_kovlsqh2_tiles(machine);
+
+	pgm_decode_kovlsqh2_sprites(machine, machine.region("sprcol")->base() + 0x0000000);
+	pgm_decode_kovlsqh2_sprites(machine, machine.region("sprcol")->base() + 0x0800000);
+	pgm_decode_kovlsqh2_sprites(machine, machine.region("sprcol")->base() + 0x1000000);
+	pgm_decode_kovlsqh2_sprites(machine, machine.region("sprcol")->base() + 0x1800000);
+	pgm_decode_kovlsqh2_sprites(machine, machine.region("sprcol")->base() + 0x2000000);
+	pgm_decode_kovlsqh2_sprites(machine, machine.region("sprcol")->base() + 0x2800000);
+	pgm_decode_kovlsqh2_sprites(machine, machine.region("sprmask")->base() + 0x0000000);
+	pgm_decode_kovlsqh2_sprites(machine, machine.region("sprmask")->base() + 0x0800000);
+
+	pgm_decode_kovlsqh2_samples(machine);
+	pgm_basic_init(machine);
+	kovsh_latch_init(machine);
+	/* we only have a china internal ROM dumped for now.. allow region to be changed for debugging (to ensure all alt titles / regions can be seen) */
+	machine.device("maincpu")->memory().space(AS_PROGRAM)->install_legacy_read_handler(0x4f0008, 0x4f0009, FUNC(kovsh_fake_region_r));
+}
+
+DRIVER_INIT( kovqhsgs )
+{
+	pgm_decode_kovqhsgs_program(machine);
+	pgm_decode_kovlsqh2_tiles(machine);
+
+	pgm_decode_kovlsqh2_sprites(machine, machine.region("sprcol")->base() + 0x0000000);
+	pgm_decode_kovlsqh2_sprites(machine, machine.region("sprcol")->base() + 0x0800000);
+	pgm_decode_kovlsqh2_sprites(machine, machine.region("sprcol")->base() + 0x1000000);
+	pgm_decode_kovlsqh2_sprites(machine, machine.region("sprcol")->base() + 0x1800000);
+	pgm_decode_kovlsqh2_sprites(machine, machine.region("sprcol")->base() + 0x2000000);
+	pgm_decode_kovlsqh2_sprites(machine, machine.region("sprcol")->base() + 0x2800000);
+	pgm_decode_kovlsqh2_sprites(machine, machine.region("sprmask")->base() + 0x0000000);
+	pgm_decode_kovlsqh2_sprites(machine, machine.region("sprmask")->base() + 0x0800000);
+
+	pgm_decode_kovlsqh2_samples(machine);
+	pgm_basic_init(machine);
+	kovsh_latch_init(machine);
+	/* we only have a china internal ROM dumped for now.. allow region to be changed for debugging (to ensure all alt titles / regions can be seen) */
+	machine.device("maincpu")->memory().space(AS_PROGRAM)->install_legacy_read_handler(0x4f0008, 0x4f0009, FUNC(kovsh_fake_region_r));
+}
+
+/*
+ in Ketsui (ket) @ 000A719C (move.w)
+
+ if you change D0 to 0x12
+ the game will runs to "Asic27 Test" mode
+
+ bp A71A0,1,{d0=0x12;g}
+*/
+
+static READ16_HANDLER( ddp3_asic_r )
+{
+	pgm_kovarmsim_state *state = space->machine().driver_data<pgm_kovarmsim_state>();
+
+	if (offset == 0)
+	{
+		UINT16 d = state->m_valueresponse & 0xffff;
+		UINT16 realkey = state->m_valuekey >> 8;
+		realkey |= state->m_valuekey;
+		d ^= realkey;
+
+		return d;
+
+	}
+	else if (offset == 1)
+	{
+		UINT16 d = state->m_valueresponse >> 16;
+		UINT16 realkey = state->m_valuekey >> 8;
+		realkey |= state->m_valuekey;
+		d ^= realkey;
+		return d;
+
+	}
+	return 0xffff;
+}
+
+/* working */
+void command_handler_ddp3(pgm_kovarmsim_state *state, int pc)
+{
+	switch (state->m_ddp3lastcommand)
+	{
+		default:
+			printf("%06x command %02x | %04x\n", pc, state->m_ddp3lastcommand, state->m_value0);
+			state->m_valueresponse = 0x880000;
+			break;
+
+		case 0x40:
+			state->m_valueresponse = 0x880000;
+		    state->m_ddp3slots[(state->m_value0>>10)&0x1F]=
+				(state->m_ddp3slots[(state->m_value0>>5)&0x1F]+
+				 state->m_ddp3slots[(state->m_value0>>0)&0x1F])&0xffffff;
+			break;
+
+		case 0x67: // set high bits
+	//      printf("%06x command %02x | %04x\n", cpu_get_pc(&space->device()), state->m_ddp3lastcommand, state->m_value0);
+			state->m_valueresponse = 0x880000;
+			state->m_ddp3internal_slot = (state->m_value0 & 0xff00)>>8;
+			state->m_ddp3slots[state->m_ddp3internal_slot] = (state->m_value0 & 0x00ff) << 16;
+			break;
+
+		case 0xe5: // set low bits for operation?
+		//  printf("%06x command %02x | %04x\n", cpu_get_pc(&space->device()), state->m_ddp3lastcommand, state->m_value0);
+			state->m_valueresponse = 0x880000;
+			state->m_ddp3slots[state->m_ddp3internal_slot] |= (state->m_value0 & 0xffff);
+			break;
+
+
+		case 0x8e: // read back result of operations
+	//      printf("%06x command %02x | %04x\n", cpu_get_pc(&space->device()), state->m_ddp3lastcommand, state->m_value0);
+			state->m_valueresponse = state->m_ddp3slots[state->m_value0&0xff];
+			break;
+
+
+		case 0x99: // reset?
+			state->m_valuekey = 0x100;
+			state->m_valueresponse = 0x00880000;
+			break;
+
+	}
+}
+
+/* preliminary */
+static INT32 puzzli_54_trigger = 0;
+void command_handler_puzzli2(pgm_kovarmsim_state *state, int pc)
+{
+	printf("%08x: %02x %04x\n",pc, state->m_ddp3lastcommand, state->m_value0);
+
+	switch (state->m_ddp3lastcommand)
+	{
+		case 0x13: // ASIC status?
+			state->m_valueresponse = 0x74<<16; // 2d or 74! (based on?)
+		break;
+
+		case 0x31:
+		{
+			// how is this selected? command 54?
+
+			// just a wild guess
+			if (puzzli_54_trigger) {
+				// pc == 1387de
+				state->m_valueresponse = 0x63<<16; // ?
+			} else {
+				// pc == 14cf58
+				state->m_valueresponse = 0xd2<<16;
+			}
+
+			puzzli_54_trigger = 0;
+		}
+		break;
+
+		case 0x38: // Reset
+			state->m_valueresponse = 0x78<<16;
+			state->m_valuekey = 0x100;
+			puzzli_54_trigger = 0;
+		break;
+
+		case 0x41: // ASIC status?
+			state->m_valueresponse = 0x74<<16;
+		break;
+
+		case 0x47: // ASIC status?
+			state->m_valueresponse = 0x74<<16;
+		break;
+
+		case 0x52: // ASIC status?
+		{
+			// how is this selected?
+
+			//if (state->m_value0 == 6) {
+				state->m_valueresponse = (0x74<<16)|1; // |1?
+			//} else {
+			//  state->m_valueresponse = 0x74<<16;
+			//}
+		}
+		break;
+
+		case 0x54: // ??
+			puzzli_54_trigger = 1;
+			state->m_valueresponse = 0x36<<16;
+		break;
+
+		case 0x61: // ??
+			state->m_valueresponse = 0x36<<16;
+		break;
+
+		case 0x63: // used as a read address by the 68k code (related to previous uploaded values like cave?) should point at a table of ~0x80 in size? seems to use values as further pointers?
+			state->m_valueresponse = 0x00600000;
+		break;
+
+		case 0x67: // used as a read address by the 68k code (related to previous uploaded values like cave?) directly reads ~0xDBE from the address..
+			state->m_valueresponse = 0x00400000;
+		break;
+
+		default:
+			state->m_valueresponse = 0x74<<16;
+		break;
+	}
+}
+
+/* preliminary */
+void command_handler_py2k2(pgm_kovarmsim_state *state, int pc)
+{
+	switch (state->m_ddp3lastcommand)
+	{
+		default:
+			printf("%06x command %02x | %04x\n", pc, state->m_ddp3lastcommand, state->m_value0);
+			state->m_valueresponse = 0x880000;
+			break;
+
+		case 0xc0:
+			printf("%06x command %02x | %04x\n", pc, state->m_ddp3lastcommand, state->m_value0);
+			state->m_valueresponse = 0x880000;
+			break;
+
+		case 0x99: // reset?
+			state->m_valuekey = 0x100;
+			state->m_valueresponse = 0x00880000;
+			break;
+	}
+}
+
+/* preliminary */
+
+
+static const int pstar_ba[0x1E]={
+	0x02,0x00,0x00,0x01,0x00,0x03,0x00,0x00, //0
+	0x02,0x00,0x06,0x00,0x22,0x04,0x00,0x03, //8
+	0x00,0x00,0x06,0x00,0x20,0x07,0x00,0x03, //10
+	0x00,0x21,0x01,0x00,0x00,0x63
+};
+
+static const int pstar_b0[0x10]={
+	0x09,0x0A,0x0B,0x00,0x01,0x02,0x03,0x04,
+	0x05,0x06,0x07,0x08,0x00,0x00,0x00,0x00
+};
+
+static const int pstar_ae[0x10]={
+	0x5D,0x86,0x8C ,0x8B,0xE0,0x8B,0x62,0xAF,
+	0xB6,0xAF,0x10A,0xAF,0x00,0x00,0x00,0x00
+};
+
+static const int pstar_a0[0x10]={
+	0x02,0x03,0x04,0x05,0x06,0x01,0x0A,0x0B,
+	0x0C,0x0D,0x0E,0x09,0x00,0x00,0x00,0x00,
+};
+
+static const int pstar_9d[0x10]={
+	0x05,0x03,0x00,0x00,0x00,0x00,0x00,0x00,
+	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
+};
+
+static const int pstar_90[0x10]={
+	0x0C,0x10,0x0E,0x0C,0x00,0x00,0x00,0x00,
+	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
+};
+static const int pstar_8c[0x23]={
+	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
+	0x00,0x00,0x00,0x00,0x00,0x01,0x01,0x01,
+	0x01,0x01,0x01,0x01,0x02,0x02,0x02,0x02,
+	0x02,0x02,0x03,0x03,0x03,0x04,0x04,0x04,
+	0x03,0x03,0x03
+};
+
+static const int pstar_80[0x1a3]={
+	0x03,0x03,0x04,0x04,0x04,0x04,0x05,0x05,
+	0x05,0x05,0x06,0x06,0x03,0x03,0x04,0x04,
+	0x05,0x05,0x05,0x05,0x06,0x06,0x07,0x07,
+	0x03,0x03,0x04,0x04,0x05,0x05,0x05,0x05,
+	0x06,0x06,0x07,0x07,0x06,0x06,0x06,0x06,
+	0x06,0x06,0x06,0x07,0x07,0x07,0x07,0x07,
+	0x06,0x06,0x06,0x06,0x06,0x06,0x07,0x07,
+	0x07,0x07,0x08,0x08,0x05,0x05,0x05,0x05,
+	0x05,0x05,0x05,0x06,0x06,0x06,0x07,0x07,
+	0x06,0x06,0x06,0x07,0x07,0x07,0x08,0x08,
+	0x09,0x09,0x09,0x09,0x07,0x07,0x07,0x07,
+	0x07,0x08,0x08,0x08,0x08,0x09,0x09,0x09,
+	0x06,0x06,0x07,0x07,0x07,0x08,0x08,0x08,
+	0x08,0x08,0x09,0x09,0x05,0x05,0x06,0x06,
+	0x06,0x07,0x07,0x08,0x08,0x08,0x08,0x09,
+	0x07,0x07,0x07,0x07,0x07,0x08,0x08,0x08,
+	0x08,0x09,0x09,0x09,0x06,0x06,0x07,0x03,
+	0x07,0x06,0x07,0x07,0x08,0x07,0x05,0x04,
+	0x03,0x03,0x04,0x04,0x05,0x05,0x06,0x06,
+	0x06,0x06,0x06,0x06,0x03,0x04,0x04,0x04,
+	0x04,0x05,0x05,0x06,0x06,0x06,0x06,0x07,
+	0x04,0x04,0x05,0x05,0x06,0x06,0x06,0x06,
+	0x06,0x07,0x07,0x08,0x05,0x05,0x06,0x07,
+	0x07,0x08,0x08,0x08,0x08,0x08,0x08,0x08,
+	0x05,0x05,0x05,0x07,0x07,0x07,0x07,0x07,
+	0x07,0x08,0x08,0x08,0x08,0x08,0x09,0x09,
+	0x09,0x09,0x03,0x04,0x04,0x05,0x05,0x05,
+	0x06,0x06,0x07,0x07,0x07,0x07,0x08,0x08,
+	0x08,0x09,0x09,0x09,0x03,0x04,0x05,0x05,
+	0x04,0x03,0x04,0x04,0x04,0x05,0x05,0x04,
+	0x03,0x03,0x03,0x03,0x03,0x03,0x03,0x03,
+	0x03,0x03,0x03,0x04,0x04,0x04,0x04,0x04,
+	0x04,0x04,0x04,0x04,0x04,0x03,0x03,0x03,
+	0x03,0x03,0x03,0x00,0x00,0x00,0x00,0x00,
+	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
+	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
+	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
+	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
+	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
+	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
+	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
+	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
+	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
+	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
+	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
+	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
+	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
+	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
+	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
+	0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,
+	0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,
+	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
+	0x00,0x00,0x00
+};
+
+void command_handler_pstars(pgm_kovarmsim_state *state, int pc)
+{
+	switch (state->m_ddp3lastcommand)
+	{
+		case 0x99:
+			state->m_valuekey = 0x100;
+			state->m_valueresponse = 0x880000;
+			break;
+
+		case 0xe0:
+			state->m_valueresponse = 0xa00000 + (state->m_value0 << 6);
+			break;
+
+		case 0xdc:
+			state->m_valueresponse = 0xa00800 + (state->m_value0 << 6);
+			break;
+
+		case 0xd0:
+			state->m_valueresponse = 0xa01000 + (state->m_value0 << 5);
+			break;
+
+		case 0xb1:
+			state->m_pstar_b1 = state->m_value0;
+			state->m_valueresponse = 0x890000;
+			break;
+
+		case 0xbf:
+			state->m_valueresponse = state->m_pstar_b1 * state->m_value0;
+			break;
+
+		case 0xc1: //TODO:TIMER  0,1,2,FIX TO 0 should be OK?
+			state->m_valueresponse = 0;
+			break;
+
+		case 0xce: //TODO:TIMER  0,1,2
+			state->m_pstar_ce = state->m_value0;
+			state->m_valueresponse=0x890000;
+			break;
+
+		case 0xcf: //TODO:TIMER  0,1,2
+			state->m_extra_ram[state->m_pstar_ce] = state->m_value0;
+			state->m_valueresponse = 0x890000;
+			break;
+
+		case 0xe7:
+			state->m_pstar_e7 = (state->m_value0 >> 12) & 0xf;
+			state->m_ddp3slots[state->m_pstar_e7] &= 0xffff;
+			state->m_ddp3slots[state->m_pstar_e7] |= (state->m_value0 & 0xff) << 16;
+			state->m_valueresponse = 0x890000;
+			break;
+
+		case 0xe5:
+			state->m_ddp3slots[state->m_pstar_e7] &= 0xff0000;
+			state->m_ddp3slots[state->m_pstar_e7] |= state->m_value0;
+			state->m_valueresponse = 0x890000;
+			break;
+
+		case 0xf8: //@73C
+			state->m_valueresponse = state->m_ddp3slots[state->m_value0 & 0xf] & 0xffffff;
+			break;
+
+		case 0xba:
+			state->m_valueresponse = pstar_ba[state->m_value0];
+			break;
+
+		case 0xb0:
+			state->m_valueresponse = pstar_b0[state->m_value0];
+			break;
+
+		case 0xae:
+			state->m_valueresponse = pstar_ae[state->m_value0];
+			break;
+
+		case 0xa0:
+			state->m_valueresponse = pstar_a0[state->m_value0];
+			break;
+
+		case 0x9d:
+			state->m_valueresponse = pstar_9d[state->m_value0];
+			break;
+
+		case 0x90:
+			state->m_valueresponse = pstar_90[state->m_value0];
+			break;
+
+		case 0x8c:
+			state->m_valueresponse = pstar_8c[state->m_value0];
+			break;
+
+		case 0x80:
+			state->m_valueresponse = pstar_80[state->m_value0];
+			break;
+
+		default:
+			state->m_valueresponse = 0x890000;
+			logerror("PSTARS PC(%06x) UNKNOWN %4X %4X\n", pc, state->m_value1, state->m_value0);
+	}
+}
+
+/* Old KOV and bootlegs sim ... really these should be read out... */
+
+static const UINT8 kov_BATABLE[0x40] = {
+	0x00,0x29,0x2c,0x35,0x3a,0x41,0x4a,0x4e,0x57,0x5e,0x77,0x79,0x7a,0x7b,0x7c,0x7d,
+	0x7e,0x7f,0x80,0x81,0x82,0x85,0x86,0x87,0x88,0x89,0x8a,0x8b,0x8c,0x8d,0x8e,0x90,
+	0x95,0x96,0x97,0x98,0x99,0x9a,0x9b,0x9c,0x9e,0xa3,0xd4,0xa9,0xaf,0xb5,0xbb,0xc1
+};
+
+static const UINT8 kov_B0TABLE[16] = { 2, 0, 1, 4, 3 }; // Maps char portraits to tables
+
+static UINT32 kov_slots[16];
+static UINT16 kov_internal_slot;
+static UINT16 kov_c0_value;
+static UINT16 kov_cb_value;
+static UINT16 kov_fe_value;
+
+void command_handler_kov(pgm_kovarmsim_state *state, int pc)
+{
+	switch (state->m_ddp3lastcommand)
+	{
+		case 0x67: // unknown or status check?
+		case 0x8e:
+		case 0xa3:
+		case 0x33: // kovsgqyz (a3)
+		case 0x3a: // kovplus
+		case 0xc5: // kovplus
+			state->m_valueresponse = 0x880000;
+		break;
+
+		case 0x99: // Reset
+			state->m_valueresponse = 0x880000;
+			state->m_valuekey = 0x100;
+		break;
+
+		case 0x9d: // Sprite palette offset
+			state->m_valueresponse = 0xa00000 + ((state->m_value0 & 0x1f) * 0x40);
+		break;
+
+		case 0xb0: // Read from data table
+			state->m_valueresponse = kov_B0TABLE[state->m_value0 & 0x0f];
+		break;
+
+		case 0xb4: // Copy slot 'a' to slot 'b'
+		case 0xb7: // kovsgqyz (b4)
+		{
+			state->m_valueresponse = 0x880000;
+
+			if (state->m_value0 == 0x0102) state->m_value0 = 0x0100; // why?
+
+			kov_slots[(state->m_value0 >> 8) & 0x0f] = kov_slots[(state->m_value0 >> 0) & 0x0f];
+		}
+		break;
+
+		case 0xba: // Read from data table
+			state->m_valueresponse = kov_BATABLE[state->m_value0 & 0x3f];
+		break;
+
+		case 0xc0: // Text layer 'x' select
+			state->m_valueresponse = 0x880000;
+			kov_c0_value = state->m_value0;
+		break;
+
+		case 0xc3: // Text layer offset
+			state->m_valueresponse = 0x904000 + ((kov_c0_value + (state->m_value0 * 0x40)) * 4);
+		break;
+
+		case 0xcb: // Background layer 'x' select
+			state->m_valueresponse = 0x880000;
+			kov_cb_value = state->m_value0;
+		break;
+
+		case 0xcc: // Background layer offset
+			if (state->m_value0 & 0x400) state->m_value0 = -(0x400 - (state->m_value0 & 0x3ff));
+			state->m_valueresponse = 0x900000 + ((kov_cb_value + (state->m_value0 * 0x40)) * 4);
+		break;
+
+		case 0xd0: // Text palette offset
+		case 0xcd: // kovsgqyz (d0)
+			state->m_valueresponse = 0xa01000 + (state->m_value0 * 0x20);
+		break;
+
+		case 0xd6: // Copy slot to slot 0
+			state->m_valueresponse = 0x880000;
+			kov_slots[0] = kov_slots[state->m_value0 & 0x0f];
+		break;
+
+		case 0xdc: // Background palette offset
+		case 0x11: // kovsgqyz (dc)
+			state->m_valueresponse = 0xa00800 + (state->m_value0 * 0x40);
+		break;
+
+		case 0xe0: // Sprite palette offset
+		case 0x9e: // kovsgqyz (e0)
+			state->m_valueresponse = 0xa00000 + ((state->m_value0 & 0x1f) * 0x40);
+		break;
+
+		case 0xe5: // Write slot (low)
+		{
+			state->m_valueresponse = 0x880000;
+
+			INT32 sel = (kov_internal_slot >> 12) & 0x0f;
+			kov_slots[sel] = (kov_slots[sel] & 0x00ff0000) | ((state->m_value0 & 0xffff) <<  0);
+		}
+		break;
+
+		case 0xe7: // Write slot (and slot select) (high)
+		{
+			state->m_valueresponse = 0x880000;
+			kov_internal_slot = state->m_value0;
+
+			INT32 sel = (kov_internal_slot >> 12) & 0x0f;
+			kov_slots[sel] = (kov_slots[sel] & 0x0000ffff) | ((state->m_value0 & 0x00ff) << 16);
+		}
+		break;
+
+		case 0xf0: // Some sort of status read?
+			state->m_valueresponse = 0x00c000;
+		break;
+
+		case 0xf8: // Read slot
+		case 0xab: // kovsgqyz (f8)
+			state->m_valueresponse = kov_slots[state->m_value0 & 0x0f] & 0x00ffffff;
+		break;
+
+		case 0xfc: // Adjust damage level to char experience level
+			state->m_valueresponse = (state->m_value0 * kov_fe_value) >> 6;
+		break;
+
+		case 0xfe: // Damage level adjust
+			state->m_valueresponse = 0x880000;
+			kov_fe_value = state->m_value0;
+		break;
+
+		default:
+			state->m_valueresponse = 0x880000;
+//          bprintf (PRINT_NORMAL, _T("Unknown ASIC27 command: %2.2x data: %4.4x\n"), (data ^ state->m_valuekey) & 0xff, state->m_value0);
+		break;
+	}
+}
+
+
+/* Oriental Legend Super Plus ARM simulation */
+
+static const int oldsplus_80[0x5]={
+	0xbb8,0x1770,0x2328,0x2ee0,0xf4240
+};
+
+static const int oldsplus_fc[0x20]={
+	0x00,0x00,0x0a,0x3a,0x4e,0x2e,0x03,0x40,
+	0x33,0x43,0x26,0x2c,0x00,0x00,0x00,0x00,
+	0x00,0x00,0x44,0x4d,0xb,0x27,0x3d,0x0f,
+	0x37,0x2b,0x02,0x2f,0x15,0x45,0x0e,0x30
+};
+
+static const int oldsplus_a0[0x20]={
+	0x000,0x023,0x046,0x069,0x08c,0x0af,0x0d2,0x0f5,
+	0x118,0x13b,0x15e,0x181,0x1a4,0x1c7,0x1ea,0x20d,
+	0x20d,0x20d,0x20d,0x20d,0x20d,0x20d,0x20d,0x20d,
+	0x20d,0x20d,0x20d,0x20d,0x20d,0x20d,0x20d,0x20d,
+};
+
+static const int oldsplus_90[0x7]={
+	0x50,0xa0,0xc8,0xf0,0x190,0x1f4,0x258
+};
+
+static const int oldsplus_5e[0x20]={
+	0x04,0x04,0x04,0x04,0x04,0x03,0x03,0x03,
+	0x02,0x02,0x02,0x01,0x01,0x01,0x01,0x01,
+	0x01,0x01,0x01,0x01,0x01,0x00,0x00,0x00,
+	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
+};
+
+static const int oldsplus_b0[0xe0]={
+	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
+	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
+	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
+	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
+
+	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
+	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
+	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
+	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
+
+	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
+	0x00,0x00,0x00,0x00,0x01,0x02,0x03,0x04,
+	0x05,0x06,0x07,0x08,0x09,0x0a,0x0b,0x0c,
+	0x0d,0x0e,0x0f,0x10,0x11,0x12,0x13,0x14,
+
+	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
+	0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,
+	0x09,0x0a,0x0b,0x0c,0x0d,0x0e,0x0f,0x10,
+	0x11,0x12,0x13,0x14,0x15,0x16,0x17,0x18,
+
+	0x00,0x00,0x00,0x00,0x01,0x02,0x03,0x04,
+	0x05,0x06,0x07,0x08,0x09,0x0a,0x0b,0x0c,
+	0x0d,0x0e,0x0f,0x10,0x11,0x12,0x13,0x14,
+	0x15,0x16,0x17,0x18,0x19,0x1a,0x1b,0x1c,
+
+	0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,
+	0x08,0x09,0x0a,0x0b,0x0c,0x0d,0x0e,0x0f,
+	0x10,0x11,0x12,0x13,0x14,0x15,0x16,0x17,
+	0x18,0x19,0x1a,0x1b,0x1c,0x1d,0x1e,0x1f,
+
+	0x04,0x05,0x06,0x07,0x08,0x09,0x0a,0x0b,
+	0x0c,0x0d,0x0e,0x0f,0x10,0x11,0x12,0x13,
+	0x14,0x15,0x16,0x17,0x18,0x19,0x1a,0x1b,
+	0x1c,0x1d,0x1e,0x1f,0x1f,0x1f,0x1f,0x1f
+};
+
+static const int oldsplus_ae[0xe0]={
+	0x50,0x50,0x50,0x50,0x50,0x50,0x50,0x50,
+	0x50,0x50,0x50,0x50,0x50,0x50,0x50,0x50,
+	0x50,0x50,0x50,0x50,0x50,0x50,0x50,0x50,
+	0x50,0x50,0x50,0x50,0x50,0x50,0x50,0x50,
+
+	0x50,0x50,0x50,0x50,0x50,0x50,0x50,0x50,
+	0x50,0x50,0x50,0x50,0x50,0x50,0x50,0x50,
+	0x50,0x50,0x50,0x50,0x50,0x50,0x50,0x50,
+	0x50,0x50,0x50,0x50,0x50,0x50,0x50,0x50,
+
+	0x1E,0x1F,0x20,0x21,0x22,0x23,0x23,0x23,
+	0x23,0x23,0x23,0x23,0x23,0x23,0x23,0x23,
+	0x23,0x23,0x23,0x23,0x23,0x23,0x23,0x23,
+	0x23,0x23,0x23,0x23,0x23,0x23,0x23,0x23,
+
+	0x1F,0x20,0x21,0x22,0x23,0x23,0x23,0x23,
+	0x23,0x23,0x23,0x23,0x23,0x23,0x23,0x23,
+	0x23,0x23,0x23,0x23,0x23,0x23,0x23,0x23,
+	0x23,0x23,0x23,0x23,0x23,0x23,0x23,0x23,
+
+	0x20,0x21,0x22,0x23,0x23,0x23,0x23,0x23,
+	0x23,0x23,0x23,0x23,0x23,0x23,0x23,0x23,
+	0x23,0x23,0x23,0x23,0x23,0x23,0x23,0x23,
+	0x23,0x23,0x23,0x23,0x23,0x23,0x23,0x23,
+
+	0x21,0x22,0x23,0x23,0x23,0x23,0x23,0x23,
+	0x23,0x23,0x23,0x23,0x23,0x23,0x23,0x23,
+	0x23,0x23,0x23,0x23,0x23,0x23,0x23,0x23,
+	0x23,0x23,0x23,0x23,0x23,0x23,0x23,0x23,
+
+	0x23,0x23,0x23,0x23,0x23,0x23,0x23,0x23,
+	0x23,0x23,0x23,0x23,0x23,0x23,0x23,0x23,
+	0x23,0x23,0x23,0x23,0x23,0x23,0x23,0x23,
+	0x23,0x23,0x23,0x23,0x23,0x23,0x23,0x23
+};
+
+static const int oldsplus_ba[0x4]={
+	0x3138,0x2328,0x1C20,0x1518
+};
+
+static const int oldsplus_9d[0x111]={
+	0x0000,0x0064,0x00c8,0x012c,0x0190,0x01f4,0x0258,0x02bc,
+	0x02f8,0x0334,0x0370,0x03ac,0x03e8,0x0424,0x0460,0x049c,
+	0x04d8,0x0514,0x0550,0x058c,0x05c8,0x0604,0x0640,0x06bc,
+	0x06bc,0x06bc,0x06bc,0x06bc,0x06bc,0x06bc,0x06bc,0x06bc,
+	0x06bc,0x06bc,0x06bc,0x06bc,0x06bc,0x06bc,0x06bc,0x0000,
+	0x0064,0x00c8,0x012c,0x0190,0x01f4,0x0258,0x02bc,0x0302,
+	0x0348,0x038e,0x03d4,0x041a,0x0460,0x04a6,0x04ec,0x0532,
+	0x0578,0x05be,0x0604,0x064a,0x0690,0x06d6,0x06bc,0x06bc,
+	0x06bc,0x06bc,0x06bc,0x06bc,0x06bc,0x06bc,0x06bc,0x06bc,
+	0x06bc,0x06bc,0x06bc,0x06bc,0x06bc,0x06bc,0x0000,0x0064,
+	0x00c8,0x012c,0x0190,0x01f4,0x0258,0x02bc,0x0316,0x0370,
+	0x03ca,0x0424,0x047e,0x04d8,0x0532,0x058c,0x05e6,0x0640,
+	0x069a,0x06f4,0x074e,0x07a8,0x0802,0x06bc,0x06bc,0x06bc,
+	0x06bc,0x06bc,0x06bc,0x06bc,0x06bc,0x06bc,0x06bc,0x06bc,
+	0x06bc,0x06bc,0x06bc,0x06bc,0x06bc,0x0000,0x0064,0x00c8,
+	0x012c,0x0190,0x01f4,0x0258,0x02bc,0x032a,0x0398,0x0406,
+	0x0474,0x04e2,0x0550,0x05be,0x062c,0x069a,0x0708,0x0776,
+	0x07e4,0x0852,0x08c0,0x092e,0x06bc,0x06bc,0x06bc,0x06bc,
+	0x06bc,0x06bc,0x06bc,0x06bc,0x06bc,0x06bc,0x06bc,0x06bc,
+	0x06bc,0x06bc,0x06bc,0x06bc,0x0000,0x0064,0x00c8,0x012c,
+	0x0190,0x01f4,0x0258,0x02bc,0x0348,0x03d4,0x0460,0x04ec,
+	0x0578,0x0604,0x0690,0x071c,0x07a8,0x0834,0x08c0,0x094c,
+	0x09d8,0x0a64,0x0af0,0x06bc,0x06bc,0x06bc,0x06bc,0x06bc,
+	0x06bc,0x06bc,0x06bc,0x06bc,0x06bc,0x06bc,0x06bc,0x06bc,
+	0x06bc,0x06bc,0x06bc,0x0000,0x0064,0x00c8,0x012c,0x0190,
+	0x01f4,0x0258,0x02bc,0x0384,0x044c,0x0514,0x05dc,0x06a4,
+	0x076c,0x0834,0x08fc,0x09c4,0x0a8c,0x0b54,0x0c1c,0x0ce4,
+	0x0dac,0x0e74,0x06bc,0x06bc,0x06bc,0x06bc,0x06bc,0x06bc,
+	0x06bc,0x06bc,0x06bc,0x06bc,0x06bc,0x06bc,0x06bc,0x06bc,
+	0x06bc,0x06bc,0x0000,0x0064,0x00c8,0x012c,0x0190,0x01f4,
+	0x0258,0x02bc,0x030c,0x035c,0x03ac,0x03fc,0x044c,0x049c,
+	0x04ec,0x053c,0x058c,0x05dc,0x062c,0x067c,0x06cc,0x071c,
+	0x076c,0x06bc,0x06bc,0x06bc,0x06bc,0x06bc,0x06bc,0x06bc,
+	0x06bc,0x06bc,0x06bc,0x06bc,0x06bc,0x06bc,0x06bc,0x06bc,
+	0x06bc
+};
+
+static const int oldsplus_8c[0x20]={
+	0x0032,0x0032,0x0064,0x0096,0x0096,0x00fa,0x012c,0x015e,
+	0x0032,0x0064,0x0096,0x00c8,0x00c8,0x012c,0x015e,0x0190,
+	0x0064,0x0096,0x00c8,0x00fa,0x00fa,0x015e,0x0190,0x01c2,
+	0x0096,0x00c8,0x00fa,0x012c,0x012c,0x0190,0x01c2,0x01f4
+};
+
+
+void command_handler_oldsplus(pgm_kovarmsim_state *state, int pc)
+{
+	switch (state->m_ddp3lastcommand)
+	{
+		case 0x88:
+			state->m_valuekey = 0x100;
+			state->m_valueresponse = 0x990000;
+			break;
+
+		case 0xd0:
+			state->m_valueresponse = 0xa01000 + (state->m_value0 << 5);
+			break;
+
+		case 0xc0:
+			state->m_valueresponse = 0xa00000 + (state->m_value0 << 6);
+			break;
+
+		case 0xc3:
+			state->m_valueresponse = 0xa00800 + (state->m_value0 << 6);
+			break;
+
+		case 0x36:
+			state->m_extra_ram[0x36] = state->m_value0;
+			state->m_valueresponse = 0x990000;
+			break;
+
+		case 0x33:
+			state->m_extra_ram[0x33] = state->m_value0;
+			state->m_valueresponse = 0x990000;
+			break;
+
+		case 0x35:
+			state->m_extra_ram[0x36] += state->m_value0;
+			state->m_valueresponse = 0x990000;
+			break;
+
+		case 0x37:
+			state->m_extra_ram[0x33] += state->m_value0;
+			state->m_valueresponse = 0x990000;
+			break;
+
+		case 0x34:
+			state->m_valueresponse = state->m_extra_ram[0x36];
+			break;
+
+		case 0x38:
+			state->m_valueresponse = state->m_extra_ram[0x33];
+			break;
+
+		case 0x80:
+			state->m_valueresponse = oldsplus_80[state->m_value0];
+			break;
+
+		case 0xe7:
+			state->m_extra_ram[0xe7] = state->m_value0;
+			state->m_valueresponse = 0x990000;
+			break;
+
+		case 0xe5:
+			switch (state->m_extra_ram[0xe7])
+			{
+				case 0xb000:
+					state->m_ddp3slots[0xb] = state->m_value0;
+					state->m_ddp3slots[0xc] = 0;
+					break;
+
+				case 0xc000:
+					state->m_ddp3slots[0xc] = state->m_value0;
+					break;
+
+				case 0xd000:
+					state->m_ddp3slots[0xd] = state->m_value0;
+					break;
+
+				case 0xf000:
+					state->m_ddp3slots[0xf] = state->m_value0;
+					break;
+			}
+			state->m_valueresponse = 0x990000;
+			break;
+
+		case 0xf8:
+			state->m_valueresponse = state->m_ddp3slots[state->m_value0];
+			break;
+
+		case 0xfc:
+			state->m_valueresponse = oldsplus_fc[state->m_value0];
+			break;
+
+		case 0xc5:
+			state->m_ddp3slots[0xd] --;
+			state->m_valueresponse = 0x990000;
+			break;
+
+		case 0xd6:
+			state->m_ddp3slots[0xb] ++;
+			state->m_valueresponse = 0x990000;
+			break;
+
+		case 0x3a:
+			state->m_ddp3slots[0xf] = 0;
+			state->m_valueresponse = 0x990000;
+			break;
+
+		case 0xf0:
+			state->m_extra_ram[0xf0] = state->m_value0;
+			state->m_valueresponse = 0x990000;
+			break;
+
+		case 0xed:
+			state->m_valueresponse = state->m_value0 << 0x6;
+			state->m_valueresponse += state->m_extra_ram[0xf0];
+			state->m_valueresponse = state->m_valueresponse << 0x2;
+			state->m_valueresponse += 0x900000;
+			break;
+
+		case 0xe0:
+			state->m_extra_ram[0xe0] = state->m_value0;
+			state->m_valueresponse = 0x990000;
+			break;
+
+		case 0xdc:
+			state->m_valueresponse = state->m_value0 << 0x6;
+			state->m_valueresponse += state->m_extra_ram[0xe0];
+			state->m_valueresponse = state->m_valueresponse << 0x2;
+			state->m_valueresponse += 0x904000;
+			break;
+
+		case 0xcb:
+			state->m_valueresponse =  0xc000;
+			break;
+
+		case 0xa0:
+			state->m_valueresponse = oldsplus_a0[state->m_value0];
+			break;
+
+		case 0xba:
+			state->m_valueresponse = oldsplus_ba[state->m_value0];
+			break;
+
+		case 0x5e:
+			state->m_valueresponse = oldsplus_5e[state->m_value0];
+			break;
+
+		case 0xb0:
+			state->m_valueresponse = oldsplus_b0[state->m_value0];
+			break;
+
+		case 0xae:
+			state->m_valueresponse = oldsplus_ae[state->m_value0];
+			break;
+
+		case 0x9d:
+			state->m_valueresponse = oldsplus_9d[state->m_value0];
+			break;
+
+		case 0x90:
+			state->m_valueresponse = oldsplus_90[state->m_value0];
+			break;
+
+		case 0x8c:
+			state->m_valueresponse = oldsplus_8c[state->m_value0];
+			break;
+
+		default:
+			state->m_valueresponse = 0x990000;
+			printf("%06X: oldsplus_UNKNOWN W CMD %X  VAL %X\n", pc,state->m_value1,state->m_value0);
+			break;
+	}
+}
+
+static WRITE16_HANDLER( ddp3_asic_w )
+{
+	pgm_kovarmsim_state *state = space->machine().driver_data<pgm_kovarmsim_state>();
+	int pc = cpu_get_pc(&space->device());
+
+	if (offset == 0)
+	{
+		state->m_value0 = data;
+		return;
+	}
+	else if (offset == 1)
+	{
+		UINT16 realkey;
+		if ((data >> 8) == 0xff)
+			state->m_valuekey = 0xff00;
+		realkey = state->m_valuekey >> 8;
+		realkey |= state->m_valuekey;
+		{
+			state->m_valuekey += 0x0100;
+			state->m_valuekey &= 0xff00;
+			if (state->m_valuekey == 0xff00)
+				state->m_valuekey =  0x0100;
+		}
+		data ^= realkey;
+		state->m_value1 = data;
+		state->m_value0 ^= realkey;
+
+		state->m_ddp3lastcommand = state->m_value1 & 0xff;
+
+		state->arm_sim_handler(state, pc);
+	}
+	else if (offset==2)
+	{
+
+	}
+}
+
+
+static READ16_HANDLER( sango_protram_r )
+{
+	// at offset == 4 is region (supplied by device)
+	// 0 = china
+	// 1 = taiwan
+	// 2 = japan
+	// 3 = korea
+	// 4 = hong kong
+	// 5 = world
+
+	if (offset == 4)
+		return input_port_read(space->machine(), "Region");
+
+	// otherwise it doesn't seem to use the ram for anything important, we return 0 to avoid test mode corruption
+	// kovplus reads from offset 000e a lot ... why?
+#ifdef MAME_DEBUG
+	popmessage ("protection ram r %04x",offset);
+#endif
+	return 0x0000;
+}
+
+static READ16_HANDLER( pstars_protram_r )
+{
+	pgm_kovarmsim_state *state = space->machine().driver_data<pgm_kovarmsim_state>();
+
+	if (offset == 4)		//region
+		return input_port_read(space->machine(), "Region");
+	else if (offset >= 0x10)  //timer
+	{
+		logerror("PSTARS ACCESS COUNTER %6X\n", state->m_extra_ram[offset - 0x10]);
+		return state->m_extra_ram[offset - 0x10]--;
+	}
+	return 0x0000;
+}
+
+
+static READ16_HANDLER( puzzli2_protram_r )
+{
+	if (offset == 4)
+		return input_port_read(space->machine(), "Region");
+
+	printf("%06x puzzli2_protram_r %02x\n", cpu_get_pc(&space->device()), offset);
+
+	return 0x0000;
+}
+
+static READ16_HANDLER( oldsplus_protram_r )
+{
+	if (offset == 4)
+		return input_port_read(space->machine(), "Region");
+
+	return 0x0000;
+}
+
+DRIVER_INIT( ddp3 )
+{
+	pgm_kovarmsim_state *state = machine.driver_data<pgm_kovarmsim_state>();
+	pgm_basic_init(machine, false);
+	pgm_py2k2_decrypt(machine); // yes, it's the same as photo y2k2
+	state->arm_sim_handler = command_handler_ddp3;
+	machine.device("maincpu")->memory().space(AS_PROGRAM)->install_legacy_readwrite_handler(0x500000, 0x500005, FUNC(ddp3_asic_r), FUNC(ddp3_asic_w));
+}
+
+DRIVER_INIT( ket )
+{
+	pgm_kovarmsim_state *state = machine.driver_data<pgm_kovarmsim_state>();
+	pgm_basic_init(machine, false);
+	pgm_ket_decrypt(machine);
+	state->arm_sim_handler = command_handler_ddp3;
+	machine.device("maincpu")->memory().space(AS_PROGRAM)->install_legacy_readwrite_handler(0x400000, 0x400005, FUNC(ddp3_asic_r), FUNC(ddp3_asic_w));
+}
+
+DRIVER_INIT( espgal )
+{
+	pgm_basic_init(machine, false);
+	pgm_espgal_decrypt(machine);
+	pgm_kovarmsim_state *state = machine.driver_data<pgm_kovarmsim_state>();
+	state->arm_sim_handler = command_handler_ddp3;
+	machine.device("maincpu")->memory().space(AS_PROGRAM)->install_legacy_readwrite_handler(0x400000, 0x400005, FUNC(ddp3_asic_r), FUNC(ddp3_asic_w));
+}
+
+DRIVER_INIT( puzzli2 )
+{
+	pgm_kovarmsim_state *state = machine.driver_data<pgm_kovarmsim_state>();
+	pgm_basic_init(machine);
+	pgm_puzzli2_decrypt(machine);
+	state->arm_sim_handler = command_handler_puzzli2;
+	machine.device("maincpu")->memory().space(AS_PROGRAM)->install_legacy_readwrite_handler(0x500000, 0x500005, FUNC(ddp3_asic_r), FUNC(ddp3_asic_w));
+	machine.device("maincpu")->memory().space(AS_PROGRAM)->install_legacy_read_handler(0x4f0000, 0x4f003f, FUNC(puzzli2_protram_r));
+	state->m_irq4_disabled = 1; // // doesn't like this irq??
+}
+
+DRIVER_INIT( py2k2 )
+{
+	pgm_kovarmsim_state *state = machine.driver_data<pgm_kovarmsim_state>();
+	pgm_basic_init(machine);
+	pgm_py2k2_decrypt(machine);
+	state->arm_sim_handler = command_handler_py2k2;
+	machine.device("maincpu")->memory().space(AS_PROGRAM)->install_legacy_readwrite_handler(0x500000, 0x500005, FUNC(ddp3_asic_r), FUNC(ddp3_asic_w));
+	machine.device("maincpu")->memory().space(AS_PROGRAM)->install_legacy_read_handler(0x4f0000, 0x4f003f, FUNC(puzzli2_protram_r));
+}
+
+DRIVER_INIT( pstar )
+{
+	pgm_kovarmsim_state *state = machine.driver_data<pgm_kovarmsim_state>();
+
+	pgm_basic_init(machine);
+	pgm_pstar_decrypt(machine);
+	kovsh_latch_init(machine);
+
+	state->m_pstar_e7 = 0;
+	state->m_pstar_b1 = 0;
+	state->m_pstar_ce = 0;
+	state->m_extra_ram[0] = 0;
+	state->m_extra_ram[1] = 0;
+	state->m_extra_ram[2] = 0;
+	memset(state->m_ddp3slots, 0, 16);
+
+	state->arm_sim_handler = command_handler_pstars;
+	machine.device("maincpu")->memory().space(AS_PROGRAM)->install_legacy_readwrite_handler(0x500000, 0x500005, FUNC(ddp3_asic_r), FUNC(ddp3_asic_w));
+	machine.device("maincpu")->memory().space(AS_PROGRAM)->install_legacy_read_handler(0x4f0000, 0x4f003f, FUNC(pstars_protram_r));
+
+	state->save_item(NAME(state->m_pstar_e7));
+	state->save_item(NAME(state->m_pstar_b1));
+	state->save_item(NAME(state->m_pstar_ce));
+	state->save_item(NAME(state->m_extra_ram));
+}
+
+DRIVER_INIT( kov )
+{
+	pgm_kovarmsim_state *state = machine.driver_data<pgm_kovarmsim_state>();
+	pgm_basic_init(machine);
+	pgm_kov_decrypt(machine);
+	kovsh_latch_init(machine);
+	kov_internal_slot = 0;
+	kov_c0_value = 0;
+	kov_cb_value = 0;
+	kov_fe_value = 0;
+	state->arm_sim_handler = command_handler_kov;
+	machine.device("maincpu")->memory().space(AS_PROGRAM)->install_legacy_readwrite_handler(0x500000, 0x500005, FUNC(ddp3_asic_r), FUNC(ddp3_asic_w));
+	machine.device("maincpu")->memory().space(AS_PROGRAM)->install_legacy_read_handler(0x4f0000, 0x4f003f, FUNC(sango_protram_r));
+}
+
+DRIVER_INIT( kovboot )
+{
+	pgm_kovarmsim_state *state = machine.driver_data<pgm_kovarmsim_state>();
+	pgm_basic_init(machine);
+//  pgm_kov_decrypt(machine);
+	kovsh_latch_init(machine);
+	kov_internal_slot = 0;
+	kov_c0_value = 0;
+	kov_cb_value = 0;
+	kov_fe_value = 0;
+	state->arm_sim_handler = command_handler_kov;
+	machine.device("maincpu")->memory().space(AS_PROGRAM)->install_legacy_readwrite_handler(0x500000, 0x500005, FUNC(ddp3_asic_r), FUNC(ddp3_asic_w));
+	machine.device("maincpu")->memory().space(AS_PROGRAM)->install_legacy_read_handler(0x4f0000, 0x4f003f, FUNC(sango_protram_r));
+
+}
+
+DRIVER_INIT( oldsplus )
+{
+	pgm_kovarmsim_state *state = machine.driver_data<pgm_kovarmsim_state>();
+	pgm_basic_init(machine);
+	pgm_oldsplus_decrypt(machine);
+	kovsh_latch_init(machine);
+	memset(state->m_extra_ram, 0, 0x100);
+	memset(state->m_ddp3slots, 0, 0x100);
+	state->arm_sim_handler = command_handler_oldsplus;
+	machine.device("maincpu")->memory().space(AS_PROGRAM)->install_legacy_readwrite_handler(0x500000, 0x500005, FUNC(ddp3_asic_r), FUNC(ddp3_asic_w));
+	machine.device("maincpu")->memory().space(AS_PROGRAM)->install_legacy_read_handler(0x4f0000, 0x4f003f, FUNC(oldsplus_protram_r));
+	state_save_register_global_array(machine, state->m_extra_ram);
+	state_save_register_global_array(machine, state->m_ddp3slots);
+}
+
+INPUT_PORTS_START( photoy2k )
+	PORT_INCLUDE ( pgm )
+
+	PORT_START("RegionHack")	/* Region - supplied by protection device */
+	PORT_CONFNAME( 0x00ff, 0x00ff, DEF_STR( Region ) )
+	PORT_CONFSETTING(      0x0000, DEF_STR( Taiwan ) )
+	PORT_CONFSETTING(      0x0001, DEF_STR( China ) )
+	PORT_CONFSETTING(      0x0002, "Japan (Alta license)" )
+	PORT_CONFSETTING(      0x0003, DEF_STR( World ) )
+	PORT_CONFSETTING(      0x0004, DEF_STR( Korea ) )
+	PORT_CONFSETTING(      0x0005, DEF_STR( Hong_Kong ) )
+	PORT_CONFSETTING(      0x00ff, "Untouched" ) // don't hack the region
+INPUT_PORTS_END
+
+
+
+INPUT_PORTS_START( kovsh )
+	PORT_INCLUDE ( pgm )
+
+	PORT_START("RegionHack")	/* Region - supplied by protection device */
+	PORT_CONFNAME( 0x00ff, 0x00ff, DEF_STR( Region ) )
+	PORT_CONFSETTING(      0x0000, DEF_STR( China ) )
+	PORT_CONFSETTING(      0x0001, DEF_STR( Taiwan ) )
+	PORT_CONFSETTING(      0x0002, "Japan (Alta license)" )
+	PORT_CONFSETTING(      0x0003, DEF_STR( Korea ) )
+	PORT_CONFSETTING(      0x0004, DEF_STR( Hong_Kong ) )
+	PORT_CONFSETTING(      0x0005, DEF_STR( World ) )
+	PORT_CONFSETTING(      0x00ff, "Untouched" ) // don't hack the region
+INPUT_PORTS_END
+
+
+
+INPUT_PORTS_START( sango )
+	PORT_INCLUDE ( pgm )
+
+	PORT_MODIFY("Region")	/* Region - supplied by protection device */
+	PORT_CONFNAME( 0x000f, 0x0005, DEF_STR( Region ) )
+	PORT_CONFSETTING(      0x0000, DEF_STR( China ) )
+	PORT_CONFSETTING(      0x0001, DEF_STR( Taiwan ) )
+	PORT_CONFSETTING(      0x0002, "Japan (Alta license)" )
+	PORT_CONFSETTING(      0x0003, DEF_STR( Korea ) )
+	PORT_CONFSETTING(      0x0004, DEF_STR( Hong_Kong ) )
+	PORT_CONFSETTING(      0x0005, DEF_STR( World ) )
+INPUT_PORTS_END
+
+INPUT_PORTS_START( sango_ch )
+	PORT_INCLUDE ( pgm )
+
+	PORT_MODIFY("Region")	/* Region - supplied by protection device */
+	PORT_CONFNAME( 0x000f, 0x0000, DEF_STR( Region ) )
+	PORT_CONFSETTING(      0x0000, DEF_STR( China ) )
+	PORT_CONFSETTING(      0x0001, DEF_STR( Taiwan ) )
+	PORT_CONFSETTING(      0x0002, "Japan (Alta license)" )
+	PORT_CONFSETTING(      0x0003, DEF_STR( Korea ) )
+	PORT_CONFSETTING(      0x0004, DEF_STR( Hong_Kong ) )
+	PORT_CONFSETTING(      0x0005, DEF_STR( World ) )
+INPUT_PORTS_END
+
+
+INPUT_PORTS_START( oldsplus )
+	PORT_INCLUDE ( pgm )
+
+	PORT_MODIFY("Region")	/* Region - supplied by protection device */
+	PORT_CONFNAME( 0x000f, 0x0001, DEF_STR( Region ) )
+	PORT_CONFSETTING(      0x0001, DEF_STR( China ) )
+	PORT_CONFSETTING(      0x0002, DEF_STR( Japan ) )
+	PORT_CONFSETTING(      0x0003, DEF_STR( Korea ) )
+	PORT_CONFSETTING(      0x0004, DEF_STR( Hong_Kong ) )
+	PORT_CONFSETTING(      0x0005, DEF_STR( World ) )
+	PORT_CONFSETTING(      0x0006, DEF_STR( Taiwan ) )
+INPUT_PORTS_END
+
+INPUT_PORTS_START( pstar )
+	PORT_INCLUDE ( pgm )
+
+	PORT_MODIFY("Region")	/* Region - supplied by protection device */
+	PORT_CONFNAME( 0x000f, 0x0005, DEF_STR( Region ) )
+	PORT_CONFSETTING(      0x0000, DEF_STR( China ) )
+	PORT_CONFSETTING(      0x0001, DEF_STR( Taiwan ) )
+	PORT_CONFSETTING(      0x0002, "Japan (Alta license)" )
+	PORT_CONFSETTING(      0x0003, DEF_STR( Korea ) )
+	PORT_CONFSETTING(      0x0004, DEF_STR( Hong_Kong ) )
+	PORT_CONFSETTING(      0x0005, DEF_STR( World ) )
+INPUT_PORTS_END
+
+INPUT_PORTS_START( py2k2 )
+	PORT_INCLUDE ( pgm )
+
+	PORT_MODIFY("Region")	/* Region - supplied by protection device */
+	PORT_CONFNAME( 0x000f, 0x0003, DEF_STR( Region ) )
+	PORT_CONFSETTING(      0x0000, DEF_STR( Taiwan ) )
+	PORT_CONFSETTING(      0x0001, DEF_STR( China ) )
+	PORT_CONFSETTING(      0x0002, "Japan (Alta license)" )
+	PORT_CONFSETTING(      0x0003, DEF_STR( World ) )
+	PORT_CONFSETTING(      0x0004, DEF_STR( Korea ) )
+	PORT_CONFSETTING(      0x0005, DEF_STR( Hong_Kong ) )
+	PORT_CONFSETTING(      0x0006, "Singapore, Malaysia" )
+INPUT_PORTS_END
+
+
+INPUT_PORTS_START( puzzli2 )
+	PORT_INCLUDE ( pgm )
+
+	PORT_MODIFY("Region")	/* Region - supplied by protection device */
+	PORT_CONFNAME( 0x000f, 0x0005, DEF_STR( Region ) )
+	PORT_CONFSETTING(      0x0000, DEF_STR( Taiwan ) )
+	PORT_CONFSETTING(      0x0001, DEF_STR( China ) )
+	PORT_CONFSETTING(      0x0002, "Japan (Alta license)" )
+	PORT_CONFSETTING(      0x0003, DEF_STR( Korea ) )
+	PORT_CONFSETTING(      0x0004, DEF_STR( Hong_Kong ) )
+	PORT_CONFSETTING(      0x0005, DEF_STR( World ) )
+INPUT_PORTS_END
diff -Nru src-old/mame/machine/pgmprot2.c src/mame/machine/pgmprot2.c
--- src-old/mame/machine/pgmprot2.c	1970-01-01 01:00:00.000000000 +0100
+++ src/mame/machine/pgmprot2.c	2012-03-25 15:56:49.000000000 +0200
@@ -0,0 +1,387 @@
+/***********************************************************************
+ PGM IGA027A (55857F type) ARM protection emulation
+
+ these are emulation of the 'kov2' type ARM device
+ used by
+
+ Knights of Valor 2 (kov2)
+ Knights of Valor 2 Nine Dragons (kov2p) *
+ DoDonPachi 2 - Bee Storm (ddp2)
+ Martial Masters (martmast)
+
+ * using a hacked kov2 internal ROM
+
+ the following also use this device, but the internal
+ ROMs are not yet dumped
+
+ Dragon World 2001 (dw2001)
+
+ ----
+
+  These games use a larger region of shared RAM than the 55857E
+  type and have a communication based on interrupts
+
+ ----
+
+ All of these games have an external ARM rom.
+
+ The external ARM roms are encrypted, the internal ARM rom uploads
+ the decryption tables.
+
+ Game Region is supplied by internal ARM rom.
+
+ ***********************************************************************/
+
+#include "emu.h"
+#include "includes/pgm.h"
+
+
+static READ32_HANDLER( arm7_latch_arm_r )
+{
+	pgm_state *state = space->machine().driver_data<pgm_state>();
+
+	device_set_input_line(state->m_prot, ARM7_FIRQ_LINE, CLEAR_LINE ); // guess
+
+	if (PGMARM7LOGERROR)
+		logerror("ARM7: Latch read: %08x (%08x) (%06x)\n", state->m_kov2_latchdata_68k_w, mem_mask, cpu_get_pc(&space->device()));
+	return state->m_kov2_latchdata_68k_w;
+}
+
+static WRITE32_HANDLER( arm7_latch_arm_w )
+{
+	pgm_state *state = space->machine().driver_data<pgm_state>();
+
+	if (PGMARM7LOGERROR)
+		logerror("ARM7: Latch write: %08x (%08x) (%06x)\n", data, mem_mask, cpu_get_pc(&space->device()));
+
+	COMBINE_DATA(&state->m_kov2_latchdata_arm_w);
+}
+
+static READ32_HANDLER( arm7_shareram_r )
+{
+	pgm_state *state = space->machine().driver_data<pgm_state>();
+
+	if (PGMARM7LOGERROR)
+		logerror("ARM7: ARM7 Shared RAM Read: %04x = %08x (%08x) (%06x)\n", offset << 2, state->m_arm7_shareram[offset], mem_mask, cpu_get_pc(&space->device()));
+	return state->m_arm7_shareram[offset];
+}
+
+static WRITE32_HANDLER( arm7_shareram_w )
+{
+	pgm_state *state = space->machine().driver_data<pgm_state>();
+
+	if (PGMARM7LOGERROR)
+		logerror("ARM7: ARM7 Shared RAM Write: %04x = %08x (%08x) (%06x)\n", offset << 2, data, mem_mask, cpu_get_pc(&space->device()));
+	COMBINE_DATA(&state->m_arm7_shareram[offset]);
+}
+
+static READ16_HANDLER( arm7_latch_68k_r )
+{
+	pgm_state *state = space->machine().driver_data<pgm_state>();
+
+	if (PGMARM7LOGERROR)
+		logerror("M68K: Latch read: %04x (%04x) (%06x)\n", state->m_kov2_latchdata_arm_w & 0x0000ffff, mem_mask, cpu_get_pc(&space->device()));
+	return state->m_kov2_latchdata_arm_w;
+}
+
+static WRITE16_HANDLER( arm7_latch_68k_w )
+{
+	pgm_state *state = space->machine().driver_data<pgm_state>();
+
+	if (PGMARM7LOGERROR)
+		logerror("M68K: Latch write: %04x (%04x) (%06x)\n", data & 0x0000ffff, mem_mask, cpu_get_pc(&space->device()));
+	COMBINE_DATA(&state->m_kov2_latchdata_68k_w);
+
+	device_set_input_line(state->m_prot, ARM7_FIRQ_LINE, ASSERT_LINE ); // guess
+}
+
+static READ16_HANDLER( arm7_ram_r )
+{
+	pgm_state *state = space->machine().driver_data<pgm_state>();
+	UINT16 *share16 = (UINT16 *)state->m_arm7_shareram;
+
+	if (PGMARM7LOGERROR)
+		logerror("M68K: ARM7 Shared RAM Read: %04x = %04x (%08x) (%06x)\n", BYTE_XOR_LE(offset), share16[BYTE_XOR_LE(offset)], mem_mask, cpu_get_pc(&space->device()));
+	return share16[BYTE_XOR_LE(offset)];
+}
+
+static WRITE16_HANDLER( arm7_ram_w )
+{
+	pgm_state *state = space->machine().driver_data<pgm_state>();
+	UINT16 *share16 = (UINT16 *)state->m_arm7_shareram;
+
+	if (PGMARM7LOGERROR)
+		logerror("M68K: ARM7 Shared RAM Write: %04x = %04x (%04x) (%06x)\n", BYTE_XOR_LE(offset), data, mem_mask, cpu_get_pc(&space->device()));
+	COMBINE_DATA(&share16[BYTE_XOR_LE(offset)]);
+}
+
+/* 55857F? */
+/* Knights of Valor 2, Martial Masters, DoDonpachi 2 */
+/*  no execute only space? */
+static ADDRESS_MAP_START( kov2_mem, AS_PROGRAM, 16)
+	AM_IMPORT_FROM(pgm_mem)
+	AM_RANGE(0x100000, 0x5fffff) AM_ROMBANK("bank1") /* Game ROM */
+	AM_RANGE(0xd00000, 0xd0ffff) AM_READWRITE(arm7_ram_r, arm7_ram_w) /* ARM7 Shared RAM */
+	AM_RANGE(0xd10000, 0xd10001) AM_READWRITE(arm7_latch_68k_r, arm7_latch_68k_w) /* ARM7 Latch */
+ADDRESS_MAP_END
+
+
+static ADDRESS_MAP_START( 55857F_arm7_map, AS_PROGRAM, 32 )
+	AM_RANGE(0x00000000, 0x00003fff) AM_ROM
+	AM_RANGE(0x08000000, 0x083fffff) AM_ROM AM_REGION("user1", 0)
+	AM_RANGE(0x10000000, 0x100003ff) AM_RAM
+	AM_RANGE(0x18000000, 0x1800ffff) AM_RAM AM_BASE_MEMBER(pgm_state, m_arm_ram)
+	AM_RANGE(0x38000000, 0x38000003) AM_READWRITE(arm7_latch_arm_r, arm7_latch_arm_w) /* 68k Latch */
+	AM_RANGE(0x48000000, 0x4800ffff) AM_READWRITE(arm7_shareram_r, arm7_shareram_w) AM_BASE_MEMBER(pgm_state, m_arm7_shareram)
+	AM_RANGE(0x50000000, 0x500003ff) AM_RAM
+ADDRESS_MAP_END
+
+
+/******* ARM 55857F *******/
+
+MACHINE_CONFIG_DERIVED( kov2, pgm )
+	MCFG_CPU_MODIFY("maincpu")
+	MCFG_CPU_PROGRAM_MAP(kov2_mem)
+
+	/* protection CPU */
+	MCFG_CPU_ADD("prot", ARM7, 20000000)	// 55857F
+	MCFG_CPU_PROGRAM_MAP(55857F_arm7_map)
+MACHINE_CONFIG_END
+
+
+
+
+static void kov2_latch_init( running_machine &machine )
+{
+	pgm_state *state = machine.driver_data<pgm_state>();
+
+	state->m_kov2_latchdata_68k_w = 0;
+	state->m_kov2_latchdata_arm_w = 0;
+
+	state->save_item(NAME(state->m_kov2_latchdata_68k_w));
+	state->save_item(NAME(state->m_kov2_latchdata_arm_w));
+}
+
+static WRITE32_HANDLER( kov2_arm_region_w )
+{
+	pgm_state *state = space->machine().driver_data<pgm_state>();
+	int pc = cpu_get_pc(&space->device());
+	int regionhack = input_port_read(space->machine(), "RegionHack");
+	if (pc==0x190 && regionhack != 0xff) data = (data & 0xffff0000) | (regionhack << 0);
+	COMBINE_DATA(&state->m_arm7_shareram[0x138/4]);
+}
+
+DRIVER_INIT( kov2 )
+{
+	pgm_basic_init(machine);
+	pgm_kov2_decrypt(machine);
+	kov2_latch_init(machine);
+
+	// we only have a HK internal ROM dumped for now, allow us to override that for debugging purposes.
+	machine.device("prot")->memory().space(AS_PROGRAM)->install_legacy_write_handler(0x48000138, 0x4800013b, FUNC(kov2_arm_region_w));
+}
+
+
+DRIVER_INIT( kov2p )
+{
+	// this hacks the identification of the kov2 rom to return the string required for kov2p
+	// this isn't guaranteed to work properly (and definitely wouldn't on real hardware due to the internal
+	// ROM uploading the encryption table)  The internal ROM should be dumped properly.
+	pgm_basic_init(machine);
+	pgm_kov2p_decrypt(machine);
+	kov2_latch_init(machine);
+
+	UINT8 *mem8 = (UINT8 *)machine.region("user1")->base();
+	mem8[0xDE] = 0xC0;
+	mem8[0xDF] = 0x46;
+	mem8[0x4ED8] = 0xA8;// B0
+	mem8[0x4EDC] = 0x9C;// A4
+	mem8[0x4EE0] = 0x5C;// 64
+	mem8[0x4EE4] = 0x94;// 9C
+	mem8[0x4EE8] = 0xE8;// F0
+	mem8[0x4EEC] = 0x6C;// 74
+	mem8[0x4EF0] = 0xD4;// DC
+	mem8[0x4EF4] = 0x50;// 58
+	mem8[0x4EF8] = 0x80;// 88
+	mem8[0x4EFC] = 0x9C;// A4
+	mem8[0x4F00] = 0x28;// 30
+	mem8[0x4F04] = 0x30;// 38
+	mem8[0x4F08] = 0x34;// 3C
+	mem8[0x4F0C] = 0x1C;// 24
+	mem8[0x1FFFFC] = 0x33;
+	mem8[0x1FFFFD] = 0x99;
+
+	// we only have a HK internal ROM dumped for now, allow us to override that for debugging purposes.
+	machine.device("prot")->memory().space(AS_PROGRAM)->install_legacy_write_handler(0x48000138, 0x4800013b, FUNC(kov2_arm_region_w));
+}
+
+static WRITE32_HANDLER( martmast_arm_region_w )
+{
+	pgm_state *state = space->machine().driver_data<pgm_state>();
+	int pc = cpu_get_pc(&space->device());
+	int regionhack = input_port_read(space->machine(), "RegionHack");
+	if (pc==0x170 && regionhack != 0xff) data = (data & 0xffff0000) | (regionhack << 0);
+	COMBINE_DATA(&state->m_arm7_shareram[0x138/4]);
+}
+
+
+DRIVER_INIT( martmast )
+{
+	pgm_basic_init(machine);
+	pgm_mm_decrypt(machine);
+	kov2_latch_init(machine);
+
+	// we only have a USA / CHINA internal ROMs dumped for now, allow us to override that for debugging purposes.
+	machine.device("prot")->memory().space(AS_PROGRAM)->install_legacy_write_handler(0x48000138, 0x4800013b, FUNC(martmast_arm_region_w));
+}
+
+
+static WRITE32_HANDLER( ddp2_arm_region_w )
+{
+	pgm_state *state = space->machine().driver_data<pgm_state>();
+	int pc = cpu_get_pc(&space->device());
+	int regionhack = input_port_read(space->machine(), "RegionHack");
+	if (pc==0x0174 && regionhack != 0xff) data = (data & 0x0000ffff) | (regionhack << 16);
+	COMBINE_DATA(&state->m_arm7_shareram[0x0]);
+}
+
+static READ32_HANDLER( ddp2_speedup_r )
+{
+	pgm_state *state = space->machine().driver_data<pgm_state>();
+	int pc = cpu_get_pc(&space->device());
+	UINT32 data = state->m_arm_ram[0x300c/4];
+
+	if (pc==0x080109b4)
+	{
+		/* if we've hit the loop where this is read and both values are 0 then the only way out is an interrupt */
+		int r4 = (cpu_get_reg(&space->device(), ARM7_R4));
+		r4 += 0xe;
+
+		if (r4==0x18002f9e)
+		{
+			UINT32 data2 =  state->m_arm_ram[0x2F9C/4]&0xffff0000;
+			if ((data==0x00000000) && (data2==0x00000000)) device_spin_until_interrupt(&space->device());
+		}
+	}
+
+	return data;
+}
+
+static READ16_HANDLER( ddp2_main_speedup_r )
+{
+
+	UINT16 data = pgm_mainram[0x0ee54/2];
+	int pc = cpu_get_pc(&space->device());
+
+	if (pc == 0x149dce) device_spin_until_interrupt(&space->device());
+	if (pc == 0x149cfe) device_spin_until_interrupt(&space->device());
+
+	return data;
+
+}
+
+DRIVER_INIT( ddp2 )
+{
+	pgm_basic_init(machine);
+	pgm_ddp2_decrypt(machine);
+	kov2_latch_init(machine);
+
+	// we only have a Japan internal ROM dumped for now, allow us to override that for debugging purposes.
+	machine.device("prot")->memory().space(AS_PROGRAM)->install_legacy_write_handler(0x48000000, 0x48000003, FUNC(ddp2_arm_region_w));
+
+	machine.device("prot")->memory().space(AS_PROGRAM)->install_legacy_read_handler(0x1800300c, 0x1800300f, FUNC(ddp2_speedup_r));
+	machine.device("maincpu")->memory().space(AS_PROGRAM)->install_legacy_read_handler(0x80ee54, 0x80ee55, FUNC(ddp2_main_speedup_r));
+}
+
+
+DRIVER_INIT( dw2001 )
+{
+	//pgm_state *state = machine.driver_data<pgm_state>();
+	UINT16 *mem16 = (UINT16 *)machine.region("maincpu")->base();
+
+	pgm_basic_init(machine);
+	kov2_latch_init(machine);
+	pgm_mm_decrypt(machine); // encryption is the same as martial masters
+
+	mem16[0x11e90c / 2] = 0x4e71;
+	mem16[0x11e90e / 2] = 0x4e71;
+
+	mem16[0x11e91a / 2] = 0x4e71;
+
+	mem16[0x11eaf6 / 2] = 0x4e71;
+	mem16[0x11eaf8 / 2] = 0x4e71;
+
+	mem16[0x11eb04 / 2] = 0x4e71;
+
+	/* patch ARM area with fake code */
+	UINT16 *temp16 = (UINT16 *)machine.region("prot")->base();
+	temp16[(0x0000)/2] = 0xd088;
+	temp16[(0x0002)/2] = 0xe59f;
+	temp16[(0x0004)/2] = 0x0680;
+	temp16[(0x0006)/2] = 0xe3a0;
+	temp16[(0x0008)/2] = 0x0001;
+	temp16[(0x000a)/2] = 0xe280;
+	temp16[(0x000c)/2] = 0xff10;
+	temp16[(0x000e)/2] = 0xe12f;
+
+	temp16[(0x0090)/2] = 0x0400;
+	temp16[(0x0092)/2] = 0x1000;
+
+}
+
+INPUT_PORTS_START( ddp2 )
+	PORT_INCLUDE ( pgm )
+
+	PORT_START("RegionHack")	/* Region - actually supplied by protection device */
+	PORT_CONFNAME( 0x00ff, 0x00ff, DEF_STR( Region ) )
+	PORT_CONFSETTING(      0x0000, DEF_STR( China ) )
+	PORT_CONFSETTING(      0x0001, DEF_STR( Taiwan ) )
+	PORT_CONFSETTING(      0x0002, "Japan (Cave license)" )
+	PORT_CONFSETTING(      0x0003, DEF_STR( Korea ) )
+	PORT_CONFSETTING(      0x0004, DEF_STR( Hong_Kong ) )
+	PORT_CONFSETTING(      0x0005, DEF_STR( World ) )
+	PORT_CONFSETTING(      0x00ff, "Untouched" ) // don't hack the region
+INPUT_PORTS_END
+
+INPUT_PORTS_START( kov2 )
+	PORT_INCLUDE ( pgm )
+
+	PORT_START("RegionHack")	/* Region - actually supplied by protection device */
+	PORT_CONFNAME( 0x00ff, 0x00ff, DEF_STR( Region ) )
+	PORT_CONFSETTING(      0x0000, DEF_STR( China ) )
+	PORT_CONFSETTING(      0x0001, DEF_STR( Taiwan ) )
+	PORT_CONFSETTING(      0x0002, "Japan (Cave license)" )
+	PORT_CONFSETTING(      0x0003, DEF_STR( Korea ) )
+	PORT_CONFSETTING(      0x0004, DEF_STR( Hong_Kong ) )
+	PORT_CONFSETTING(      0x0005, DEF_STR( World ) )
+	PORT_CONFSETTING(      0x00ff, "Untouched" ) // don't hack the region
+INPUT_PORTS_END
+
+INPUT_PORTS_START( martmast )
+	PORT_INCLUDE ( pgm )
+
+	PORT_START("RegionHack")	/* Region - actually supplied by protection device */
+	PORT_CONFNAME( 0x00ff, 0x00ff, DEF_STR( Region ) )
+	PORT_CONFSETTING(      0x0000, DEF_STR( China ) )
+	PORT_CONFSETTING(      0x0001, DEF_STR( Taiwan ) )
+	PORT_CONFSETTING(      0x0002, DEF_STR( Japan ) )
+	PORT_CONFSETTING(      0x0003, DEF_STR( Korea ) )
+	PORT_CONFSETTING(      0x0004, DEF_STR( Hong_Kong ) )
+	PORT_CONFSETTING(      0x0005, DEF_STR( World ) )
+	PORT_CONFSETTING(      0x0006, DEF_STR( USA ) )
+	PORT_CONFSETTING(      0x00ff, "Untouched" ) // don't hack the region
+INPUT_PORTS_END
+
+
+INPUT_PORTS_START( dw2001 )
+	PORT_INCLUDE ( pgm )
+
+	PORT_MODIFY("Region")	/* Region - supplied by protection device */
+	PORT_CONFNAME( 0x000f, 0x0005, DEF_STR( Region ) )
+	PORT_CONFSETTING(      0x0000, DEF_STR( China ) )
+	PORT_CONFSETTING(      0x0001, DEF_STR( Taiwan ) )
+	PORT_CONFSETTING(      0x0002, "Japan (Alta license)" )
+	PORT_CONFSETTING(      0x0003, DEF_STR( Korea ) )
+	PORT_CONFSETTING(      0x0004, DEF_STR( Hong_Kong ) )
+	PORT_CONFSETTING(      0x0005, DEF_STR( World ) )
+INPUT_PORTS_END
diff -Nru src-old/mame/machine/pgmprot3.c src/mame/machine/pgmprot3.c
--- src-old/mame/machine/pgmprot3.c	1970-01-01 01:00:00.000000000 +0100
+++ src/mame/machine/pgmprot3.c	2012-03-25 15:56:49.000000000 +0200
@@ -0,0 +1,298 @@
+/***********************************************************************
+ PGM IGA027A (55857G type) ARM protection emulation
+
+ these are emulation of the 'dmnfrnt' type ARM device
+ used by
+
+ Demon Front (dmnfrnt) *1
+ The Gladiator (theglad)
+ Spectral vs. Generation (svg)
+ Happy 6-in-1 (happy6)
+ The Killing Blade Plus (killbldp) *2
+
+ None of these work at all, with the following exception.
+
+ *1 - We bypass the internal ROM entirely! Game doesn't jump back
+ *2 - Partial dump of the internal ROM is used, but 'Execute Only' region is missing
+
+ ----
+
+ These games use a large amount of shared RAM which is banked between CPUs
+
+ ----
+
+ All of these games have an external ARM rom.
+
+ The internal ROMs contain an 'execute only' region at the start of the
+ ROM which prevents reading out.
+
+ IGS027A type 55857G has also been seen on various IGS gambling boards
+ as the main CPU (eg. Haunted House, see igs_m027a)
+
+ ***********************************************************************/
+
+#include "emu.h"
+#include "includes/pgm.h"
+
+static WRITE32_HANDLER( svg_arm7_ram_sel_w )
+{
+//  printf("svg_arm7_ram_sel_w %08x\n", data);
+	space->machine().scheduler().synchronize(); // force resync
+
+	pgm_state *state = space->machine().driver_data<pgm_state>();
+	state->m_svg_ram_sel = data & 1;
+}
+
+static READ32_HANDLER( svg_arm7_shareram_r )
+{
+	pgm_state *state = space->machine().driver_data<pgm_state>();
+	return state->m_svg_shareram[state->m_svg_ram_sel & 1][offset];
+}
+
+static WRITE32_HANDLER( svg_arm7_shareram_w )
+{
+	pgm_state *state = space->machine().driver_data<pgm_state>();
+	COMBINE_DATA(&state->m_svg_shareram[state->m_svg_ram_sel & 1][offset]);
+}
+
+static READ16_HANDLER( svg_m68k_ram_r )
+{
+	pgm_state *state = space->machine().driver_data<pgm_state>();
+	int ram_sel = (state->m_svg_ram_sel & 1) ^ 1;
+	UINT16 *share16 = (UINT16 *)(state->m_svg_shareram[ram_sel & 1]);
+
+	return share16[BYTE_XOR_LE(offset)];
+}
+
+static WRITE16_HANDLER( svg_m68k_ram_w )
+{
+	pgm_state *state = space->machine().driver_data<pgm_state>();
+	int ram_sel = (state->m_svg_ram_sel & 1) ^ 1;
+	UINT16 *share16 = (UINT16 *)(state->m_svg_shareram[ram_sel & 1]);
+
+	COMBINE_DATA(&share16[BYTE_XOR_LE(offset)]);
+}
+
+static READ16_HANDLER( svg_68k_nmi_r )
+{
+	return 0;
+}
+
+static WRITE16_HANDLER( svg_68k_nmi_w )
+{
+	pgm_state *state = space->machine().driver_data<pgm_state>();
+	generic_pulse_irq_line(state->m_prot, ARM7_FIRQ_LINE, 1);
+}
+
+static WRITE16_HANDLER( svg_latch_68k_w )
+{
+	pgm_state *state = space->machine().driver_data<pgm_state>();
+	if (PGMARM7LOGERROR)
+		logerror("M68K: Latch write: %04x (%04x) (%06x)\n", data & 0x0000ffff, mem_mask, cpu_get_pc(&space->device()));
+	COMBINE_DATA(&state->m_kov2_latchdata_68k_w);
+}
+
+
+static READ16_HANDLER( svg_latch_68k_r )
+{
+	pgm_state *state = space->machine().driver_data<pgm_state>();
+
+	if (PGMARM7LOGERROR)
+		logerror("M68K: Latch read: %04x (%04x) (%06x)\n", state->m_kov2_latchdata_arm_w & 0x0000ffff, mem_mask, cpu_get_pc(&space->device()));
+	return state->m_kov2_latchdata_arm_w;
+}
+
+
+
+static READ32_HANDLER( svg_latch_arm_r )
+{
+	pgm_state *state = space->machine().driver_data<pgm_state>();
+
+	if (PGMARM7LOGERROR)
+		logerror("ARM7: Latch read: %08x (%08x) (%06x)\n", state->m_kov2_latchdata_68k_w, mem_mask, cpu_get_pc(&space->device()));
+	return state->m_kov2_latchdata_68k_w;
+}
+
+static WRITE32_HANDLER( svg_latch_arm_w )
+{
+	pgm_state *state = space->machine().driver_data<pgm_state>();
+
+	if (PGMARM7LOGERROR)
+		logerror("ARM7: Latch write: %08x (%08x) (%06x)\n", data, mem_mask, cpu_get_pc(&space->device()));
+
+	COMBINE_DATA(&state->m_kov2_latchdata_arm_w);
+}
+
+/* 55857G? */
+/* Demon Front, The Gladiator, Happy 6-in-1, Spectral Vs. Generation, Killing Blade EX */
+/*  the ones with an EXECUTE ONLY region of ARM space? */
+static ADDRESS_MAP_START( svg_68k_mem, AS_PROGRAM, 16)
+	AM_IMPORT_FROM(pgm_mem)
+	AM_RANGE(0x100000, 0x1fffff) AM_ROMBANK("bank1")  /* Game ROM */
+
+	AM_RANGE(0x500000, 0x51ffff) AM_READWRITE(svg_m68k_ram_r, svg_m68k_ram_w)    /* ARM7 Shared RAM */
+	AM_RANGE(0x5c0000, 0x5c0001) AM_READWRITE(svg_68k_nmi_r, svg_68k_nmi_w)      /* ARM7 FIQ */
+	AM_RANGE(0x5c0300, 0x5c0301) AM_READWRITE(svg_latch_68k_r, svg_latch_68k_w) /* ARM7 Latch */
+ADDRESS_MAP_END
+
+
+static ADDRESS_MAP_START( 55857G_arm7_map, AS_PROGRAM, 32 )
+	AM_RANGE(0x00000000, 0x00003fff) AM_ROM
+	AM_RANGE(0x08000000, 0x087fffff) AM_ROM AM_REGION("user1", 0)
+	AM_RANGE(0x10000000, 0x100003ff) AM_RAM
+	AM_RANGE(0x18000000, 0x1803ffff) AM_RAM AM_BASE_MEMBER(pgm_state, m_arm_ram)
+	AM_RANGE(0x38000000, 0x3801ffff) AM_READWRITE(svg_arm7_shareram_r, svg_arm7_shareram_w)
+	AM_RANGE(0x48000000, 0x48000003) AM_READWRITE(svg_latch_arm_r, svg_latch_arm_w) /* 68k Latch */
+	AM_RANGE(0x40000018, 0x4000001b) AM_WRITE(svg_arm7_ram_sel_w) /* RAM SEL */
+	AM_RANGE(0x50000000, 0x500003ff) AM_RAM
+ADDRESS_MAP_END
+
+
+/******* ARM 55857G *******/
+
+MACHINE_CONFIG_DERIVED( svg, pgm )
+	MCFG_CPU_MODIFY("maincpu")
+	MCFG_CPU_PROGRAM_MAP(svg_68k_mem)
+
+	/* protection CPU */
+	MCFG_CPU_ADD("prot", ARM7, 33333333)	// 55857G
+	MCFG_CPU_PROGRAM_MAP(55857G_arm7_map)
+
+MACHINE_CONFIG_END
+
+
+
+static void svg_basic_init(running_machine &machine)
+{
+	pgm_state *state = machine.driver_data<pgm_state>();
+
+	pgm_basic_init(machine);
+	state->m_svg_shareram[0] = auto_alloc_array(machine, UINT32, 0x10000 / 4);
+	state->m_svg_shareram[1] = auto_alloc_array(machine, UINT32, 0x10000 / 4);
+	state->m_svg_ram_sel = 0;
+
+	state->save_pointer(NAME(state->m_svg_shareram[0]), 0x10000 / 4);
+	state->save_pointer(NAME(state->m_svg_shareram[1]), 0x10000 / 4);
+	state->save_item(NAME(state->m_svg_ram_sel));
+}
+
+static void pgm_create_dummy_internal_arm_region(running_machine &machine)
+{
+	UINT16 *temp16 = (UINT16 *)machine.region("prot")->base();
+
+	// fill with RX 14
+	int i;
+	for (i=0;i<0x4000/2;i+=2)
+	{
+		temp16[i] = 0xff1e;
+		temp16[i+1] = 0xe12f;
+
+	}
+
+	// jump straight to external area
+	temp16[(0x0000)/2] = 0xd088;
+	temp16[(0x0002)/2] = 0xe59f;
+	temp16[(0x0004)/2] = 0x0680;
+	temp16[(0x0006)/2] = 0xe3a0;
+	temp16[(0x0008)/2] = 0xff10;
+	temp16[(0x000a)/2] = 0xe12f;
+	temp16[(0x0090)/2] = 0x0400;
+	temp16[(0x0092)/2] = 0x1000;
+}
+
+
+
+static void kov2_latch_init( running_machine &machine )
+{
+	pgm_state *state = machine.driver_data<pgm_state>();
+
+	state->m_kov2_latchdata_68k_w = 0;
+	state->m_kov2_latchdata_arm_w = 0;
+
+	state->save_item(NAME(state->m_kov2_latchdata_68k_w));
+	state->save_item(NAME(state->m_kov2_latchdata_arm_w));
+}
+
+
+DRIVER_INIT( theglad )
+{
+	svg_basic_init(machine);
+	pgm_theglad_decrypt(machine);
+	kov2_latch_init(machine);
+	pgm_create_dummy_internal_arm_region(machine);
+}
+
+DRIVER_INIT( svg )
+{
+	svg_basic_init(machine);
+	pgm_svg_decrypt(machine);
+	kov2_latch_init(machine);
+	pgm_create_dummy_internal_arm_region(machine);
+}
+
+DRIVER_INIT( svgpcb )
+{
+	svg_basic_init(machine);
+	pgm_svgpcb_decrypt(machine);
+	kov2_latch_init(machine);
+	pgm_create_dummy_internal_arm_region(machine);
+}
+
+DRIVER_INIT( killbldp )
+{
+	svg_basic_init(machine);
+	pgm_killbldp_decrypt(machine);
+	kov2_latch_init(machine);
+}
+
+static READ32_HANDLER( dmnfrnt_speedup_r )
+{
+	pgm_state *state = space->machine().driver_data<pgm_state>();
+	int pc = cpu_get_pc(&space->device());
+	if (pc == 0x8000fea) device_eat_cycles(&space->device(), 500);
+//  else printf("dmn_speedup_r %08x\n", pc);
+	return state->m_arm_ram[0x000444/4];
+}
+
+static READ16_HANDLER( dmnfrnt_main_speedup_r )
+{
+	UINT16 data = pgm_mainram[0xa03c/2];
+	int pc = cpu_get_pc(&space->device());
+	if (pc == 0x10193a) device_spin_until_interrupt(&space->device());
+	else if (pc == 0x1019a4) device_spin_until_interrupt(&space->device());
+	return data;
+}
+
+DRIVER_INIT( dmnfrnt )
+{
+	pgm_state *state = machine.driver_data<pgm_state>();
+
+	svg_basic_init(machine);
+	pgm_dfront_decrypt(machine);
+	kov2_latch_init(machine);
+
+	/* put some fake code for the ARM here ... */
+	pgm_create_dummy_internal_arm_region(machine);
+
+	machine.device("prot")->memory().space(AS_PROGRAM)->install_legacy_read_handler(0x18000444, 0x18000447, FUNC(dmnfrnt_speedup_r));
+	machine.device("maincpu")->memory().space(AS_PROGRAM)->install_legacy_read_handler(0x80a03c, 0x80a03d, FUNC(dmnfrnt_main_speedup_r));
+
+	state->m_svg_ram_sel = 1;
+
+	// the internal rom probably also supplies the region here
+	// we have to copy it to both shared ram regions because it reads from a different one before the attract story?
+	// could be a timing error? or shared ram behavior isn't how we think it is?
+	UINT16 *share16;
+	share16 = (UINT16 *)(state->m_svg_shareram[1]);
+	share16[0x158/2] = 0x0005;
+	share16 = (UINT16 *)(state->m_svg_shareram[0]);
+	share16[0x158/2] = 0x0005;
+}
+
+DRIVER_INIT( happy6 )
+{
+	svg_basic_init(machine);
+	pgm_happy6_decrypt(machine);
+	kov2_latch_init(machine);
+	pgm_create_dummy_internal_arm_region(machine);
+}
diff -Nru src-old/mame/machine/pgmprot4.c src/mame/machine/pgmprot4.c
--- src-old/mame/machine/pgmprot4.c	1970-01-01 01:00:00.000000000 +0100
+++ src/mame/machine/pgmprot4.c	2012-03-25 15:56:49.000000000 +0200
@@ -0,0 +1,608 @@
+/***********************************************************************
+ PGM 022 + 025 PGM protection emulation
+
+ these are simulations of the IGS 022 and 025 protection combination
+ used on the following PGM games
+
+ The Killing Blade
+ Dragon World 3*
+ Dragon World 3 EX*
+
+ * preliminary, not working
+
+ ----
+
+ IGS022 is an encrypted DMA device, most likely an MCU of some sort
+
+ IGS025 is some kind of state machine / logic device which the game
+ uses for various securit checks, and to determine the region of the
+ game based on string sequences.
+
+ ***********************************************************************/
+
+#include "emu.h"
+#include "includes/pgm.h"
+
+/* The IGS022 is an MCU which performs encrypted DMA used by
+ - The Killing Blade
+ - Dragon World 3
+
+ There is also an automatic transfer which happens on startup using params stored in the data ROM.
+ This has been verified on real hardware running without any 68k game program.
+
+*/
+
+
+static void IGS022_do_dma(running_machine& machine, UINT16 src, UINT16 dst, UINT16 size, UINT16 mode)
+{
+	pgm_state *state = machine.driver_data<pgm_state>();
+	UINT16 param;
+	/*
+    P_SRC =0x300290 (offset from prot rom base)
+    P_DST =0x300292 (words from 0x300000)
+    P_SIZE=0x300294 (words)
+    P_MODE=0x300296
+
+    Mode 5 direct
+    Mode 6 swap nibbles and bytes
+
+    1,2,3 table based ops
+    */
+
+	//mame_printf_debug("src %04x dst %04x size %04x mode %04x\n", src, dst, size, mode);
+
+	//if (src&1) mame_printf_debug("odd offset\n");
+
+	param = mode >> 8;
+	mode &=0xf;  // what are the other bits?
+
+
+	if ((mode == 0) || (mode == 1) || (mode == 2) || (mode == 3))
+	{
+		/* mode3 applies a xor from a 0x100 byte table to the data being
+           transferred
+
+           the table is stored at the start of the protection rom.
+
+           the param used with the mode gives a start offset into the table
+
+           odd offsets seem to change the table slightly (see rawDataOdd)
+
+       */
+
+		/*
+        unsigned char rawDataOdd[256] = {
+            0xB6, 0xA8, 0xB1, 0x5D, 0x2C, 0x5D, 0x4F, 0xC1,
+            0xCF, 0x39, 0x3A, 0xB7, 0x65, 0x85, 0xD9, 0xEE,
+            0xDB, 0x7B, 0x5F, 0x81, 0x03, 0x6D, 0xEB, 0x07,
+            0x0F, 0xB5, 0x61, 0x59, 0xCD, 0x60, 0x06, 0x21,
+            0xA0, 0x99, 0xDD, 0x27, 0x42, 0xD7, 0xC5, 0x5B,
+            0x3B, 0xC6, 0x4F, 0xA2, 0x20, 0xF6, 0x61, 0x61,
+            0x8C, 0x46, 0x8C, 0xCA, 0xE0, 0x0E, 0x2C, 0xE9,
+            0xBA, 0x0F, 0x45, 0x6D, 0x36, 0x1C, 0x18, 0x37,
+            0xE7, 0x85, 0x89, 0xA4, 0x94, 0x46, 0x30, 0x9B,
+            0xB2, 0xF4, 0x41, 0x55, 0xA5, 0x63, 0x1C, 0xEF,
+            0xB7, 0x18, 0xB3, 0xB1, 0xD4, 0x72, 0xA0, 0x1C,
+            0x0B, 0x97, 0x02, 0xB6, 0xC5, 0x1F, 0x1B, 0x94,
+            0xC3, 0x83, 0xAA, 0xAC, 0xD9, 0x44, 0x09, 0xD7,
+            0x6C, 0xDB, 0x07, 0xA9, 0xAD, 0x64, 0x83, 0xF1,
+            0x92, 0x09, 0xCD, 0x0E, 0x99, 0x2F, 0xBC, 0xF8,
+            0x3C, 0x63, 0x8F, 0x0A, 0x33, 0x03, 0x84, 0x91,
+            0x6C, 0xAC, 0x3A, 0x15, 0xCB, 0x67, 0xC7, 0x69,
+            0xA1, 0x92, 0x99, 0x74, 0xEE, 0x90, 0x0D, 0xBE,
+            0x57, 0x30, 0xD1, 0xBA, 0xE5, 0xDE, 0xFA, 0xD6,
+            0x83, 0x8C, 0xE4, 0x43, 0x36, 0x5E, 0xCD, 0x84,
+            0x1A, 0x18, 0x31, 0xB9, 0x20, 0x48, 0xE3, 0xA8,
+            0x89, 0x32, 0xF0, 0x90, 0x21, 0x80, 0x33, 0xAE,
+            0x3C, 0xA6, 0xB8, 0x8C, 0x72, 0x17, 0xD1, 0x0C,
+            0x1A, 0x29, 0xFA, 0x38, 0x87, 0xC9, 0x6E, 0xC7,
+            0x05, 0xDE, 0x85, 0x6E, 0x92, 0x7E, 0xD4, 0xED,
+            0x5C, 0xD3, 0x03, 0xD4, 0xFE, 0xCB, 0x6C, 0x19,
+            0x7A, 0x83, 0x79, 0x5B, 0xF6, 0x71, 0xBA, 0xF4,
+            0x37, 0x53, 0xC9, 0xC1, 0xDE, 0xDB, 0xDE, 0xB1,
+            0x64, 0x17, 0x31, 0x0E, 0xD7, 0xA2, 0x13, 0x8E,
+            0x52, 0x8D, 0xCB, 0x19, 0x3D, 0x0B, 0x31, 0x58,
+            0x4A, 0xDE, 0x0C, 0x01, 0x2B, 0x85, 0x2D, 0xE5,
+            0x13, 0x22, 0x48, 0xB6, 0xF3, 0x2D, 0x00, 0x9A
+        };
+        */
+		int x;
+		UINT16 *PROTROM = (UINT16*)machine.region("igs022data")->base();
+
+		for (x = 0; x < size; x++)
+		{
+			//UINT16 *RAMDUMP = (UINT16*)space->machine().region("user2")->base();
+			//UINT16 dat = RAMDUMP[dst + x];
+
+			UINT16 dat2 = PROTROM[src + x];
+
+			UINT8 extraoffset = param&0xfe; // the lowest bit changed the table addressing in tests, see 'rawDataOdd' table instead.. it's still related to the main one, not identical
+			UINT8* dectable = (UINT8*)machine.region("igs022data")->base();//rawDataEven; // the basic decryption table is at the start of the mcu data rom! at least in killbld
+			UINT16 extraxor = ((dectable[((x*2)+0+extraoffset)&0xff]) << 8) | (dectable[((x*2)+1+extraoffset)&0xff] << 0);
+
+			dat2 = ((dat2 & 0x00ff)<<8) | ((dat2 & 0xff00)>>8);
+
+			//  mode==0 plain
+			if (mode==3) dat2 ^= extraxor;
+			if (mode==2) dat2 += extraxor;
+			if (mode==1) dat2 -= extraxor;
+
+			//if (dat!=dat2)
+			//  printf("Mode %04x Param %04x Mismatch %04x %04x\n", mode, param, dat, dat2);
+
+			state->m_sharedprotram[dst + x] = dat2;
+		}
+
+		/* Killing Blade: hack, patches out some additional security checks... we need to emulate them instead! */
+		// different region IGS025 devices supply different sequences - we currently only have the china sequence for Killing Blade
+		//if ((mode==3) && (param==0x54) && (src*2==0x2120) && (dst*2==0x2600)) state->m_sharedprotram[0x2600 / 2] = 0x4e75;
+
+	}
+	if (mode == 4)
+	{
+		mame_printf_debug("unhandled copy mode %04x!\n", mode);
+		// not used by killing blade
+		/* looks almost like a fixed value xor, but isn't */
+	}
+	else if (mode == 5)
+	{
+		/* mode 5 seems to be a straight copy */
+		int x;
+		UINT16 *PROTROM = (UINT16*)machine.region("igs022data")->base();
+		for (x = 0; x < size; x++)
+		{
+			UINT16 dat = PROTROM[src + x];
+
+
+			state->m_sharedprotram[dst + x] = dat;
+		}
+	}
+	else if (mode == 6)
+	{
+		/* mode 6 seems to swap bytes and nibbles */
+		int x;
+		UINT16 *PROTROM = (UINT16*)machine.region("igs022data")->base();
+		for (x = 0; x < size; x++)
+		{
+			UINT16 dat = PROTROM[src + x];
+
+			dat = ((dat & 0xf000) >> 12)|
+				  ((dat & 0x0f00) >> 4)|
+				  ((dat & 0x00f0) << 4)|
+				  ((dat & 0x000f) << 12);
+
+			state->m_sharedprotram[dst + x] = dat;
+		}
+	}
+	else if (mode == 7)
+	{
+		mame_printf_debug("unhandled copy mode %04x!\n", mode);
+		// not used by killing blade
+		/* weird mode, the params get left in memory? - maybe it's a NOP? */
+	}
+	else
+	{
+		mame_printf_debug("unhandled copy mode %04x!\n", mode);
+		// not used by killing blade
+		/* invalid? */
+
+	}
+}
+
+// the internal MCU boot code automatically does this DMA
+// and puts the version # of the data rom in ram
+static void IGS022_reset(running_machine& machine)
+{
+	int i;
+	UINT16 *PROTROM = (UINT16*)machine.region("igs022data")->base();
+	pgm_state *state = machine.driver_data<pgm_state>();
+	UINT16 tmp;
+
+	// fill ram with A5 patern
+	for (i = 0; i < 0x4000/2; i++)
+		state->m_sharedprotram[i] = 0xa55a;
+
+	// the auto-dma
+	UINT16 src = PROTROM[0x100 / 2];
+	UINT32 dst = PROTROM[0x102 / 2];
+	UINT16 size = PROTROM[0x104/ 2];
+	UINT16 mode = PROTROM[0x106 / 2];
+
+	src = ((src & 0xff00) >> 8) | ((src & 0x00ff) << 8);
+	dst = ((dst & 0xff00) >> 8) | ((dst & 0x00ff) << 8);
+	size = ((size & 0xff00) >> 8) | ((size & 0x00ff) << 8);
+	mode &= 0xff;
+
+	src >>= 1;
+
+	printf("Auto-DMA %04x %04x %04x %04x\n",src,dst,size,mode);
+
+	IGS022_do_dma(machine,src,dst,size,mode);
+
+	// there is also a version ID? (or is it some kind of checksum) that is stored in the data rom, and gets copied..
+	// Dragon World 3 checks it
+	tmp = PROTROM[0x114/2];
+	tmp = ((tmp & 0xff00) >> 8) | ((tmp & 0x00ff) << 8);
+	state->m_sharedprotram[0x2a2/2] = tmp;
+}
+
+static void IGS022_handle_command(running_machine& machine)
+{
+	pgm_state *state = machine.driver_data<pgm_state>();
+	UINT16 cmd = state->m_sharedprotram[0x200/2];
+	//mame_printf_debug("command %04x\n", cmd);
+	if (cmd == 0x6d)	//Store values to asic ram
+	{
+		UINT32 p1 = (state->m_sharedprotram[0x298/2] << 16) | state->m_sharedprotram[0x29a/2];
+		UINT32 p2 = (state->m_sharedprotram[0x29c/2] << 16) | state->m_sharedprotram[0x29e/2];
+
+		if ((p2 & 0xffff) == 0x9)	//Set value
+		{
+			int reg = (p2 >> 16) & 0xffff;
+			if (reg & 0x200)
+				state->m_kb_regs[reg & 0xff] = p1;
+		}
+		if ((p2 & 0xffff) == 0x6)	//Add value
+		{
+			int src1 = (p1 >> 16) & 0xff;
+			int src2 = (p1 >> 0) & 0xff;
+			int dst = (p2 >> 16) & 0xff;
+			state->m_kb_regs[dst] = state->m_kb_regs[src2] - state->m_kb_regs[src1];
+		}
+		if ((p2 & 0xffff) == 0x1)	//Add Imm?
+		{
+			int reg = (p2 >> 16) & 0xff;
+			int imm = (p1 >> 0) & 0xffff;
+			state->m_kb_regs[reg] += imm;
+		}
+		if ((p2 & 0xffff) == 0xa)	//Get value
+		{
+			int reg = (p1 >> 16) & 0xFF;
+			state->m_sharedprotram[0x29c/2] = (state->m_kb_regs[reg] >> 16) & 0xffff;
+			state->m_sharedprotram[0x29e/2] = state->m_kb_regs[reg] & 0xffff;
+		}
+	}
+	if(cmd == 0x4f)	//memcpy with encryption / scrambling
+	{
+		UINT16 src = state->m_sharedprotram[0x290 / 2] >> 1; // ?
+		UINT32 dst = state->m_sharedprotram[0x292 / 2];
+		UINT16 size = state->m_sharedprotram[0x294 / 2];
+		UINT16 mode = state->m_sharedprotram[0x296 / 2];
+
+		IGS022_do_dma(machine, src,dst,size,mode);
+	}
+
+}
+
+
+static WRITE16_HANDLER( killbld_igs025_prot_w )
+{
+//  mame_printf_debug("killbrd prot r\n");
+//  return 0;
+	pgm_state *state = space->machine().driver_data<pgm_state>();
+	offset &= 0xf;
+
+	if (offset == 0)
+		state->m_kb_cmd = data;
+	else //offset==2
+	{
+		logerror("%06X: ASIC25 W CMD %X  VAL %X\n", cpu_get_pc(&space->device()), state->m_kb_cmd, data);
+		if (state->m_kb_cmd == 0)
+			state->m_kb_reg = data;
+		else if (state->m_kb_cmd == 2)
+		{
+			if (data == 1)	//Execute cmd
+			{
+				IGS022_handle_command(space->machine());
+				state->m_kb_reg++;
+			}
+		}
+		else if (state->m_kb_cmd == 4)
+			state->m_kb_ptr = data;
+		else if (state->m_kb_cmd == 0x20)
+			state->m_kb_ptr++;
+	}
+}
+
+static READ16_HANDLER( killbld_igs025_prot_r )
+{
+//  mame_printf_debug("killbld prot w\n");
+	pgm_state *state = space->machine().driver_data<pgm_state>();
+	UINT16 res ;
+
+	offset &= 0xf;
+	res = 0;
+
+	if (offset == 1)
+	{
+		if (state->m_kb_cmd == 1)
+		{
+			res = state->m_kb_reg & 0x7f;
+		}
+		else if (state->m_kb_cmd == 5)
+		{
+
+			UINT8 kb_region_sequence[11] = {0x17, 0x14, 0x91, 0x89, 0x21, 0xD5, 0x7C, 0x65, 0x8F, 0x8E, 0xE1};
+			UINT8 ret;
+
+			// this isn't properly understood.. should be some kind of bitswap / xor / shift..based on values written to 0x22/0x23 etc.?
+			// return hardcoded china sequence results for now, avoids rom patch
+			if (state->m_kb_region_sequence_position < 11)
+			{
+				ret = kb_region_sequence[state->m_kb_region_sequence_position];
+				state->m_kb_region_sequence_position++;
+			}
+			else
+			{
+				UINT32 protvalue = 0x89911400 | input_port_read(space->machine(), "Region");
+				ret = (protvalue >> (8 * (state->m_kb_ptr - 1))) & 0xff;
+			}
+
+			res = 0x3f00 | ret;  // always 0x3fxx in logged behavior...
+
+		}
+	}
+	logerror("%06X: ASIC25 R CMD %X  VAL %X\n", cpu_get_pc(&space->device()), state->m_kb_cmd, res);
+	return res;
+}
+
+
+
+
+static MACHINE_RESET( killbld )
+{
+	pgm_state *state = machine.driver_data<pgm_state>();
+
+	MACHINE_RESET_CALL(pgm);
+	/* fill the protection ram with a5 + auto dma */
+	IGS022_reset(machine);
+
+	// Reset IGS025 stuff
+	state->m_kb_cmd = 0;
+	state->m_kb_reg = 0;
+	state->m_kb_ptr = 0;
+	state->m_kb_region_sequence_position = 0;
+	memset(state->m_kb_regs, 0, 0x10);
+
+}
+
+
+
+
+DRIVER_INIT( killbld )
+{
+	pgm_state *state = machine.driver_data<pgm_state>();
+
+	pgm_basic_init(machine);
+	pgm_killbld_decrypt(machine);
+
+	machine.device("maincpu")->memory().space(AS_PROGRAM)->install_legacy_readwrite_handler(0xd40000, 0xd40003, FUNC(killbld_igs025_prot_r), FUNC(killbld_igs025_prot_w));
+
+	state->m_kb_cmd = 0;
+	state->m_kb_reg = 0;
+	state->m_kb_ptr = 0;
+	state->m_kb_region_sequence_position = 0;
+	memset(state->m_kb_regs, 0, 0x10);
+
+	state->save_item(NAME(state->m_kb_region_sequence_position));
+	state->save_item(NAME(state->m_kb_cmd));
+	state->save_item(NAME(state->m_kb_reg));
+	state->save_item(NAME(state->m_kb_ptr));
+	state->save_item(NAME(state->m_kb_regs));
+}
+
+static MACHINE_RESET( dw3 )
+{
+	pgm_state *state = machine.driver_data<pgm_state>();
+
+
+	MACHINE_RESET_CALL(pgm);
+	/* fill the protection ram with a5 + auto dma */
+	IGS022_reset(machine);
+
+	/* game won't boot unless various values are in protection RAM
+     - these should almost certainly end up there as the result of executing the protection
+       commands are startup, but which, and how? */
+
+//  state->m_sharedprotram[0x200/2] = 0x006d;
+	state->m_sharedprotram[0x202/2] = 0x007c; // it cares about this, operation status flag?
+
+//  state->m_sharedprotram[0x20c/2] = 0x0000;
+//  state->m_sharedprotram[0x20e/2] = 0x0007;
+//  state->m_sharedprotram[0x210/2] = 0x0000;
+//  state->m_sharedprotram[0x212/2] = 0x0004;
+//  state->m_sharedprotram[0x214/2] = 0x0000;
+//  state->m_sharedprotram[0x216/2] = 0x0007;
+//  state->m_sharedprotram[0x218/2] = 0x0000;
+//  state->m_sharedprotram[0x21a/2] = 0x0004;
+
+//  state->m_sharedprotram[0x288/2] = 0x0000;
+//  state->m_sharedprotram[0x28a/2] = 0x00c2;
+//  state->m_sharedprotram[0x28c/2] = 0x0000;
+//  state->m_sharedprotram[0x28e/2] = 0x00c2;
+//  state->m_sharedprotram[0x290/2] = 0x0500;
+//  state->m_sharedprotram[0x292/2] = 0x1000;
+//  state->m_sharedprotram[0x294/2] = 0x00c3;
+//  state->m_sharedprotram[0x296/2] = 0x7104;
+//  state->m_sharedprotram[0x298/2] = 0x0000;
+//  state->m_sharedprotram[0x29a/2] = 0x0003;
+//  state->m_sharedprotram[0x29c/2] = 0x0108;
+//  state->m_sharedprotram[0x29e/2] = 0x0009;
+
+//  state->m_sharedprotram[0x2a2/2] = 0x84f6; // it cares about this, it's the version number of the data rom, copied automatically!
+
+//  state->m_sharedprotram[0x2ac/2] = 0x006d;
+//  state->m_sharedprotram[0x2ae/2] = 0x0000;
+
+//  state->m_sharedprotram[0x2b0/2] = 0xaf56;
+
+
+	// Reset IGS025 stuff
+	state->m_kb_cmd = 0;
+	state->m_kb_reg = 0;
+	state->m_kb_ptr = 0;
+	state->m_kb_region_sequence_position = 0;
+	memset(state->m_kb_regs, 0, 0x10);
+
+}
+
+
+
+static int reg;
+static int ptr=0;
+
+#define DW3BITSWAP(s,d,bs,bd)  d=((d&(~(1<<bd)))|(((s>>bs)&1)<<bd))
+static UINT8 dw3_swap;
+static WRITE16_HANDLER( drgw3_igs025_prot_w )
+{
+	pgm_state *state = space->machine().driver_data<pgm_state>();
+
+	offset&=0xf;
+
+	if(offset==0)
+		state->m_kb_cmd=data;
+	else //offset==2
+	{
+		printf("%06X: ASIC25 W CMD %X  VAL %X\n",cpu_get_pc(&space->device()),state->m_kb_cmd,data);
+		if(state->m_kb_cmd==0)
+			reg=data;
+		else if(state->m_kb_cmd==3)	//??????????
+		{
+			dw3_swap = data;
+
+			printf("SWAP %02x\n",dw3_swap);
+		}
+		//else if(kb_cmd==4)
+		//  ptr=data;
+		else if(state->m_kb_cmd==0x20)
+			ptr++;
+	}
+}
+
+static READ16_HANDLER( drgw3_igs025_prot_r )
+{
+//  mame_printf_debug("killbld prot w\n");
+	pgm_state *state = space->machine().driver_data<pgm_state>();
+
+	UINT16 res ;
+
+	offset&=0xf;
+	res=0;
+
+	if(offset==1)
+	{
+		if(state->m_kb_cmd==0)	//swap
+		{
+				UINT8 v1=(dw3_swap+1)&0x7F;
+				UINT8 v2=0;
+				DW3BITSWAP(v1,v2,7,0);
+				DW3BITSWAP(v1,v2,6,1);
+				DW3BITSWAP(v1,v2,5,2);
+				DW3BITSWAP(v1,v2,4,3);
+				DW3BITSWAP(v1,v2,3,4);
+				DW3BITSWAP(v1,v2,2,5);
+				DW3BITSWAP(v1,v2,1,6);
+				DW3BITSWAP(v1,v2,0,7);
+
+				res=v2;
+
+		}
+		else if(state->m_kb_cmd==1)
+		{
+			res=reg&0x7f;
+		}
+		else if(state->m_kb_cmd==5)
+		{
+			UINT32 protvalue;
+			protvalue = 0x60000|input_port_read(space->machine(), "Region");
+			res=(protvalue>>(8*(ptr-1)))&0xff;
+
+
+		}
+	}
+	logerror("%06X: ASIC25 R CMD %X  VAL %X\n",cpu_get_pc(&space->device()),state->m_kb_cmd,res);
+	return res;
+}
+
+
+DRIVER_INIT( drgw3 )
+{
+	pgm_basic_init(machine);
+
+/*
+    pgm_state *state = machine.driver_data<pgm_state>();
+
+    {
+        int x;
+        UINT16 *RAMDUMP = (UINT16*)machine.region("user2")->base();
+        for (x=0;x<(0x4000/2);x++)
+        {
+            state->m_sharedprotram[x] = RAMDUMP[x];
+            if((x>=0x100)&&(x<0x110)) printf("data 0x%4x, offset:%x\n",state->m_sharedprotram[x],x);
+        }
+    }
+*/
+	machine.device("maincpu")->memory().space(AS_PROGRAM)->install_legacy_readwrite_handler(0xDA5610, 0xDA5613, FUNC(drgw3_igs025_prot_r), FUNC(drgw3_igs025_prot_w));
+
+	pgm_dw3_decrypt(machine);
+}
+
+
+static ADDRESS_MAP_START( killbld_mem, AS_PROGRAM, 16)
+	AM_IMPORT_FROM(pgm_mem)
+	AM_RANGE(0x100000, 0x2fffff) AM_ROMBANK("bank1") /* Game ROM */
+	AM_RANGE(0x300000, 0x303fff) AM_RAM AM_BASE_MEMBER(pgm_state, m_sharedprotram) // Shared with protection device
+ADDRESS_MAP_END
+
+
+
+MACHINE_CONFIG_DERIVED( killbld, pgm )
+	MCFG_CPU_MODIFY("maincpu")
+	MCFG_CPU_PROGRAM_MAP(killbld_mem)
+
+	MCFG_MACHINE_RESET(killbld)
+MACHINE_CONFIG_END
+
+
+MACHINE_CONFIG_DERIVED( dw3, pgm )
+	MCFG_CPU_MODIFY("maincpu")
+	MCFG_CPU_PROGRAM_MAP(killbld_mem)
+
+	MCFG_MACHINE_RESET(dw3)
+MACHINE_CONFIG_END
+
+
+INPUT_PORTS_START( killbld )
+	PORT_INCLUDE ( pgm )
+
+	PORT_MODIFY("Region")	/* Region - supplied by protection device */
+	PORT_DIPNAME( 0x00ff, 0x0021, "Region (not currently working)" ) // different regions supply different protection code sequences, we only have the China one ATM
+	PORT_DIPSETTING(      0x0016, DEF_STR( Taiwan ) )
+	PORT_DIPSETTING(      0x0017, DEF_STR( China ) )
+	PORT_DIPSETTING(      0x0018, DEF_STR( Hong_Kong ) )
+	PORT_DIPSETTING(      0x0019, DEF_STR( Japan ) )
+//  PORT_DIPSETTING(      0x001a, "1a" ) // invalid
+//  PORT_DIPSETTING(      0x001b, "1b" ) // invalid
+//  PORT_DIPSETTING(      0x001c, "1c" ) // invalid
+//  PORT_DIPSETTING(      0x001d, "1d" ) // invalid
+//  PORT_DIPSETTING(      0x001e, "1e" ) // invalid
+//  PORT_DIPSETTING(      0x001f, "1f" ) // invalid
+	PORT_DIPSETTING(      0x0020, DEF_STR( Korea ) )
+	PORT_DIPSETTING(      0x0021, DEF_STR( World ) )
+INPUT_PORTS_END
+
+INPUT_PORTS_START( dw3 )
+	PORT_INCLUDE ( pgm )
+
+	PORT_MODIFY("Region")	/* Region - supplied by protection device */
+	PORT_CONFNAME( 0x000f, 0x0006, DEF_STR( Region ) )
+	PORT_CONFSETTING(      0x0000, "0" )
+	PORT_CONFSETTING(      0x0001, "1" )
+	PORT_CONFSETTING(      0x0002, "2" )
+	PORT_CONFSETTING(      0x0003, "3" )
+	PORT_CONFSETTING(      0x0004, "4" )
+	PORT_CONFSETTING(      0x0005, "5" )
+	PORT_CONFSETTING(      0x0006, DEF_STR( World ) )
+	PORT_CONFSETTING(      0x0007, "7" )
+
+INPUT_PORTS_END
diff -Nru src-old/mame/machine/pgmprot5.c src/mame/machine/pgmprot5.c
--- src-old/mame/machine/pgmprot5.c	1970-01-01 01:00:00.000000000 +0100
+++ src/mame/machine/pgmprot5.c	2012-03-25 15:56:49.000000000 +0200
@@ -0,0 +1,112 @@
+/***********************************************************************
+ PGM 012 + 025 PGM protection emulation
+
+ these are simulations of the IGS 012 and 025 protection combination
+ used on the following PGM games
+
+ Dragon World 2
+
+ ----
+
+ IGS012 provides ROM overlay???
+
+ IGS025 is some kind of state machine / logic device which the game
+ uses for various security checks bitswap checks.
+
+ Simulation is incomplete for some regions
+
+ ***********************************************************************/
+
+
+#include "emu.h"
+#include "includes/pgm.h"
+
+
+/* Dragon World 2 */
+
+#define DW2BITSWAP(s,d,bs,bd)  d=((d&(~(1<<bd)))|(((s>>bs)&1)<<bd))
+//Use this handler for reading from 0xd80000-0xd80002
+READ16_HANDLER( dw2_d80000_r )
+{
+// addr&=0xff;
+// if(dw2reg<0x20) //NOT SURE!!
+	{
+		//The value at 0x80EECE is computed in the routine at 0x107c18
+		UINT16 d = pgm_mainram[0xEECE/2];
+		UINT16 d2 = 0;
+		d = (d >> 8) | (d << 8);
+		DW2BITSWAP(d, d2, 7,  0);
+		DW2BITSWAP(d, d2, 4,  1);
+		DW2BITSWAP(d, d2, 5,  2);
+		DW2BITSWAP(d, d2, 2,  3);
+		DW2BITSWAP(d, d2, 15, 4);
+		DW2BITSWAP(d, d2, 1,  5);
+		DW2BITSWAP(d, d2, 10, 6);
+		DW2BITSWAP(d, d2, 13, 7);
+		// ... missing bitswaps here (8-15) there is not enough data to know them
+		// the code only checks the lowest 8 bytes
+		return d2;
+	}
+}
+
+
+
+static void drgwld2_common_init(running_machine &machine)
+{
+	pgm_basic_init(machine);
+	pgm_dw2_decrypt(machine);
+	/*
+    Info from Elsemi
+    Here is how to "bypass" the dw2 hang protection, it fixes the mode
+    select and after failing in the 2nd stage (probably there are other checks
+    out there).
+    */
+	machine.device("maincpu")->memory().space(AS_PROGRAM)->install_legacy_read_handler(0xd80000, 0xd80003, FUNC(dw2_d80000_r));
+}
+
+DRIVER_INIT( drgw2 )
+{	/* incomplete? */
+	UINT16 *mem16 = (UINT16 *)machine.region("maincpu")->base();
+	drgwld2_common_init(machine);
+	/* These ROM patches are not hacks, the protection device
+       overlays the normal ROM code, this has been confirmed on a real PCB
+       although some addresses may be missing */
+	mem16[0x131098 / 2] = 0x4e93;
+	mem16[0x13113e / 2] = 0x4e93;
+	mem16[0x1311ce / 2] = 0x4e93;
+}
+
+DRIVER_INIT( dw2v100x )
+{
+	UINT16 *mem16 = (UINT16 *)machine.region("maincpu")->base();
+	drgwld2_common_init(machine);
+
+	mem16[0x131084 / 2] = 0x4e93;
+	mem16[(0x131084+0xa6) / 2] = 0x4e93;
+	mem16[(0x131084+0x136) / 2] = 0x4e93;
+}
+
+DRIVER_INIT( drgw2c )
+{
+	UINT16 *mem16 = (UINT16 *)machine.region("maincpu")->base();
+	drgwld2_common_init(machine);
+	/* These ROM patches are not hacks, the protection device
+       overlays the normal ROM code, this has been confirmed on a real PCB
+       although some addresses may be missing */
+	mem16[0x1303bc / 2] = 0x4e93;
+	mem16[0x130462 / 2] = 0x4e93;
+	mem16[0x1304f2 / 2] = 0x4e93;
+}
+
+DRIVER_INIT( drgw2j )
+{
+	UINT16 *mem16 = (UINT16 *)machine.region("maincpu")->base();
+	drgwld2_common_init(machine);
+	/* These ROM patches are not hacks, the protection device
+       overlays the normal ROM code, this has been confirmed on a real PCB
+       although some addresses may be missing */
+	mem16[0x1302c0 / 2] = 0x4e93;
+	mem16[0x130366 / 2] = 0x4e93;
+	mem16[0x1303f6 / 2] = 0x4e93;
+}
+
diff -Nru src-old/mame/machine/pgmprot6.c src/mame/machine/pgmprot6.c
--- src-old/mame/machine/pgmprot6.c	1970-01-01 01:00:00.000000000 +0100
+++ src/mame/machine/pgmprot6.c	2012-03-25 15:56:49.000000000 +0200
@@ -0,0 +1,245 @@
+/***********************************************************************
+ PGM 012 + 28 PGM protection emulation
+
+ these are simulations of the IGS 012 and 025 protection combination
+ used on the following PGM games
+
+ Oriental Legend Super
+
+ ----
+
+ IGS28 is some kind of encrypted DMA device, works with data in an
+ external ROM, more advaned version of IGS022?
+
+ IGS025 is some kind of state machine, bitswaps etc.
+
+ Simulation is incomplete
+
+ ***********************************************************************/
+
+#include "emu.h"
+#include "includes/pgm.h"
+
+static UINT32 olds_prot_addr( UINT16 addr )
+{
+	UINT32 mode = addr & 0xff;
+	UINT32 offset = addr >> 8;
+	UINT32 realaddr;
+
+	switch(mode)
+	{
+		case 0x0:
+		case 0x5:
+		case 0xa:
+			realaddr = 0x402a00 + (offset << 2);
+			break;
+
+		case 0x2:
+		case 0x8:
+			realaddr = 0x402e00 + (offset << 2);
+			break;
+
+		case 0x1:
+			realaddr = 0x40307e;
+			break;
+
+		case 0x3:
+			realaddr = 0x403090;
+			break;
+
+		case 0x4:
+			realaddr = 0x40309a;
+			break;
+
+		case 0x6:
+			realaddr = 0x4030a4;
+			break;
+
+		case 0x7:
+			realaddr = 0x403000;
+			break;
+
+		case 0x9:
+			realaddr = 0x40306e;
+			break;
+
+		default:
+			realaddr = 0;
+	}
+	return realaddr;
+}
+
+static UINT32 olds_read_reg( running_machine &machine, UINT16 addr )
+{
+	pgm_state *state = machine.driver_data<pgm_state>();
+	UINT32 protaddr = (olds_prot_addr(addr) - 0x400000) / 2;
+	return state->m_sharedprotram[protaddr] << 16 | state->m_sharedprotram[protaddr + 1];
+}
+
+static void olds_write_reg( running_machine &machine, UINT16 addr, UINT32 val )
+{
+	pgm_state *state = machine.driver_data<pgm_state>();
+	state->m_sharedprotram[(olds_prot_addr(addr) - 0x400000) / 2]     = val >> 16;
+	state->m_sharedprotram[(olds_prot_addr(addr) - 0x400000) / 2 + 1] = val & 0xffff;
+}
+
+static MACHINE_RESET( olds )
+{
+	pgm_state *state = machine.driver_data<pgm_state>();
+	UINT16 *mem16 = (UINT16 *)machine.region("user2")->base();
+	int i;
+
+	MACHINE_RESET_CALL(pgm);
+
+	/* populate shared protection ram with data read from pcb .. */
+	for (i = 0; i < 0x4000 / 2; i++)
+	{
+		state->m_sharedprotram[i] = mem16[i];
+	}
+
+	//ROM:004008B4                 .word 0xFBA5
+	for(i = 0; i < 0x4000 / 2; i++)
+	{
+		if (state->m_sharedprotram[i] == (0xffff - i))
+			state->m_sharedprotram[i] = 0x4e75;
+	}
+}
+
+static READ16_HANDLER( olds_r )
+{
+	pgm_state *state = space->machine().driver_data<pgm_state>();
+	UINT16 res = 0;
+
+	if (offset == 1)
+	{
+		if (state->m_kb_cmd == 1)
+			res = state->m_kb_reg & 0x7f;
+		if (state->m_kb_cmd == 2)
+			res = state->m_olds_bs | 0x80;
+		if (state->m_kb_cmd == 3)
+			res = state->m_olds_cmd3;
+		else if (state->m_kb_cmd == 5)
+		{
+			UINT32 protvalue = 0x900000 | input_port_read(space->machine(), "Region"); // region from protection device.
+			res = (protvalue >> (8 * (state->m_kb_ptr - 1))) & 0xff; // includes region 1 = taiwan , 2 = china, 3 = japan (title = orlegend special), 4 = korea, 5 = hongkong, 6 = world
+
+		}
+	}
+	logerror("%06X: ASIC25 R CMD %X  VAL %X\n", cpu_get_pc(&space->device()), state->m_kb_cmd, res);
+	return res;
+}
+
+static WRITE16_HANDLER( olds_w )
+{
+	pgm_state *state = space->machine().driver_data<pgm_state>();
+	if (offset == 0)
+		state->m_kb_cmd = data;
+	else //offset==2
+	{
+		logerror("%06X: ASIC25 W CMD %X  VAL %X\n",cpu_get_pc(&space->device()), state->m_kb_cmd, data);
+		if (state->m_kb_cmd == 0)
+			state->m_kb_reg = data;
+		else if(state->m_kb_cmd == 2)	//a bitswap=
+		{
+			int reg = 0;
+			if (data & 0x01)
+				reg |= 0x40;
+			if (data & 0x02)
+				reg |= 0x80;
+			if (data & 0x04)
+				reg |= 0x20;
+			if (data & 0x08)
+				reg |= 0x10;
+			state->m_olds_bs = reg;
+		}
+		else if (state->m_kb_cmd == 3)
+		{
+			UINT16 cmd = state->m_sharedprotram[0x3026 / 2];
+			switch (cmd)
+			{
+				case 0x11:
+				case 0x12:
+						break;
+				case 0x64:
+					{
+						UINT16 cmd0 = state->m_sharedprotram[0x3082 / 2];
+						UINT16 val0 = state->m_sharedprotram[0x3050 / 2];	//CMD_FORMAT
+						{
+							if ((cmd0 & 0xff) == 0x2)
+								olds_write_reg(space->machine(), val0, olds_read_reg(space->machine(), val0) + 0x10000);
+						}
+						break;
+					}
+
+				default:
+						break;
+			}
+			state->m_olds_cmd3 = ((data >> 4) + 1) & 0x3;
+		}
+		else if (state->m_kb_cmd == 4)
+			state->m_kb_ptr = data;
+		else if(state->m_kb_cmd == 0x20)
+		  state->m_kb_ptr++;
+	}
+}
+
+static READ16_HANDLER( olds_prot_swap_r )
+{
+	if (cpu_get_pc(&space->device()) < 0x100000)		//bios
+		return pgm_mainram[0x178f4 / 2];
+	else						//game
+		return pgm_mainram[0x178d8 / 2];
+
+}
+
+DRIVER_INIT( olds )
+{
+	pgm_state *state = machine.driver_data<pgm_state>();
+	pgm_basic_init(machine);
+
+	machine.device("maincpu")->memory().space(AS_PROGRAM)->install_legacy_readwrite_handler(0xdcb400, 0xdcb403, FUNC(olds_r), FUNC(olds_w));
+	machine.device("maincpu")->memory().space(AS_PROGRAM)->install_legacy_read_handler(0x8178f4, 0x8178f5, FUNC(olds_prot_swap_r));
+
+	state->m_kb_cmd = 0;
+	state->m_kb_reg = 0;
+	state->m_kb_ptr = 0;
+	state->m_olds_bs = 0;
+	state->m_olds_cmd3 = 0;
+
+	state->save_item(NAME(state->m_kb_cmd));
+	state->save_item(NAME(state->m_kb_reg));
+	state->save_item(NAME(state->m_kb_ptr));
+	state->save_item(NAME(state->m_olds_bs));
+	state->save_item(NAME(state->m_olds_cmd3));
+}
+
+static ADDRESS_MAP_START( olds_mem, AS_PROGRAM, 16)
+	AM_IMPORT_FROM(pgm_mem)
+	AM_RANGE(0x100000, 0x3fffff) AM_ROMBANK("bank1") /* Game ROM */
+	AM_RANGE(0x400000, 0x403fff) AM_RAM AM_BASE_MEMBER(pgm_state, m_sharedprotram) // Shared with protection device
+ADDRESS_MAP_END
+
+
+MACHINE_CONFIG_DERIVED( olds, pgm )
+	MCFG_CPU_MODIFY("maincpu")
+	MCFG_CPU_PROGRAM_MAP(olds_mem)
+
+	MCFG_MACHINE_RESET(olds)
+MACHINE_CONFIG_END
+
+
+INPUT_PORTS_START( olds )
+	PORT_INCLUDE ( pgm )
+
+	PORT_MODIFY("Region")	/* Region - supplied by protection device */
+	PORT_CONFNAME( 0x000f, 0x0006, DEF_STR( Region ) )
+	/* includes the following regions:
+    1 = taiwan, 2 = china, 3 = japan (title = orlegend special),
+    4 = korea, 5 = hong kong, 6 = world */
+	PORT_CONFSETTING(      0x0001, DEF_STR( Taiwan ) )
+	PORT_CONFSETTING(      0x0002, DEF_STR( China ) )
+	PORT_CONFSETTING(      0x0003, DEF_STR( Japan ) )
+	PORT_CONFSETTING(      0x0004, DEF_STR( Korea ) )
+	PORT_CONFSETTING(      0x0005, DEF_STR( Hong_Kong ) )
+	PORT_CONFSETTING(      0x0006, DEF_STR( World ) )
+INPUT_PORTS_END
diff -Nru src-old/mame/machine/r2crypt.c src/mame/machine/r2crypt.c
--- src-old/mame/machine/r2crypt.c	2012-03-03 03:05:33.000000000 +0100
+++ src/mame/machine/r2crypt.c	2012-03-25 15:56:49.000000000 +0200
@@ -77,38 +77,6 @@
 static const UINT32 xmap_high_11[8] = { 0xd88e9b92, 0xda49726b, 0xc13f86b7, 0x6ce2a1b0, 0xb3adc6e9, 0xd83c2f64, 0xa14c1efc, 0xe98a3c19 };
 static const UINT32 xmap_high_13[8] = { 0x03f8a061, 0x19f39b5a, 0x13a17ae2, 0x85c06682, 0x42118566, 0x78e4ff8a, 0xbee64f97, 0x5eecb443 };
 static const UINT32 xmap_high_15[8] = { 0x1c6f2b4f, 0x9eebe281, 0x784b85d8, 0x401d6412, 0x0370ae0a, 0xa791d0b3, 0x89d290ea, 0x4666f009 };
-static const UINT32 xmap_high_16[8] = { 0xbe2beb93, 0xac9284fb, 0xa629fdbf, 0x82fe33dc, 0x75f1a31b, 0xee1f4f24, 0xaecc7e1e, 0xcd9b419e };
-
-#ifdef UNUSED_DEFINITION
-static const UINT32 zmap_0[8] = { 0x08b01003, 0xed4037ec, 0x9a3a3044, 0x0daf5851, 0xa7725210, 0x0c1822ed, 0xbf726fe6, 0x6e783ea0 };
-static const UINT32 zmap_1[8] = { 0xc6783a02, 0x1e8239df, 0xa53d108b, 0xcc5784a1, 0x9bbb0123, 0xcc2c11dd, 0xbfb9bfda, 0x5db43f53 };
-#endif
-
-static const UINT32 zmap_2[32] = {
-  0x1b301017, 0x02310910, 0x04404644, 0x08042024, 0x050a3aa4, 0xb6087024, 0xa2204208, 0x1c9d9228,
-  0x00c04200, 0xe0821041, 0x0018a803, 0x6402d208, 0x3a104109, 0x005082c0, 0x00920910, 0x20404007,
-  0xc006a4c0, 0x1c48e006, 0xf8871010, 0x83510440, 0x80600410, 0x00040c0a, 0x510590e6, 0x40200910,
-  0x24090928, 0x010406a8, 0x032001a8, 0x10a80993, 0x40858042, 0x49a30111, 0x0c482401, 0x830224c0
-};
-
-static const UINT32 zmap_3[32] = {
-  0xd46b6286, 0x2da93768, 0xf95f5b47, 0x657b472e, 0x05ed940f, 0x86364f88, 0x863d5fed, 0xe3f1ef82,
-  0x2b949d79, 0xd256c897, 0x06a0a4b8, 0x9a84b8d1, 0xfa126bf0, 0x79c9b077, 0x79c2a012, 0x1c0e107d,
-  0x146dc646, 0x31e1d76e, 0x01d84b57, 0xe62a436e, 0x858d901f, 0x86324382, 0xd738cf0b, 0xa3d1e692,
-  0x0f9d9451, 0xd352ce3f, 0x0580a510, 0x8a2cb142, 0xba97ebb2, 0x306ab166, 0x758a8413, 0x9f0c34bd,
-};
-
-static const UINT32 zmap_4[16] = {
-  0xdb36b4d7, 0x1e79e916, 0xfcc75654, 0x8b552464, 0x856a3eb4, 0xb60c7c2e, 0xf325d2ee, 0x5cbd9b38,
-  0x24c94b28, 0xe18616e9, 0x0338a9ab, 0x74aadb9b, 0x7a95c14b, 0x49f383d1, 0x0cda2d11, 0xa34264c7,
-};
-
-static const UINT32 zmap_5[32] = {
-  0x1bf05217, 0xe2b31951, 0x0458ee47, 0x6c06f22c, 0x3f1a7bad, 0xb658f2e4, 0xa2b24b18, 0x3cddd22f,
-  0x1bf05217, 0xe2b31951, 0x0458ee47, 0x6c06f22c, 0x3f1a7bad, 0xb658f2e4, 0xa2b24b18, 0x3cddd22f,
-  0x3f39193f, 0x03350fb8, 0x076047ec, 0x18ac29b7, 0x458fbae6, 0xffab7135, 0xae686609, 0x9f9fb6e8,
-  0xc0c6e6c0, 0xfccaf047, 0xf89fb813, 0xe753d648, 0xba704519, 0x00548eca, 0x519799f6, 0x60604917,
-};
 
 #if 0
 static UINT32 xrot(UINT32 v, int r)
@@ -139,9 +107,8 @@
 
 static UINT32 gm(int i)
 {
-  UINT32 x;
+  unsigned int x;
   int idx = i & 0xff;
-  int idx2 = ((i>>8) & 0x1ff) | ((i>>9) & 0x200);
   int i1, i2;
 
   if(i & 0x008000)
@@ -152,33 +119,32 @@
   i1 = idx & 0xff;
   i2 = (i >> 8) & 0xff;
 
-  x    = 0x41135012;
+  x = 0x4c435012;
 
   if(bt(xmap_low_01, i1))
-    x ^= 0x00c01000;
+    x ^= 0x00401000;
   if(bt(xmap_low_03, i1))
-    x ^= 0x03000800;
+    x ^= 0x01000800;
   if(bt(xmap_low_07, i1))
     x ^= 0x00044000;
   if(bt(xmap_low_23, i1))
     x ^= 0x00102000;
   if(bt(xmap_low_31, i1))
     x ^= 0x00008000;
-
   if(bt(xmap_high_00, i2))
-    x ^= 0x00000400;
+    x ^= 0x0c000400;
   if(bt(xmap_high_02, i2))
     x ^= 0x00200020;
   if(bt(xmap_high_03, i2))
     x ^= 0x02000008;
   if(bt(xmap_high_04, i2))
     x ^= 0x10000200;
-  if(bt(xmap_high_06, i2))
-    x ^= 0x00000004;
+ if(bt(xmap_high_06, i2))
+    x ^= 0x08000004;
   if(bt(xmap_high_21, i2))
     x ^= 0x80000001;
   if(bt(xmap_high_20, i2))
-    x ^= 0x00100040;
+    x ^= 0x00080040;
   if(bt(xmap_high_10, i2))
     x ^= 0x40000100;
   if(bt(xmap_high_11, i2))
@@ -187,65 +153,100 @@
     x ^= 0x00020080;
   if(bt(xmap_high_15, i2))
     x ^= 0x20000002;
-  if(bt(xmap_high_16, i2))
-    x ^= 0x00080000;
 
   if(i & 0x010000)
-    x ^= 0xa200000f;
+    x ^= 0xaa00000f;
   if(i & 0x020000)
-    x ^= 0x00ba00f0;
+    x ^= 0x00aa00f0;
   if(i & 0x040000)
-    x ^= 0x53000f00;
+    x ^= 0x5d000f00;
   if(i & 0x080000)
-    x ^= 0x00d4f000;
-
-  if(bt(zmap_2, idx2) && bt(xmap_low_03, i1))
-    x ^= 0x08000000;
-
-  if(bt(zmap_3, idx2))
-    x ^= 0x08000000;
-
-  if(bt(zmap_4, idx2&0x1ff) && bt(xmap_low_03, i1))
-    x ^= 0x04000000;
-
-  if(bt(zmap_5, idx2))
-    x ^= 0x04000000;
+    x ^= 0x0054f000;
 
   return x;
 }
 
 static UINT32 trans(UINT32 v, UINT32 x)
 {
-  UINT32 R = v^x, r = R;
-
-  if((R & (1<<8)) && (v & (1<<30)))
-    r ^= 1<<9;
-
-  if((R & (1<<12)) && (v & (1<<22)))
-    r ^= 1<<13;
-
-  if((v & (1<<18)) && (x & (1<<14)))
-    r ^= 1<<19;
-
-  if((v & (1<<19)) && (x & (1<<6)))
-    r ^= 1<<20;
-
-  if((R & (1<<22)) && (x & (1<<22)))
-    r ^= 1<<23;
+  unsigned y,r2,v2;
 
-  if((R & (1<<24)) && (x & (1<<24)))
-    r ^= 1<<25;
+  v2 = (BIT(v,30)<<8)|(BIT(v,22)<<12)|(BIT(v,18)<<18)|(BIT(v,19)<<19)|(BIT(v,22)<<22)|(BIT(v,24)<<24)|(BIT(v,3)<<25)|(BIT(v,26)<<26)|(BIT(v,28)<<28);
+  v2 ^= 0x01000000;
 
-  if((R & (1<<25)) && (v & (1<<3)))
-    r ^= 1<<26;
+  r2 = 0;
+  y = 0;
 
-  if((R & (1<<26)) && (x & (1<<26)))
-    r ^= 1<<27;
+  y |= ((                              0 ^ BIT(x, 0) ^ BIT(v, 0))<< 0);
+  y |= ((                              0 ^ BIT(x, 1) ^ BIT(v, 1))<< 1);
+  y |= ((                              0 ^ BIT(x, 2) ^ BIT(v, 2))<< 2);
+  y |= ((                              0 ^ BIT(x, 3) ^ BIT(v, 3))<< 3);
+  y |= ((                              0 ^ BIT(x, 4) ^ BIT(v, 4))<< 4);
+  y |= ((                              0 ^ BIT(x, 5) ^ BIT(v, 5))<< 5);
+  y |= ((                              0 ^ BIT(x, 6) ^ BIT(v, 6))<< 6);
+  y |= ((                              0 ^ BIT(x, 7) ^ BIT(v, 7))<< 7);
+  y |= ((                              0 ^ BIT(x, 8) ^ BIT(v, 8))<< 8);
+  y |= ((                              0 ^ BIT(x, 9) ^ BIT(v, 9))<< 9);
+  y |= ((                              0 ^ BIT(x,10) ^ BIT(v,10))<<10);
+  y |= ((                              0 ^ BIT(x,11) ^ BIT(v,11))<<11);
+  y |= ((                              0 ^ BIT(x,12) ^ BIT(v,12))<<12);
+  y |= ((                              0 ^ BIT(x,13) ^ BIT(v,13))<<13);
+  y |= ((                              0 ^ BIT(x,14) ^ BIT(v,14))<<14);
+  y |= ((                              0 ^ BIT(x,15) ^ BIT(v,15))<<15);
+  y |= ((                              0 ^ BIT(x,16) ^ BIT(v,16))<<16);
+  y |= ((                              0 ^ BIT(x,17) ^ BIT(v,17))<<17);
+  y |= ((                              0 ^ BIT(x,18) ^ BIT(v,18))<<18);
+  y |= ((                              1 ^ BIT(x,19) ^ BIT(v,19))<<19);
+  y |= ((                      BIT(x,19) ^ BIT(x,20) ^ BIT(v,20))<<20);
+  y |= ((                              0 ^ BIT(x,21) ^ BIT(v,21))<<21);
+  y |= ((                              0 ^ BIT(x,22) ^ BIT(v,22))<<22);
+  y |= ((                              0 ^ BIT(x,23) ^ BIT(v,23))<<23);
+  y |= ((                              1 ^ BIT(x,24) ^ BIT(v,24))<<24);
+  y |= ((                      BIT(x,24) ^ BIT(x,25) ^ BIT(v,25))<<25);
+  y |= ((          (BIT(x,24)&BIT(x,25)) ^ BIT(x,26) ^ BIT(v,26))<<26);
+  y |= (((BIT(x,24)&BIT(x,25)&BIT(x,26)) ^ BIT(x,27) ^ BIT(v,27))<<27);
+  y |= ((                              0 ^ BIT(x,28) ^ BIT(v,28))<<28);
+  y |= ((                              0 ^ BIT(x,29) ^ BIT(v,29))<<29);
+  y |= ((                              0 ^ BIT(x,30) ^ BIT(v,30))<<30);
+  y |= ((                              0 ^ BIT(x,31) ^ BIT(v,31))<<31);
+
+
+  r2 |= (                     0<< 0);
+  r2 |= (                     0<< 1);
+  r2 |= (                     0<< 2);
+  r2 |= (                     0<< 3);
+  r2 |= (                     0<< 4);
+  r2 |= (                     0<< 5);
+  r2 |= (                     0<< 6);
+  r2 |= (                     0<< 7);
+  r2 |= (                     0<< 8);
+  r2 |= ((BIT(v2, 8)&BIT(y, 8))<< 9);
+  r2 |= (                     0<<10);
+  r2 |= (                     0<<11);
+  r2 |= (                     0<<12);
+  r2 |= ((BIT(v2,12)&BIT(y,12))<<13);
+  r2 |= (                     0<<14);
+  r2 |= (                     0<<15);
+  r2 |= (                     0<<16);
+  r2 |= (                     0<<17);
+  r2 |= (                     0<<18);
+  r2 |= ((BIT(v2,18)&BIT(y,18))<<19);
+  r2 |= ((BIT(v2,19)&BIT(y,19))<<20);
+  r2 |= (                     0<<21);
+  r2 |= (                     0<<22);
+  r2 |= ((BIT(v2,22)&BIT(y,22))<<23);
+  r2 |= (                     0<<24);
+  r2 |= ((BIT(v2,24)&BIT(y,24))<<25);
+  r2 |= ((BIT(v2,25)&BIT(y,25))<<26);
+  r2 |= ((BIT(v2,26)&BIT(y,26))<<27);
+  r2 |= (                     0<<28);
+  r2 |= ((BIT(v2,28)&BIT(y,28))<<29);
+  r2 |= (                     0<<30);
+  r2 |= (                     0<<31);
 
-  if((R & (1<<28)) && (v & (1<<28)))
-    r ^= 1<<29;
+  r2 ^= y;
+  r2 ^= 0x0c500000;
 
-  return r;
+  return r2;
 }
 
 void raiden2_decrypt_sprites(running_machine &machine)
diff -Nru src-old/mame/machine/seicop.c src/mame/machine/seicop.c
--- src-old/mame/machine/seicop.c	2011-08-23 06:59:11.000000000 +0200
+++ src/mame/machine/seicop.c	2012-03-25 15:56:49.000000000 +0200
@@ -1739,72 +1739,14 @@
 	UINT16 hitbox;
 }cop_collision_info[2];
 
-/* Taken from Seibu Cup Soccer bootleg (TODO: understand the algorithm and remove this) */
-static const UINT8 fade_table[0x400] = {
-0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
-0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
-0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
-0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,
-0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,
-0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x02,0x02,0x02,0x02,0x02,0x02,0x02,0x02,
-0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,
-0x02,0x02,0x02,0x02,0x02,0x02,0x02,0x02,0x02,0x02,0x03,0x03,0x03,0x03,0x03,0x03,
-0x00,0x00,0x00,0x00,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x02,0x02,0x02,0x02,
-0x02,0x02,0x02,0x02,0x03,0x03,0x03,0x03,0x03,0x03,0x03,0x03,0x04,0x04,0x04,0x04,
-0x00,0x00,0x00,0x00,0x01,0x01,0x01,0x01,0x01,0x01,0x02,0x02,0x02,0x02,0x02,0x02,
-0x03,0x03,0x03,0x03,0x03,0x03,0x04,0x04,0x04,0x04,0x04,0x04,0x05,0x05,0x05,0x05,
-0x00,0x00,0x00,0x01,0x01,0x01,0x01,0x01,0x02,0x02,0x02,0x02,0x02,0x03,0x03,0x03,
-0x03,0x03,0x03,0x04,0x04,0x04,0x04,0x04,0x05,0x05,0x05,0x05,0x05,0x06,0x06,0x06,
-0x00,0x00,0x00,0x01,0x01,0x01,0x01,0x02,0x02,0x02,0x02,0x02,0x03,0x03,0x03,0x03,
-0x04,0x04,0x04,0x04,0x05,0x05,0x05,0x05,0x05,0x06,0x06,0x06,0x06,0x07,0x07,0x07,
-0x00,0x00,0x01,0x01,0x01,0x01,0x02,0x02,0x02,0x02,0x03,0x03,0x03,0x03,0x04,0x04,
-0x04,0x04,0x05,0x05,0x05,0x05,0x06,0x06,0x06,0x06,0x07,0x07,0x07,0x07,0x08,0x08,
-0x00,0x00,0x01,0x01,0x01,0x01,0x02,0x02,0x02,0x03,0x03,0x03,0x03,0x04,0x04,0x04,
-0x05,0x05,0x05,0x06,0x06,0x06,0x06,0x07,0x07,0x07,0x08,0x08,0x08,0x08,0x09,0x09,
-0x00,0x00,0x01,0x01,0x01,0x02,0x02,0x02,0x03,0x03,0x03,0x04,0x04,0x04,0x05,0x05,
-0x05,0x05,0x06,0x06,0x06,0x07,0x07,0x07,0x08,0x08,0x08,0x09,0x09,0x09,0x0A,0x0A,
-0x00,0x00,0x01,0x01,0x01,0x02,0x02,0x02,0x03,0x03,0x04,0x04,0x04,0x05,0x05,0x05,
-0x06,0x06,0x06,0x07,0x07,0x07,0x08,0x08,0x09,0x09,0x09,0x0A,0x0A,0x0A,0x0B,0x0B,
-0x00,0x00,0x01,0x01,0x02,0x02,0x02,0x03,0x03,0x03,0x04,0x04,0x05,0x05,0x05,0x06,
-0x06,0x07,0x07,0x07,0x08,0x08,0x09,0x09,0x09,0x0A,0x0A,0x0A,0x0B,0x0B,0x0C,0x0C,
-0x00,0x00,0x01,0x01,0x02,0x02,0x03,0x03,0x03,0x04,0x04,0x05,0x05,0x05,0x06,0x06,
-0x07,0x07,0x08,0x08,0x08,0x09,0x09,0x0A,0x0A,0x0A,0x0B,0x0B,0x0C,0x0C,0x0D,0x0D,
-0x00,0x00,0x01,0x01,0x02,0x02,0x03,0x03,0x04,0x04,0x05,0x05,0x05,0x06,0x06,0x07,
-0x07,0x08,0x08,0x09,0x09,0x09,0x0A,0x0A,0x0B,0x0B,0x0C,0x0C,0x0D,0x0D,0x0E,0x0E,
-0x00,0x00,0x01,0x01,0x02,0x02,0x03,0x03,0x04,0x04,0x05,0x05,0x06,0x06,0x07,0x07,
-0x08,0x08,0x09,0x09,0x0A,0x0A,0x0B,0x0B,0x0C,0x0C,0x0D,0x0D,0x0E,0x0E,0x0F,0x0F,
-0x00,0x01,0x01,0x02,0x02,0x03,0x03,0x04,0x04,0x05,0x05,0x06,0x06,0x07,0x07,0x08,
-0x08,0x09,0x09,0x0A,0x0A,0x0B,0x0B,0x0C,0x0C,0x0D,0x0D,0x0E,0x0E,0x0F,0x0F,0x10,
-0x00,0x01,0x01,0x02,0x02,0x03,0x03,0x04,0x04,0x05,0x05,0x06,0x07,0x07,0x08,0x08,
-0x09,0x09,0x0A,0x0A,0x0B,0x0C,0x0C,0x0D,0x0D,0x0E,0x0E,0x0F,0x0F,0x10,0x10,0x11,
-0x00,0x01,0x01,0x02,0x02,0x03,0x03,0x04,0x05,0x05,0x06,0x06,0x07,0x08,0x08,0x09,
-0x09,0x0A,0x0A,0x0B,0x0C,0x0C,0x0D,0x0D,0x0E,0x0F,0x0F,0x10,0x10,0x11,0x11,0x12,
-0x00,0x01,0x01,0x02,0x02,0x03,0x04,0x04,0x05,0x06,0x06,0x07,0x07,0x08,0x09,0x09,
-0x0A,0x0A,0x0B,0x0C,0x0C,0x0D,0x0D,0x0E,0x0F,0x0F,0x10,0x11,0x11,0x12,0x12,0x13,
-0x00,0x01,0x01,0x02,0x03,0x03,0x04,0x05,0x05,0x06,0x06,0x07,0x08,0x08,0x09,0x0A,
-0x0A,0x0B,0x0C,0x0C,0x0D,0x0E,0x0E,0x0F,0x0F,0x10,0x11,0x11,0x12,0x13,0x13,0x14,
-0x00,0x01,0x01,0x02,0x03,0x03,0x04,0x05,0x05,0x06,0x07,0x07,0x08,0x09,0x09,0x0A,
-0x0B,0x0C,0x0C,0x0D,0x0E,0x0E,0x0F,0x10,0x10,0x11,0x12,0x12,0x13,0x14,0x14,0x15,
-0x00,0x01,0x01,0x02,0x03,0x04,0x04,0x05,0x06,0x06,0x07,0x08,0x09,0x09,0x0A,0x0B,
-0x0B,0x0C,0x0D,0x0D,0x0E,0x0F,0x10,0x10,0x11,0x12,0x12,0x13,0x14,0x15,0x15,0x16,
-0x00,0x01,0x01,0x02,0x03,0x04,0x04,0x05,0x06,0x07,0x07,0x08,0x09,0x0A,0x0A,0x0B,
-0x0C,0x0D,0x0D,0x0E,0x0F,0x10,0x10,0x11,0x12,0x13,0x13,0x14,0x15,0x16,0x16,0x17,
-0x00,0x01,0x02,0x02,0x03,0x04,0x05,0x05,0x06,0x07,0x08,0x09,0x09,0x0A,0x0B,0x0C,
-0x0C,0x0D,0x0E,0x0F,0x0F,0x10,0x11,0x12,0x13,0x13,0x14,0x15,0x16,0x16,0x17,0x18,
-0x00,0x01,0x02,0x02,0x03,0x04,0x05,0x06,0x06,0x07,0x08,0x09,0x0A,0x0A,0x0B,0x0C,
-0x0D,0x0E,0x0F,0x0F,0x10,0x11,0x12,0x13,0x13,0x14,0x15,0x16,0x17,0x17,0x18,0x19,
-0x00,0x01,0x02,0x03,0x03,0x04,0x05,0x06,0x07,0x08,0x08,0x09,0x0A,0x0B,0x0C,0x0D,
-0x0D,0x0E,0x0F,0x10,0x11,0x12,0x12,0x13,0x14,0x15,0x16,0x17,0x17,0x18,0x19,0x1A,
-0x00,0x01,0x02,0x03,0x03,0x04,0x05,0x06,0x07,0x08,0x09,0x0A,0x0A,0x0B,0x0C,0x0D,
-0x0E,0x0F,0x10,0x11,0x11,0x12,0x13,0x14,0x15,0x16,0x17,0x18,0x18,0x19,0x1A,0x1B,
-0x00,0x01,0x02,0x03,0x04,0x05,0x05,0x06,0x07,0x08,0x09,0x0A,0x0B,0x0C,0x0D,0x0E,
-0x0E,0x0F,0x10,0x11,0x12,0x13,0x14,0x15,0x16,0x17,0x17,0x18,0x19,0x1A,0x1B,0x1C,
-0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x07,0x08,0x09,0x0A,0x0B,0x0C,0x0D,0x0E,
-0x0F,0x10,0x11,0x12,0x13,0x14,0x15,0x16,0x16,0x17,0x18,0x19,0x1A,0x1B,0x1C,0x1D,
-0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09,0x0A,0x0B,0x0C,0x0D,0x0E,0x0F,
-0x0F,0x10,0x11,0x12,0x13,0x14,0x15,0x16,0x17,0x18,0x19,0x1A,0x1B,0x1C,0x1D,0x1E,
-0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09,0x0A,0x0B,0x0C,0x0D,0x0E,0x0F,
-0x10,0x11,0x12,0x13,0x14,0x15,0x16,0x17,0x18,0x19,0x1A,0x1B,0x1C,0x1D,0x1E,0x1F };
+/* RE from Seibu Cup Soccer bootleg */
+static const UINT8 fade_table(int v)
+{
+    int low  = v & 0x001f;
+    int high = v & 0x03e0;
+
+    return (low * (high | (high >> 5)) + 0x210) >> 10;
+}
 
 static UINT16 u1,u2;
 
@@ -2541,19 +2483,19 @@
 					if(pal_brightness_mode == 5)
 					{
 						bt = ((space->read_word(src + (cop_dma_fade_table * 0x400))) & 0x7c00) >> 5;
-						bt = fade_table[bt|(pal_brightness_val ^ 0)];
+						bt = fade_table(bt|(pal_brightness_val ^ 0));
 						b = ((space->read_word(src)) & 0x7c00) >> 5;
-						b = fade_table[b|(pal_brightness_val ^ 0x1f)];
+						b = fade_table(b|(pal_brightness_val ^ 0x1f));
 						pal_val = ((b + bt) & 0x1f) << 10;
 						gt = ((space->read_word(src + (cop_dma_fade_table * 0x400))) & 0x03e0);
-						gt = fade_table[gt|(pal_brightness_val ^ 0)];
+						gt = fade_table(gt|(pal_brightness_val ^ 0));
 						g = ((space->read_word(src)) & 0x03e0);
-						g = fade_table[g|(pal_brightness_val ^ 0x1f)];
+						g = fade_table(g|(pal_brightness_val ^ 0x1f));
 						pal_val |= ((g + gt) & 0x1f) << 5;
 						rt = ((space->read_word(src + (cop_dma_fade_table * 0x400))) & 0x001f) << 5;
-						rt = fade_table[rt|(pal_brightness_val ^ 0)];
+						rt = fade_table(rt|(pal_brightness_val ^ 0));
 						r = ((space->read_word(src)) & 0x001f) << 5;
-						r = fade_table[r|(pal_brightness_val ^ 0x1f)];
+						r = fade_table(r|(pal_brightness_val ^ 0x1f));
 						pal_val |= ((r + rt) & 0x1f);
 					}
 					else if(pal_brightness_mode == 4) //Denjin Makai
@@ -2571,14 +2513,14 @@
 							pal_val = 0;
 						else
 						{
-							bt = fade_table[bt<<5|((pal_brightness_val*2) ^ 0)];
-							b =  fade_table[b<<5|((pal_brightness_val*2) ^ 0x1f)];
+							bt = fade_table(bt<<5|((pal_brightness_val*2) ^ 0));
+							b =  fade_table(b<<5|((pal_brightness_val*2) ^ 0x1f));
 							pal_val = ((b + bt) & 0x1f) << 10;
-							gt = fade_table[gt<<5|((pal_brightness_val*2) ^ 0)];
-							g =  fade_table[g<<5|((pal_brightness_val*2) ^ 0x1f)];
+							gt = fade_table(gt<<5|((pal_brightness_val*2) ^ 0));
+							g =  fade_table(g<<5|((pal_brightness_val*2) ^ 0x1f));
 							pal_val |= ((g + gt) & 0x1f) << 5;
-							rt = fade_table[rt<<5|((pal_brightness_val*2) ^ 0)];
-							r =  fade_table[r<<5|((pal_brightness_val*2) ^ 0x1f)];
+							rt = fade_table(rt<<5|((pal_brightness_val*2) ^ 0));
+							r =  fade_table(r<<5|((pal_brightness_val*2) ^ 0x1f));
 							pal_val |= ((r + rt) & 0x1f);
 						}
 					}
diff -Nru src-old/mame/mame.lst src/mame/mame.lst
--- src-old/mame/mame.lst	2012-03-11 19:17:00.000000000 +0100
+++ src/mame/mame.lst	2012-03-25 15:56:49.000000000 +0200
@@ -174,6 +174,7 @@
 gteikoku		// (c) Irem
 gteikokb		// bootleg
 gteikob2		// bootleg
+galemp			// (c) Taito do Brasil
 spacbatt		// bootleg
 spacbat2		// bootleg
 spacempr		// bootleg
@@ -227,7 +228,8 @@
 eagle2			// [1980] Centuri
 eagle3			// [1980] Centuri
 spctbird		// (c) Fortrek
-fantastc		// (c) Taito (Brazil)
+fantastc		// (c) Taito (Brazil) - rewrite of Galaga
+kong			// (c) Taito (Brazil) - rewrite of Donkey Kong
 skybase			// (c) 1982 Omori Electric Co., Ltd.
 checkman		// (c) 1982 Zilec-Zenitone
 checkmanj		// (c) 1982 Jaleco (Zenitone/Zilec in ROM CM4, and the programmer names)
@@ -1401,6 +1403,7 @@
 polaris			// PS  (c) 1980 Taito
 polarisa		// PS  (c) 1980 Taito
 polariso		// PS  (c) 1980 Taito
+polarisbr		// PS  (c) 1981 Taito do Brasil
 ballbomb		// TN  (c) 1980 Taito
 indianbt		// (c) 1980 Taito
 steelwkr		// (c) 1980 Taito
@@ -1902,6 +1905,7 @@
 bublboblr		// A78 (c) 1986 Taito America Corporation + Romstar license
 bublboblr1		// A78 (c) 1986 Taito America Corporation + Romstar license
 boblbobl		// bootleg
+boblbobl2		// bootleg
 sboblboa		// bootleg
 sboblbob		// bootleg
 bub68705		// bootleg
@@ -1918,6 +1922,7 @@
 dariuso			// A96 (c) 1986 Taito Corporation (Japan)
 dariuse			// A96 (c) 1986 Taito Corporation (Japan)
 rastan			// B04 (c) 1987 Taito Corporation Japan (World)
+rastan2 		// B04 (c) 1987 Taito Corporation Japan (World)
 rastanu			// B04 (c) 1987 Taito America Corporation (US)
 rastanu2		// B04 (c) 1987 Taito America Corporation (US)
 rastsaga		// B04 (c) 1987 Taito Corporation (Japan)
@@ -2490,6 +2495,7 @@
 bgaregganv		// (c) 1996 Raizing/8ing
 bgareggat2		// (c) 1996 Raizing/8ing
 bgareggacn		// (c) 1996 Raizing/8ing
+bgareggabl		// hack
 batrider		// (c) 1998 Raizing/8ing
 batrideru		// (c) 1998 Raizing/8ing
 batriderc		// (c) 1998 Raizing/8ing
@@ -2809,7 +2815,8 @@
 ffightj1		// 12/01/1990 (c) 1989 (Japan)
 ffightj2		// 05/03/1990 (c) 1989 (Japan)
 ffightjh		// hack
-1941			//  2/1990 (c) 1990 (World)
+1941			// 27/02/1990 (c) 1990 (World)
+1941r1			//  2/1990 (c) 1990 (World)
 1941u			// 27/02/1990 (c) 1990 (USA)
 1941j			//  2/1990 (c) 1990 (Japan)
 mercs			// 02/03/1990 (c) 1990 (World)
@@ -3295,6 +3302,7 @@
 kikaioh			// Kikaioh (JAPAN 980914)
 sfex2p			// Street Fighter EX 2 Plus (USA 990611)
 sfex2pa			// Street Fighter EX 2 Plus (ASIA 990611)
+sfex2ph			// Street Fighter EX 2 Plus (HISPANIC 990611)
 sfex2pj			// Street Fighter EX 2 Plus (JAPAN 990611)
 strider2		// Strider 2 (USA 991213)
 strider2a		// Strider 2 (ASIA 991213)
@@ -4021,7 +4029,9 @@
 wboy2u			// 834-5984 (c) 1986 + Escape license (S1)
 wboy3			// 834-5984 (c) 1986 + Escape license (S1)
 wboy4			// 834-5984 (c) 1986 + Escape license (S1)
+wboy5			// 834-5984 (c) 1986 + Escape license (S1)
 wboyu			// 834-5753 (? maybe a conversion) (c) 1986 + Escape license (S1)
+wboyub			// bootleg of wboyu
 wbdeluxe		// (c) 1986 + Escape license (S1)
 wboysys2		// 834-5984  (c) 1986 + Escape license (S1)
 gardia			// 834-6119 (S2?)
@@ -4870,7 +4880,7 @@
 cspike			// 2000.10 Gun Spike / Cannon Spike
 sstrkfgt		// 2000.10 Sega Strike Fighter (Rev A)
 confmiss		// 2000.11 Confidential Mission												// First GD-ROM game?
-				// 2000.11 Ninja Assault
+                // 2000.11 Ninja Assault
 				// 2000.11 Shakatto Tambourine
 wwfroyal		// 2000.11 WWF Royal Rumble
 pjustic			// 2000.12 Moero Justice Gakuen / Project Justice
@@ -5373,6 +5383,7 @@
 hbarrelw		// (c) 1987 Data East Corporation (World)
 baddudes		// EI (c) 1988 Data East USA (US)
 drgninja		// EG (c) 1988 Data East Corporation (Japan)
+drgninjab		// bootleg
 birdtry			// (c) 1988 Data East Corporation (Japan)
 robocop			// EP? (c) 1988 Data East Corporation (World)
 robocopw		// EP? (c) 1988 Data East Corporation (World)
@@ -5429,6 +5440,7 @@
 cninjaa			// MAG (c) 1991 Data East Corporation (US)
 joemac			// MAG (c) 1991 Data East Corporation (Japan)
 cninjabl		// bootleg
+cninjabl2		// bootleg
 stoneage		// bootleg
 robocop2		// MAH (c) 1991 Data East Corporation (World)
 robocop2u		// MAH (c) 1991 Data East Corporation (US)
@@ -6760,6 +6772,7 @@
 fsoccer			// A6006 'FS' (c) 1988
 fsoccerj		// A6006 'FS' (c) 1988
 fsoccerb		//            (c) 1988
+fsoccerba		//            (c) 1988
 tdfever			// A6006 'TD' (c) 1987
 tdfeverj		// A6006 'TD' (c) 1987
 tdfever2		// A6006 'TD'?(c) 1988
@@ -7385,6 +7398,7 @@
 mkr4			// (c) 1992 Midway
 mktturbo		// hack
 mkyturbo		// hack
+mkyturboe		// hack
 mknifty			// hack
 mknifty666		// hack
 mkprot4			// (c) 1992 Midway
@@ -7597,6 +7611,7 @@
 machomou		// (c) 1982 Techstar
 intrepid		// (c) 1983 Nova Games Ltd.
 intrepid2		// (c) 1983 Nova Games Ltd.
+intrepidb       // bootleg
 zaryavos		// (c) 1983 Nova Games of Canada (prototype)
 timelimt		// (c) 1983 Chuo Co. Ltd
 progress		// (c) 1984 Chuo Co. Ltd
@@ -7879,6 +7894,7 @@
 soldamj			// (c) 1992 (Japan)
 bigstrik		// (c) 1992
 bigstrkb		// bootleg on different hardware
+bigstrkba       // alt set of 'bigstrkb' with Italian teams
 bestleag		// bootleg, by Playmark?
 bestleaw		// bootleg
 chimerab		// (c) 1993
@@ -7942,6 +7958,7 @@
 svolly91		// (c) 1991 Video System Co. (Japan)
 pspikesb		// bootleg
 spikes91		// bootleg
+spikes91a		// bootleg
 pspikesc		// bootleg
 karatblz		// (c) 1991 Video System Co.
 karatblzu		// (c) 1991 Video System Co. (US)
@@ -8520,6 +8537,7 @@
 croupier		// (c) 1997 Playmark
 croupiera		// (c) 1997 Playmark
 spacewin
+luckboom
 
 // Pacific Novelty games
 sharkatt		// (c) 1980
@@ -8910,6 +8928,7 @@
 mgfx			// (c) 200?
 gonefsh2		// (c) 200?
 chessc2			// (c) 200?
+haunthig		// (c) 200?
 
 // IGS PGM System Games
 pgm
@@ -8917,8 +8936,8 @@
 orlegende		// (c) 1997
 orlegendc		// (c) 1997
 orlegendca		// (c) 1997
-orlegend111c	// (c) 1997
-orlegend105k	// (c) 1997
+orlegend111c		// (c) 1997
+orlegend105k		// (c) 1997
 drgw2			// (c) 1997
 dw2v100x		// (c) 1997
 drgw2c			// (c) 1997
@@ -8929,7 +8948,7 @@
 dwex			// (c) 1998
 killbld			// (c) 1998
 killbld104		// (c) 1998
-kov				// (c) 1999
+kov			// (c) 1999
 kovplus			// (c) 1999
 kovplusa		// (c) 1999
 kovsgqyz		// bootleg
@@ -8965,18 +8984,21 @@
 puzzli2			// (c) 2001
 martmast		// (c) 2001
 martmastc		// (c) 2001
-martmastc102	// (c) 2001
+martmastc102		// (c) 2001
 theglad			// (c) 2001
 theglada		// (c) 2001
+thegladpcb
 dw2001			// (c) 2001
 py2k2			// (c) 2001
 dmnfrnt			// (c) 2002
 dmnfrnta		// (c) 2002
+dmnfrntpcb
 kovshp
 oldsplus
 killbldp
 happy6
 svg
+svgpcb
 ket			// (c) 2002 Cave
 keta			// (c) 2002 Cave
 ketb			// (c) 2002 Cave
@@ -10041,6 +10063,7 @@
 sshot			// (c) 1979 Model Racing
 dribling		// (c) 1983 Model Racing
 driblingo		// (c) 1983 Olympia
+driblingbr		// bootleg
 ace				// [1976 Allied Leisure]
 clayshoo		// [1979 Allied Leisure]
 pirates			// (c) 1994 NIX
@@ -10550,10 +10573,51 @@
 witchgme		// (c) 1991 Video Klein
 witchcdk		// (c) 1991, Video Klein
 witchjol		// 1994, Unknown
-wldwitch		// 1994, Video Klein
+wldwitch		// (c) 1992-2001, Video Klein
+wldwitcha		// (c) 1992-2001, Video Klein
+wldwitchb		// (c) 1992-2001, Video Klein
+wldwitchc		// (c) 1992-2001, Video Klein
+wldwitchd		// (c) 1992-2001, Video Klein
+wldwitche		// (c) 1992-2001, Video Klein
+wldwitchf		// (c) 1992-2001, Video Klein
+wldwitchg		// (c) 1992-2001, Video Klein
+wldwitchh		// (c) 1992-2001, Video Klein
+wldwitchi		// (c) 1992-2001, Video Klein
+wldwitchj		// (c) 1992-2001, Video Klein
+wldwitchk		// (c) 1992-2001, Video Klein
+wldwitchl		// (c) 1992-2001, Video Klein
+wldwitchm		// (c) 1992-2001, Video Klein
+wldwitchn		// (c) 1992-2001, Video Klein
+wldwitcho		// (c) 1992-2001, Video Klein
+wldwitchp		// (c) 1992-2001, Video Klein
+wldwitchq		// (c) 1992-2001, Video Klein
+wldwitchr		// (c) 1992-2001, Video Klein
+wldwitchs		// (c) 1992-2001, Video Klein
+wldwitcht		// (c) 1992-2001, Video Klein
+wldwitchu		// (c) 1992-2001, Video Klein
+wldwitchv		// (c) 1992-2001, Video Klein
+wupndown		// (c) 1998, Video Klein
+wupndowna		// (c) 1998, Video Klein
+wupndownb		// (c) 1998, Video Klein
+wupndownc		// (c) 1998, Video Klein
+wupndownd		// (c) 1998, Video Klein
+wstrike 		// (c) 1992, Video Klein
+wstrikea		// (c) 1992, Video Klein
+wtchjack		// (c) 1992-1996, Video Klein
+wtchjacka		// (c) 1992-1996, Video Klein
+wtchjackb		// (c) 1992-1996, Video Klein
+wtchjackc		// (c) 1992-1996, Video Klein
+wtchjackd		// (c) 1992-1996, Video Klein
+wtchjacke		// (c) 1992-1996, Video Klein
+wtchjackf		// (c) 1992-1996, Video Klein
+wtchjackg		// (c) 1992-1996, Video Klein
+wtchjackh		// (c) 1992-1996, Video Klein
+wtchjacki		// (c) 1992-1996, Video Klein
+wtchjackj		// (c) 1992-1996, Video Klein
 falcnwld		// 1991, TVG
 falcnwlda		// (c) 1990, Video Klein
-falcnwldb		// (c) 1983, Falcon
+falcnwldb		// (c) 1990, Video Klein
+falcnwldc		// (c) 1983, Falcon
 bsuerte			// 1990, Unknown
 bsuertea		// 1991, Unknown
 bsuerteb		// 1991, Unknown
@@ -12123,12 +12187,20 @@
 // Scorpion 2 / 3
 
 sc2brkfs	// The Big Breakfast
+sc2brkfsp	//
 sc2brkfs1	//
+sc2brkfs1p	//
 sc2brkfs2	//
 sc2brkfs3	//
+sc2brkfs3p	//
 sc2brkfs4	//
+sc2brkfs4p	//
 sc2brkfs5	//
+sc2brkfs5p	//
 sc2brkfsm	//
+sc2brkfsm1	//
+sc2brkfsm2	//
+
 sc2drwho	// Dr.Who The Timelord
 sc2drwho1	//
 sc2drwho2	//
@@ -12152,56 +12224,315 @@
 sc2drwho20	// (Deluxe)
 sc2focus	// Focus (Dutch, Game Card 95-750-347)
 sc2gslam	// Club Grandslam (UK, Game Card 95-750-843)
+sc2gslamp
+sc2gslam1
+sc2gslam1p
+sc2gslam2
 sc2cshcl	// Cashino Club (Bellfruit)
+sc2cshclp
+sc2cshcl1
+sc2cshcl1p
 sc2catms	// Cat & Mouse (Bellfruit)
+sc2catms1
+sc2catms1p
+sc2catms2
+sc2catms2p
+sc2catms3
+sc2catms4
+
+sc2ctms2	// Cat & Mouse (Mark 2 - Bellfruit)
+sc2ctms21
+sc2ctms21p
+sc2ctms22
+sc2ctms22p
+sc2ctms23
+sc2ctms23p
+sc2ctms24p
+sc2ctms25
+
 sc2eggs		// Eggs On Legs Tour (Bellfruit)
+sc2eggsp
+sc2eggs1
+sc2eggs1p
 sc2gsclb	// The Game Show Club (Bellfruit)
+sc2gsclbp
+sc2gsclb1
+sc2gsclb1p
+sc2gsclb2
+sc2gsclb2p
+sc2gsclb3
+sc2gsclb3p
+sc2gsclb4
+sc2gsclb4p
+sc2gsclb5
+sc2gsclb6
+sc2gsclb7p
 sc2suprz	// Surprise Surprize (Bellfruit)
+sc2suprzp
+sc2suprz1
+sc2suprz1p
+sc2suprz2
+sc2suprz2p
+sc2suprz3
 sc2cpg		// Pharaoh's Gold Club (Bellfruit)
+sc2cpgp
+sc2cpg1
+sc2cpg1p
+sc2cpg2
+sc2cpg2p
 sc2motd		// Match Of The Day (Bellfruit)
+sc2motdp
+sc2motd1
+sc2motd1p
+sc2motd2
+sc2motd2p
+sc2motd3
+sc2motd3p
+sc2motd4
+sc2motd4p
+sc2motd5
+sc2motd5p
+sc2motd6
+sc2motd6p
+sc2motd7
+sc2motd7p
+sc2motd8
+sc2motd8p
+sc2motd9
+sc2motd10p
 sc2easy		// Easy Money (Bellfruit)
+sc2easyp
+sc2easy1
+sc2easy1p
+sc2easy2
+sc2easy2p
 sc2majes	// Majestic Bells (Bellfruit)
 sc2dels		// Del's Millions (Bellfruit)
+sc2delsp
+sc2dels1
+sc2dels1p
+sc2dels2
+sc2dels2p
+sc2dels3
+sc2dels3p
+sc2dels4
+sc2dels4p
+sc2dels5
+sc2dels6
+sc2dels7
+sc2dels8
+sc2dels9
+sc2delsd
+sc2delsm	// (Mazooma set)
+sc2delsmp
+sc2delsm1
+sc2delsm1p
+sc2delsm2
+sc2delsm2p
+sc2delsm3
+sc2delsm3p
 sc2wembl	// Road To Wembley (Bellfruit)
+sc2wemblp
+sc2wembl1
+sc2wembl1p
+sc2wembl2
+sc2wembl2p
+sc2wembl3
+sc2wembl4p
+sc2wembl5a
+sc2wembl5ap
+sc2wembl6ap
+sc2wembl7a
+sc2wembl7ap
+sc2wembl8
+sc2wembl9
+sc2wembl10
 sc2wemblm	// (Mazooma set)
 sc2downt	// Down Town (Bellfruit)
+sc2downtp
+sc2downt1
+sc2downt1p
+sc2downt2
+sc2downt2p
+sc2downt3
+sc2downt3p
+sc2downt3a
+sc2downt3ap
+sc2downt4
+sc2downt4p
+sc2downt4a
+sc2downt4ap
+sc2downt5
+sc2downt6
+sc2downt7
+sc2downt8a
+sc2downt8ap
 sc2goldr	// Gold Reserve (Mdm)
+sc2goldrp
+sc2goldr1
 sc2hifly	// High Flyer (Mdm)
+sc2hifly2
+sc2hifly3
+sc2hifly4
 sc2inst		// Instant Jackpot (Bellfruit)
+sc2instp
+sc2inst1
+sc2inst1p
+sc2inst2
+sc2inst2p
+sc2inst3
+sc2inst3p
+sc2inst4
+sc2inst4p
+sc2inst5
+sc2inst6
 sc2mam		// Make A Million (Bellfruit)
+sc2mamp
+sc2mam1
+sc2mam1p
+sc2mam2
+sc2mam2p
+sc2mam3
+sc2mam3p
+sc2mam4
+sc2mam4p
+sc2mam5
 sc2mamcl	// Make A Million Club (Bellfruit)
+sc2mamclp
+sc2mamcl1
+sc2mamcl1p
+sc2mamcl2
+sc2mamcl2p
+sc2mamcl3
 sc2scc		// Safe Cracker Club (Mdm)
 sc2showt	// Showtime Spectacular (Bellfruit)
+sc2showtp
+sc2showt1
+sc2showt1p
+sc2showt2
+sc2showt2p
+sc2showt3
+sc2showt3p
+sc2showt4
+sc2showt4p
 sc2sstar	// Superstar (Bellfruit)
+sc2sstarp
+sc2sstar1
+sc2sstar1p
+sc2sstar2
+sc2sstar2p
+sc2sstar3
+sc2sstar3p
+sc2sstar4
 sc2pe1g		// Public Enemy No1 (Bellfruit) [German]
 sc2wwcl		// Wild West Club (Bellfruit)
+sc2wwclp
+sc2wwcl1
+sc2wwcl1p
 sc2dick		// Spotted Dick (Global)
+sc2dickp
+sc2dick1
+sc2dick2
+sc2dick2p
+sc2dick2e
+sc2dick2eu
 sc2pick		// Pick Of The Bunch (Global)
+sc2pickp
+sc2pickc
+sc2pickcp
 sc2rock		// How Big's Your Rock? (Global)
-sc2call		// It's Your Call (Glonal)
+sc2rockp
+sc2rock1
+sc2rock1p
+sc2rocke
+sc2call		// It's Your Call (Global)
+sc2callp
+sc2callc
+sc2callcp
 sc2prom		// Along The Prom
 sc2payr		// Pay Roll (Mazooma)
 sc2cgc		// Carrot Gold Club (Bellfruit)
 sc2cnile	// Cash On The Nile Club (Bellfruit)
+sc2cnile1
+sc2cnile2
+sc2cnile2p
+sc2cnile3p
 sc2casr		// Casino Royale (Bellfruit)
+sc2casrp
+sc2casr1
+sc2casr1p
+sc2casr2
+sc2casr2p
+sc2casr3
+sc2casr3p
+sc2casr4
+sc2casr4p
 sc2cmbt		// Cat & Mouse & Bonzo Too (Bellfruit)
-sc2dbl		// Double Diamond (Bellfruit)
+sc2cmbtp
+sc2dbl		// Double Diamond (Bellfruit
+sc2dblp
+sc2dbl1
+sc2dbl1p
 sc2flaca	// Flash Cash (Bellfruit)
+sc2flacap
+sc2flaca1
+sc2flaca1p
+sc2flaca2
+sc2flaca2p
 sc2foot		// Football Club (Bellfruit)
+sc2footp
+sc2foot1
+sc2foot1p
+sc2foot2
+sc2foot2p
 sc2gcclb	// Golden Casino Club (Bellfruit)
+sc2gcclbp
+sc2gcclb1
+sc2gcclb1p
+sc2gcclb2
+sc2gcclb2p
+sc2gcclb3
 sc2groul	// Golden Roulette (Bellfruit)
+sc2groulp
 sc2gldsh	// Golden Shot (Bellfruit)
 sc2gtr		// Great Train Robbery (Bellfruit)
 sc2heypr	// Hey Presto (Bellfruit)
+sc2heyprp
 sc2hypr		// Hyperactive (Bellfruit)
+sc2hyprp
+sc2hypr1
+sc2hypr1p
 sc2kcclb	// King Cash Club (Bellfruit)
+sc2kcclbp
+sc2kcclb1
+sc2kcclb1p
 sc2maina	// Main Attraction (Bellfruit)
 sc2olgld	// Olympic Gold (Bellfruit)
+sc2olgldp
+sc2olgld1
+sc2olgld1p
 sc2relgm	// Reel Gems (Bellfruit)
+sc2relgmp
+sc2relgm1p
 sc2topwk	// Top Wack (Bellfruit)
+sc2topwkp
 sc2cb7		// Casino Bar 7 (Bellfruit)
+sc2cb7p
+sc2cb71
+sc2cb72
+sc2cb72p
 sc2cgcas	// Club Grand Casino
+sc2cgcasp
+sc2cgcas1
+sc2cgcas1p
 sc2cvega	// Cash Vegas
+sc2cvega1
+sc2cvega1p
+sc2cvega2
+sc2cvega2p
+sc2cvega3
+sc2cvega3p
+sc2cvega4p
 sc2bar7		// Bar 7 (Concept)
 sc2bbar7	// Big Bar 7 (Concept)
 sc2flutr	// Flutter (Concept)
@@ -12215,15 +12546,92 @@
 // Scorpion 2 + Dot Matrix Display
 
 sc2luvv		// Luvvly Jubbly (UK Multisite 10/25p, Game Card 95-750-808)
+sc2luvv1
+sc2luvv1p
+sc2luvv2
+sc2luvv2p
+sc2luvv3
+sc2luvv4
+sc2luvv5p
+sc2luvv6p
+sc2luvv7p
 sc2cpe		// Club Public Enemy No.1 (UK, Game Card 95-750-846)
+sc2cpep
+sc2cpe1
+sc2cpe1p
+sc2cpe2
+sc2cpe2p
+sc2cpe3p
+sc2cpe4
+sc2cpe5p
 sc2town		// Round The Town (Bellfruit)
+sc2townp
+sc2town1
+sc2town1p
+sc2town2
+sc2town3
+sc2town3p
+sc2town4
+sc2town5
 sc2ofool	// Only Fools & Horses (Bellfruit)
+sc2ofool1
+sc2ofool2
+sc2ofool3
+sc2ofool4
 sc2ptytm	// Party Time (Bellfruit)
+sc2ptytm1
+sc2ptytm1p
 sc2cops		// Cops 'n' Robbers (Bellfruit)
+sc2copsp
+sc2cops1
+sc2cops1p
+sc2cops2
+sc2cops3
+sc2cops3p
+sc2cops4
+sc2cops5
+sc2copsc // Casino Cops 'n' Robbers (Bellfruit)
+sc2copscp
+sc2copsc1
+sc2copsc1p
+sc2copsc2
 sc2copcl	//
-sc2copdc	//
+sc2copclp
+sc2copcl1
+sc2copcl1p
+sc2copcl2
+sc2copcl3
+sc2copcl3p
+sc2copcl4
+sc2copcl5
+sc2copcl6
+sc2copcl6p
+sc2copcl7
+sc2copcl8
+sc2copcl8p
+sc2copcl9
+sc2copcl9p
+sc2copcl10
+sc2copcl11
+sc2copcl11p
+sc2copdc	// Cops 'n' Robbers Club Deluxe (Bellfruit)
+sc2copdcp
+sc2copdc1
+sc2copdc1p
+sc2copdc2
+sc2copdc2p
+sc2copdc3
+sc2copdc3p
+sc2copdc4
+sc2copdc4p
+sc2copdc5
+sc2copdc5p
+sc2copdc6
 sc2prem		// Premier Club Manager (Bellfruit)
-
+sc2premp
+sc2prem1
+sc2prem1p
+sc2prem2
 // Scorpion 2 + Adder 2 Video Board
 qntoondo		// 1993
 quintoon		// 1993
@@ -20859,4 +21267,6 @@
 tonton			// 199?, Success.
 kas89			// 1989, SFC S.R.L.
 caspoker		// 1987, PM / Beck Elektronik.
+
 manohman		// 199?, Merkur.
+jankenmn		// 1985, Sunwise.
diff -Nru src-old/mame/mame.mak src/mame/mame.mak
--- src-old/mame/mame.mak	2012-03-06 05:37:05.000000000 +0100
+++ src/mame/mame.mak	2012-03-25 15:19:50.000000000 +0200
@@ -757,6 +757,12 @@
 	$(DRIVERS)/spoker.o \
 	$(MACHINE)/pgmcrypt.o \
 	$(MACHINE)/pgmprot.o \
+	$(MACHINE)/pgmprot1.o \
+	$(MACHINE)/pgmprot2.o \
+	$(MACHINE)/pgmprot3.o \
+	$(MACHINE)/pgmprot4.o \
+	$(MACHINE)/pgmprot5.o \
+	$(MACHINE)/pgmprot6.o \
 
 $(MAMEOBJ)/irem.a: \
 	$(DRIVERS)/m10.o $(VIDEO)/m10.o \
@@ -1875,6 +1881,7 @@
 	$(DRIVERS)/extrema.o \
 	$(DRIVERS)/tmspoker.o \
 	$(DRIVERS)/manohman.o \
+	$(DRIVERS)/jankenmn.o \
 
 
 #-------------------------------------------------
@@ -1985,7 +1992,8 @@
 			$(LAYOUT)/pulltabs.lh
 
 $(DRIVERS)/goldnpkr.o:	$(LAYOUT)/goldnpkr.lh \
-			$(LAYOUT)/pmpoker.lh
+			$(LAYOUT)/pmpoker.lh \
+			$(LAYOUT)/upndown.lh
 
 $(DRIVERS)/goldstar.o:	$(LAYOUT)/lucky8.lh \
 			$(LAYOUT)/bingowng.lh
@@ -1996,6 +2004,8 @@
 
 $(DRIVERS)/igspoker.o:	$(LAYOUT)/igspoker.lh
 
+$(DRIVERS)/jankenmn.o:	$(LAYOUT)/jankenmn.lh
+
 $(DRIVERS)/kas89.o:	$(LAYOUT)/kas89.lh
 
 $(DRIVERS)/kingdrby.o:	$(LAYOUT)/kingdrby.lh
diff -Nru src-old/mame/video/cps1.c src/mame/video/cps1.c
--- src-old/mame/video/cps1.c	2012-03-11 01:51:30.000000000 +0100
+++ src/mame/video/cps1.c	2012-03-21 22:39:23.000000000 +0100
@@ -61,6 +61,7 @@
 Final Fight (Japan 900305)                                       ?          S222B            ?     ?            CPS-B-02  DL-0411-10002
 
 1941: Counter Attack (World)                               1990  89624B-?   YI24B            ?     ?            CPS-B-05  DL-0411-10006
+1941: Counter Attack (World 900227)                              89624B-3   YI24B            IOB1  88622-C-5    CPS-B-05  DL-0411-10006  None
 1941: Counter Attack (USA 900227)                                89624B-3   YI24B            IOB1  88622-C-5    CPS-B-05  DL-0411-10006  None
 1941: Counter Attack (Japan)                                     89625B-1   YI22B            LWIO? 88622-C-5    CPS-B-05  DL-0411-10006  None
 
@@ -1292,6 +1293,7 @@
 	{"ffightj2",    CPS_B_02,     mapper_S224B },	// wrong, this set uses S222B, still not dumped
 	{"ffightjh",    CPS_B_01,     mapper_S224B },	// wrong, ffightjh hack doesn't even use the S222B PAL, since replaced with a GAL.
 	{"1941",        CPS_B_05,     mapper_YI24B },
+	{"1941r1",      CPS_B_05,     mapper_YI24B },
 	{"1941u",       CPS_B_05,     mapper_YI24B },
 	{"1941j",       CPS_B_05,     mapper_YI24B },	// wrong, this set uses YI22B, still not dumped
 	{"unsquad",     CPS_B_11,     mapper_AR24B },
diff -Nru src-old/mame/video/galaxian.c src/mame/video/galaxian.c
--- src-old/mame/video/galaxian.c	2012-03-08 11:54:00.000000000 +0100
+++ src/mame/video/galaxian.c	2012-03-17 19:21:28.000000000 +0100
@@ -461,24 +461,13 @@
 	/* draw the tilemap characters over top */
 	state->m_bg_tilemap->draw(bitmap, cliprect, 0, 0);
 
-	/* render the sprites next */
-	sprites_draw(screen.machine(), bitmap, cliprect, &state->m_spriteram[0x40]);
+	/* render the sprites next. Some custom pcbs (eg. zigzag, fantastc) have more than one sprite generator (ideally, this should be rendered in parallel) */
+	for (int i = 0; i < state->m_numspritegens; i++)
+		sprites_draw(screen.machine(), bitmap, cliprect, &state->m_spriteram[0x40 + i * 0x20]);
 
 	/* if we have bullets to draw, render them following */
 	if (state->m_draw_bullet_ptr != NULL)
-		bullets_draw(screen.machine(), bitmap, cliprect, &state->m_spriteram[0x60]);
-
-	return 0;
-}
-
-
-SCREEN_UPDATE_RGB32( zigzag )
-{
-	SCREEN_UPDATE32_CALL(galaxian);
-
-	/* zigzag has an extra sprite generator instead of bullets (note: ideally, this should be rendered in parallel) */
-	galaxian_state *state = screen.machine().driver_data<galaxian_state>();
-	sprites_draw(screen.machine(), bitmap, cliprect, &state->m_spriteram[0x60]);
+		bullets_draw(screen.machine(), bitmap, cliprect, &state->m_spriteram[state->m_bullets_base]);
 
 	return 0;
 }
diff -Nru src-old/mame/video/mcatadv.c src/mame/video/mcatadv.c
--- src-old/mame/video/mcatadv.c	2012-02-06 03:30:22.000000000 +0100
+++ src/mame/video/mcatadv.c	2012-03-24 23:16:07.000000000 +0100
@@ -56,13 +56,14 @@
 {
 	mcatadv_state *state = machine.driver_data<mcatadv_state>();
 	UINT16 *source = state->m_spriteram_old;
-	UINT16 *finish = source + (state->m_spriteram_size / 2) / 2;
+	UINT16 *finish = source + (state->m_spriteram_size / 2) /2;
 	int global_x = state->m_vidregs[0] - 0x184;
 	int global_y = state->m_vidregs[1] - 0x1f1;
 
 	UINT16 *destline;
 	UINT8 *priline;
 	UINT8 *sprdata = machine.region("gfx1")->base();
+	int sprmask = machine.region("gfx1")->bytes()-1;
 
 	int xstart, xend, xinc;
 	int ystart, yend, yinc;
@@ -129,19 +130,21 @@
 					{
 						drawxpos = x + xcnt - global_x;
 
-						if((priline[drawxpos] < pri))
+						if ((drawxpos >= cliprect.min_x) && (drawxpos <= cliprect.max_x))
 						{
-							if (offset >= 0x500000 * 2)
-								offset = 0;
-							pix = sprdata[offset / 2];
-
-							if (offset & 1)
-								pix = pix >> 4;
-							pix &= 0x0f;
-
-							if ((drawxpos >= cliprect.min_x) && (drawxpos <= cliprect.max_x) && pix)
-								destline[drawxpos] = (pix + (pen << 4));
+							if((priline[drawxpos] < pri))
+							{
+								pix = sprdata[(offset / 2)&sprmask];
+
+								if (offset & 1)
+									pix = pix >> 4;
+								pix &= 0x0f;
+
+								if (pix)
+									destline[drawxpos] = (pix + (pen << 4));
+							}
 						}
+
 						offset++;
 					}
 				}
diff -Nru src-old/mame/video/pgm.c src/mame/video/pgm.c
--- src-old/mame/video/pgm.c	2012-01-25 18:08:33.000000000 +0100
+++ src/mame/video/pgm.c	2012-03-21 22:46:09.000000000 +0100
@@ -637,8 +637,7 @@
 	for (i = 0; i < 0x1200 / 2; i++)
 		palette_set_color(machine, i, MAKE_RGB(0, 0, 0));
 
-	state->m_spritebufferram = auto_alloc_array(machine, UINT16, 0xa00/2);
-
+	state->m_spritebufferram = auto_alloc_array_clear(machine, UINT16, 0xa00/2);
 
 	state->save_pointer(NAME(state->m_spritebufferram), 0xa00/2);
 }
diff -Nru src-old/mame/video/quasar.c src/mame/video/quasar.c
--- src-old/mame/video/quasar.c	2012-01-15 03:13:13.000000000 +0100
+++ src/mame/video/quasar.c	2012-03-23 18:35:11.000000000 +0100
@@ -17,7 +17,7 @@
 #include "emu.h"
 #include "video/s2636.h"
 #include "cpu/s2650/s2650.h"
-#include "includes/cvs.h"
+#include "includes/quasar.h"
 
 PALETTE_INIT( quasar )
 {
diff -Nru src-old/mame/video/tumbleb.c src/mame/video/tumbleb.c
--- src-old/mame/video/tumbleb.c	2012-02-01 21:38:44.000000000 +0100
+++ src/mame/video/tumbleb.c	2012-03-24 22:43:22.000000000 +0100
@@ -567,7 +567,7 @@
 	else
 		offs2 = -5;
 
-	tumbleb_draw_common(screen.machine(),bitmap,cliprect, offs2, -16, offs, 0);
+	tumbleb_draw_common(screen.machine(),bitmap,cliprect, offs2, 0, offs, 0);
 
 	return 0;
 }
@@ -590,7 +590,7 @@
 	else
 		offs2 = -5;
 
-	tumbleb_draw_common(screen.machine(),bitmap,cliprect, offs2, -16, offs, 0);
+	tumbleb_draw_common(screen.machine(),bitmap,cliprect, offs2, 0, offs, 0);
 	return 0;
 }
 
diff -Nru src-old/osd/sdl/man/chdman.1 src/osd/sdl/man/chdman.1
--- src-old/osd/sdl/man/chdman.1	2010-07-08 16:18:07.000000000 +0200
+++ src/osd/sdl/man/chdman.1	2012-03-25 04:27:58.000000000 +0200
@@ -6,7 +6,7 @@
 .\" Ashley T. Howes <debiandev@ashleyhowes.com>, February 2005
 .\" updated by Cesare Falco <cesare.falco@gmail.com>, February 2007
 .\"
-.TH CHDMAN 1 2010-06-26 0.138u4 "chdman"
+.TH CHDMAN 1 2012-03-25 0.145u5 "chdman"
 .\"
 .\" NAME chapter
 .SH NAME
@@ -15,7 +15,7 @@
 .\" SYNOPSIS chapter
 .SH SYNOPSIS
 .B chdman
-.I option file
+.I option switches
 .\"
 .\" DESCRIPTION chapter
 .SH DESCRIPTION
@@ -26,53 +26,78 @@
 .\" OPTIONS chapter
 .SH OPTIONS
 .TP
-.B \-info \fIinput\fR.chd
+.B \info \fIinput\fR.chd
 Dump the header information from a drive image.
 .TP
-.B \-createraw \fIinputhd\fR.raw \fIoutput\fR.chd [\fIinputoffs\fR [\fIhunksize\fR]]
+.B verify \fIinput\fR.chd
+Validate the MD5/SHA1 on a drive image.
+.TP
+.B createraw \fIinputhd\fR.raw \fIoutput\fR.chd [\fIinputoffs\fR [\fIhunksize\fR]]
 Create a new compressed raw image from a raw file.
 .TP
-.B \-createhd \fIinputhd\fR.raw \fIoutput\fR.chd [\fIinputoffs\fR [\fIcylinders \
+.B createhd \fIinputhd\fR.raw \fIoutput\fR.chd [\fIinputoffs\fR [\fIcylinders \
 heads sectors \fR[\fIsectorsize\fR [\fIhunksize\fR]]]]
 Create a new compressed hard disk image from a raw file.
 .TP
-.B \-createblankhd \fIoutput\fR.chd \fIcylinders heads sectors\fR [\fIsectorsize \
-\fR[\fIhunksize\fR]]
-Create a new non\-compressed hard disk image, with all hunks filled with 0s.
-.TP
-.B \-createcd \fIinput\fR.toc \fIoutput\fR.chd
+.B createcd \fIinput\fR.toc \fIoutput\fR.chd
 Create a new compressed CD image from a raw file.
 .TP
-.B \-copydata \fIinput\fR.chd \fIoutput\fR.chd
+.B createld \fIinput\fR.toc \fIoutput\fR.chd
+Create a new compressed laserdisc image from a raw file.
+.TP
+.B extractraw \fIinput\fR.chd \fIoutput\fR.raw
+Extract a raw file from a CHD image.
+.TP
+.B extracthd \fIinput\fR.chd \fIoutput\fR.toc \fIoutput\fR.bin
+Extract a hard disk block image from a CHD image.
+.TP
+.B extractcd \fIinput\fR.chd \fIoutput\fR.toc \fIoutput\fR.bin
+Extract a CDRDAO .toc/.bin, CDRWIN .bin/.cue, or Sega Dreamcast .GDI file from a CHD\-CD image.
+.TP
+.B extractld \fIinput\fR.chd \fIoutput\fR.toc \fIoutput\fR.bin
+Extract a laserdisc image from a CHD\-LD image.
+.TP
+.B copy \fIinput\fR.chd \fIoutput\fR.chd
 Copy all hunks of data from one CHD file to another. The hunk sizes do not need to match.
 If the source is shorter than the destination, the source data will be padded with 0s.
+.\" SWITCHES chapter
+.SH SWITCHES
 .TP
-.B \-extract \fIinput\fR.chd \fIoutput\fR.raw
-Extract a raw file from a CHD image.
+.B --chs, -chs \fI <cylinders,heads,sectors>: specifies CHS geometry values for CHD harddisks
 .TP
-.B \-extractcd \fIinput\fR.chd \fIoutput\fR.toc \fIoutput\fR.bin
-Extract a CDRDAO .toc/.bin file from a CHD\-CD image.
+.B --compression, -c \fI <none|type1[,type2[,...]]>: which compression codecs to use (up to 4)
 .TP
-.B \-verify \fIinput\fR.chd
-Validate the MD5/SHA1 on a drive image.
+.B --force, -f \fI : force overwriting an existing file
+.TP
+.B --help, -h \fI : shows the available switches for an option
+.TP
+.B --hunksize, -hs \fI <bytes>: size of each unit, in hunks
+.TP
+.B --ident, -id \fI <filename>: name of ident file to provide CHS information
+.TP
+.B --input, -i \fI <filename>: input file name
+.TP
+.B --inputstartbyte, -isb \fI <offset>: starting byte offset within the input
+.TP
+.B --inputstarthunk, -ish \fI <offset>:  starting hunk offset within the input
+.TP
+.B --inputbytes, -ib \fI <length>: effective length of the input in bytes
+.TP                              
+.B --inputhunks, -ih \fI <length>: effective length of the input in hunks
+.TP
+.B --inputparent, -ip \fI <filename>: parent CHD's input file name
 .TP
-.B \-verifyfix \fIinput\fR.chd
-Validate and fix the MD5/SHA1 on a drive image.
+.B --numprocessors, -np \fI <count>: limits the number of processors to use during compression
 .TP
-.B \-update \fIinput\fR.chd \fIoutput\fR.chd
-Update CHD image using metadata from input file.
+.B --sectorsize, -ss \fI <bytes>: size of each hard disk sector
 .TP
-.B \-chomp \fIinput\fR.chd \fIoutput\fR.chd \fImaxhunk
-Chomp hunk from CHD image.
+.B --verbose, -v \fI : output additional information about the operation
 .TP
-.B \-merge \fIparent\fR.chd \fIdiff\fR.chd \fIoutput\fR.chd
-Merge a parent and its child together.
+.B --output, -o \fI <filename>: output file name
 .TP
-.B \-diff \fIparent\fR.chd \fIcompare\fR.chd \fIdiff\fR.chd
-Generate a difference between two CHD files.
+.B --outputbin, -ob \fI <filename>: output binary file name for extractcd
 .TP
-.B \-setchs \fIinout\fR.chd \fIcylinders heads sections
-Change the CHS values on a hard disk image.
+.B --outputparent, -op \fI <filename>: parent CHD's output file name
 .TP
-.B \-split \fIinput\fR.chd \fIoutput\fR.chd \fIlength
-Split a CHD file into multiple parts.
+.B --unitsize, -us \fI <bytes>: size of each unit, in bytes
+
diff -Nru src-old/osd/sdl/man/jedutil.1 src/osd/sdl/man/jedutil.1
--- src-old/osd/sdl/man/jedutil.1	2010-07-08 16:18:07.000000000 +0200
+++ src/osd/sdl/man/jedutil.1	2012-03-25 04:27:58.000000000 +0200
@@ -8,7 +8,7 @@
 .\" References
 .\" http://aarongiles.com/?p=159
 .\"
-.TH JEDUTIL 1 2010-06-26 0.138u4 "jedutil"
+.TH JEDUTIL 1 2012-03-25 0.145u5 "jedutil"
 .\"
 .\" NAME chapter
 .SH NAME
diff -Nru src-old/osd/sdl/man/ldplayer.1 src/osd/sdl/man/ldplayer.1
--- src-old/osd/sdl/man/ldplayer.1	2010-07-12 00:45:52.000000000 +0200
+++ src/osd/sdl/man/ldplayer.1	2012-03-25 04:27:58.000000000 +0200
@@ -5,7 +5,7 @@
 .\" Man page created from source and usage information by 
 .\" Cesare Falco <cesare.falco@gmail.com>, August 2008
 .\"
-.TH LDPLAYER 1 2010-07-07 0.138u4 "ldplayer"
+.TH LDPLAYER 1 2012-03-25 0.145u5 "ldplayer"
 .\"
 .\"
 .\" NAME chapter
diff -Nru src-old/osd/sdl/man/ldverify.1 src/osd/sdl/man/ldverify.1
--- src-old/osd/sdl/man/ldverify.1	2010-07-08 16:18:07.000000000 +0200
+++ src/osd/sdl/man/ldverify.1	2012-03-25 04:27:58.000000000 +0200
@@ -5,7 +5,7 @@
 .\" Man page created from source and usage information by 
 .\" Cesare Falco <cesare.falco@gmail.com>, August 2008
 .\"
-.TH LDVERIFY 1 2010-06-26 0.138u4 "ldverify"
+.TH LDVERIFY 1 2012-03-25 0.145u5 "ldverify"
 .\"
 .\" NAME chapter
 .SH NAME
diff -Nru src-old/osd/sdl/man/mame.1 src/osd/sdl/man/mame.1
--- src-old/osd/sdl/man/mame.1	2011-05-23 18:28:23.000000000 +0200
+++ src/osd/sdl/man/mame.1	1970-01-01 01:00:00.000000000 +0100
@@ -1,1024 +0,0 @@
-.\"  -*- nroff -*-
-.\"
-.\" mame.1
-.\"
-.\" Man page created from usage and source information:
-.\" * commands: see src/emu/clifront.c clifront.h
-.\" * options: core entries, see src/emu/emuopts.c emuopts.h
-.\"            SDL-specific entries, see src/osd/sdl/sdlmain.c osdsdl.h
-.\" Cesare Falco <cesare.falco@gmail.com>, February 2007
-.\"
-.\" Also, some text borrowed from the xmame 0.106 man page,
-.\" done by Rene Herrmann <rene.herrmann@berlin.de>, September 2000
-.\" and updated by Andrew Burton <burtona@gol.com>, July 2003
-.\"
-.\"
-.TH MAME 1 2010-07-07 0.138u4 "MAME - The Multiple Arcade Machine Emulator"
-.\"
-.\"
-.\" NAME chapter
-.SH NAME
-MAME \- The Multiple Arcade Machine Emulator
-.\"
-.\"
-.\" SYNOPSIS chapter
-.SH SYNOPSIS
-.B mame
-.RI [ options ]
-.I gamename
-.\"
-.\"
-.\" DESCRIPTION chapter
-.SH DESCRIPTION
-Started in 1997 by Nicola Salmoria, MAME was originally intended as a series
-of emulators for individual games, which were later combined into a single
-multi\-game emulator. In the following years, MAME grew over and over up to
-the actual size, with more than 100 contributors to the project.
-.\"
-.\"
-.\" OPTIONS chapter
-.SH OPTIONS
-.\"
-.\" *******************************************************
-.SS Core commands
-.\" *******************************************************
-.TP
-.B \-help, \-?
-Displays current MAME version and copyright notice.
-.TP
-.B \-validate, \-valid
-Performs internal validation on every driver in the system. Run this
-before submitting changes to ensure that you haven't violated any of
-the core system rules.
-.\"
-.\" *******************************************************
-.SS Configuration commands
-.\" *******************************************************
-.TP
-.B \-createconfig, \-cc
-Creates the default \fBmame.ini\fP file in the current directory. All the
-configuration options (not commands) described below can be permanently
-changed by editing this configuration file.
-.TP
-.B \-showconfig, \-sc
-Displays the current configuration settings.
-.TP
-.B \-showusage, \-su
-Displays a summary of all the command line options. For options that
-are not mentioned here, the short summary given by
-\fBmame \-showusage\fR is usually sufficient.
-.\"
-.\" *******************************************************
-.SS Frontend commands
-.\" *******************************************************
-.B NOTE:
-By default, all the '\-list' commands below write info to the screen.
-If you wish to write the info to a textfile instead, use redirection, e.g.
-.B mame \-listxml > ~/mamelist.xml
-writes the full list of supported game to file \fImamelist.xml\fR in your home
-directory.
-.TP
-.B \-listxml, \-lx \fR[\fIgamename\fR|\fIwildcard\fR]
-List comprehensive details for all of the supported games. The output
-is quite long, so it is usually better to redirect this into a file.
-The output is in XML format. By default all games are listed; however,
-you can limit this list by specifying a driver name or wildcard after
-the \-listxml command.
-.TP
-.B \-listfull, \-ll \fR[\fIgamename\fR|\fIwildcard\fR]
-Displays a list of game driver names and descriptions. By default all
-games are listed; however, you can limit this list by specifying a
-driver name or wildcard after the \-listfull command.
-.TP
-.B \-listsource, \-ls \fR[\fIgamename\fR|\fIwildcard\fR]
-Displays a list of drivers and the names of the source files their game
-drivers live in. Useful for finding which driver a game runs on in
-order to fix bugs. By default all games are listed; however, you can
-limit this list by specifying a driver name or wildcard after the
-\-listsource command.
-.TP
-.B \-listclones, \-lc \fR[\fIgamename\fR|\fIwildcard\fR]
-Displays a list of clones. By default all clones are listed; however,
-you can limit this list by specifying a driver name or wildcard after
-the \-listclones command.
-.TP
-.B \-listbrothers, \-lb \fR[\fIgamename\fR|\fIwildcard\fR]
-Displays a list of "brothers" or other drivers from same sourcefile.
-By default all games are listed; however, you can limit this list by
-specifying a driver name or wildcard after the \-listbrothers command.
-.TP
-.B \-listcrc
-Displays a full list of CRCs of all ROM images referenced by all
-drivers within MAME code.
-.TP
-.B \-listroms \fIgamename
-Displays a list of ROM images referenced by the specified game.
-.TP
-.B \-listsamples \fIgamename
-Displays a list of samples referenced by the specified game.
-.TP
-.B \-verifyroms \fR[\fIgamename\fR|\fIwildcard\fR]
-Checks for invalid or missing ROM images. By default all drivers that
-have valid ZIP files or directories in the rompath are verified;
-however, you can limit this list by specifying a driver name or
-wildcard after the \-verifyroms command.
-.TP
-.B \-verifysamples \fR[\fIgamename\fR|\fIwildcard\fR]
-Checks for invalid or missing samples. By default all drivers that
-have valid ZIP files or directories in the samplepath are verified;
-however, you can limit this list by specifying a driver name or
-wildcard after the \-verifyroms command.
-.TP
-.B \-romident
-Attempts to identify ROM files, if they are known to MAME, in the
-specified .zip file or directory. This command can be used to try and
-identify ROM sets taken from unknown boards. On exit, the errorlevel
-is returned as one of the following:
-.br
-\fB0\fR  all files were identified
-.br
-\fB7\fR  all files were identified except for some "non\-ROM" files
-.br
-\fB8\fR  some files were identified
-.br
-\fB9\fR  no files were identified
-.TP
-.B \-listdevices, \-ld
-Output the list of devices referenced by a given game or set of games.
-.TP
-.B \-listmedia, \-lm
-Output the list of available media for the system.
-.TP
-.B \-listsoftware
-Output the list of known software for the system.
-.\"
-.\" *******************************************************
-.SS Configuration options
-.\" *******************************************************
-.TP
-.B \-[no]readconfig, \-[no]rc
-Enables or disables the reading of the config files. When enabled
-(which is the default), MAME reads the following config files in order:
-.br
-1. \fBmame.ini\fR
-.br
-the main configuration file
-.br
-2. \fI[name]\fB.ini\fR
-.br
-where \fIname\fR is your executable name, i.e. mame unless you changed it
-(e.g. if you renamed mame to mame0137, the parsed file will be
-\fImame0137.ini\fR)
-.br
-3. \fBdebug.ini\fR, if the debugger is enabled
-.br
-4. \fBvector.ini\fR, for vector games only
-.br
-5. \fI[driver]\fB.ini\fR
-.br
-based on the source filename of the game driver
-.br
-6. \fI[parent]\fB.ini\fR
-.br
-for clones only, may be called recursively
-.br
-7. \fI[gamename]\fB.ini\fR
-.br
-note this sometimes resolves to the same of the source driver
-.br
-The settings in the later ini's override those in the earlier ini's.
-So, for example, if you wanted to disable overlay effects in the
-vector games, you can create a vector.ini with the "effect none" line
-in it, and it will override whatever effect value you have in your
-mame.ini. The default is ON (\-readconfig).
-.\"
-.\" *******************************************************
-.SS Search path options
-.\" *******************************************************
-.B IMPORTANT\fR: Please use the path, directory and file options in
-mame.ini \fBONLY\fR. Otherwise, the outcome may be unpredictable and not
-consistent across releases.
-.TP
-.B \-rompath, \-rp, \-biospath, \-bp, \fIpathname
-Specifies a list of paths within which to find ROM or hard disk images.
-Multiple paths can be specified by separating them with semicolons.
-The default is 'roms' (that is, a directory "roms" in the same directory
-as the MAME executable).
-.TP
-.B \-samplepath, \-sp \fIpathname
-Specifies a list of paths within which to find sample files. Multiple
-paths can be specified by separating them with semicolons. The default
-is 'samples' (that is, a directory "samples" in the same directory as
-the MAME executable).
-.TP
-.B \-artpath, \-artwork_directory \fIpathname
-Specifies a list of paths within which to find artwork files. Multiple
-paths can be specified by separating them with semicolons. The default
-is 'artwork' (that is, a directory "artwork" in the same directory as
-the MAME executable).
-.TP
-.B \-ctrlrpath, \-ctrlr_directory \fIpathname
-Specifies a list of paths within which to find controller\-specific
-configuration files. Multiple paths can be specified by separating
-them with semicolons. The default is 'ctrlr' (that is, a directory
-"ctrlr" in the same directory as the MAME executable).
-.TP
-.B \-inipath \fIpathname
-Specifies a list of paths within which to find .INI files. Multiple
-paths can be specified by separating them with semicolons. The default
-is '/etc/mame/'.
-.TP
-.B \-fontpath \fIpathname
-Specifies a list of paths within which to find .BDF font files. Multiple
-paths can be specified by separating them with semicolons. The default
-is '.' (that is, search in the same directory as the MAME executable).
-.TP
-.B \-cheatpath \fIpathname
-Specifies a list of paths within which to find cheat files. Multiple
-paths can be specified by separating them with semicolons. The default
-is 'cheat' (that is, a directory "cheat" in the same directory as
-the MAME executable).
-.TP
-.B \-crosshairpath \fIpathname
-Specifies a list of paths within which to find crosshair files. Multiple
-paths can be specified by separating them with semicolons. The default
-is 'crosshair' (that is, a directory "crosshair" in the same directory as
-the MAME executable).  If the Crosshair is set to default in the menu,
-MAME will look for gamename\cross#.png and then cross#.png in the
-specified crosshairpath, where # is the player number.  Failing that,
-MAME will use built\-in default crosshairs.
-.\"
-.\" *******************************************************
-.SS Output Directory Options
-.\" *******************************************************
-.TP
-.B \-cfg_directory \fIpathname
-Specifies a single directory where configuration files are stored.
-Configuration files store user configurable settings that are read at
-startup and written when MAME exits. The default is 'cfg' (that is,
-a directory "cfg" in the same directory as the MAME executable). If this
-directory does not exist, it will be automatically created.
-.TP
-.B \-nvram_directory \fIpathname
-Specifies a single directory where NVRAM files are stored. NVRAM files
-store the contents of EEPROM and non\-volatile RAM (NVRAM) for games
-which used this type of hardware. This data is read at startup and
-written when MAME exits. The default is 'nvram' (that is, a directory
-"nvram" in the same directory as the MAME executable). If this directory
-does not exist, it will be automatically created.
-.TP
-.B \-memcard_directory \fIpathname
-Specifies a single directory where memory card files are stored. Memory
-card files store the contents of removable memory cards for games which
-used this type of hardware. This data is read and written under control
-of the user via the "Memory Card" menu in the user interface. The
-default is 'memcard' (that is, a directory "memcard" in the same
-directory as the MAME executable). If this directory does not exist,
-it will be automatically created.
-.TP
-.B \-input_directory \fIpathname
-Specifies a single directory where input recording files are stored.
-Input recordings are created via the \-record option and played back via
-the \-playback option. The default is 'inp' (that is, a directory
-"inp" in the same directory as the MAME executable). If this directory
-does not exist, it will be automatically created.
-.TP
-.B \-state_directory \fIpathname
-Specifies a single directory where save state files are stored. Save
-state files are read and written either upon user request, or when using
-the \-autosave option. The default is 'sta' (that is, a directory "sta"
-in the same directory as the MAME executable). If this directory does
-not exist, it will be automatically created.
-.TP
-.B \-snapshot_directory \fIpathname
-Specifies a single directory where screen snapshots are stored, when
-requested by the user. The default is 'snap' (that is, a directory
-"snap" in the same directory as the MAME executable). If this directory
-does not exist, it will be automatically created.
-.TP
-.B \-diff_directory \fIpathname
-Specifies a single directory where hard drive differencing files are
-stored. Hard drive differencing files store any data that is written
-back to a hard disk image, in order to preserve the original image. The
-differencing files are created at startup when a game with a hard disk
-image. The default is 'diff' (that is, a directory "diff" in the same
-directory as the MAME executable). If this directory does not exist,
-it will be automatically created.
-.TP
-.B \-comment_directory \fIpathname
-Specifies a single directory where debugger comment files are stored.
-Debugger comment files are written by the debugger when comments are
-added to the disassembly for a game. The default is 'comments' (that is,
-a directory "comments" in the same directory as the MAME executable).
-If this directory does not exist, it will be automatically created.
-.\"
-.\" *******************************************************
-.SS State/playback options
-.\" *******************************************************
-.TP
-.B \-state \fIslot
-Immediately after starting the specified game, will cause the save
-state in the specified \fIslot\fP to be loaded.
-.TP
-.B \-[no]autosave
-When enabled, automatically creates a save state file when exiting MAME
-and automatically attempts to reload it when later starting MAME with
-the same game. This only works for games that have explicitly enabled
-save state support in their driver. The default is OFF (\-noautosave).
-.TP
-.B \-playback, \-pb \fIfilename
-Specifies a file from which to play back a series of game inputs. This
-feature does not work reliably for all games, but can be used to watch
-a previously recorded game session from start to finish. In order to
-make things consistent, you should only record and playback with all
-configuration (.cfg), NVRAM (.nv), and memory card files deleted. The
-default is NULL (no playback).
-.TP
-.B \-record, \-rec \fIfilename
-Specifies a file to record all input from a game session. This can be
-used to record a game session for later playback. This feature does not
-work reliably for all games, but can be used to watch a previously
-recorded game session from start to finish. In order to make things
-consistent, you should only record and playback with all configuration
-(.cfg), NVRAM (.nv), and memory card files deleted. The default is NULL
-(no recording).
-.TP
-.B \-snapname \fIname
-Describes how MAME should name files for snapshots. \fIname\fP is a string
-that provides a template that is used to generate a filename. Three
-simple substitutions are provided: the / character represents the
-path separator on any target platform (even Windows); the string \fI%g\fP
-represents the driver name of the current game; and the string \fI%i\fP
-represents an incrementing index. If \fI%i\fP is omitted, then each
-snapshot taken will overwrite the previous one; otherwise, MAME will
-find the next empty value for \fI%i\fP and use that for a filename. The
-default is \fI%g/%i\fP, which creates a separate folder for each game,
-and names the snapshots under it starting with 0000 and increasing
-from there.
-.TP
-.B \-snapsize \fIwidth\fPx\fIheight\fP
-Hard\-codes the size for snapshots and movie recording. By default,
-MAME will create snapshots at the game's current resolution in raw
-pixels, and will create movies at the game's starting resolution in
-raw pixels. If you specify this option, then MAME will create both
-snapshots and movies at the size specified, and will bilinear filter
-the result. Note that this size does not automatically rotate if the 
-game is vertically oriented. The default is 'auto'.
-.TP
-.B \-snapview \fIviewname\fP
-Specifies the view to use when rendering snapshots and movies. By
-default, both use a special 'internal' view, which renders a separate
-snapshot per screen or renders movies only of the first screen. By
-specifying this option, you can override this default behavior and
-select a single view that will apply to all snapshots and movies.
-Note that \fIviewname\fP does not need to be a perfect match; rather, it
-will select the first view whose name matches all the characters
-specified by \fIviewname\fP. For example, \-snapview native will match the 
-"Native (15:14)" view even though it is not a perfect match. 
-\fIviewname\fP can also be 'auto', which selects the first view with all
-screens present. The default value is 'internal'.
-.TP
-.B \-mngwrite \fIfilename
-Writes each video frame to the given \fIfilename\fP in MNG format, producing
-an animation of the	game session. Note that \-mngwrite only writes video
-frames; it does not save any audio data. Use \-wavwrite for that, and
-reassemble the audio/video using offline tools. The default is NULL (no
-recording).
-.TP
-.B \-aviwrite \fIfilename
-Stream video and sound data to the given \fIfilename\fP in AVI format,
-producing an animation of the game session complete with sound. The
-default is NULL (no recording).
-.TP
-.B \-wavwrite \fIfilename
-Writes the final mixer output to the given \fIfilename\fP in WAV format,
-producing an audio recording of the	game session. The default is NULL
-(no recording).
-.TP
-.B \-[no]burnin
-Tracks brightness of the screen during play and at the end of 
-emulation generates a PNG that can be used to simulate burn\-in
-effects on other games. The resulting PNG is created such that the
-least used\-areas of the screen are fully white (since burned\-in areas 
-are darker, all other areas of the screen must be lightened a touch).
-The intention is that this PNG can be loaded via an artwork file with
-a low alpha (e.g, 0.1\-0.2 seems to work well) and blended over the
-entire screen. The PNG files are saved in the snap directory under 
-the gamename\\burnin\-<screen.name>.png. The default is OFF (\-noburnin).
-.\"
-.\" *******************************************************
-.SS Performance options
-.\" *******************************************************
-.TP
-.B \-[no]autoframeskip, \-[no]afs
-Automatically determines the frameskip level while you're playing the
-game, adjusting it constantly in a frantic attempt to keep the game
-running at full speed. Turning this on overrides the value you have set
-for \-frameskip below. The default is OFF (\-noautoframeskip).
-.TP
-.B \-frameskip, \-fs \fIvalue
-Specifies the frameskip value (autoframeskip must be disabled). This is the
-number of frames out of every 12 to drop when running. For example, if you
-say \-frameskip 2, then MAME will display 10 out of every 12 frames. By
-skipping those frames, you may be able to get full speed in a game that
-requires more horsepower than your computer has. The default value is 0,
-which skips no frames.
-.TP
-.B \-seconds_to_run, \-str \fIvalue
-This option can be used for benchmarking and automated testing. It tells 
-MAME to stop execution after a fixed number of seconds. By combining 
-this with a fixed set of other command line options, you can set up a 
-consistent environment for benchmarking MAME performance. In addition, 
-upon exit, the \-str option will write a screenshot called final.png
-to the game's snapshot directory.
-.TP
-.B \-[no]throttle
-Configures the default thottling setting. When throttling is on, MAME
-attempts to keep the game running at the game's intended speed. When
-throttling is off, MAME runs the game as fast as it can. Note that the
-fastest speed is more often than not limited by your graphics card,
-especially for older games. The default is ON (\-throttle).
-.TP
-.B \-[no]sleep
-Allows MAME to give time back to the system when running with \-throttle.
-This allows other programs to have some CPU time, assuming that the
-game isn't taxing 100% of your CPU resources. This option can potentially
-cause hiccups in performance if other demanding programs are running.
-The default is ON (\-sleep).
-.TP
-.B \-speed
-Controls the speed of gameplay, relative to realtime; smaller numbers are
-slower. Default is 1.00.
-.TP
-.B \-refreshspeed, \-rs
-Automatically adjusts the \fB\-speed\fR parameter to keep the effective refresh
-rate below that of the lowest screen refresh rate.
-.\"
-.\" +++++++++++++++++++++++++++++++++++++++++++++++++++++++
-.\" SDL specific
-.\" +++++++++++++++++++++++++++++++++++++++++++++++++++++++
-.TP
-.B \-multithreading, \-mt
-Enable multithreading; this enables rendering and blitting on a separate
-thread. The default is OFF.
-.TP
-.B \-numprocessors, \-np
-Set number of processors; this overrides the number the system reports.
-.TP
-.B \-sdlvideofps
-Show SDL video performance.
-.\"
-.\" *******************************************************
-.SS Rotation options
-.\" *******************************************************
-.TP
-.B \-[no]rotate
-Rotate the game to match its normal state (horizontal/vertical). This
-ensures that both vertically and horizontally oriented games show up
-correctly without the need to rotate your monitor. If you want to keep
-the game displaying 'raw' on the screen the way it would have in the
-arcade, turn this option OFF. The default is ON (\-rotate).
-.TP
-.B \-[no]ror | \-[no]rol
-Rotate the game screen to the right (clockwise) or left (counter\-
-clockwise) relative to either its normal state (if \-rotate is specified)
-or its native state (if \-norotate is specified). The default for both of
-these options is OFF (\-noror \-norol).
-.TP
-.B \-[no]autoror | \-[no]autorol
-These options are designed for use with pivoting screens that only
-pivot in a single direction. If your screen only pivots clockwise,
-use \-autorol to ensure that the game will fill the screen either
-horizontally or vertically in one of the directions you can handle.
-If your screen only pivots counter\-clockwise, use \-autoror.
-.TP
-.B \-[no]flipx
-.TP
-.B \-[no]flipy
-Flip (mirror) the game screen either horizontally (\-flipx) or
-vertically (\-flipy). The flips are applied after the \-rotate and
-\-ror/\-rol options are applied. The default for both of these options
-is OFF (\-noflipx \-noflipy).
-.\"
-.\" *******************************************************
-.SS Artwork options
-.\" *******************************************************
-.TP
-.B \-[no]artwork_crop, \-[no]artcrop
-Enable cropping of artwork to the game screen area only. This
-option can also be controlled via the Video Options menu in the user
-interface. The default is OFF (\-noartwork_crop).
-.TP
-.B \-[no]use_backdrops, \-[no]backdrop
-Enables/disables the display of backdrops. The default is ON
-(\-use_backdrops).
-.TP
-.B \-[no]use_overlays, \-[no]overlay
-Enables/disables the display of overlays. The default is ON
-(\-use_overlays).
-.TP
-.B \-[no]use_bezels, \-[no]bezel
-Enables/disables the display of bezels. The default is ON
-(\-use_bezels).
-.TP
-.B \-[no]use_cpanels, \-[no]cpanel
-Enables/disables the display of cpanels. The default is ON
-(\-use_bezels).
-.TP
-.B \-[no]use_marquees, \-[no]marquee
-Enables/disables the display of marquees. The default is ON
-(\-use_bezels).
-.\"
-.\" *******************************************************
-.SS Screen options
-.\" *******************************************************
-.TP
-.B \-brightness \fIvalue
-Controls the default brightness, or black level, of the game screens.
-This option does not affect the artwork or other parts of the display.
-Using the MAME UI, you can individually set the brightness for each game
-screen; this option controls the initial value for all visible game
-screens. The standard value is 1.0. Selecting lower values (down to 0.1)
-will produce a darkened display, while selecting higher values (up to
-2.0) will give a brighter display. The default is 1.0.
-.TP
-.B \-contrast \fIvalue
-Controls the contrast, or white level, of the game screens. This option
-does not affect the artwork or other parts of the display. Using the
-MAME UI, you can individually set the contrast for each game screen;
-this option controls the initial value for all visible game screens. The
-standard value is 1.0. Selecting lower values (down to 0.1) will produce
-a dimmer display, while selecting higher values (up to 2.0) will
-give a more saturated display. The default is 1.0.
-.TP
-.B \-gamma \fIvalue
-Controls the gamma, which produces a potentially nonlinear black to
-white ramp, for the game screens. This option does not affect the
-artwork or other parts of the display. Using the MAME UI, you can
-individually set the gamma for each game screen; this option controls
-the initial value for all visible game screens. The standard value is
-1.0, which gives a linear ramp from black to white. Selecting lower
-values (down to 0.1) will increase the nonlinearity toward black,
-while selecting higher values (up to 3.0) will push the nonlinearity
-toward white. The default is 1.0.
-.TP
-.B \-pause_brightness \fIvalue
-This controls the brightness level when MAME is paused. The default
-value is 0.65.
-.\"
-.\" *******************************************************
-.SS Vector rendering options
-.\" *******************************************************
-.TP
-.B \-[no]antialias, \-[no]aa
-Enables antialiased line rendering for vector games. The default is ON
-(\-antialias).
-.TP
-.B \-beam \fIwidth
-Sets the width of the vectors. This is a scaling factor against the
-standard vector width. A value of 1.0 will keep the default vector line
-width. Smaller values will reduce the width, and larger values will
-increase the width. The default is 1.0.
-.TP
-.B \-flicker \fIvalue
-Simulates a vector "flicker" effect, similar to a vector monitor that
-needs adjustment. This option requires a float argument in the range of
-0.00\-100.00 (0=none, 100=maximum). The default is 0.
-.\"
-.\" *******************************************************
-.SS Video options
-.\" *******************************************************
-.\" +++++++++++++++++++++++++++++++++++++++++++++++++++++++
-.\" SDL specific
-.\" +++++++++++++++++++++++++++++++++++++++++++++++++++++++
-.TP
-.B \-video\fR [\fIsoft\fR|\fIopengl\fR|\fIopengl16\fR|\fInone\fR]
-Specifies which video subsystem to use for drawing:
-.br
-\fBsoft\fR  uses software rendering, which is slower but more compatible.
-.br
-\fBopengl\fR  uses OpenGL and your graphics accelerator to speed up many
-aspects of drawing MAME including compositing artwork, overlays, and
-bezels, as well as stretching the image to fit your screen.
-.br
-\fBopengl16\fR  uses alternate OpenGL code, which should provide faster
-output on some cards.
-.br
-\fBnone\fR  does no drawing and is intended for CPU benchmarking.
-.br
-Default is SOFT.
-.TP
-.B \-numscreens
-Reserved for future use.
-.TP
-.B \-[no]window, \-[no]w
-Run MAME in either full screen or a window. This is a fully\-featured window
-mode where the window resizes as necessary to track what the game does.
-And you can resize it  yourself with your OS's standard window controls.
-The default is OFF (\-nowindow).
-.TP
-.B \-[no]maximize, \-[no]max
-Controls initial window size in windowed mode. If it is set on, the
-window will initially be set to the maximum supported size when you
-start MAME. If it is turned off, the window will start out at the
-smallest supported size. This option only has an effect when the 
-\-window option is used. The default is ON (\-maximize).
-.TP
-.B \-keepaspect, \-ka
-Forces the correct aspect ratio. This means when you're resizing the window
-in windowed mode the actual game image will resize in discrete steps to
-maintain the proper shape of the game graphics. If you turn this off you can
-resize the window to anything you like and get funny squishing and stretching.
-The same applies for full\-screen. Default is ON (\-keepaspect).
-.TP
-.B \-unevenstretch, \-ues
-Allow non\-integer stretch factors. Video purists should stay far, far away
-from this option, while everyone else will be happy to know that it lets you
-fill the screen properly in full\-screen mode. Default is ON (\-unevenstretch).
-.TP
-.B \-effect
-Name of a PNG file to use for visual effects, or 'none'. Default is 'none'.
-.TP
-.B \-centerh
-Center horizontally within the view area. Default is ON (\-centerh).
-.TP
-.B \-centerv
-Center vertically within the view area. Default is ON (\-centerv).
-.TP
-.B \-waitvsync
-Enable waiting for the start of VBLANK before flipping screens;
-reduces tearing effects.
-.\"
-.\" *******************************************************
-.SS Software video rendering subsystem options
-.\" *******************************************************
-.\" +++++++++++++++++++++++++++++++++++++++++++++++++++++++
-.\" SDL specific
-.\" +++++++++++++++++++++++++++++++++++++++++++++++++++++++
-.B NOTE:
-All the options in this group are available only with softare video 
-rendering subsystem, i.e \fB\-video soft\fR.
-.TP
-.B \-prescale
-Scale screen rendering by this amount in software. Default is 1.
-.TP
-.B \-scalemode, \-sm \fR[\fInone\fR|\fIasync\fR|\fIyv12\fR|\fIyuy2\fR|\fIyv12x2\fR|\fIyuy2x2\fR]
-Hardware scaling mode.
-.br
-\fBnone\fR    use software rendering.
-.br
-\fBasync\fR   async overlay.
-.br
-\fByv12\fR    yv12 overlay.
-.br
-\fByuy2\fR    yuy2 overlay.
-.br
-\fByv12x2\fR  yv12 overlay using x2 prescaling.
-.br
-\fByuy2x2\fR  yuy2 overlay using x2 prescaling.
-.br
-Default is NONE.
-.\"
-.\" *******************************************************
-.SS OpenGL video rendering subsystem options
-.\" *******************************************************
-.\" +++++++++++++++++++++++++++++++++++++++++++++++++++++++
-.\" SDL specific
-.\" +++++++++++++++++++++++++++++++++++++++++++++++++++++++
-.B NOTE:
-All the options in this group are available only with OpenGL video 
-rendering subsystem, i.e \fB\-video opengl\fR or \fB\-video opengl16\fR.
-.TP
-.B \-filter, \-glfilter, \-flt
-Enable bilinear filtering on screen output. Default is ON (\-filter).
-.TP
-.B \-prescale
-Scale screen rendering by this amount in software. Default is 1.
-.TP
-.B \-gl_forcepow2texture
-Force power of two textures. Default is NO.
-.TP
-.B \-gl_notexturerect
-Don't use OpenGL GL_ARB_texture_rectangle. Default is ON: turn off
-(set this to 0) if corruption occurs in OpenGL mode, at cost of some
-performance loss.
-.TP
-.B \-gl_vbo
-Enable OpenGL VBO, if available, for a performance increase.
-Default is ON: turn off (set this to 0) if corruption occurs.
-.TP
-.B \-gl_pbo
-Enable OpenGL PBO, if available, for a performance increase.
-Default is ON: turn off (set this to 0) if corruption occurs.
-.TP
-.B \-gl_glsl
-Enable OpenGL GLSL, if available, for a performance increase.
-.TP
-.B \-gl_glsl_filter
-Enable OpenGL GLSL filtering instead of FF filtering 0=plain, 1=bilinear.
-Default is 1: bilinear.
-.TP
-.B \-glsl_shader_mame[0\-9]
-Preferred custom OpenGL GLSL shader set mame bitmap (from 0 to 9).
-.TP
-.B \-glsl_shader_screen[0\-9]
-Preferred custom OpenGL GLSL shader screen bitmap (from 0 to 9).
-.TP
-.B \-gl_glsl_vid_attr
-Enable OpenGL GLSL handling of brightness and contrast. Better RGB game
-performance for free. Default is ON.
-.TP
-.B \-resolution, \-r
-Select the resolution to use in full\-screen mode.
-\fB\-switchres\fR must be enabled for this to work.
-.TP
-.B \-screen
-.TP
-.B \-aspect, \-screen_aspect
-.TP
-.B \-view
-.TP
-.B \-screen[0\-3]
-.TP
-.B \-aspect[0\-3]
-.TP
-.B \-resolution[0\-3], \-r[0\-3]
-.TP
-.B \-view[0\-3]
-All these options are reserved for future use.
-.\"
-.\" *******************************************************
-.SS Full screen options
-.\" *******************************************************
-.\" +++++++++++++++++++++++++++++++++++++++++++++++++++++++
-.\" SDL specific
-.\" +++++++++++++++++++++++++++++++++++++++++++++++++++++++
-.TP
-.B \-[no]switchres
-Affects full screen mode only. Chooses if MAME can try to change the screen
-resolution (color depth is normally left alone) when in full\-screen mode. If
-it's off, you always get your desktop resolution in full\-screen mode (which can
-be useful for LCDs).
-.TP
-.B \-useallheads
-Split full screen image across monitors.
-.\"
-.\" *******************************************************
-.SS Sound options
-.\" *******************************************************
-.TP
-.B \-[no]sound
-Enable or disable sound altogether. The default is ON (\-sound).
-.TP
-.B \-samplerate, \-sr \fIvalue
-Sets the audio sample rate. Smaller values (e.g. 11025) cause lower
-audio quality but faster emulation speed. Higher values (e.g. 48000)
-cause higher audio quality but slower emulation speed. The default is
-48000.
-.TP
-.B \-[no]samples
-Use samples if available. The default is ON (\-samples).
-.TP
-.B \-volume, \-vol \fIvalue
-Sets the startup volume. It can later be changed with the user interface
-(see Keys section). The volume is an attenuation in dB: e.g.,
-"\-volume \-12" will start with \-12dB attenuation. The default is 0.
-.\" +++++++++++++++++++++++++++++++++++++++++++++++++++++++
-.\" SDL specific
-.\" +++++++++++++++++++++++++++++++++++++++++++++++++++++++
-.TP
-.B \-audio_latency \fIvalue
-This controls the amount of latency built into the audio streaming.
-The latency parameter controls the lower threshold. The default is 1
-(meaning lower=1/5 and upper=2/5). Set it to 2 (\-audio_latency 2) to keep
-the sound buffer between 2/5 and 3/5 full. If you crank it up to 4,
-you can definitely notice the lag.
-.\"
-.\" *******************************************************
-.SS Input options
-.\" *******************************************************
-.TP
-.B \-[no]coin_lockout, \-[no]coinlock
-Enables simulation of the "coin lockout" feature that is implmeneted
-on a number of game PCBs. It was up to the operator whether or not
-the coin lockout outputs were actually connected to the coin
-mechanisms. If this feature is enabled, then attempts to enter a coin
-while the lockout is active will fail and will display a popup message
-in the user interface. If this feature is disabled, the coin lockout
-signal will be ignored. The default is ON (\-coin_lockout).
-.TP
-.B \-ctrlr \fIcontroller
-Enables support for special controllers. Configuration files are
-loaded from the ctrlrpath. They are in the same format as the .cfg
-files that are saved, but only control configuration data is read
-from the file. The default is NULL (no controller file).
-.TP
-.B \-[no]mouse
-Controls whether or not MAME looks for a mouse controller to use. Note
-that in many cases, lightguns are treated as mice by the operating
-system, so you may need to enable this to enable lightgun support. When
-this is enabled, you will not be able to use your mouse while playing
-a game. If you want to get control of your computer back, you will need
-to either pause the game or quit. The default is OFF (\-nomouse).
-.TP
-.B \-[no]joystick, \-[no]joy
-Controls whether or not MAME looks for joystick/gamepad controllers.
-The default is ON (\-joystick).
-.TP
-.B \-[no]lightgun, \-[no]gun
-Controls whether or not MAME makes use of lightgun controllers.
-Note that most lightguns map to the mouse, so using \-lightgun and
-\-mouse together may produce strange results. The default is OFF
-(\-nolightgun).
-.TP
-.B \-[no]multikeyboard, \-[no]multikey
-Determines whether MAME differentiates between multiple keyboards.
-Some systems may report more than one keyboard; by default, the data
-from all of these keyboards is combined so that it looks like a single
-keyboard. Turning this option on will enable MAME to report keypresses
-on different keyboards independently. The default is OFF 
-(\-nomultikeyboard).
-.TP
-.B \-[no]multimouse
-Determines whether MAME differentiates between multiple mice. Some 
-systems may report more than one mouse device; by default, the data
-from all of these mice is combined so that it looks like a single
-mouse. Turning this option on will enable MAME to report mouse 
-movement and button presses on different mice independently. The 
-default is OFF (\-nomultimouse).
-.TP
-.B \-[no]steadykey, \-[no]steady
-Some games require two or more buttons to be pressed at exactly the
-same time to make special moves. Due to limitations in the PC keyboard
-hardware, it can be difficult or even impossible to accomplish that
-using the standard keyboard handling. This option selects a different
-handling that makes it easier to register simultaneous button presses,
-but has the disadvantage of making controls less responsive. The
-default is OFF (\-nosteadykey).
-.TP
-.B \-[no]offscreen_reload, \-[no]reload
-Controls whether or not MAME treats a second button input from a
-lightgun as a reload signal. In this case, MAME will report the gun's
-position as (0,MAX) with the trigger held, which is equivalent to an
-offscreen reload. This is only needed for games that required you to 
-shoot offscreen to reload, and then only if your gun does not support 
-off screen reloads. The default is OFF (\-nooffscreen_reload).
-.TP
-.B \-joystick_map, \-joymap \fImap
-Controls how joystick values map to digital joystick controls.
-See /usr/share/doc/mame/config.txt for full details on \fImap\fR format.
-.TP
-.B \-joystick_deadzone, \-joy_deadzone, \-jdz \fIvalue
-If you play with an analog joystick, the center can drift a little.
-joystick_deadzone tells how far along an axis you must move before the
-axis starts to change. This option expects a float in the range of
-0.0 to 1.0. Where 0 is the center of the joystick and 1 is the outer
-limit. The default is 0.3.
-.TP
-.B \-joystick_saturation, \-joy_saturation, \-jsat \fIvalue
-If you play with an analog joystick, the ends can drift a little,
-and may not match in the +/\- directions. joystick_saturation tells how 
-far along an axis movement change will be accepted before it reaches 
-the maximum range. This option expects a float in the range of 0.0 to 
-1.0, where 0 is the center of the joystick and 1 is the outer limit.
-The default is 0.85.
-.TP
-.B \-natural, \-nat
-Specifies whether to use a natural keyboard or not.
-.TP
-.B \-uimodekey, \-umk
-Specifies the key used to toggle between full and partial UI mode.
-.\" +++++++++++++++++++++++++++++++++++++++++++++++++++++++
-.\" SDL specific
-.\" +++++++++++++++++++++++++++++++++++++++++++++++++++++++
-.TP
-.B \-keymap
-Enable keymap for non\-QWERTY keyboards. Used in conjuction with
-\fB\-keymap_file\fR.
-.TP
-.B \-keymap_file \fIkeymap_file\fR
-Specifies the full path to the keymap file to be used. Shipped keymap files lie
-in \fB/usr/share/games/mame/keymaps\fR.
-.TP
-.B \-joy_idx1 \fIjoystick
-.TP
-.B \-joy_idx2 \fIjoystick
-.TP
-.B \-joy_idx3 \fIjoystick
-.TP
-.B \-joy_idx4 \fIjoystick
-.TP
-.B \-joy_idx5 \fIjoystick
-.TP
-.B \-joy_idx6 \fIjoystick
-.TP
-.B \-joy_idx7 \fIjoystick
-.TP
-.B \-joy_idx8 \fIjoystick
-With these options you can assign a joystick to a 
-specific index in MAME. Even if the kernel will list the joysticks
-in a different order on the next boot, MAME will still see the joystick
-as e.g. "Joystick 2". Use mame \-v to see which joysticks are recognized.
-Default is AUTO.
-.TP
-.B \-sixaxis
-Use special handling for PS3 Sixaxis controllers.
-.TP
-.B \-videodriver, \-vd \fIx11\fR|\fIdirectfb\fR|\fIauto\fR
-SDL video driver to use; auto selects SDL default.
-.TP
-.B \-audiodriver, \-ad \fIalsa\fR|\fIarts\fR|\fIauto\fR
-SDL audio driver to use; auto selects SDL default.
-.TP
-.B \-gl_lib \fIalsa\fR|\fIarts\fR|\fIauto\fR
-Alternative libGL.so to use; auto selects SDL default.
-.\"
-.\" *******************************************************
-.SS Input automatic enable options
-.\" *******************************************************
-.TP
-.B \-paddle_device, \-paddle \fR[\fInone\fR|\fIkeyboard\fR|\fImouse\fR|\fIlightgun\fR|\fIjoystick\fR]
-.TP
-.B \-adstick_device, \-adstick \fR[\fInone\fR|\fIkeyboard\fR|\fImouse\fR|\fIlightgun\fR|\fIjoystick\fR]
-.TP
-.B \-pedal_device, \-pedal \fR[\fInone\fR|\fIkeyboard\fR|\fImouse\fR|\fIlightgun\fR|\fIjoystick\fR]
-.TP
-.B \-dial_device, \-dial \fR[\fInone\fR|\fIkeyboard\fR|\fImouse\fR|\fIlightgun\fR|\fIjoystick\fR]
-.TP
-.B \-trackball_device, \-trackball \fR[\fInone\fR|\fIkeyboard\fR|\fImouse\fR|\fIlightgun\fR|\fIjoystick\fR]
-.TP
-.B \-lightgun_device \fR[\fInone\fR|\fIkeyboard\fR|\fImouse\fR|\fIlightgun\fR|\fIjoystick\fR]
-.TP
-.B \-positional_device \fR[\fInone\fR|\fIkeyboard\fR|\fImouse\fR|\fIlightgun\fR|\fIjoystick\fR]
-.TP
-.B \-mouse_device \fR[\fInone\fR|\fIkeyboard\fR|\fImouse\fR|\fIlightgun\fR|\fIjoystick\fR]
-Each of these options controls autoenabling the mouse, or joystick
-depending on the presence of a particular class of analog
-control for a particular game. For example, if you specify the option
-\-paddle mouse, then any game that has a paddle control will automatically
-enable mouse controls just as if you had explicitly specified \-mouse.
-Note that these controls override the values of \-[no]mouse,
-\-[no]joystick, etc.
-.\"
-.\" *******************************************************
-.SS Debugging options
-.\" *******************************************************
-.TP
-.B \-[no]log
-Creates a file called error.log which contains all of the internal
-log messages generated by the MAME core and game drivers. The default
-is OFF (\-nolog).
-.TP
-.B \-[no]verbose, \-[no]v
-Displays internal diagnostic information. This information is very
-useful for debugging problems with your configuration. \fBIMPORTANT\fP: when
-reporting bugs, please run with mame \-verbose and include the resulting
-information. The default is off (\-noverbose).
-.TP
-.B \-update_in_pause
-Enables updating the screen bitmap while the game is paused. This is
-useful for debuggin in some scenarios (and gets in the way in others).
-.TP
-.B \-[no]debug, \-[no]d
-Activates the integrated debugger. By default, the debugger is entered 
-by pressing the tilde (~) key during emulation. It is also entered 
-immediately at startup. The default is OFF (\-nodebug).
-.TP
-.B \-debugscript \fIfilename
-Specifies a file that contains a list of debugger commands to execute
-immediately upon startup. The default is NULL (no commands).
-.TP
-.B \-debug_internal, \-di
-Use the internal debugger for debugging.
-.\" +++++++++++++++++++++++++++++++++++++++++++++++++++++++
-.\" SDL specific
-.\" +++++++++++++++++++++++++++++++++++++++++++++++++++++++
-.TP
-.B \-[no]oslog
-Outputs the error.log data to the system debugger. This can be used at
-the same time as \-log to output the log data to both targets as well.
-Default is OFF (\-nooslog).
-.\"
-.\" *******************************************************
-.SS Misc options
-.\" *******************************************************
-.TP
-.B \-bios \fIbiosname
-Specifies the specific BIOS to use with the current game, for game
-systems that make use of a BIOS. The \-listxml output will list all of
-the possible BIOS names for a game. The default is 'default'.
-.TP
-.B \-[no]cheat, \-[no]c
-Enables the reading of the cheat database, if present, and the Cheat
-menu in the user interface. The	default is OFF (\-nocheat).
-.TP
-.B \-[no]skip_gameinfo
-Forces MAME to skip displaying the game info screen. The default is OFF
-(\-noskip_gameinfo).
-.\"
-.\"
-.\" LEGAL NOTICE chapter
-.SH LEGAL NOTICE
-Please visit the MAME website for some important legal information:
-.PP
-http://mamedev.org/legal.html
diff -Nru src-old/osd/sdl/man/mame.6 src/osd/sdl/man/mame.6
--- src-old/osd/sdl/man/mame.6	1970-01-01 01:00:00.000000000 +0100
+++ src/osd/sdl/man/mame.6	2012-03-25 04:27:58.000000000 +0200
@@ -0,0 +1,1061 @@
+.\"  -*- nroff -*-
+.\"
+.\" mame.6
+.\"
+.\" Man page created from usage and source information:
+.\" * commands: see src/emu/clifront.c clifront.h
+.\" * options: core entries, see src/emu/emuopts.c emuopts.h
+.\"            SDL-specific entries, see src/osd/sdl/sdlmain.c osdsdl.h
+.\" Cesare Falco <cesare.falco@gmail.com>, February 2007
+.\"
+.\" Also, some text borrowed from the xmame 0.106 man page,
+.\" done by Rene Herrmann <rene.herrmann@berlin.de>, September 2000
+.\" and updated by Andrew Burton <burtona@gol.com>, July 2003
+.\"
+.\"
+.TH MAME 1 2012-03-25 0.145u5 "MAME \- The Multiple Arcade Machine Emulator"
+.\"
+.\"
+.\" NAME chapter
+.SH NAME
+MAME \- The Multiple Arcade Machine Emulator
+.\"
+.\"
+.\" SYNOPSIS chapter
+.SH SYNOPSIS
+.B mame
+.RI [ options ]
+.I gamename
+.\"
+.\"
+.\" DESCRIPTION chapter
+.SH DESCRIPTION
+Started in 1997 by Nicola Salmoria, MAME was originally intended as a series
+of emulators for individual games, which were later combined into a single
+multi\-game emulator. In the following years, MAME grew over and over up to
+the actual size, with more than 100 contributors to the project.
+.\"
+.\"
+.\" OPTIONS chapter
+.SH OPTIONS
+.\"
+.\" *******************************************************
+.SS Core commands
+.\" *******************************************************
+.TP
+.B \-help, \-?
+Displays current MAME version and copyright notice.
+.TP
+.B \-validate, \-valid
+Performs internal validation on every driver in the system. Run this
+before submitting changes to ensure that you haven't violated any of
+the core system rules.
+.\"
+.\" *******************************************************
+.SS Configuration commands
+.\" *******************************************************
+.TP
+.B \-createconfig, \-cc
+Creates the default \fBmame.ini\fP file in the current directory. All the
+configuration options (not commands) described below can be permanently
+changed by editing this configuration file.
+.TP
+.B \-showconfig, \-sc
+Displays the current configuration settings.
+.TP
+.B \-showusage, \-su
+Displays a summary of all the command line options. For options that
+are not mentioned here, the short summary given by
+\fBmame \-showusage\fR is usually sufficient.
+.\"
+.\" *******************************************************
+.SS Frontend commands
+.\" *******************************************************
+.B NOTE:
+By default, all the '\-list' commands below write info to the screen.
+If you wish to write the info to a textfile instead, use redirection, e.g.
+.B mame \-listxml > ~/mamelist.xml
+writes the full list of supported game to file \fImamelist.xml\fR in your home
+directory.
+.TP
+.B \-listxml, \-lx \fR[\fIgamename\fR|\fIwildcard\fR]
+List comprehensive details for all of the supported games. The output
+is quite long, so it is usually better to redirect this into a file.
+The output is in XML format. By default all games are listed; however,
+you can limit this list by specifying a driver name or wildcard after
+the \-listxml command.
+.TP
+.B \-listfull, \-ll \fR[\fIgamename\fR|\fIwildcard\fR]
+Displays a list of game driver names and descriptions. By default all
+games are listed; however, you can limit this list by specifying a
+driver name or wildcard after the \-listfull command.
+.TP
+.B \-listsource, \-ls \fR[\fIgamename\fR|\fIwildcard\fR]
+Displays a list of drivers and the names of the source files their game
+drivers live in. Useful for finding which driver a game runs on in
+order to fix bugs. By default all games are listed; however, you can
+limit this list by specifying a driver name or wildcard after the
+\-listsource command.
+.TP
+.B \-listclones, \-lc \fR[\fIgamename\fR|\fIwildcard\fR]
+Displays a list of clones. By default all clones are listed; however,
+you can limit this list by specifying a driver name or wildcard after
+the \-listclones command.
+.TP
+.B \-listbrothers, \-lb \fR[\fIgamename\fR|\fIwildcard\fR]
+Displays a list of "brothers" or other drivers from same sourcefile.
+By default all games are listed; however, you can limit this list by
+specifying a driver name or wildcard after the \-listbrothers command.
+.TP
+.B \-listcrc
+Displays a full list of CRCs of all ROM images referenced by all
+drivers within MAME code.
+.TP
+.B \-listroms \fIgamename
+Displays a list of ROM images referenced by the specified game.
+.TP
+.B \-listsamples \fIgamename
+Displays a list of samples referenced by the specified game.
+.TP
+.B \-verifyroms \fR[\fIgamename\fR|\fIwildcard\fR]
+Checks for invalid or missing ROM images. By default all drivers that
+have valid ZIP files or directories in the rompath are verified;
+however, you can limit this list by specifying a driver name or
+wildcard after the \-verifyroms command.
+.TP
+.B \-verifysamples \fR[\fIgamename\fR|\fIwildcard\fR]
+Checks for invalid or missing samples. By default all drivers that
+have valid ZIP files or directories in the samplepath are verified;
+however, you can limit this list by specifying a driver name or
+wildcard after the \-verifyroms command.
+.TP
+.B \-romident
+Attempts to identify ROM files, if they are known to MAME, in the
+specified .zip file or directory. This command can be used to try and
+identify ROM sets taken from unknown boards. On exit, the errorlevel
+is returned as one of the following:
+.br
+\fB0\fR  all files were identified
+.br
+\fB7\fR  all files were identified except for some "non\-ROM" files
+.br
+\fB8\fR  some files were identified
+.br
+\fB9\fR  no files were identified
+.TP
+.B \-listdevices, \-ld
+Output the list of devices referenced by a given game or set of games.
+.TP
+.B \-listslots, \-lslot
+Output the list of available slots and slot devices for the system.
+.TP
+.B \-listmedia, \-lm
+Output the list of available media for the system.
+.TP
+.B \-listsoftware, \-lsoft
+Output the list of known software for the system.
+.TP
+.B \-getsoftlist, \-glist
+Retrieve software list by name.
+.\"
+.\" *******************************************************
+.SS Configuration options
+.\" *******************************************************
+.TP
+.B \-[no]readconfig, \-[no]rc
+Enables or disables the reading of the config files. When enabled
+(which is the default), MAME reads the following config files in order:
+.br
+1. \fBmame.ini\fR
+.br
+the main configuration file
+.br
+2. \fI[name]\fB.ini\fR
+.br
+where \fIname\fR is your executable name, i.e. mame unless you changed it
+(e.g. if you renamed mame to mame0137, the parsed file will be
+\fImame0137.ini\fR)
+.br
+3. \fBdebug.ini\fR, if the debugger is enabled
+.br
+4. \fBvector.ini\fR, for vector games only
+.br
+5. \fI[driver]\fB.ini\fR
+.br
+based on the source filename of the game driver
+.br
+6. \fI[parent]\fB.ini\fR
+.br
+for clones only, may be called recursively
+.br
+7. \fI[gamename]\fB.ini\fR
+.br
+note this sometimes resolves to the same of the source driver
+.br
+The settings in the later ini's override those in the earlier ini's.
+So, for example, if you wanted to disable overlay effects in the
+vector games, you can create a vector.ini with the "effect none" line
+in it, and it will override whatever effect value you have in your
+mame.ini. The default is ON (\-readconfig).
+.TP
+.B \-writeconfig, \-wc
+Write configuration to \fI[driver]\fR.ini on exit.
+.\"
+.\" *******************************************************
+.SS Search path options
+.\" *******************************************************
+.B IMPORTANT\fR: Please use the path, directory and file options in
+mame.ini \fBONLY\fR. Otherwise, the outcome may be unpredictable and not
+consistent across releases.
+.TP
+.B \-rompath, \-rp, \-biospath, \-bp, \fIpathname
+Specifies a list of paths within which to find ROM or hard disk images.
+Multiple paths can be specified by separating them with semicolons.
+The default is 'roms' (that is, a directory "roms" in the same directory
+as the MAME executable).
+.TP
+.B \-samplepath, \-sp \fIpathname
+Specifies a list of paths within which to find sample files. Multiple
+paths can be specified by separating them with semicolons. The default
+is 'samples' (that is, a directory "samples" in the same directory as
+the MAME executable).
+.TP
+.B \-artpath, \-artwork_directory \fIpathname
+Specifies a list of paths within which to find artwork files. Multiple
+paths can be specified by separating them with semicolons. The default
+is 'artwork' (that is, a directory "artwork" in the same directory as
+the MAME executable).
+.TP
+.B \-ctrlrpath, \-ctrlr_directory \fIpathname
+Specifies a list of paths within which to find controller\-specific
+configuration files. Multiple paths can be specified by separating
+them with semicolons. The default is 'ctrlr' (that is, a directory
+"ctrlr" in the same directory as the MAME executable).
+.TP
+.B \-inipath \fIpathname
+Specifies a list of paths within which to find .INI files. Multiple
+paths can be specified by separating them with semicolons. The default
+is '/etc/mame/'.
+.TP
+.B \-fontpath \fIpathname
+Specifies a list of paths within which to find .BDF font files. Multiple
+paths can be specified by separating them with semicolons. The default
+is '.' (that is, search in the same directory as the MAME executable).
+.TP
+.B \-cheatpath \fIpathname
+Specifies a list of paths within which to find cheat files. Multiple
+paths can be specified by separating them with semicolons. The default
+is 'cheat' (that is, a directory "cheat" in the same directory as
+the MAME executable).
+.TP
+.B \-crosshairpath \fIpathname
+Specifies a list of paths within which to find crosshair files. Multiple
+paths can be specified by separating them with semicolons. The default
+is 'crosshair' (that is, a directory "crosshair" in the same directory as
+the MAME executable).  If the Crosshair is set to default in the menu,
+MAME will look for gamename\cross#.png and then cross#.png in the
+specified crosshairpath, where # is the player number.  Failing that,
+MAME will use built\-in default crosshairs.
+.\"
+.\" *******************************************************
+.SS Output Directory Options
+.\" *******************************************************
+.TP
+.B \-cfg_directory \fIpathname
+Specifies a single directory where configuration files are stored.
+Configuration files store user configurable settings that are read at
+startup and written when MAME exits. The default is 'cfg' (that is,
+a directory "cfg" in the same directory as the MAME executable). If this
+directory does not exist, it will be automatically created.
+.TP
+.B \-nvram_directory \fIpathname
+Specifies a single directory where NVRAM files are stored. NVRAM files
+store the contents of EEPROM and non\-volatile RAM (NVRAM) for games
+which used this type of hardware. This data is read at startup and
+written when MAME exits. The default is 'nvram' (that is, a directory
+"nvram" in the same directory as the MAME executable). If this directory
+does not exist, it will be automatically created.
+.TP
+.B \-memcard_directory \fIpathname
+Specifies a single directory where memory card files are stored. Memory
+card files store the contents of removable memory cards for games which
+used this type of hardware. This data is read and written under control
+of the user via the "Memory Card" menu in the user interface. The
+default is 'memcard' (that is, a directory "memcard" in the same
+directory as the MAME executable). If this directory does not exist,
+it will be automatically created.
+.TP
+.B \-input_directory \fIpathname
+Specifies a single directory where input recording files are stored.
+Input recordings are created via the \-record option and played back via
+the \-playback option. The default is 'inp' (that is, a directory
+"inp" in the same directory as the MAME executable). If this directory
+does not exist, it will be automatically created.
+.TP
+.B \-state_directory \fIpathname
+Specifies a single directory where save state files are stored. Save
+state files are read and written either upon user request, or when using
+the \-autosave option. The default is 'sta' (that is, a directory "sta"
+in the same directory as the MAME executable). If this directory does
+not exist, it will be automatically created.
+.TP
+.B \-snapshot_directory \fIpathname
+Specifies a single directory where screen snapshots are stored, when
+requested by the user. The default is 'snap' (that is, a directory
+"snap" in the same directory as the MAME executable). If this directory
+does not exist, it will be automatically created.
+.TP
+.B \-diff_directory \fIpathname
+Specifies a single directory where hard drive differencing files are
+stored. Hard drive differencing files store any data that is written
+back to a hard disk image, in order to preserve the original image. The
+differencing files are created at startup when a game with a hard disk
+image. The default is 'diff' (that is, a directory "diff" in the same
+directory as the MAME executable). If this directory does not exist,
+it will be automatically created.
+.TP
+.B \-comment_directory \fIpathname
+Specifies a single directory where debugger comment files are stored.
+Debugger comment files are written by the debugger when comments are
+added to the disassembly for a game. The default is 'comments' (that is,
+a directory "comments" in the same directory as the MAME executable).
+If this directory does not exist, it will be automatically created.
+.\"
+.\" *******************************************************
+.SS State/playback options
+.\" *******************************************************
+.TP
+.B \-state \fIslot
+Immediately after starting the specified game, will cause the save
+state in the specified \fIslot\fP to be loaded.
+.TP
+.B \-[no]autosave
+When enabled, automatically creates a save state file when exiting MAME
+and automatically attempts to reload it when later starting MAME with
+the same game. This only works for games that have explicitly enabled
+save state support in their driver. The default is OFF (\-noautosave).
+.TP
+.B \-playback, \-pb \fIfilename
+Specifies a file from which to play back a series of game inputs. This
+feature does not work reliably for all games, but can be used to watch
+a previously recorded game session from start to finish. In order to
+make things consistent, you should only record and playback with all
+configuration (.cfg), NVRAM (.nv), and memory card files deleted. The
+default is NULL (no playback).
+.TP
+.B \-record, \-rec \fIfilename
+Specifies a file to record all input from a game session. This can be
+used to record a game session for later playback. This feature does not
+work reliably for all games, but can be used to watch a previously
+recorded game session from start to finish. In order to make things
+consistent, you should only record and playback with all configuration
+(.cfg), NVRAM (.nv), and memory card files deleted. The default is NULL
+(no recording).
+.TP
+.B \-snapname \fIname
+Describes how MAME should name files for snapshots. \fIname\fP is a string
+that provides a template that is used to generate a filename. Three
+simple substitutions are provided: the / character represents the
+path separator on any target platform (even Windows); the string \fI%g\fP
+represents the driver name of the current game; and the string \fI%i\fP
+represents an incrementing index. If \fI%i\fP is omitted, then each
+snapshot taken will overwrite the previous one; otherwise, MAME will
+find the next empty value for \fI%i\fP and use that for a filename. The
+default is \fI%g/%i\fP, which creates a separate folder for each game,
+and names the snapshots under it starting with 0000 and increasing
+from there.
+.TP
+.B \-snapsize \fIwidth\fPx\fIheight\fP
+Hard\-codes the size for snapshots and movie recording. By default,
+MAME will create snapshots at the game's current resolution in raw
+pixels, and will create movies at the game's starting resolution in
+raw pixels. If you specify this option, then MAME will create both
+snapshots and movies at the size specified, and will bilinear filter
+the result. Note that this size does not automatically rotate if the 
+game is vertically oriented. The default is 'auto'.
+.TP
+.B \-snapview \fIviewname\fP
+Specifies the view to use when rendering snapshots and movies. By
+default, both use a special 'internal' view, which renders a separate
+snapshot per screen or renders movies only of the first screen. By
+specifying this option, you can override this default behavior and
+select a single view that will apply to all snapshots and movies.
+Note that \fIviewname\fP does not need to be a perfect match; rather, it
+will select the first view whose name matches all the characters
+specified by \fIviewname\fP. For example, \-snapview native will match the 
+"Native (15:14)" view even though it is not a perfect match. 
+\fIviewname\fP can also be 'auto', which selects the first view with all
+screens present. The default value is 'internal'.
+.TP
+.B \-mngwrite \fIfilename
+Writes each video frame to the given \fIfilename\fP in MNG format, producing
+an animation of the	game session. Note that \-mngwrite only writes video
+frames; it does not save any audio data. Use \-wavwrite for that, and
+reassemble the audio/video using offline tools. The default is NULL (no
+recording).
+.TP
+.B \-aviwrite \fIfilename
+Stream video and sound data to the given \fIfilename\fP in AVI format,
+producing an animation of the game session complete with sound. The
+default is NULL (no recording).
+.TP
+.B \-wavwrite \fIfilename
+Writes the final mixer output to the given \fIfilename\fP in WAV format,
+producing an audio recording of the	game session. The default is NULL
+(no recording).
+.TP
+.B \-[no]burnin
+Tracks brightness of the screen during play and at the end of 
+emulation generates a PNG that can be used to simulate burn\-in
+effects on other games. The resulting PNG is created such that the
+least used\-areas of the screen are fully white (since burned\-in areas 
+are darker, all other areas of the screen must be lightened a touch).
+The intention is that this PNG can be loaded via an artwork file with
+a low alpha (e.g, 0.1\-0.2 seems to work well) and blended over the
+entire screen. The PNG files are saved in the snap directory under 
+the gamename\\burnin\-<screen.name>.png. The default is OFF (\-noburnin).
+.\"
+.\" *******************************************************
+.SS Performance options
+.\" *******************************************************
+.TP
+.B \-[no]autoframeskip, \-[no]afs
+Automatically determines the frameskip level while you're playing the
+game, adjusting it constantly in a frantic attempt to keep the game
+running at full speed. Turning this on overrides the value you have set
+for \-frameskip below. The default is OFF (\-noautoframeskip).
+.TP
+.B \-frameskip, \-fs \fIvalue
+Specifies the frameskip value (autoframeskip must be disabled). This is the
+number of frames out of every 12 to drop when running. For example, if you
+say \-frameskip 2, then MAME will display 10 out of every 12 frames. By
+skipping those frames, you may be able to get full speed in a game that
+requires more horsepower than your computer has. The default value is 0,
+which skips no frames.
+.TP
+.B \-seconds_to_run, \-str \fIvalue
+This option can be used for benchmarking and automated testing. It tells 
+MAME to stop execution after a fixed number of seconds. By combining 
+this with a fixed set of other command line options, you can set up a 
+consistent environment for benchmarking MAME performance. In addition, 
+upon exit, the \-str option will write a screenshot called final.png
+to the game's snapshot directory.
+.TP
+.B \-[no]throttle
+Configures the default thottling setting. When throttling is on, MAME
+attempts to keep the game running at the game's intended speed. When
+throttling is off, MAME runs the game as fast as it can. Note that the
+fastest speed is more often than not limited by your graphics card,
+especially for older games. The default is ON (\-throttle).
+.TP
+.B \-[no]sleep
+Allows MAME to give time back to the system when running with \-throttle.
+This allows other programs to have some CPU time, assuming that the
+game isn't taxing 100% of your CPU resources. This option can potentially
+cause hiccups in performance if other demanding programs are running.
+The default is ON (\-sleep).
+.TP
+.B \-speed
+Controls the speed of gameplay, relative to realtime; smaller numbers are
+slower. Default is 1.00.
+.TP
+.B \-refreshspeed, \-rs
+Automatically adjusts the \fB\-speed\fR parameter to keep the effective refresh
+rate below that of the lowest screen refresh rate.
+.\"
+.\" +++++++++++++++++++++++++++++++++++++++++++++++++++++++
+.\" SDL specific
+.\" +++++++++++++++++++++++++++++++++++++++++++++++++++++++
+.TP
+.B \-multithreading, \-mt
+Enable multithreading; this enables rendering and blitting on a separate
+thread. The default is OFF.
+.TP
+.B \-numprocessors, \-np
+Set number of processors; this overrides the number the system reports.
+.TP
+.B \-sdlvideofps
+Show SDL video performance.
+.TP
+.B \-bench
+Benchmark for the given number of emulated seconds;
+implies \-video none \-nosound \-nothrottle.
+.\"
+.\" *******************************************************
+.SS Rotation options
+.\" *******************************************************
+.TP
+.B \-[no]rotate
+Rotate the game to match its normal state (horizontal/vertical). This
+ensures that both vertically and horizontally oriented games show up
+correctly without the need to rotate your monitor. If you want to keep
+the game displaying 'raw' on the screen the way it would have in the
+arcade, turn this option OFF. The default is ON (\-rotate).
+.TP
+.B \-[no]ror | \-[no]rol
+Rotate the game screen to the right (clockwise) or left (counter\-
+clockwise) relative to either its normal state (if \-rotate is specified)
+or its native state (if \-norotate is specified). The default for both of
+these options is OFF (\-noror \-norol).
+.TP
+.B \-[no]autoror | \-[no]autorol
+These options are designed for use with pivoting screens that only
+pivot in a single direction. If your screen only pivots clockwise,
+use \-autorol to ensure that the game will fill the screen either
+horizontally or vertically in one of the directions you can handle.
+If your screen only pivots counter\-clockwise, use \-autoror.
+.TP
+.B \-[no]flipx
+.TP
+.B \-[no]flipy
+Flip (mirror) the game screen either horizontally (\-flipx) or
+vertically (\-flipy). The flips are applied after the \-rotate and
+\-ror/\-rol options are applied. The default for both of these options
+is OFF (\-noflipx \-noflipy).
+.\"
+.\" *******************************************************
+.SS Artwork options
+.\" *******************************************************
+.TP
+.B \-[no]artwork_crop, \-[no]artcrop
+Enable cropping of artwork to the game screen area only. This
+option can also be controlled via the Video Options menu in the user
+interface. The default is OFF (\-noartwork_crop).
+.TP
+.B \-[no]use_backdrops, \-[no]backdrop
+Enables/disables the display of backdrops. The default is ON
+(\-use_backdrops).
+.TP
+.B \-[no]use_overlays, \-[no]overlay
+Enables/disables the display of overlays. The default is ON
+(\-use_overlays).
+.TP
+.B \-[no]use_bezels, \-[no]bezel
+Enables/disables the display of bezels. The default is ON
+(\-use_bezels).
+.TP
+.B \-[no]use_cpanels, \-[no]cpanel
+Enables/disables the display of cpanels. The default is ON
+(\-use_bezels).
+.TP
+.B \-[no]use_marquees, \-[no]marquee
+Enables/disables the display of marquees. The default is ON
+(\-use_bezels).
+.\"
+.\" *******************************************************
+.SS Screen options
+.\" *******************************************************
+.TP
+.B \-brightness \fIvalue
+Controls the default brightness, or black level, of the game screens.
+This option does not affect the artwork or other parts of the display.
+Using the MAME UI, you can individually set the brightness for each game
+screen; this option controls the initial value for all visible game
+screens. The standard value is 1.0. Selecting lower values (down to 0.1)
+will produce a darkened display, while selecting higher values (up to
+2.0) will give a brighter display. The default is 1.0.
+.TP
+.B \-contrast \fIvalue
+Controls the contrast, or white level, of the game screens. This option
+does not affect the artwork or other parts of the display. Using the
+MAME UI, you can individually set the contrast for each game screen;
+this option controls the initial value for all visible game screens. The
+standard value is 1.0. Selecting lower values (down to 0.1) will produce
+a dimmer display, while selecting higher values (up to 2.0) will
+give a more saturated display. The default is 1.0.
+.TP
+.B \-gamma \fIvalue
+Controls the gamma, which produces a potentially nonlinear black to
+white ramp, for the game screens. This option does not affect the
+artwork or other parts of the display. Using the MAME UI, you can
+individually set the gamma for each game screen; this option controls
+the initial value for all visible game screens. The standard value is
+1.0, which gives a linear ramp from black to white. Selecting lower
+values (down to 0.1) will increase the nonlinearity toward black,
+while selecting higher values (up to 3.0) will push the nonlinearity
+toward white. The default is 1.0.
+.TP
+.B \-pause_brightness \fIvalue
+This controls the brightness level when MAME is paused. The default
+value is 0.65.
+.\"
+.\" *******************************************************
+.SS Vector rendering options
+.\" *******************************************************
+.TP
+.B \-[no]antialias, \-[no]aa
+Enables antialiased line rendering for vector games. The default is ON
+(\-antialias).
+.TP
+.B \-beam \fIwidth
+Sets the width of the vectors. This is a scaling factor against the
+standard vector width. A value of 1.0 will keep the default vector line
+width. Smaller values will reduce the width, and larger values will
+increase the width. The default is 1.0.
+.TP
+.B \-flicker \fIvalue
+Simulates a vector "flicker" effect, similar to a vector monitor that
+needs adjustment. This option requires a float argument in the range of
+0.00\-100.00 (0=none, 100=maximum). The default is 0.
+.\"
+.\" *******************************************************
+.SS Video options
+.\" *******************************************************
+.\" +++++++++++++++++++++++++++++++++++++++++++++++++++++++
+.\" SDL specific
+.\" +++++++++++++++++++++++++++++++++++++++++++++++++++++++
+.TP
+.B \-video\fR [\fIsoft\fR|\fIopengl\fR|\fIopengl16\fR|\fInone\fR]
+Specifies which video subsystem to use for drawing:
+.br
+\fBsoft\fR  uses software rendering, which is slower but more compatible.
+.br
+\fBopengl\fR  uses OpenGL and your graphics accelerator to speed up many
+aspects of drawing MAME including compositing artwork, overlays, and
+bezels, as well as stretching the image to fit your screen.
+.br
+\fBopengl16\fR  uses alternate OpenGL code, which should provide faster
+output on some cards.
+.br
+\fBnone\fR  does no drawing and is intended for CPU benchmarking.
+.br
+Default is SOFT.
+.TP
+.B \-numscreens
+Reserved for future use.
+.TP
+.B \-[no]window, \-[no]w
+Run MAME in either full screen or a window. This is a fully\-featured window
+mode where the window resizes as necessary to track what the game does.
+And you can resize it  yourself with your OS's standard window controls.
+The default is OFF (\-nowindow).
+.TP
+.B \-[no]maximize, \-[no]max
+Controls initial window size in windowed mode. If it is set on, the
+window will initially be set to the maximum supported size when you
+start MAME. If it is turned off, the window will start out at the
+smallest supported size. This option only has an effect when the 
+\-window option is used. The default is ON (\-maximize).
+.TP
+.B \-keepaspect, \-ka
+Forces the correct aspect ratio. This means when you're resizing the window
+in windowed mode the actual game image will resize in discrete steps to
+maintain the proper shape of the game graphics. If you turn this off you can
+resize the window to anything you like and get funny squishing and stretching.
+The same applies for full\-screen. Default is ON (\-keepaspect).
+.TP
+.B \-unevenstretch, \-ues
+Allow non\-integer stretch factors. Video purists should stay far, far away
+from this option, while everyone else will be happy to know that it lets you
+fill the screen properly in full\-screen mode. Default is ON (\-unevenstretch).
+.TP
+.B \-effect
+Name of a PNG file to use for visual effects, or 'none'. Default is 'none'.
+.TP
+.B \-centerh
+Center horizontally within the view area. Default is ON (\-centerh).
+.TP
+.B \-centerv
+Center vertically within the view area. Default is ON (\-centerv).
+.TP
+.B \-waitvsync
+Enable waiting for the start of VBLANK before flipping screens;
+reduces tearing effects.
+.TP
+.B \-syncrefresh
+Enable using the start of VBLANK for throttling instead of the game time.
+.\"
+.\" *******************************************************
+.SS Software video rendering subsystem options
+.\" *******************************************************
+.\" +++++++++++++++++++++++++++++++++++++++++++++++++++++++
+.\" SDL specific
+.\" +++++++++++++++++++++++++++++++++++++++++++++++++++++++
+.B NOTE:
+All the options in this group are available only with softare video 
+rendering subsystem, i.e \fB\-video soft\fR.
+.TP
+.B \-prescale
+Scale screen rendering by this amount in software. Default is 1.
+.TP
+.B \-scalemode, \-sm \fR[\fInone\fR|\fIasync\fR|\fIyv12\fR|\fIyuy2\fR|\fIyv12x2\fR|\fIyuy2x2\fR]
+Hardware scaling mode.
+.br
+\fBnone\fR    use software rendering.
+.br
+\fBasync\fR   async overlay.
+.br
+\fByv12\fR    yv12 overlay.
+.br
+\fByuy2\fR    yuy2 overlay.
+.br
+\fByv12x2\fR  yv12 overlay using x2 prescaling.
+.br
+\fByuy2x2\fR  yuy2 overlay using x2 prescaling.
+.br
+Default is NONE.
+.\"
+.\" *******************************************************
+.SS OpenGL video rendering subsystem options
+.\" *******************************************************
+.\" +++++++++++++++++++++++++++++++++++++++++++++++++++++++
+.\" SDL specific
+.\" +++++++++++++++++++++++++++++++++++++++++++++++++++++++
+.B NOTE:
+All the options in this group are available only with OpenGL video 
+rendering subsystem, i.e \fB\-video opengl\fR or \fB\-video opengl16\fR.
+.TP
+.B \-filter, \-glfilter, \-flt
+Enable bilinear filtering on screen output. Default is ON (\-filter).
+.TP
+.B \-prescale
+Scale screen rendering by this amount in software. Default is 1.
+.TP
+.B \-gl_forcepow2texture
+Force power of two textures. Default is NO.
+.TP
+.B \-gl_notexturerect
+Don't use OpenGL GL_ARB_texture_rectangle. Default is ON: turn off
+(set this to 0) if corruption occurs in OpenGL mode, at cost of some
+performance loss.
+.TP
+.B \-gl_vbo
+Enable OpenGL VBO, if available, for a performance increase.
+Default is ON: turn off (set this to 0) if corruption occurs.
+.TP
+.B \-gl_pbo
+Enable OpenGL PBO, if available, for a performance increase.
+Default is ON: turn off (set this to 0) if corruption occurs.
+.TP
+.B \-gl_glsl
+Enable OpenGL GLSL, if available, for a performance increase.
+.TP
+.B \-gl_glsl_filter
+Enable OpenGL GLSL filtering instead of FF filtering 0=plain, 1=bilinear.
+Default is 1: bilinear.
+.TP
+.B \-glsl_shader_mame[0\-9]
+Preferred custom OpenGL GLSL shader set mame bitmap (from 0 to 9).
+.TP
+.B \-glsl_shader_screen[0\-9]
+Preferred custom OpenGL GLSL shader screen bitmap (from 0 to 9).
+.TP
+.B \-gl_glsl_vid_attr
+Enable OpenGL GLSL handling of brightness and contrast. Better RGB game
+performance for free. Default is ON.
+.TP
+.B \-screen
+Explicit name for all screens; 'auto' here will try to make a best guess.
+.TP
+.B \-aspect, \-screen_aspect
+Aspect ratio for all screens; 'auto' here will try to make a best guess.
+.TP
+.B \-resolution, \-r
+Preferred resolution for all screens;
+format is \fIwidth\fRx\fIheight\fR[@\fIrefreshrate\fR] or 'auto'.
+.TP
+.B \-view
+Preferred view for all screens
+.TP
+.B \-screen[0\-3]
+Explicit name of the first|second|third|fourth screen; 'auto' here will try
+to make a best guess.
+.TP
+.B \-aspect[0\-3]
+Aspect ratio of the first|second|third|fourth screen; 'auto' here will try
+to make a best guess.
+.TP
+.B \-resolution[0\-3], \-r[0\-3]
+Preferred resolution for the first|second|third|fourth screen;
+format is \fIwidth\fRx\fIheight\fR[@\fIrefreshrate\fR] or 'auto'.
+.TP
+.B \-view[0\-3]
+Preferred view for the first|second|third|fourth screen.
+.\"
+.\" *******************************************************
+.SS Full screen options
+.\" *******************************************************
+.\" +++++++++++++++++++++++++++++++++++++++++++++++++++++++
+.\" SDL specific
+.\" +++++++++++++++++++++++++++++++++++++++++++++++++++++++
+.TP
+.B \-[no]switchres
+Affects full screen mode only. Chooses if MAME can try to change the screen
+resolution (color depth is normally left alone) when in full\-screen mode. If
+it's off, you always get your desktop resolution in full\-screen mode (which can
+be useful for LCDs).
+.TP
+.B \-useallheads
+Split full screen image across monitors.
+.\"
+.\" *******************************************************
+.SS Sound options
+.\" *******************************************************
+.TP
+.B \-[no]sound
+Enable or disable sound altogether. The default is ON (\-sound).
+.TP
+.B \-samplerate, \-sr \fIvalue
+Sets the audio sample rate. Smaller values (e.g. 11025) cause lower
+audio quality but faster emulation speed. Higher values (e.g. 48000)
+cause higher audio quality but slower emulation speed. The default is
+48000.
+.TP
+.B \-[no]samples
+Use samples if available. The default is ON (\-samples).
+.TP
+.B \-volume, \-vol \fIvalue
+Sets the startup volume. It can later be changed with the user interface
+(see Keys section). The volume is an attenuation in dB: e.g.,
+"\-volume \-12" will start with \-12dB attenuation. The default is 0.
+.\" +++++++++++++++++++++++++++++++++++++++++++++++++++++++
+.\" SDL specific
+.\" +++++++++++++++++++++++++++++++++++++++++++++++++++++++
+.TP
+.B \-audio_latency \fIvalue
+This controls the amount of latency built into the audio streaming.
+The latency parameter controls the lower threshold. The default is 1
+(meaning lower=1/5 and upper=2/5). Set it to 2 (\-audio_latency 2) to keep
+the sound buffer between 2/5 and 3/5 full. If you crank it up to 4,
+you can definitely notice the lag.
+.\"
+.\" *******************************************************
+.SS Input options
+.\" *******************************************************
+.TP
+.B \-[no]coin_lockout, \-[no]coinlock
+Enables simulation of the "coin lockout" feature that is implmeneted
+on a number of game PCBs. It was up to the operator whether or not
+the coin lockout outputs were actually connected to the coin
+mechanisms. If this feature is enabled, then attempts to enter a coin
+while the lockout is active will fail and will display a popup message
+in the user interface. If this feature is disabled, the coin lockout
+signal will be ignored. The default is ON (\-coin_lockout).
+.TP
+.B \-ctrlr \fIcontroller
+Enables support for special controllers. Configuration files are
+loaded from the ctrlrpath. They are in the same format as the .cfg
+files that are saved, but only control configuration data is read
+from the file. The default is NULL (no controller file).
+.TP
+.B \-[no]mouse
+Controls whether or not MAME looks for a mouse controller to use. Note
+that in many cases, lightguns are treated as mice by the operating
+system, so you may need to enable this to enable lightgun support. When
+this is enabled, you will not be able to use your mouse while playing
+a game. If you want to get control of your computer back, you will need
+to either pause the game or quit. The default is OFF (\-nomouse).
+.TP
+.B \-[no]joystick, \-[no]joy
+Controls whether or not MAME looks for joystick/gamepad controllers.
+The default is ON (\-joystick).
+.TP
+.B \-[no]lightgun, \-[no]gun
+Controls whether or not MAME makes use of lightgun controllers.
+Note that most lightguns map to the mouse, so using \-lightgun and
+\-mouse together may produce strange results. The default is OFF
+(\-nolightgun).
+.TP
+.B \-[no]multikeyboard, \-[no]multikey
+Determines whether MAME differentiates between multiple keyboards.
+Some systems may report more than one keyboard; by default, the data
+from all of these keyboards is combined so that it looks like a single
+keyboard. Turning this option on will enable MAME to report keypresses
+on different keyboards independently. The default is OFF 
+(\-nomultikeyboard).
+.TP
+.B \-[no]multimouse
+Determines whether MAME differentiates between multiple mice. Some 
+systems may report more than one mouse device; by default, the data
+from all of these mice is combined so that it looks like a single
+mouse. Turning this option on will enable MAME to report mouse 
+movement and button presses on different mice independently. The 
+default is OFF (\-nomultimouse).
+.TP
+.B \-[no]steadykey, \-[no]steady
+Some games require two or more buttons to be pressed at exactly the
+same time to make special moves. Due to limitations in the PC keyboard
+hardware, it can be difficult or even impossible to accomplish that
+using the standard keyboard handling. This option selects a different
+handling that makes it easier to register simultaneous button presses,
+but has the disadvantage of making controls less responsive. The
+default is OFF (\-nosteadykey).
+.TP
+.B \-[no]offscreen_reload, \-[no]reload
+Controls whether or not MAME treats a second button input from a
+lightgun as a reload signal. In this case, MAME will report the gun's
+position as (0,MAX) with the trigger held, which is equivalent to an
+offscreen reload. This is only needed for games that required you to 
+shoot offscreen to reload, and then only if your gun does not support 
+off screen reloads. The default is OFF (\-nooffscreen_reload).
+.TP
+.B \-joystick_map, \-joymap \fImap
+Controls how joystick values map to digital joystick controls.
+See /usr/share/doc/mame/config.txt for full details on \fImap\fR format.
+.TP
+.B \-joystick_deadzone, \-joy_deadzone, \-jdz \fIvalue
+If you play with an analog joystick, the center can drift a little.
+joystick_deadzone tells how far along an axis you must move before the
+axis starts to change. This option expects a float in the range of
+0.0 to 1.0. Where 0 is the center of the joystick and 1 is the outer
+limit. The default is 0.3.
+.TP
+.B \-joystick_saturation, \-joy_saturation, \-jsat \fIvalue
+If you play with an analog joystick, the ends can drift a little,
+and may not match in the +/\- directions. joystick_saturation tells how 
+far along an axis movement change will be accepted before it reaches 
+the maximum range. This option expects a float in the range of 0.0 to 
+1.0, where 0 is the center of the joystick and 1 is the outer limit.
+The default is 0.85.
+.TP
+.B \-natural, \-nat
+Specifies whether to use a natural keyboard or not.
+.TP
+.B \-joystick_contradictory
+Enable contradictory direction digital joystick input at the same time.
+.TP
+.B \-coin_impulse \fItime
+Set coin impulse time. A negative value for \fItime\fR disables the impulse;
+set \fItime\fR to 0 to obey driver or give a positive value to set impulse time.
+.\" +++++++++++++++++++++++++++++++++++++++++++++++++++++++
+.\" SDL specific
+.\" +++++++++++++++++++++++++++++++++++++++++++++++++++++++
+.TP
+.B \-uimodekey, \-umk
+Specifies the key used to toggle between full and partial UI mode.
+.TP
+.B \-keymap
+Enable keymap for non\-QWERTY keyboards. Used in conjuction with
+\fB\-keymap_file\fR.
+.TP
+.B \-keymap_file \fIkeymap_file\fR
+Specifies the full path to the keymap file to be used. Shipped keymap files lie
+in \fB/usr/share/games/mame/keymaps\fR.
+.TP
+.B \-joy_idx[0\-8] \fIjoystick
+With these options you can assign a joystick to a 
+specific index in MAME. Even if the kernel will list the joysticks
+in a different order on the next boot, MAME will still see the joystick
+as e.g. "Joystick 2". Use mame \-v to see which joysticks are recognized.
+Default is 'auto'.
+.TP
+.B \-sixaxis
+Use special handling for PS3 Sixaxis controllers.
+.TP
+.B \-videodriver, \-vd \fIx11\fR|\fIdirectfb\fR|\fIauto\fR
+SDL video driver to use; auto selects SDL default.
+.TP
+.B \-audiodriver, \-ad \fIalsa\fR|\fIarts\fR|\fIauto\fR
+SDL audio driver to use; auto selects SDL default.
+.TP
+.B \-gl_lib \fIalsa\fR|\fIarts\fR|\fIauto\fR
+Alternative libGL.so to use; auto selects SDL default.
+.\"
+.\" *******************************************************
+.SS Input automatic enable options
+.\" *******************************************************
+.TP
+.B \-paddle_device, \-paddle \fR[\fInone\fR|\fIkeyboard\fR|\fImouse\fR|\fIlightgun\fR|\fIjoystick\fR]
+.TP
+.B \-adstick_device, \-adstick \fR[\fInone\fR|\fIkeyboard\fR|\fImouse\fR|\fIlightgun\fR|\fIjoystick\fR]
+.TP
+.B \-pedal_device, \-pedal \fR[\fInone\fR|\fIkeyboard\fR|\fImouse\fR|\fIlightgun\fR|\fIjoystick\fR]
+.TP
+.B \-dial_device, \-dial \fR[\fInone\fR|\fIkeyboard\fR|\fImouse\fR|\fIlightgun\fR|\fIjoystick\fR]
+.TP
+.B \-trackball_device, \-trackball \fR[\fInone\fR|\fIkeyboard\fR|\fImouse\fR|\fIlightgun\fR|\fIjoystick\fR]
+.TP
+.B \-lightgun_device \fR[\fInone\fR|\fIkeyboard\fR|\fImouse\fR|\fIlightgun\fR|\fIjoystick\fR]
+.TP
+.B \-positional_device \fR[\fInone\fR|\fIkeyboard\fR|\fImouse\fR|\fIlightgun\fR|\fIjoystick\fR]
+.TP
+.B \-mouse_device \fR[\fInone\fR|\fIkeyboard\fR|\fImouse\fR|\fIlightgun\fR|\fIjoystick\fR]
+Each of these options controls autoenabling the mouse, or joystick
+depending on the presence of a particular class of analog
+control for a particular game. For example, if you specify the option
+\-paddle mouse, then any game that has a paddle control will automatically
+enable mouse controls just as if you had explicitly specified \-mouse.
+Note that these controls override the values of \-[no]mouse, \-[no]joystick, etc.
+.\"
+.\" *******************************************************
+.SS Debugging options
+.\" *******************************************************
+.TP
+.B \-[no]log
+Creates a file called error.log which contains all of the internal
+log messages generated by the MAME core and game drivers. The default
+is OFF (\-nolog).
+.TP
+.B \-[no]verbose, \-[no]v
+Displays internal diagnostic information. This information is very
+useful for debugging problems with your configuration. \fBIMPORTANT\fP: when
+reporting bugs, please run with mame \-verbose and include the resulting
+information. The default is off (\-noverbose).
+.TP
+.B \-update_in_pause
+Enables updating the screen bitmap while the game is paused. This is
+useful for debuggin in some scenarios (and gets in the way in others).
+.TP
+.B \-[no]debug, \-[no]d
+Activates the integrated debugger. By default, the debugger is entered 
+by pressing the tilde (~) key during emulation. It is also entered 
+immediately at startup. The default is OFF (\-nodebug).
+.TP
+.B \-debugscript \fIfilename
+Specifies a file that contains a list of debugger commands to execute
+immediately upon startup. The default is NULL (no commands).
+.TP
+.B \-debug_internal, \-di
+Use the internal debugger for debugging.
+.\" +++++++++++++++++++++++++++++++++++++++++++++++++++++++
+.\" SDL specific
+.\" +++++++++++++++++++++++++++++++++++++++++++++++++++++++
+.TP
+.B \-[no]oslog
+Outputs the error.log data to the system debugger. This can be used at
+the same time as \-log to output the log data to both targets as well.
+Default is OFF (\-nooslog).
+.\"
+.\" *******************************************************
+.SS Misc options
+.\" *******************************************************
+.TP
+.B \-bios \fIbiosname
+Specifies the specific BIOS to use with the current game, for game
+systems that make use of a BIOS. The \-listxml output will list all of
+the possible BIOS names for a game. The default is 'default'.
+.TP
+.B \-[no]cheat, \-[no]c
+Enables the reading of the cheat database, if present, and the Cheat
+menu in the user interface. The	default is OFF (\-nocheat).
+.TP
+.B \-[no]skip_gameinfo
+Forces MAME to skip displaying the game info screen. The default is OFF
+(\-noskip_gameinfo).
+.TP
+.B \-uifont \fIfontname
+Specifies the name of a BDF font file to use for the UI font. If this
+font cannot be found or cannot be loaded, the system will fall back
+to its built\-in UI font. On some platforms \fIfontname\fP can be a system
+font name instead of a BDF font file. The default is 'default' (use 
+the OSD\-determined default font).
+.TP
+.B \-ramsize, \-ram
+Size of RAM (if supported by driver).
+.TP
+.B \-confirm_quit
+Display confirm quit screen on exit.
+.\" +++++++++++++++++++++++++++++++++++++++++++++++++++++++
+.\" SDL specific
+.\" +++++++++++++++++++++++++++++++++++++++++++++++++++++++
+.TP
+.B \-watchdog
+Specifies a number of seconds after which MAME should automatically exit
+if it detects that the emulation has locked up.
+.\"
+.\"
+.\" LEGAL NOTICE chapter
+.SH LEGAL NOTICE
+Please visit the MAME website for some important legal information:
+.PP
+http://mamedev.org/legal.html
diff -Nru src-old/osd/sdl/man/romcmp.1 src/osd/sdl/man/romcmp.1
--- src-old/osd/sdl/man/romcmp.1	2010-07-08 16:18:07.000000000 +0200
+++ src/osd/sdl/man/romcmp.1	2012-03-25 04:27:58.000000000 +0200
@@ -9,7 +9,7 @@
 .\" References
 .\" http://www.mame.net/mamefaq.html
 .\"
-.TH ROMCMP 1 2010-06-26 0.138u4 "romcmp"
+.TH ROMCMP 1 2012-03-25 0.145u5 "romcmp"
 .\"
 .\" NAME chapter
 .SH NAME
diff -Nru src-old/osd/sdl/man/testkeys.1 src/osd/sdl/man/testkeys.1
--- src-old/osd/sdl/man/testkeys.1	2010-07-08 16:18:07.000000000 +0200
+++ src/osd/sdl/man/testkeys.1	2012-03-25 04:27:58.000000000 +0200
@@ -5,7 +5,7 @@
 .\" Man page created from source and usage information
 .\" Cesare Falco <cesare.falco@gmail.com>, February 2007
 .\"
-.TH TESTKEYS 1 2010-06-26 0.138u4 "testkeys"
+.TH TESTKEYS 1 2012-03-25 0.145u5 "testkeys"
 .\"
 .\" NAME chapter
 .SH NAME
diff -Nru src-old/tools/unidasm.c src/tools/unidasm.c
--- src-old/tools/unidasm.c	2011-08-15 01:01:08.000000000 +0200
+++ src/tools/unidasm.c	2012-03-25 15:56:49.000000000 +0200
@@ -197,7 +197,7 @@
 CPU_DISASSEMBLE( tms32051 );
 CPU_DISASSEMBLE( tms34010 );
 CPU_DISASSEMBLE( tms34020 );
-CPU_DISASSEMBLE( tms57002 );
+//CPU_DISASSEMBLE( tms57002 );
 CPU_DISASSEMBLE( tms7000 );
 CPU_DISASSEMBLE( upd7810 );
 CPU_DISASSEMBLE( upd7807 );
@@ -326,7 +326,7 @@
 	{ "tms32051",   _16le, -1, CPU_DISASSEMBLE_NAME(tms32051) },
 	{ "tms34010",   _8bit,  3, CPU_DISASSEMBLE_NAME(tms34010) },
 	{ "tms34020",   _8bit,  3, CPU_DISASSEMBLE_NAME(tms34020) },
-	{ "tms57002",   _32le, -2, CPU_DISASSEMBLE_NAME(tms57002) },
+	//  { "tms57002",   _32le, -2, CPU_DISASSEMBLE_NAME(tms57002) },
 	{ "tms7000",    _8bit,  0, CPU_DISASSEMBLE_NAME(tms7000) },
 	{ "upd7810",    _8bit,  0, CPU_DISASSEMBLE_NAME(upd7810) },
 	{ "upd7807",    _8bit,  0, CPU_DISASSEMBLE_NAME(upd7807) },
diff -Nru src-old/version.c src/version.c
--- src-old/version.c	2012-03-11 19:13:42.000000000 +0100
+++ src/version.c	2012-03-25 15:56:49.000000000 +0200
@@ -38,4 +38,4 @@
 ***************************************************************************/
 
 extern const char build_version[];
-const char build_version[] = "0.145u4 ("__DATE__")";
+const char build_version[] = "0.145u5 ("__DATE__")";
